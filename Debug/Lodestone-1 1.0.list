
Lodestone-1 1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d50  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000063c  08004e0c  08004e0c  00014e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005448  08005448  000202dc  2**0
                  CONTENTS
  4 .ARM          00000000  08005448  08005448  000202dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005448  08005448  000202dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005448  08005448  00015448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800544c  0800544c  0001544c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002dc  20000000  08005450  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000568  200002dc  0800572c  000202dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000844  0800572c  00020844  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000202dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f230  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ad  00000000  00000000  0002f534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  000319e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  000329b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012bed  00000000  00000000  00033828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e56  00000000  00000000  00046415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00072892  00000000  00000000  0005726b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  000c9afd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003840  00000000  00000000  000c9b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200002dc 	.word	0x200002dc
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004df4 	.word	0x08004df4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200002e0 	.word	0x200002e0
 8000100:	08004df4 	.word	0x08004df4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <nextPage>:
						};


struct uiPage * currentPage= &page1;

void nextPage(){
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af02      	add	r7, sp, #8
if(allowNextPage==1){
 8000222:	4b43      	ldr	r3, [pc, #268]	; (8000330 <nextPage+0x114>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b01      	cmp	r3, #1
 8000228:	d000      	beq.n	800022c <nextPage+0x10>
 800022a:	e07d      	b.n	8000328 <nextPage+0x10c>
	ssd1306_FillRectangle(0, 0, 127, 63, 0x0);//wipeScreen();
 800022c:	2300      	movs	r3, #0
 800022e:	9300      	str	r3, [sp, #0]
 8000230:	233f      	movs	r3, #63	; 0x3f
 8000232:	227f      	movs	r2, #127	; 0x7f
 8000234:	2100      	movs	r1, #0
 8000236:	2000      	movs	r0, #0
 8000238:	f001 fa82 	bl	8001740 <ssd1306_FillRectangle>

	if (nextOrPrev==NEXT)
 800023c:	4b3d      	ldr	r3, [pc, #244]	; (8000334 <nextPage+0x118>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	2b02      	cmp	r3, #2
 8000242:	d105      	bne.n	8000250 <nextPage+0x34>
		currentPage = currentPage->nextoPage;
 8000244:	4b3c      	ldr	r3, [pc, #240]	; (8000338 <nextPage+0x11c>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	689a      	ldr	r2, [r3, #8]
 800024a:	4b3b      	ldr	r3, [pc, #236]	; (8000338 <nextPage+0x11c>)
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	e008      	b.n	8000262 <nextPage+0x46>
	else if (nextOrPrev==PREV)
 8000250:	4b38      	ldr	r3, [pc, #224]	; (8000334 <nextPage+0x118>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	2b01      	cmp	r3, #1
 8000256:	d104      	bne.n	8000262 <nextPage+0x46>
		currentPage = currentPage->prevPage;
 8000258:	4b37      	ldr	r3, [pc, #220]	; (8000338 <nextPage+0x11c>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	68da      	ldr	r2, [r3, #12]
 800025e:	4b36      	ldr	r3, [pc, #216]	; (8000338 <nextPage+0x11c>)
 8000260:	601a      	str	r2, [r3, #0]
	else {}

	ssd1306_Line(0, 9, 127, 9, 0x01);
 8000262:	2301      	movs	r3, #1
 8000264:	9300      	str	r3, [sp, #0]
 8000266:	2309      	movs	r3, #9
 8000268:	227f      	movs	r2, #127	; 0x7f
 800026a:	2109      	movs	r1, #9
 800026c:	2000      	movs	r0, #0
 800026e:	f001 f98d 	bl	800158c <ssd1306_Line>

	ssd1306_SetCursor(1*symbolHorizontalShift, 1+0*symbolVerticalShift);		//Paste name of page
 8000272:	4b32      	ldr	r3, [pc, #200]	; (800033c <nextPage+0x120>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	b2db      	uxtb	r3, r3
 8000278:	2101      	movs	r1, #1
 800027a:	0018      	movs	r0, r3
 800027c:	f001 f96c 	bl	8001558 <ssd1306_SetCursor>
	ssd1306_WriteString(currentPage->nameOfPage, Font_6x8, White);
 8000280:	4b2d      	ldr	r3, [pc, #180]	; (8000338 <nextPage+0x11c>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	3310      	adds	r3, #16
 8000286:	0018      	movs	r0, r3
 8000288:	4a2d      	ldr	r2, [pc, #180]	; (8000340 <nextPage+0x124>)
 800028a:	2301      	movs	r3, #1
 800028c:	6811      	ldr	r1, [r2, #0]
 800028e:	6852      	ldr	r2, [r2, #4]
 8000290:	f001 f938 	bl	8001504 <ssd1306_WriteString>

	ssd1306_SetCursor(1*symbolHorizontalShift, 2+2*symbolVerticalShift);		//Place corresponding buttons
 8000294:	4b29      	ldr	r3, [pc, #164]	; (800033c <nextPage+0x120>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	b2da      	uxtb	r2, r3
 800029a:	4b2a      	ldr	r3, [pc, #168]	; (8000344 <nextPage+0x128>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	3301      	adds	r3, #1
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	18db      	adds	r3, r3, r3
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	0019      	movs	r1, r3
 80002a8:	0010      	movs	r0, r2
 80002aa:	f001 f955 	bl	8001558 <ssd1306_SetCursor>
	ssd1306_WriteString(currentPage->buttonMenu[0].title, Font_6x8, White);		//1.
 80002ae:	4b22      	ldr	r3, [pc, #136]	; (8000338 <nextPage+0x11c>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	3340      	adds	r3, #64	; 0x40
 80002b4:	0018      	movs	r0, r3
 80002b6:	4a22      	ldr	r2, [pc, #136]	; (8000340 <nextPage+0x124>)
 80002b8:	2301      	movs	r3, #1
 80002ba:	6811      	ldr	r1, [r2, #0]
 80002bc:	6852      	ldr	r2, [r2, #4]
 80002be:	f001 f921 	bl	8001504 <ssd1306_WriteString>

	ssd1306_SetCursor(1*symbolHorizontalShift, 3+3*symbolVerticalShift);		//2.
 80002c2:	4b1e      	ldr	r3, [pc, #120]	; (800033c <nextPage+0x120>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	b2da      	uxtb	r2, r3
 80002c8:	4b1e      	ldr	r3, [pc, #120]	; (8000344 <nextPage+0x128>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	3301      	adds	r3, #1
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	1c19      	adds	r1, r3, #0
 80002d2:	1c0b      	adds	r3, r1, #0
 80002d4:	18db      	adds	r3, r3, r3
 80002d6:	185b      	adds	r3, r3, r1
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	0019      	movs	r1, r3
 80002dc:	0010      	movs	r0, r2
 80002de:	f001 f93b 	bl	8001558 <ssd1306_SetCursor>
	ssd1306_WriteString(currentPage->buttonMenu[1].title, Font_6x8, White);
 80002e2:	4b15      	ldr	r3, [pc, #84]	; (8000338 <nextPage+0x11c>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	3374      	adds	r3, #116	; 0x74
 80002e8:	0018      	movs	r0, r3
 80002ea:	4a15      	ldr	r2, [pc, #84]	; (8000340 <nextPage+0x124>)
 80002ec:	2301      	movs	r3, #1
 80002ee:	6811      	ldr	r1, [r2, #0]
 80002f0:	6852      	ldr	r2, [r2, #4]
 80002f2:	f001 f907 	bl	8001504 <ssd1306_WriteString>

	ssd1306_SetCursor(1*symbolHorizontalShift, 4+4*symbolVerticalShift);		//3.
 80002f6:	4b11      	ldr	r3, [pc, #68]	; (800033c <nextPage+0x120>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	b2da      	uxtb	r2, r3
 80002fc:	4b11      	ldr	r3, [pc, #68]	; (8000344 <nextPage+0x128>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	3301      	adds	r3, #1
 8000302:	b2db      	uxtb	r3, r3
 8000304:	009b      	lsls	r3, r3, #2
 8000306:	b2db      	uxtb	r3, r3
 8000308:	0019      	movs	r1, r3
 800030a:	0010      	movs	r0, r2
 800030c:	f001 f924 	bl	8001558 <ssd1306_SetCursor>
	ssd1306_WriteString(currentPage->buttonMenu[2].title, Font_6x8, White);
 8000310:	4b09      	ldr	r3, [pc, #36]	; (8000338 <nextPage+0x11c>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	33a8      	adds	r3, #168	; 0xa8
 8000316:	0018      	movs	r0, r3
 8000318:	4a09      	ldr	r2, [pc, #36]	; (8000340 <nextPage+0x124>)
 800031a:	2301      	movs	r3, #1
 800031c:	6811      	ldr	r1, [r2, #0]
 800031e:	6852      	ldr	r2, [r2, #4]
 8000320:	f001 f8f0 	bl	8001504 <ssd1306_WriteString>

	ssd1306_UpdateScreen();}
 8000324:	f000 ffc4 	bl	80012b0 <ssd1306_UpdateScreen>
else {}
}
 8000328:	46c0      	nop			; (mov r8, r8)
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	46c0      	nop			; (mov r8, r8)
 8000330:	20000000 	.word	0x20000000
 8000334:	20000004 	.word	0x20000004
 8000338:	200002a8 	.word	0x200002a8
 800033c:	200002bc 	.word	0x200002bc
 8000340:	200002c4 	.word	0x200002c4
 8000344:	200002c0 	.word	0x200002c0

08000348 <moveCursor>:

void moveCursor(){
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af02      	add	r7, sp, #8
if (currentPage->selected==1){
 800034e:	4b31      	ldr	r3, [pc, #196]	; (8000414 <moveCursor+0xcc>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	685b      	ldr	r3, [r3, #4]
 8000354:	2b01      	cmp	r3, #1
 8000356:	d15a      	bne.n	800040e <moveCursor+0xc6>
		ssd1306_FillRectangle(0, 10, 5, 63, 0x00);				//CLEAR BUTTON MARKERS
 8000358:	2300      	movs	r3, #0
 800035a:	9300      	str	r3, [sp, #0]
 800035c:	233f      	movs	r3, #63	; 0x3f
 800035e:	2205      	movs	r2, #5
 8000360:	210a      	movs	r1, #10
 8000362:	2000      	movs	r0, #0
 8000364:	f001 f9ec 	bl	8001740 <ssd1306_FillRectangle>

		currentPage->buttonMenu[0].selected=0;
 8000368:	4b2a      	ldr	r3, [pc, #168]	; (8000414 <moveCursor+0xcc>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2200      	movs	r2, #0
 800036e:	669a      	str	r2, [r3, #104]	; 0x68
		currentPage->buttonMenu[1].selected=0;
 8000370:	4b28      	ldr	r3, [pc, #160]	; (8000414 <moveCursor+0xcc>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	229c      	movs	r2, #156	; 0x9c
 8000376:	2100      	movs	r1, #0
 8000378:	5099      	str	r1, [r3, r2]
		currentPage->buttonMenu[2].selected=0;
 800037a:	4b26      	ldr	r3, [pc, #152]	; (8000414 <moveCursor+0xcc>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	22d0      	movs	r2, #208	; 0xd0
 8000380:	2100      	movs	r1, #0
 8000382:	5099      	str	r1, [r3, r2]


		if 			(nextOrPrev==PREV)
 8000384:	4b24      	ldr	r3, [pc, #144]	; (8000418 <moveCursor+0xd0>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	2b01      	cmp	r3, #1
 800038a:	d11c      	bne.n	80003c6 <moveCursor+0x7e>
		{currentPage->currentButton = currentPage->buttonMenu[currentPage->currentButton].prevObject;
 800038c:	4b21      	ldr	r3, [pc, #132]	; (8000414 <moveCursor+0xcc>)
 800038e:	681a      	ldr	r2, [r3, #0]
 8000390:	4b20      	ldr	r3, [pc, #128]	; (8000414 <moveCursor+0xcc>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	21dc      	movs	r1, #220	; 0xdc
 8000396:	585b      	ldr	r3, [r3, r1]
 8000398:	2134      	movs	r1, #52	; 0x34
 800039a:	434b      	muls	r3, r1
 800039c:	18d3      	adds	r3, r2, r3
 800039e:	3360      	adds	r3, #96	; 0x60
 80003a0:	681a      	ldr	r2, [r3, #0]
 80003a2:	4b1c      	ldr	r3, [pc, #112]	; (8000414 <moveCursor+0xcc>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	0011      	movs	r1, r2
 80003a8:	22dc      	movs	r2, #220	; 0xdc
 80003aa:	5099      	str	r1, [r3, r2]
		currentPage->buttonMenu[currentPage->currentButton].selected=1;}
 80003ac:	4b19      	ldr	r3, [pc, #100]	; (8000414 <moveCursor+0xcc>)
 80003ae:	681a      	ldr	r2, [r3, #0]
 80003b0:	4b18      	ldr	r3, [pc, #96]	; (8000414 <moveCursor+0xcc>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	21dc      	movs	r1, #220	; 0xdc
 80003b6:	585b      	ldr	r3, [r3, r1]
 80003b8:	2134      	movs	r1, #52	; 0x34
 80003ba:	434b      	muls	r3, r1
 80003bc:	18d3      	adds	r3, r2, r3
 80003be:	3368      	adds	r3, #104	; 0x68
 80003c0:	2201      	movs	r2, #1
 80003c2:	601a      	str	r2, [r3, #0]
 80003c4:	e01f      	b.n	8000406 <moveCursor+0xbe>

		else if 	(nextOrPrev==NEXT)
 80003c6:	4b14      	ldr	r3, [pc, #80]	; (8000418 <moveCursor+0xd0>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	2b02      	cmp	r3, #2
 80003cc:	d11b      	bne.n	8000406 <moveCursor+0xbe>
		{currentPage->currentButton = currentPage->buttonMenu[currentPage->currentButton].nextObject;
 80003ce:	4b11      	ldr	r3, [pc, #68]	; (8000414 <moveCursor+0xcc>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	4b10      	ldr	r3, [pc, #64]	; (8000414 <moveCursor+0xcc>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	21dc      	movs	r1, #220	; 0xdc
 80003d8:	585b      	ldr	r3, [r3, r1]
 80003da:	2134      	movs	r1, #52	; 0x34
 80003dc:	434b      	muls	r3, r1
 80003de:	18d3      	adds	r3, r2, r3
 80003e0:	335c      	adds	r3, #92	; 0x5c
 80003e2:	681a      	ldr	r2, [r3, #0]
 80003e4:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <moveCursor+0xcc>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	0011      	movs	r1, r2
 80003ea:	22dc      	movs	r2, #220	; 0xdc
 80003ec:	5099      	str	r1, [r3, r2]
		currentPage->buttonMenu[currentPage->currentButton].selected=1;}
 80003ee:	4b09      	ldr	r3, [pc, #36]	; (8000414 <moveCursor+0xcc>)
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	4b08      	ldr	r3, [pc, #32]	; (8000414 <moveCursor+0xcc>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	21dc      	movs	r1, #220	; 0xdc
 80003f8:	585b      	ldr	r3, [r3, r1]
 80003fa:	2134      	movs	r1, #52	; 0x34
 80003fc:	434b      	muls	r3, r1
 80003fe:	18d3      	adds	r3, r2, r3
 8000400:	3368      	adds	r3, #104	; 0x68
 8000402:	2201      	movs	r2, #1
 8000404:	601a      	str	r2, [r3, #0]

		markButton();					//MARK THE BUTTON
 8000406:	f000 f857 	bl	80004b8 <markButton>

		ssd1306_UpdateScreen();
 800040a:	f000 ff51 	bl	80012b0 <ssd1306_UpdateScreen>
	}
}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	200002a8 	.word	0x200002a8
 8000418:	20000004 	.word	0x20000004

0800041c <unselectPage>:
	markButton();//MARK THE BUTTON

	ssd1306_UpdateScreen();
}

void unselectPage(){
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af02      	add	r7, sp, #8
	ssd1306_DrawRectangle(0, 0, 127, 9, 0x00);				//CLEAR SELECT RECTANGLE
 8000422:	2300      	movs	r3, #0
 8000424:	9300      	str	r3, [sp, #0]
 8000426:	2309      	movs	r3, #9
 8000428:	227f      	movs	r2, #127	; 0x7f
 800042a:	2100      	movs	r1, #0
 800042c:	2000      	movs	r0, #0
 800042e:	f001 f937 	bl	80016a0 <ssd1306_DrawRectangle>
	ssd1306_FillRectangle(0, 9, 5, 63, 0x00);				//CLEAR BUTTON MARKERS
 8000432:	2300      	movs	r3, #0
 8000434:	9300      	str	r3, [sp, #0]
 8000436:	233f      	movs	r3, #63	; 0x3f
 8000438:	2205      	movs	r2, #5
 800043a:	2109      	movs	r1, #9
 800043c:	2000      	movs	r0, #0
 800043e:	f001 f97f 	bl	8001740 <ssd1306_FillRectangle>
	ssd1306_Line(0, 9, 127, 9, 0x01);						//GET BACK TITLE UNDERLINE
 8000442:	2301      	movs	r3, #1
 8000444:	9300      	str	r3, [sp, #0]
 8000446:	2309      	movs	r3, #9
 8000448:	227f      	movs	r2, #127	; 0x7f
 800044a:	2109      	movs	r1, #9
 800044c:	2000      	movs	r0, #0
 800044e:	f001 f89d 	bl	800158c <ssd1306_Line>

	currentPage->currentButton=0;
 8000452:	4b14      	ldr	r3, [pc, #80]	; (80004a4 <unselectPage+0x88>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	22dc      	movs	r2, #220	; 0xdc
 8000458:	2100      	movs	r1, #0
 800045a:	5099      	str	r1, [r3, r2]
	currentPage->buttonMenu[0].selected=0;
 800045c:	4b11      	ldr	r3, [pc, #68]	; (80004a4 <unselectPage+0x88>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	2200      	movs	r2, #0
 8000462:	669a      	str	r2, [r3, #104]	; 0x68
	currentPage->buttonMenu[1].selected=0;
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <unselectPage+0x88>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	229c      	movs	r2, #156	; 0x9c
 800046a:	2100      	movs	r1, #0
 800046c:	5099      	str	r1, [r3, r2]
	currentPage->buttonMenu[2].selected=0;
 800046e:	4b0d      	ldr	r3, [pc, #52]	; (80004a4 <unselectPage+0x88>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	22d0      	movs	r2, #208	; 0xd0
 8000474:	2100      	movs	r1, #0
 8000476:	5099      	str	r1, [r3, r2]
	currentPage->selected=0;
 8000478:	4b0a      	ldr	r3, [pc, #40]	; (80004a4 <unselectPage+0x88>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2200      	movs	r2, #0
 800047e:	605a      	str	r2, [r3, #4]
	allowNextPage=1;
 8000480:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <unselectPage+0x8c>)
 8000482:	2201      	movs	r2, #1
 8000484:	601a      	str	r2, [r3, #0]

	page1.selected=0;
 8000486:	4b09      	ldr	r3, [pc, #36]	; (80004ac <unselectPage+0x90>)
 8000488:	2200      	movs	r2, #0
 800048a:	605a      	str	r2, [r3, #4]
	page2.selected=0;
 800048c:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <unselectPage+0x94>)
 800048e:	2200      	movs	r2, #0
 8000490:	605a      	str	r2, [r3, #4]
	page3.selected=0;
 8000492:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <unselectPage+0x98>)
 8000494:	2200      	movs	r2, #0
 8000496:	605a      	str	r2, [r3, #4]

	ssd1306_UpdateScreen();
 8000498:	f000 ff0a 	bl	80012b0 <ssd1306_UpdateScreen>
}
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	200002a8 	.word	0x200002a8
 80004a8:	20000000 	.word	0x20000000
 80004ac:	20000008 	.word	0x20000008
 80004b0:	200000e8 	.word	0x200000e8
 80004b4:	200001c8 	.word	0x200001c8

080004b8 <markButton>:
void markButton(){
 80004b8:	b5b0      	push	{r4, r5, r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af02      	add	r7, sp, #8
	ssd1306_DrawRectangle(	currentPage->cursorAxis[currentPage->currentButton][0]-5,
 80004be:	4b1d      	ldr	r3, [pc, #116]	; (8000534 <markButton+0x7c>)
 80004c0:	681a      	ldr	r2, [r3, #0]
 80004c2:	4b1c      	ldr	r3, [pc, #112]	; (8000534 <markButton+0x7c>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	21dc      	movs	r1, #220	; 0xdc
 80004c8:	585b      	ldr	r3, [r3, r1]
 80004ca:	3305      	adds	r3, #5
 80004cc:	00db      	lsls	r3, r3, #3
 80004ce:	589b      	ldr	r3, [r3, r2]
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	3b05      	subs	r3, #5
 80004d4:	b2d8      	uxtb	r0, r3
							currentPage->cursorAxis[currentPage->currentButton][1]+2,
 80004d6:	4b17      	ldr	r3, [pc, #92]	; (8000534 <markButton+0x7c>)
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <markButton+0x7c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	21dc      	movs	r1, #220	; 0xdc
 80004e0:	585b      	ldr	r3, [r3, r1]
 80004e2:	00db      	lsls	r3, r3, #3
 80004e4:	18d3      	adds	r3, r2, r3
 80004e6:	332c      	adds	r3, #44	; 0x2c
 80004e8:	681b      	ldr	r3, [r3, #0]
	ssd1306_DrawRectangle(	currentPage->cursorAxis[currentPage->currentButton][0]-5,
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	3302      	adds	r3, #2
 80004ee:	b2d9      	uxtb	r1, r3
							currentPage->cursorAxis[currentPage->currentButton][0]-3,
 80004f0:	4b10      	ldr	r3, [pc, #64]	; (8000534 <markButton+0x7c>)
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <markButton+0x7c>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	24dc      	movs	r4, #220	; 0xdc
 80004fa:	591b      	ldr	r3, [r3, r4]
 80004fc:	3305      	adds	r3, #5
 80004fe:	00db      	lsls	r3, r3, #3
 8000500:	589b      	ldr	r3, [r3, r2]
	ssd1306_DrawRectangle(	currentPage->cursorAxis[currentPage->currentButton][0]-5,
 8000502:	b2db      	uxtb	r3, r3
 8000504:	3b03      	subs	r3, #3
 8000506:	b2dc      	uxtb	r4, r3
							currentPage->cursorAxis[currentPage->currentButton][1]+4,
 8000508:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <markButton+0x7c>)
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	4b09      	ldr	r3, [pc, #36]	; (8000534 <markButton+0x7c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	25dc      	movs	r5, #220	; 0xdc
 8000512:	595b      	ldr	r3, [r3, r5]
 8000514:	00db      	lsls	r3, r3, #3
 8000516:	18d3      	adds	r3, r2, r3
 8000518:	332c      	adds	r3, #44	; 0x2c
 800051a:	681b      	ldr	r3, [r3, #0]
	ssd1306_DrawRectangle(	currentPage->cursorAxis[currentPage->currentButton][0]-5,
 800051c:	b2db      	uxtb	r3, r3
 800051e:	3304      	adds	r3, #4
 8000520:	b2db      	uxtb	r3, r3
 8000522:	2201      	movs	r2, #1
 8000524:	9200      	str	r2, [sp, #0]
 8000526:	0022      	movs	r2, r4
 8000528:	f001 f8ba 	bl	80016a0 <ssd1306_DrawRectangle>
							0x01);
}
 800052c:	46c0      	nop			; (mov r8, r8)
 800052e:	46bd      	mov	sp, r7
 8000530:	bdb0      	pop	{r4, r5, r7, pc}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	200002a8 	.word	0x200002a8

08000538 <displayTime>:
int symbolVerticalShift = 8;


extern RTC_HandleTypeDef hrtc;

void displayTime(){
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0
	char timeString[20];
	switch (chWD){
 800053e:	4b45      	ldr	r3, [pc, #276]	; (8000654 <displayTime+0x11c>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	3b31      	subs	r3, #49	; 0x31
 8000544:	2b06      	cmp	r3, #6
 8000546:	d835      	bhi.n	80005b4 <displayTime+0x7c>
 8000548:	009a      	lsls	r2, r3, #2
 800054a:	4b43      	ldr	r3, [pc, #268]	; (8000658 <displayTime+0x120>)
 800054c:	18d3      	adds	r3, r2, r3
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	469f      	mov	pc, r3
	case 49: 	timeString[9]= 'M';
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	224d      	movs	r2, #77	; 0x4d
 8000556:	725a      	strb	r2, [r3, #9]
				timeString[10]='o';
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	226f      	movs	r2, #111	; 0x6f
 800055c:	729a      	strb	r2, [r3, #10]
				break;
 800055e:	e029      	b.n	80005b4 <displayTime+0x7c>
	case 50: 	timeString[9]= 'T';
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2254      	movs	r2, #84	; 0x54
 8000564:	725a      	strb	r2, [r3, #9]
				timeString[10]='u';
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	2275      	movs	r2, #117	; 0x75
 800056a:	729a      	strb	r2, [r3, #10]
				break;
 800056c:	e022      	b.n	80005b4 <displayTime+0x7c>
	case 51: 	timeString[9]= 'W';
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	2257      	movs	r2, #87	; 0x57
 8000572:	725a      	strb	r2, [r3, #9]
				timeString[10]='e';
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2265      	movs	r2, #101	; 0x65
 8000578:	729a      	strb	r2, [r3, #10]
				break;
 800057a:	e01b      	b.n	80005b4 <displayTime+0x7c>
	case 52: 	timeString[9]= 'T';
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2254      	movs	r2, #84	; 0x54
 8000580:	725a      	strb	r2, [r3, #9]
				timeString[10]='h';
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2268      	movs	r2, #104	; 0x68
 8000586:	729a      	strb	r2, [r3, #10]
				break;
 8000588:	e014      	b.n	80005b4 <displayTime+0x7c>
	case 53: 	timeString[9]= 'F';
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2246      	movs	r2, #70	; 0x46
 800058e:	725a      	strb	r2, [r3, #9]
				timeString[10]='r';
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2272      	movs	r2, #114	; 0x72
 8000594:	729a      	strb	r2, [r3, #10]
				break;
 8000596:	e00d      	b.n	80005b4 <displayTime+0x7c>
	case 54: 	timeString[9]= 'S';
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	2253      	movs	r2, #83	; 0x53
 800059c:	725a      	strb	r2, [r3, #9]
				timeString[10]='a';
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	2261      	movs	r2, #97	; 0x61
 80005a2:	729a      	strb	r2, [r3, #10]
				break;
 80005a4:	e006      	b.n	80005b4 <displayTime+0x7c>
	case 55: 	timeString[9]= 'S';
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2253      	movs	r2, #83	; 0x53
 80005aa:	725a      	strb	r2, [r3, #9]
				timeString[10]='u';
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2275      	movs	r2, #117	; 0x75
 80005b0:	729a      	strb	r2, [r3, #10]
				break;
 80005b2:	46c0      	nop			; (mov r8, r8)
	}
	timeString[0]=		chTenHours;
 80005b4:	4b29      	ldr	r3, [pc, #164]	; (800065c <displayTime+0x124>)
 80005b6:	781a      	ldrb	r2, [r3, #0]
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	701a      	strb	r2, [r3, #0]
	timeString[1]=		chUniHours;
 80005bc:	4b28      	ldr	r3, [pc, #160]	; (8000660 <displayTime+0x128>)
 80005be:	781a      	ldrb	r2, [r3, #0]
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	705a      	strb	r2, [r3, #1]
	timeString[2]=		':';
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	223a      	movs	r2, #58	; 0x3a
 80005c8:	709a      	strb	r2, [r3, #2]
	timeString[3]=		chTenMinutes;
 80005ca:	4b26      	ldr	r3, [pc, #152]	; (8000664 <displayTime+0x12c>)
 80005cc:	781a      	ldrb	r2, [r3, #0]
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	70da      	strb	r2, [r3, #3]
	timeString[4]=		chUniMinutes;
 80005d2:	4b25      	ldr	r3, [pc, #148]	; (8000668 <displayTime+0x130>)
 80005d4:	781a      	ldrb	r2, [r3, #0]
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	711a      	strb	r2, [r3, #4]
	timeString[5]=		':';
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	223a      	movs	r2, #58	; 0x3a
 80005de:	715a      	strb	r2, [r3, #5]
	timeString[6]=		chTenSeconds;
 80005e0:	4b22      	ldr	r3, [pc, #136]	; (800066c <displayTime+0x134>)
 80005e2:	781a      	ldrb	r2, [r3, #0]
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	719a      	strb	r2, [r3, #6]
	timeString[7]=		chUniSeconds;
 80005e8:	4b21      	ldr	r3, [pc, #132]	; (8000670 <displayTime+0x138>)
 80005ea:	781a      	ldrb	r2, [r3, #0]
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	71da      	strb	r2, [r3, #7]
	timeString[8]= 		' ';
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2220      	movs	r2, #32
 80005f4:	721a      	strb	r2, [r3, #8]
	timeString[11]= 	' ';
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2220      	movs	r2, #32
 80005fa:	72da      	strb	r2, [r3, #11]
	timeString[12]=		chTenDays;
 80005fc:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <displayTime+0x13c>)
 80005fe:	781a      	ldrb	r2, [r3, #0]
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	731a      	strb	r2, [r3, #12]
	timeString[13]=	 	chUniDays;
 8000604:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <displayTime+0x140>)
 8000606:	781a      	ldrb	r2, [r3, #0]
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	735a      	strb	r2, [r3, #13]
	timeString[14]=	 	'/';
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	222f      	movs	r2, #47	; 0x2f
 8000610:	739a      	strb	r2, [r3, #14]
	timeString[15]=	 	chTenMonths;
 8000612:	4b1a      	ldr	r3, [pc, #104]	; (800067c <displayTime+0x144>)
 8000614:	781a      	ldrb	r2, [r3, #0]
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	73da      	strb	r2, [r3, #15]
	timeString[16]=	 	chUniMonths;
 800061a:	4b19      	ldr	r3, [pc, #100]	; (8000680 <displayTime+0x148>)
 800061c:	781a      	ldrb	r2, [r3, #0]
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	741a      	strb	r2, [r3, #16]
	timeString[17]=	 	'/';
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	222f      	movs	r2, #47	; 0x2f
 8000626:	745a      	strb	r2, [r3, #17]
	timeString[18]=	 	chTenYears;
 8000628:	4b16      	ldr	r3, [pc, #88]	; (8000684 <displayTime+0x14c>)
 800062a:	781a      	ldrb	r2, [r3, #0]
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	749a      	strb	r2, [r3, #18]
	timeString[19]=	 	chUniYears;
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <displayTime+0x150>)
 8000632:	781a      	ldrb	r2, [r3, #0]
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	74da      	strb	r2, [r3, #19]
	timeString[20]=	 	'\0';
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2200      	movs	r2, #0
 800063c:	751a      	strb	r2, [r3, #20]


	ssd1306_WriteString(timeString, Font_6x8, White);
 800063e:	4a13      	ldr	r2, [pc, #76]	; (800068c <displayTime+0x154>)
 8000640:	1d38      	adds	r0, r7, #4
 8000642:	2301      	movs	r3, #1
 8000644:	6811      	ldr	r1, [r2, #0]
 8000646:	6852      	ldr	r2, [r2, #4]
 8000648:	f000 ff5c 	bl	8001504 <ssd1306_WriteString>
}
 800064c:	46c0      	nop			; (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	b006      	add	sp, #24
 8000652:	bd80      	pop	{r7, pc}
 8000654:	200002b6 	.word	0x200002b6
 8000658:	08004e0c 	.word	0x08004e0c
 800065c:	200002b1 	.word	0x200002b1
 8000660:	200002b0 	.word	0x200002b0
 8000664:	200002af 	.word	0x200002af
 8000668:	200002ae 	.word	0x200002ae
 800066c:	200002ad 	.word	0x200002ad
 8000670:	200002ac 	.word	0x200002ac
 8000674:	200002b7 	.word	0x200002b7
 8000678:	200002b8 	.word	0x200002b8
 800067c:	200002b4 	.word	0x200002b4
 8000680:	200002b5 	.word	0x200002b5
 8000684:	200002b2 	.word	0x200002b2
 8000688:	200002b3 	.word	0x200002b3
 800068c:	200002c4 	.word	0x200002c4

08000690 <checkTime>:
void checkTime(){
 8000690:	b580      	push	{r7, lr}
 8000692:	b08e      	sub	sp, #56	; 0x38
 8000694:	af00      	add	r7, sp, #0
	uint32_t a=hrtc.Instance->TR;
 8000696:	4bbd      	ldr	r3, [pc, #756]	; (800098c <checkTime+0x2fc>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i=4; i<32; i++){ 		//Erasing each bit but 0-3 (units seconds)
 800069e:	2304      	movs	r3, #4
 80006a0:	633b      	str	r3, [r7, #48]	; 0x30
 80006a2:	e00b      	b.n	80006bc <checkTime+0x2c>
		a = a & ~(1 << i);			//Refer RM0360 pg.502/775
 80006a4:	2201      	movs	r2, #1
 80006a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006a8:	409a      	lsls	r2, r3
 80006aa:	0013      	movs	r3, r2
 80006ac:	43db      	mvns	r3, r3
 80006ae:	001a      	movs	r2, r3
 80006b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006b2:	4013      	ands	r3, r2
 80006b4:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i=4; i<32; i++){ 		//Erasing each bit but 0-3 (units seconds)
 80006b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006b8:	3301      	adds	r3, #1
 80006ba:	633b      	str	r3, [r7, #48]	; 0x30
 80006bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006be:	2b1f      	cmp	r3, #31
 80006c0:	ddf0      	ble.n	80006a4 <checkTime+0x14>
	}
	trCheckUS=a;
 80006c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80006c4:	4bb2      	ldr	r3, [pc, #712]	; (8000990 <checkTime+0x300>)
 80006c6:	601a      	str	r2, [r3, #0]

	a=hrtc.Instance->TR;
 80006c8:	4bb0      	ldr	r3, [pc, #704]	; (800098c <checkTime+0x2fc>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i=7; i<32; i++){ 		//Erasing each bit but 4-6 (Tens seconds)
 80006d0:	2307      	movs	r3, #7
 80006d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006d4:	e00b      	b.n	80006ee <checkTime+0x5e>
		a = a & ~(1 << i);
 80006d6:	2201      	movs	r2, #1
 80006d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006da:	409a      	lsls	r2, r3
 80006dc:	0013      	movs	r3, r2
 80006de:	43db      	mvns	r3, r3
 80006e0:	001a      	movs	r2, r3
 80006e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006e4:	4013      	ands	r3, r2
 80006e6:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i=7; i<32; i++){ 		//Erasing each bit but 4-6 (Tens seconds)
 80006e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006ea:	3301      	adds	r3, #1
 80006ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006f0:	2b1f      	cmp	r3, #31
 80006f2:	ddf0      	ble.n	80006d6 <checkTime+0x46>
	}
	a=a>>4;
 80006f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006f6:	091b      	lsrs	r3, r3, #4
 80006f8:	637b      	str	r3, [r7, #52]	; 0x34
	trCheckTS=a;
 80006fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80006fc:	4ba5      	ldr	r3, [pc, #660]	; (8000994 <checkTime+0x304>)
 80006fe:	601a      	str	r2, [r3, #0]

	a=hrtc.Instance->TR;
 8000700:	4ba2      	ldr	r3, [pc, #648]	; (800098c <checkTime+0x2fc>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i=12; i<32; i++){
 8000708:	230c      	movs	r3, #12
 800070a:	62bb      	str	r3, [r7, #40]	; 0x28
 800070c:	e00b      	b.n	8000726 <checkTime+0x96>
		a = a & ~(1 << i);
 800070e:	2201      	movs	r2, #1
 8000710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000712:	409a      	lsls	r2, r3
 8000714:	0013      	movs	r3, r2
 8000716:	43db      	mvns	r3, r3
 8000718:	001a      	movs	r2, r3
 800071a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800071c:	4013      	ands	r3, r2
 800071e:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i=12; i<32; i++){
 8000720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000722:	3301      	adds	r3, #1
 8000724:	62bb      	str	r3, [r7, #40]	; 0x28
 8000726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000728:	2b1f      	cmp	r3, #31
 800072a:	ddf0      	ble.n	800070e <checkTime+0x7e>
	}
	a=a>>8;
 800072c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800072e:	0a1b      	lsrs	r3, r3, #8
 8000730:	637b      	str	r3, [r7, #52]	; 0x34
	trCheckUM=a;
 8000732:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000734:	4b98      	ldr	r3, [pc, #608]	; (8000998 <checkTime+0x308>)
 8000736:	601a      	str	r2, [r3, #0]

	a=hrtc.Instance->TR;
 8000738:	4b94      	ldr	r3, [pc, #592]	; (800098c <checkTime+0x2fc>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i=15; i<32; i++){
 8000740:	230f      	movs	r3, #15
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
 8000744:	e00b      	b.n	800075e <checkTime+0xce>
		a = a & ~(1 << i);
 8000746:	2201      	movs	r2, #1
 8000748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074a:	409a      	lsls	r2, r3
 800074c:	0013      	movs	r3, r2
 800074e:	43db      	mvns	r3, r3
 8000750:	001a      	movs	r2, r3
 8000752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000754:	4013      	ands	r3, r2
 8000756:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i=15; i<32; i++){
 8000758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800075a:	3301      	adds	r3, #1
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
 800075e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000760:	2b1f      	cmp	r3, #31
 8000762:	ddf0      	ble.n	8000746 <checkTime+0xb6>
	}
	a=a>>12;
 8000764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000766:	0b1b      	lsrs	r3, r3, #12
 8000768:	637b      	str	r3, [r7, #52]	; 0x34
	trCheckTM=a;
 800076a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800076c:	4b8b      	ldr	r3, [pc, #556]	; (800099c <checkTime+0x30c>)
 800076e:	601a      	str	r2, [r3, #0]

	a=hrtc.Instance->TR;
 8000770:	4b86      	ldr	r3, [pc, #536]	; (800098c <checkTime+0x2fc>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i=20; i<32; i++){
 8000778:	2314      	movs	r3, #20
 800077a:	623b      	str	r3, [r7, #32]
 800077c:	e00b      	b.n	8000796 <checkTime+0x106>
		a = a & ~(1 << i);
 800077e:	2201      	movs	r2, #1
 8000780:	6a3b      	ldr	r3, [r7, #32]
 8000782:	409a      	lsls	r2, r3
 8000784:	0013      	movs	r3, r2
 8000786:	43db      	mvns	r3, r3
 8000788:	001a      	movs	r2, r3
 800078a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800078c:	4013      	ands	r3, r2
 800078e:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i=20; i<32; i++){
 8000790:	6a3b      	ldr	r3, [r7, #32]
 8000792:	3301      	adds	r3, #1
 8000794:	623b      	str	r3, [r7, #32]
 8000796:	6a3b      	ldr	r3, [r7, #32]
 8000798:	2b1f      	cmp	r3, #31
 800079a:	ddf0      	ble.n	800077e <checkTime+0xee>
	}
	a=a>>16;
 800079c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800079e:	0c1b      	lsrs	r3, r3, #16
 80007a0:	637b      	str	r3, [r7, #52]	; 0x34
	trCheckUH=a;
 80007a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007a4:	4b7e      	ldr	r3, [pc, #504]	; (80009a0 <checkTime+0x310>)
 80007a6:	601a      	str	r2, [r3, #0]

	a=hrtc.Instance->TR;
 80007a8:	4b78      	ldr	r3, [pc, #480]	; (800098c <checkTime+0x2fc>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i=22; i<32; i++){
 80007b0:	2316      	movs	r3, #22
 80007b2:	61fb      	str	r3, [r7, #28]
 80007b4:	e00b      	b.n	80007ce <checkTime+0x13e>
		a = a & ~(1 << i);
 80007b6:	2201      	movs	r2, #1
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	409a      	lsls	r2, r3
 80007bc:	0013      	movs	r3, r2
 80007be:	43db      	mvns	r3, r3
 80007c0:	001a      	movs	r2, r3
 80007c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007c4:	4013      	ands	r3, r2
 80007c6:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i=22; i<32; i++){
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	3301      	adds	r3, #1
 80007cc:	61fb      	str	r3, [r7, #28]
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	2b1f      	cmp	r3, #31
 80007d2:	ddf0      	ble.n	80007b6 <checkTime+0x126>
	}
	a=a>>20;
 80007d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007d6:	0d1b      	lsrs	r3, r3, #20
 80007d8:	637b      	str	r3, [r7, #52]	; 0x34
	trCheckTH=a;
 80007da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007dc:	4b71      	ldr	r3, [pc, #452]	; (80009a4 <checkTime+0x314>)
 80007de:	601a      	str	r2, [r3, #0]

	  chUniSeconds=trCheckUS + '0';	//Units and tens to char
 80007e0:	4b6b      	ldr	r3, [pc, #428]	; (8000990 <checkTime+0x300>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	3330      	adds	r3, #48	; 0x30
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b6f      	ldr	r3, [pc, #444]	; (80009a8 <checkTime+0x318>)
 80007ec:	701a      	strb	r2, [r3, #0]
	  chTenSeconds=trCheckTS + '0';
 80007ee:	4b69      	ldr	r3, [pc, #420]	; (8000994 <checkTime+0x304>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	3330      	adds	r3, #48	; 0x30
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	4b6c      	ldr	r3, [pc, #432]	; (80009ac <checkTime+0x31c>)
 80007fa:	701a      	strb	r2, [r3, #0]
	  chUniMinutes = trCheckUM + '0';
 80007fc:	4b66      	ldr	r3, [pc, #408]	; (8000998 <checkTime+0x308>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	3330      	adds	r3, #48	; 0x30
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4b6a      	ldr	r3, [pc, #424]	; (80009b0 <checkTime+0x320>)
 8000808:	701a      	strb	r2, [r3, #0]
	  chTenMinutes = trCheckTM + '0';
 800080a:	4b64      	ldr	r3, [pc, #400]	; (800099c <checkTime+0x30c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	b2db      	uxtb	r3, r3
 8000810:	3330      	adds	r3, #48	; 0x30
 8000812:	b2da      	uxtb	r2, r3
 8000814:	4b67      	ldr	r3, [pc, #412]	; (80009b4 <checkTime+0x324>)
 8000816:	701a      	strb	r2, [r3, #0]
	  chUniHours = trCheckUH + '0';
 8000818:	4b61      	ldr	r3, [pc, #388]	; (80009a0 <checkTime+0x310>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	b2db      	uxtb	r3, r3
 800081e:	3330      	adds	r3, #48	; 0x30
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4b65      	ldr	r3, [pc, #404]	; (80009b8 <checkTime+0x328>)
 8000824:	701a      	strb	r2, [r3, #0]
	  chTenHours = trCheckTH + '0';
 8000826:	4b5f      	ldr	r3, [pc, #380]	; (80009a4 <checkTime+0x314>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	b2db      	uxtb	r3, r3
 800082c:	3330      	adds	r3, #48	; 0x30
 800082e:	b2da      	uxtb	r2, r3
 8000830:	4b62      	ldr	r3, [pc, #392]	; (80009bc <checkTime+0x32c>)
 8000832:	701a      	strb	r2, [r3, #0]

///////////////// DATE /////////////////

	  a=hrtc.Instance->DR;
 8000834:	4b55      	ldr	r3, [pc, #340]	; (800098c <checkTime+0x2fc>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	637b      	str	r3, [r7, #52]	; 0x34
	  for (int i=24; i<32; i++){
 800083c:	2318      	movs	r3, #24
 800083e:	61bb      	str	r3, [r7, #24]
 8000840:	e00b      	b.n	800085a <checkTime+0x1ca>
		  a = a & ~(1 << i);
 8000842:	2201      	movs	r2, #1
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	409a      	lsls	r2, r3
 8000848:	0013      	movs	r3, r2
 800084a:	43db      	mvns	r3, r3
 800084c:	001a      	movs	r2, r3
 800084e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000850:	4013      	ands	r3, r2
 8000852:	637b      	str	r3, [r7, #52]	; 0x34
	  for (int i=24; i<32; i++){
 8000854:	69bb      	ldr	r3, [r7, #24]
 8000856:	3301      	adds	r3, #1
 8000858:	61bb      	str	r3, [r7, #24]
 800085a:	69bb      	ldr	r3, [r7, #24]
 800085c:	2b1f      	cmp	r3, #31
 800085e:	ddf0      	ble.n	8000842 <checkTime+0x1b2>
}
	  a=a>>20;
 8000860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000862:	0d1b      	lsrs	r3, r3, #20
 8000864:	637b      	str	r3, [r7, #52]	; 0x34
	  drCheckTY=a;
 8000866:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000868:	4b55      	ldr	r3, [pc, #340]	; (80009c0 <checkTime+0x330>)
 800086a:	601a      	str	r2, [r3, #0]


	a=hrtc.Instance->DR;
 800086c:	4b47      	ldr	r3, [pc, #284]	; (800098c <checkTime+0x2fc>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i=20; i<32; i++){
 8000874:	2314      	movs	r3, #20
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	e00b      	b.n	8000892 <checkTime+0x202>
		a = a & ~(1 << i);
 800087a:	2201      	movs	r2, #1
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	409a      	lsls	r2, r3
 8000880:	0013      	movs	r3, r2
 8000882:	43db      	mvns	r3, r3
 8000884:	001a      	movs	r2, r3
 8000886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000888:	4013      	ands	r3, r2
 800088a:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i=20; i<32; i++){
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	3301      	adds	r3, #1
 8000890:	617b      	str	r3, [r7, #20]
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	2b1f      	cmp	r3, #31
 8000896:	ddf0      	ble.n	800087a <checkTime+0x1ea>
}
	a=a>>16;
 8000898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800089a:	0c1b      	lsrs	r3, r3, #16
 800089c:	637b      	str	r3, [r7, #52]	; 0x34
	drCheckUY=a;
 800089e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008a0:	4b48      	ldr	r3, [pc, #288]	; (80009c4 <checkTime+0x334>)
 80008a2:	601a      	str	r2, [r3, #0]

	a=hrtc.Instance->DR;
 80008a4:	4b39      	ldr	r3, [pc, #228]	; (800098c <checkTime+0x2fc>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i=13; i<32; i++){
 80008ac:	230d      	movs	r3, #13
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	e00b      	b.n	80008ca <checkTime+0x23a>
		a = a & ~(1 << i);
 80008b2:	2201      	movs	r2, #1
 80008b4:	693b      	ldr	r3, [r7, #16]
 80008b6:	409a      	lsls	r2, r3
 80008b8:	0013      	movs	r3, r2
 80008ba:	43db      	mvns	r3, r3
 80008bc:	001a      	movs	r2, r3
 80008be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008c0:	4013      	ands	r3, r2
 80008c2:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i=13; i<32; i++){
 80008c4:	693b      	ldr	r3, [r7, #16]
 80008c6:	3301      	adds	r3, #1
 80008c8:	613b      	str	r3, [r7, #16]
 80008ca:	693b      	ldr	r3, [r7, #16]
 80008cc:	2b1f      	cmp	r3, #31
 80008ce:	ddf0      	ble.n	80008b2 <checkTime+0x222>
}
	a=a>>12;
 80008d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008d2:	0b1b      	lsrs	r3, r3, #12
 80008d4:	637b      	str	r3, [r7, #52]	; 0x34
	drCheckTM=a;
 80008d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008d8:	4b3b      	ldr	r3, [pc, #236]	; (80009c8 <checkTime+0x338>)
 80008da:	601a      	str	r2, [r3, #0]

	a=hrtc.Instance->DR;
 80008dc:	4b2b      	ldr	r3, [pc, #172]	; (800098c <checkTime+0x2fc>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i=12; i<32; i++){
 80008e4:	230c      	movs	r3, #12
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	e00b      	b.n	8000902 <checkTime+0x272>
		a = a & ~(1 << i);
 80008ea:	2201      	movs	r2, #1
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	409a      	lsls	r2, r3
 80008f0:	0013      	movs	r3, r2
 80008f2:	43db      	mvns	r3, r3
 80008f4:	001a      	movs	r2, r3
 80008f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008f8:	4013      	ands	r3, r2
 80008fa:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i=12; i<32; i++){
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	3301      	adds	r3, #1
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	2b1f      	cmp	r3, #31
 8000906:	ddf0      	ble.n	80008ea <checkTime+0x25a>
}
	a=a>>8;
 8000908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800090a:	0a1b      	lsrs	r3, r3, #8
 800090c:	637b      	str	r3, [r7, #52]	; 0x34
	drCheckUM=a;
 800090e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000910:	4b2e      	ldr	r3, [pc, #184]	; (80009cc <checkTime+0x33c>)
 8000912:	601a      	str	r2, [r3, #0]

	a=hrtc.Instance->DR;
 8000914:	4b1d      	ldr	r3, [pc, #116]	; (800098c <checkTime+0x2fc>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i=6; i<32; i++){
 800091c:	2306      	movs	r3, #6
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	e00b      	b.n	800093a <checkTime+0x2aa>
		a = a & ~(1 << i);
 8000922:	2201      	movs	r2, #1
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	409a      	lsls	r2, r3
 8000928:	0013      	movs	r3, r2
 800092a:	43db      	mvns	r3, r3
 800092c:	001a      	movs	r2, r3
 800092e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000930:	4013      	ands	r3, r2
 8000932:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i=6; i<32; i++){
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	3301      	adds	r3, #1
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	2b1f      	cmp	r3, #31
 800093e:	ddf0      	ble.n	8000922 <checkTime+0x292>
}
	a=a>>4;
 8000940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000942:	091b      	lsrs	r3, r3, #4
 8000944:	637b      	str	r3, [r7, #52]	; 0x34
	drCheckTD=a;
 8000946:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000948:	4b21      	ldr	r3, [pc, #132]	; (80009d0 <checkTime+0x340>)
 800094a:	601a      	str	r2, [r3, #0]

	a=hrtc.Instance->DR;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <checkTime+0x2fc>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i=4; i<32; i++){
 8000954:	2304      	movs	r3, #4
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	e00b      	b.n	8000972 <checkTime+0x2e2>
		a = a & ~(1 << i);
 800095a:	2201      	movs	r2, #1
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	409a      	lsls	r2, r3
 8000960:	0013      	movs	r3, r2
 8000962:	43db      	mvns	r3, r3
 8000964:	001a      	movs	r2, r3
 8000966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000968:	4013      	ands	r3, r2
 800096a:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i=4; i<32; i++){
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3301      	adds	r3, #1
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2b1f      	cmp	r3, #31
 8000976:	ddf0      	ble.n	800095a <checkTime+0x2ca>
}
	drCheckUD=a;
 8000978:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800097a:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <checkTime+0x344>)
 800097c:	601a      	str	r2, [r3, #0]

	a=hrtc.Instance->DR;
 800097e:	4b03      	ldr	r3, [pc, #12]	; (800098c <checkTime+0x2fc>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i=16; i<32; i++){
 8000986:	2310      	movs	r3, #16
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	e031      	b.n	80009f0 <checkTime+0x360>
 800098c:	2000036c 	.word	0x2000036c
 8000990:	200002f8 	.word	0x200002f8
 8000994:	200002fc 	.word	0x200002fc
 8000998:	20000300 	.word	0x20000300
 800099c:	20000304 	.word	0x20000304
 80009a0:	20000308 	.word	0x20000308
 80009a4:	2000030c 	.word	0x2000030c
 80009a8:	200002ac 	.word	0x200002ac
 80009ac:	200002ad 	.word	0x200002ad
 80009b0:	200002ae 	.word	0x200002ae
 80009b4:	200002af 	.word	0x200002af
 80009b8:	200002b0 	.word	0x200002b0
 80009bc:	200002b1 	.word	0x200002b1
 80009c0:	20000310 	.word	0x20000310
 80009c4:	20000314 	.word	0x20000314
 80009c8:	20000318 	.word	0x20000318
 80009cc:	2000031c 	.word	0x2000031c
 80009d0:	20000324 	.word	0x20000324
 80009d4:	20000328 	.word	0x20000328
		a = a & ~(1 << i);
 80009d8:	2201      	movs	r2, #1
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	409a      	lsls	r2, r3
 80009de:	0013      	movs	r3, r2
 80009e0:	43db      	mvns	r3, r3
 80009e2:	001a      	movs	r2, r3
 80009e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009e6:	4013      	ands	r3, r2
 80009e8:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i=16; i<32; i++){
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	3301      	adds	r3, #1
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	2b1f      	cmp	r3, #31
 80009f4:	ddf0      	ble.n	80009d8 <checkTime+0x348>
}
	a=a>>13;
 80009f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009f8:	0b5b      	lsrs	r3, r3, #13
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34
	drCheckWD=a;
 80009fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009fe:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <checkTime+0x3dc>)
 8000a00:	601a      	str	r2, [r3, #0]

	  chWD=drCheckWD + '0';
 8000a02:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <checkTime+0x3dc>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	3330      	adds	r3, #48	; 0x30
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <checkTime+0x3e0>)
 8000a0e:	701a      	strb	r2, [r3, #0]
	  chTenDays=drCheckTD + '0';
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <checkTime+0x3e4>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	3330      	adds	r3, #48	; 0x30
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <checkTime+0x3e8>)
 8000a1c:	701a      	strb	r2, [r3, #0]
	  chUniDays=drCheckUD + '0';
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <checkTime+0x3ec>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	3330      	adds	r3, #48	; 0x30
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <checkTime+0x3f0>)
 8000a2a:	701a      	strb	r2, [r3, #0]
	  chTenMonths=drCheckTM + '0';
 8000a2c:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <checkTime+0x3f4>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	3330      	adds	r3, #48	; 0x30
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <checkTime+0x3f8>)
 8000a38:	701a      	strb	r2, [r3, #0]
	  chUniMonths=drCheckUM + '0';
 8000a3a:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <checkTime+0x3fc>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	3330      	adds	r3, #48	; 0x30
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <checkTime+0x400>)
 8000a46:	701a      	strb	r2, [r3, #0]
	  chTenYears=drCheckTY + '0';
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <checkTime+0x404>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	3330      	adds	r3, #48	; 0x30
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <checkTime+0x408>)
 8000a54:	701a      	strb	r2, [r3, #0]
	  chUniYears=drCheckUY + '0';
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <checkTime+0x40c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	3330      	adds	r3, #48	; 0x30
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <checkTime+0x410>)
 8000a62:	701a      	strb	r2, [r3, #0]
	}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b00e      	add	sp, #56	; 0x38
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000320 	.word	0x20000320
 8000a70:	200002b6 	.word	0x200002b6
 8000a74:	20000324 	.word	0x20000324
 8000a78:	200002b7 	.word	0x200002b7
 8000a7c:	20000328 	.word	0x20000328
 8000a80:	200002b8 	.word	0x200002b8
 8000a84:	20000318 	.word	0x20000318
 8000a88:	200002b4 	.word	0x200002b4
 8000a8c:	2000031c 	.word	0x2000031c
 8000a90:	200002b5 	.word	0x200002b5
 8000a94:	20000310 	.word	0x20000310
 8000a98:	200002b2 	.word	0x200002b2
 8000a9c:	20000314 	.word	0x20000314
 8000aa0:	200002b3 	.word	0x200002b3

08000aa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aaa:	f001 f983 	bl	8001db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aae:	f000 f83f 	bl	8000b30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab2:	f000 fa2b 	bl	8000f0c <MX_GPIO_Init>
  MX_ADC_Init();
 8000ab6:	f000 f8c5 	bl	8000c44 <MX_ADC_Init>
  MX_RTC_Init();
 8000aba:	f000 f91f 	bl	8000cfc <MX_RTC_Init>
  MX_SPI1_Init();
 8000abe:	f000 f9c3 	bl	8000e48 <MX_SPI1_Init>
  MX_TIM7_Init();
 8000ac2:	f000 f9ff 	bl	8000ec4 <MX_TIM7_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000ac6:	f000 f8a0 	bl	8000c0a <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000aca:	f000 fb6b 	bl	80011a4 <ssd1306_Init>
  for(int i=0; i<10000; i++){};
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	e002      	b.n	8000ada <main+0x36>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a10      	ldr	r2, [pc, #64]	; (8000b20 <main+0x7c>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	ddf8      	ble.n	8000ad4 <main+0x30>
	HAL_TIM_Base_Stop_IT(&htim7);
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <main+0x80>)
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f003 ff67 	bl	80049b8 <HAL_TIM_Base_Stop_IT>
	htim7.Instance->CNT=0;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <main+0x80>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2200      	movs	r2, #0
 8000af0:	625a      	str	r2, [r3, #36]	; 0x24
	TIM7->SR=0;
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <main+0x84>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
	extern int nextOrPrev;
	nextOrPrev=CURRENT;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <main+0x88>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]


	 HAL_SuspendTick();
 8000afe:	f001 f9e1 	bl	8001ec4 <HAL_SuspendTick>
	 HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000b02:	2101      	movs	r1, #1
 8000b04:	2001      	movs	r0, #1
 8000b06:	f002 fa51 	bl	8002fac <HAL_PWR_EnterSLEEPMode>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	 checkTime();
 8000b0a:	f7ff fdc1 	bl	8000690 <checkTime>
	 ssd1306_SetCursor(2, 52);
 8000b0e:	2134      	movs	r1, #52	; 0x34
 8000b10:	2002      	movs	r0, #2
 8000b12:	f000 fd21 	bl	8001558 <ssd1306_SetCursor>
	 displayTime();
 8000b16:	f7ff fd0f 	bl	8000538 <displayTime>
	 ssd1306_UpdateScreen();
 8000b1a:	f000 fbc9 	bl	80012b0 <ssd1306_UpdateScreen>
	 checkTime();
 8000b1e:	e7f4      	b.n	8000b0a <main+0x66>
 8000b20:	0000270f 	.word	0x0000270f
 8000b24:	200003f0 	.word	0x200003f0
 8000b28:	40001400 	.word	0x40001400
 8000b2c:	20000004 	.word	0x20000004

08000b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b30:	b590      	push	{r4, r7, lr}
 8000b32:	b095      	sub	sp, #84	; 0x54
 8000b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b36:	2420      	movs	r4, #32
 8000b38:	193b      	adds	r3, r7, r4
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	2330      	movs	r3, #48	; 0x30
 8000b3e:	001a      	movs	r2, r3
 8000b40:	2100      	movs	r1, #0
 8000b42:	f004 f94f 	bl	8004de4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b46:	2310      	movs	r3, #16
 8000b48:	18fb      	adds	r3, r7, r3
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	2310      	movs	r3, #16
 8000b4e:	001a      	movs	r2, r3
 8000b50:	2100      	movs	r1, #0
 8000b52:	f004 f947 	bl	8004de4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b56:	003b      	movs	r3, r7
 8000b58:	0018      	movs	r0, r3
 8000b5a:	2310      	movs	r3, #16
 8000b5c:	001a      	movs	r2, r3
 8000b5e:	2100      	movs	r1, #0
 8000b60:	f004 f940 	bl	8004de4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8000b64:	0021      	movs	r1, r4
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	221a      	movs	r2, #26
 8000b6a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	2201      	movs	r2, #1
 8000b70:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000b72:	187b      	adds	r3, r7, r1
 8000b74:	2201      	movs	r2, #1
 8000b76:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	2210      	movs	r2, #16
 8000b7c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	2210      	movs	r2, #16
 8000b82:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2201      	movs	r2, #1
 8000b88:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	2280      	movs	r2, #128	; 0x80
 8000b94:	0212      	lsls	r2, r2, #8
 8000b96:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	2280      	movs	r2, #128	; 0x80
 8000b9c:	0352      	lsls	r2, r2, #13
 8000b9e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f002 fa1b 	bl	8002fe4 <HAL_RCC_OscConfig>
 8000bae:	1e03      	subs	r3, r0, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000bb2:	f000 fa81 	bl	80010b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb6:	2110      	movs	r1, #16
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	2207      	movs	r2, #7
 8000bbc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	2202      	movs	r2, #2
 8000bc2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2200      	movs	r2, #0
 8000bce:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f002 fd23 	bl	8003620 <HAL_RCC_ClockConfig>
 8000bda:	1e03      	subs	r3, r0, #0
 8000bdc:	d001      	beq.n	8000be2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000bde:	f000 fa6b 	bl	80010b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000be2:	003b      	movs	r3, r7
 8000be4:	2280      	movs	r2, #128	; 0x80
 8000be6:	0252      	lsls	r2, r2, #9
 8000be8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000bea:	003b      	movs	r3, r7
 8000bec:	2280      	movs	r2, #128	; 0x80
 8000bee:	0092      	lsls	r2, r2, #2
 8000bf0:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf2:	003b      	movs	r3, r7
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f002 fe3b 	bl	8003870 <HAL_RCCEx_PeriphCLKConfig>
 8000bfa:	1e03      	subs	r3, r0, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000bfe:	f000 fa5b 	bl	80010b8 <Error_Handler>
  }
}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b015      	add	sp, #84	; 0x54
 8000c08:	bd90      	pop	{r4, r7, pc}

08000c0a <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	af00      	add	r7, sp, #0
  /* EXTI4_15_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	2007      	movs	r0, #7
 8000c14:	f001 ffd4 	bl	8002bc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000c18:	2007      	movs	r0, #7
 8000c1a:	f001 ffe6 	bl	8002bea <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 1, 1);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	2101      	movs	r1, #1
 8000c22:	2012      	movs	r0, #18
 8000c24:	f001 ffcc 	bl	8002bc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000c28:	2012      	movs	r0, #18
 8000c2a:	f001 ffde 	bl	8002bea <HAL_NVIC_EnableIRQ>
  /* ADC1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC1_IRQn, 2, 2);
 8000c2e:	2202      	movs	r2, #2
 8000c30:	2102      	movs	r1, #2
 8000c32:	200c      	movs	r0, #12
 8000c34:	f001 ffc4 	bl	8002bc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000c38:	200c      	movs	r0, #12
 8000c3a:	f001 ffd6 	bl	8002bea <HAL_NVIC_EnableIRQ>
}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	230c      	movs	r3, #12
 8000c50:	001a      	movs	r2, r3
 8000c52:	2100      	movs	r1, #0
 8000c54:	f004 f8c6 	bl	8004de4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000c58:	4b26      	ldr	r3, [pc, #152]	; (8000cf4 <MX_ADC_Init+0xb0>)
 8000c5a:	4a27      	ldr	r2, [pc, #156]	; (8000cf8 <MX_ADC_Init+0xb4>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c5e:	4b25      	ldr	r3, [pc, #148]	; (8000cf4 <MX_ADC_Init+0xb0>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_6B;
 8000c64:	4b23      	ldr	r3, [pc, #140]	; (8000cf4 <MX_ADC_Init+0xb0>)
 8000c66:	2218      	movs	r2, #24
 8000c68:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c6a:	4b22      	ldr	r3, [pc, #136]	; (8000cf4 <MX_ADC_Init+0xb0>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000c70:	4b20      	ldr	r3, [pc, #128]	; (8000cf4 <MX_ADC_Init+0xb0>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c76:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <MX_ADC_Init+0xb0>)
 8000c78:	2204      	movs	r2, #4
 8000c7a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000c7c:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <MX_ADC_Init+0xb0>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000c82:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <MX_ADC_Init+0xb0>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000c88:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <MX_ADC_Init+0xb0>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000c8e:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <MX_ADC_Init+0xb0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c94:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <MX_ADC_Init+0xb0>)
 8000c96:	22c2      	movs	r2, #194	; 0xc2
 8000c98:	32ff      	adds	r2, #255	; 0xff
 8000c9a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c9c:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <MX_ADC_Init+0xb0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000ca2:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <MX_ADC_Init+0xb0>)
 8000ca4:	2224      	movs	r2, #36	; 0x24
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000caa:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <MX_ADC_Init+0xb0>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000cb0:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <MX_ADC_Init+0xb0>)
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f001 f922 	bl	8001efc <HAL_ADC_Init>
 8000cb8:	1e03      	subs	r3, r0, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000cbc:	f000 f9fc 	bl	80010b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	2209      	movs	r2, #9
 8000cc4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	2280      	movs	r2, #128	; 0x80
 8000cca:	0152      	lsls	r2, r2, #5
 8000ccc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	2280      	movs	r2, #128	; 0x80
 8000cd2:	0552      	lsls	r2, r2, #21
 8000cd4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000cd6:	1d3a      	adds	r2, r7, #4
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <MX_ADC_Init+0xb0>)
 8000cda:	0011      	movs	r1, r2
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f001 fc69 	bl	80025b4 <HAL_ADC_ConfigChannel>
 8000ce2:	1e03      	subs	r3, r0, #0
 8000ce4:	d001      	beq.n	8000cea <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000ce6:	f000 f9e7 	bl	80010b8 <Error_Handler>
  /* USER CODE BEGIN ADC_Init 2 */
 // HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 // HAL_NVIC_EnableIRQ(ADC1_IRQn);
  /* USER CODE END ADC_Init 2 */

}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b004      	add	sp, #16
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	2000032c 	.word	0x2000032c
 8000cf8:	40012400 	.word	0x40012400

08000cfc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b090      	sub	sp, #64	; 0x40
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d02:	232c      	movs	r3, #44	; 0x2c
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	0018      	movs	r0, r3
 8000d08:	2314      	movs	r3, #20
 8000d0a:	001a      	movs	r2, r3
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	f004 f869 	bl	8004de4 <memset>
  RTC_DateTypeDef sDate = {0};
 8000d12:	2328      	movs	r3, #40	; 0x28
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000d1a:	003b      	movs	r3, r7
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	2328      	movs	r3, #40	; 0x28
 8000d20:	001a      	movs	r2, r3
 8000d22:	2100      	movs	r1, #0
 8000d24:	f004 f85e 	bl	8004de4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d28:	4b45      	ldr	r3, [pc, #276]	; (8000e40 <MX_RTC_Init+0x144>)
 8000d2a:	4a46      	ldr	r2, [pc, #280]	; (8000e44 <MX_RTC_Init+0x148>)
 8000d2c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d2e:	4b44      	ldr	r3, [pc, #272]	; (8000e40 <MX_RTC_Init+0x144>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d34:	4b42      	ldr	r3, [pc, #264]	; (8000e40 <MX_RTC_Init+0x144>)
 8000d36:	227f      	movs	r2, #127	; 0x7f
 8000d38:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 299;
 8000d3a:	4b41      	ldr	r3, [pc, #260]	; (8000e40 <MX_RTC_Init+0x144>)
 8000d3c:	222c      	movs	r2, #44	; 0x2c
 8000d3e:	32ff      	adds	r2, #255	; 0xff
 8000d40:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d42:	4b3f      	ldr	r3, [pc, #252]	; (8000e40 <MX_RTC_Init+0x144>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d48:	4b3d      	ldr	r3, [pc, #244]	; (8000e40 <MX_RTC_Init+0x144>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d4e:	4b3c      	ldr	r3, [pc, #240]	; (8000e40 <MX_RTC_Init+0x144>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d54:	4b3a      	ldr	r3, [pc, #232]	; (8000e40 <MX_RTC_Init+0x144>)
 8000d56:	0018      	movs	r0, r3
 8000d58:	f002 fe58 	bl	8003a0c <HAL_RTC_Init>
 8000d5c:	1e03      	subs	r3, r0, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_RTC_Init+0x68>
  {
    Error_Handler();
 8000d60:	f000 f9aa 	bl	80010b8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000d64:	212c      	movs	r1, #44	; 0x2c
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	2200      	movs	r2, #0
 8000d6a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8000d6c:	187b      	adds	r3, r7, r1
 8000d6e:	2200      	movs	r2, #0
 8000d70:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8000d72:	187b      	adds	r3, r7, r1
 8000d74:	2200      	movs	r2, #0
 8000d76:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000d84:	1879      	adds	r1, r7, r1
 8000d86:	4b2e      	ldr	r3, [pc, #184]	; (8000e40 <MX_RTC_Init+0x144>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f002 fed6 	bl	8003b3c <HAL_RTC_SetTime>
 8000d90:	1e03      	subs	r3, r0, #0
 8000d92:	d001      	beq.n	8000d98 <MX_RTC_Init+0x9c>
  {
    Error_Handler();
 8000d94:	f000 f990 	bl	80010b8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d98:	2128      	movs	r1, #40	; 0x28
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_SEPTEMBER;
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	2209      	movs	r2, #9
 8000da4:	705a      	strb	r2, [r3, #1]
  sDate.Date = 2;
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2202      	movs	r2, #2
 8000daa:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	2218      	movs	r2, #24
 8000db0:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000db2:	1879      	adds	r1, r7, r1
 8000db4:	4b22      	ldr	r3, [pc, #136]	; (8000e40 <MX_RTC_Init+0x144>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	0018      	movs	r0, r3
 8000dba:	f002 ff65 	bl	8003c88 <HAL_RTC_SetDate>
 8000dbe:	1e03      	subs	r3, r0, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_RTC_Init+0xca>
  {
    Error_Handler();
 8000dc2:	f000 f979 	bl	80010b8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8000dc6:	003b      	movs	r3, r7
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8000dcc:	003b      	movs	r3, r7
 8000dce:	2200      	movs	r2, #0
 8000dd0:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8000dd2:	003b      	movs	r3, r7
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8000dd8:	003b      	movs	r3, r7
 8000dda:	2200      	movs	r2, #0
 8000ddc:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000dde:	003b      	movs	r3, r7
 8000de0:	2200      	movs	r2, #0
 8000de2:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000de4:	003b      	movs	r3, r7
 8000de6:	2200      	movs	r2, #0
 8000de8:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000dea:	003b      	movs	r3, r7
 8000dec:	2200      	movs	r2, #0
 8000dee:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000df0:	003b      	movs	r3, r7
 8000df2:	2200      	movs	r2, #0
 8000df4:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000df6:	003b      	movs	r3, r7
 8000df8:	2200      	movs	r2, #0
 8000dfa:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8000dfc:	003b      	movs	r3, r7
 8000dfe:	2220      	movs	r2, #32
 8000e00:	2101      	movs	r1, #1
 8000e02:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000e04:	003b      	movs	r3, r7
 8000e06:	2280      	movs	r2, #128	; 0x80
 8000e08:	0052      	lsls	r2, r2, #1
 8000e0a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000e0c:	0039      	movs	r1, r7
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <MX_RTC_Init+0x144>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	0018      	movs	r0, r3
 8000e14:	f002 ffc8 	bl	8003da8 <HAL_RTC_SetAlarm>
 8000e18:	1e03      	subs	r3, r0, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8000e1c:	f000 f94c 	bl	80010b8 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 8000e20:	2380      	movs	r3, #128	; 0x80
 8000e22:	031a      	lsls	r2, r3, #12
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <MX_RTC_Init+0x144>)
 8000e26:	0011      	movs	r1, r2
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f003 f957 	bl	80040dc <HAL_RTCEx_SetCalibrationOutPut>
 8000e2e:	1e03      	subs	r3, r0, #0
 8000e30:	d001      	beq.n	8000e36 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8000e32:	f000 f941 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b010      	add	sp, #64	; 0x40
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	2000036c 	.word	0x2000036c
 8000e44:	40002800 	.word	0x40002800

08000e48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e4e:	4a1c      	ldr	r2, [pc, #112]	; (8000ec0 <MX_SPI1_Init+0x78>)
 8000e50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e54:	2282      	movs	r2, #130	; 0x82
 8000e56:	0052      	lsls	r2, r2, #1
 8000e58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e60:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e62:	22e0      	movs	r2, #224	; 0xe0
 8000e64:	00d2      	lsls	r2, r2, #3
 8000e66:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e68:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e6e:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e76:	2280      	movs	r2, #128	; 0x80
 8000e78:	0092      	lsls	r2, r2, #2
 8000e7a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e7e:	2210      	movs	r2, #16
 8000e80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e96:	2207      	movs	r2, #7
 8000e98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000ea2:	2208      	movs	r2, #8
 8000ea4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ea6:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f003 f95b 	bl	8004164 <HAL_SPI_Init>
 8000eae:	1e03      	subs	r3, r0, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000eb2:	f000 f901 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	2000038c 	.word	0x2000038c
 8000ec0:	40013000 	.word	0x40013000

08000ec4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM7_Init 0 */

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <MX_TIM7_Init+0x38>)
 8000eca:	4a0d      	ldr	r2, [pc, #52]	; (8000f00 <MX_TIM7_Init+0x3c>)
 8000ecc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 48000;
 8000ece:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <MX_TIM7_Init+0x38>)
 8000ed0:	4a0c      	ldr	r2, [pc, #48]	; (8000f04 <MX_TIM7_Init+0x40>)
 8000ed2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed4:	4b09      	ldr	r3, [pc, #36]	; (8000efc <MX_TIM7_Init+0x38>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000;
 8000eda:	4b08      	ldr	r3, [pc, #32]	; (8000efc <MX_TIM7_Init+0x38>)
 8000edc:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <MX_TIM7_Init+0x44>)
 8000ede:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <MX_TIM7_Init+0x38>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000ee6:	4b05      	ldr	r3, [pc, #20]	; (8000efc <MX_TIM7_Init+0x38>)
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f003 fcc9 	bl	8004880 <HAL_TIM_Base_Init>
 8000eee:	1e03      	subs	r3, r0, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM7_Init+0x32>
  {
    Error_Handler();
 8000ef2:	f000 f8e1 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200003f0 	.word	0x200003f0
 8000f00:	40001400 	.word	0x40001400
 8000f04:	0000bb80 	.word	0x0000bb80
 8000f08:	00001388 	.word	0x00001388

08000f0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b08b      	sub	sp, #44	; 0x2c
 8000f10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f12:	2414      	movs	r4, #20
 8000f14:	193b      	adds	r3, r7, r4
 8000f16:	0018      	movs	r0, r3
 8000f18:	2314      	movs	r3, #20
 8000f1a:	001a      	movs	r2, r3
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	f003 ff61 	bl	8004de4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f22:	4b5f      	ldr	r3, [pc, #380]	; (80010a0 <MX_GPIO_Init+0x194>)
 8000f24:	695a      	ldr	r2, [r3, #20]
 8000f26:	4b5e      	ldr	r3, [pc, #376]	; (80010a0 <MX_GPIO_Init+0x194>)
 8000f28:	2180      	movs	r1, #128	; 0x80
 8000f2a:	0309      	lsls	r1, r1, #12
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	615a      	str	r2, [r3, #20]
 8000f30:	4b5b      	ldr	r3, [pc, #364]	; (80010a0 <MX_GPIO_Init+0x194>)
 8000f32:	695a      	ldr	r2, [r3, #20]
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	031b      	lsls	r3, r3, #12
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f3e:	4b58      	ldr	r3, [pc, #352]	; (80010a0 <MX_GPIO_Init+0x194>)
 8000f40:	695a      	ldr	r2, [r3, #20]
 8000f42:	4b57      	ldr	r3, [pc, #348]	; (80010a0 <MX_GPIO_Init+0x194>)
 8000f44:	2180      	movs	r1, #128	; 0x80
 8000f46:	03c9      	lsls	r1, r1, #15
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	615a      	str	r2, [r3, #20]
 8000f4c:	4b54      	ldr	r3, [pc, #336]	; (80010a0 <MX_GPIO_Init+0x194>)
 8000f4e:	695a      	ldr	r2, [r3, #20]
 8000f50:	2380      	movs	r3, #128	; 0x80
 8000f52:	03db      	lsls	r3, r3, #15
 8000f54:	4013      	ands	r3, r2
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	4b51      	ldr	r3, [pc, #324]	; (80010a0 <MX_GPIO_Init+0x194>)
 8000f5c:	695a      	ldr	r2, [r3, #20]
 8000f5e:	4b50      	ldr	r3, [pc, #320]	; (80010a0 <MX_GPIO_Init+0x194>)
 8000f60:	2180      	movs	r1, #128	; 0x80
 8000f62:	0289      	lsls	r1, r1, #10
 8000f64:	430a      	orrs	r2, r1
 8000f66:	615a      	str	r2, [r3, #20]
 8000f68:	4b4d      	ldr	r3, [pc, #308]	; (80010a0 <MX_GPIO_Init+0x194>)
 8000f6a:	695a      	ldr	r2, [r3, #20]
 8000f6c:	2380      	movs	r3, #128	; 0x80
 8000f6e:	029b      	lsls	r3, r3, #10
 8000f70:	4013      	ands	r3, r2
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f76:	4b4a      	ldr	r3, [pc, #296]	; (80010a0 <MX_GPIO_Init+0x194>)
 8000f78:	695a      	ldr	r2, [r3, #20]
 8000f7a:	4b49      	ldr	r3, [pc, #292]	; (80010a0 <MX_GPIO_Init+0x194>)
 8000f7c:	2180      	movs	r1, #128	; 0x80
 8000f7e:	02c9      	lsls	r1, r1, #11
 8000f80:	430a      	orrs	r2, r1
 8000f82:	615a      	str	r2, [r3, #20]
 8000f84:	4b46      	ldr	r3, [pc, #280]	; (80010a0 <MX_GPIO_Init+0x194>)
 8000f86:	695a      	ldr	r2, [r3, #20]
 8000f88:	2380      	movs	r3, #128	; 0x80
 8000f8a:	02db      	lsls	r3, r3, #11
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SYN115_DATA_Pin|SPI_RST_Pin|SPI_CS_Pin|SPI_DC_Pin, GPIO_PIN_RESET);
 8000f92:	2390      	movs	r3, #144	; 0x90
 8000f94:	05db      	lsls	r3, r3, #23
 8000f96:	2200      	movs	r2, #0
 8000f98:	215c      	movs	r1, #92	; 0x5c
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f001 ffc2 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000fa0:	4b40      	ldr	r3, [pc, #256]	; (80010a4 <MX_GPIO_Init+0x198>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f001 ffbc 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000fac:	193b      	adds	r3, r7, r4
 8000fae:	22c0      	movs	r2, #192	; 0xc0
 8000fb0:	0212      	lsls	r2, r2, #8
 8000fb2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fb4:	193b      	adds	r3, r7, r4
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	193b      	adds	r3, r7, r4
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc0:	193b      	adds	r3, r7, r4
 8000fc2:	4a39      	ldr	r2, [pc, #228]	; (80010a8 <MX_GPIO_Init+0x19c>)
 8000fc4:	0019      	movs	r1, r3
 8000fc6:	0010      	movs	r0, r2
 8000fc8:	f001 fe3c 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fcc:	193b      	adds	r3, r7, r4
 8000fce:	2203      	movs	r2, #3
 8000fd0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd2:	193b      	adds	r3, r7, r4
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	193b      	adds	r3, r7, r4
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fde:	193b      	adds	r3, r7, r4
 8000fe0:	4a32      	ldr	r2, [pc, #200]	; (80010ac <MX_GPIO_Init+0x1a0>)
 8000fe2:	0019      	movs	r1, r3
 8000fe4:	0010      	movs	r0, r2
 8000fe6:	f001 fe2d 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_10
 8000fea:	193b      	adds	r3, r7, r4
 8000fec:	4a30      	ldr	r2, [pc, #192]	; (80010b0 <MX_GPIO_Init+0x1a4>)
 8000fee:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ff0:	193b      	adds	r3, r7, r4
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	193b      	adds	r3, r7, r4
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	193a      	adds	r2, r7, r4
 8000ffe:	2390      	movs	r3, #144	; 0x90
 8001000:	05db      	lsls	r3, r3, #23
 8001002:	0011      	movs	r1, r2
 8001004:	0018      	movs	r0, r3
 8001006:	f001 fe1d 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : SYN115_DATA_Pin SPI_RST_Pin SPI_CS_Pin SPI_DC_Pin */
  GPIO_InitStruct.Pin = SYN115_DATA_Pin|SPI_RST_Pin|SPI_CS_Pin|SPI_DC_Pin;
 800100a:	193b      	adds	r3, r7, r4
 800100c:	225c      	movs	r2, #92	; 0x5c
 800100e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001010:	193b      	adds	r3, r7, r4
 8001012:	2201      	movs	r2, #1
 8001014:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	193b      	adds	r3, r7, r4
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	193b      	adds	r3, r7, r4
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001022:	193a      	adds	r2, r7, r4
 8001024:	2390      	movs	r3, #144	; 0x90
 8001026:	05db      	lsls	r3, r3, #23
 8001028:	0011      	movs	r1, r2
 800102a:	0018      	movs	r0, r3
 800102c:	f001 fe0a 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8001030:	193b      	adds	r3, r7, r4
 8001032:	2201      	movs	r2, #1
 8001034:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001036:	193b      	adds	r3, r7, r4
 8001038:	2201      	movs	r2, #1
 800103a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	193b      	adds	r3, r7, r4
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	193b      	adds	r3, r7, r4
 8001044:	2200      	movs	r2, #0
 8001046:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001048:	193b      	adds	r3, r7, r4
 800104a:	4a16      	ldr	r2, [pc, #88]	; (80010a4 <MX_GPIO_Init+0x198>)
 800104c:	0019      	movs	r1, r3
 800104e:	0010      	movs	r0, r2
 8001050:	f001 fdf8 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB12
                           PB13 PB14 PB15 PB3
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001054:	193b      	adds	r3, r7, r4
 8001056:	4a17      	ldr	r2, [pc, #92]	; (80010b4 <MX_GPIO_Init+0x1a8>)
 8001058:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800105a:	193b      	adds	r3, r7, r4
 800105c:	2203      	movs	r2, #3
 800105e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	193b      	adds	r3, r7, r4
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001066:	193b      	adds	r3, r7, r4
 8001068:	4a0e      	ldr	r2, [pc, #56]	; (80010a4 <MX_GPIO_Init+0x198>)
 800106a:	0019      	movs	r1, r3
 800106c:	0010      	movs	r0, r2
 800106e:	f001 fde9 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001072:	0021      	movs	r1, r4
 8001074:	187b      	adds	r3, r7, r1
 8001076:	2280      	movs	r2, #128	; 0x80
 8001078:	0092      	lsls	r2, r2, #2
 800107a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800107c:	187b      	adds	r3, r7, r1
 800107e:	2284      	movs	r2, #132	; 0x84
 8001080:	0392      	lsls	r2, r2, #14
 8001082:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001084:	187b      	adds	r3, r7, r1
 8001086:	2201      	movs	r2, #1
 8001088:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	187a      	adds	r2, r7, r1
 800108c:	2390      	movs	r3, #144	; 0x90
 800108e:	05db      	lsls	r3, r3, #23
 8001090:	0011      	movs	r1, r2
 8001092:	0018      	movs	r0, r3
 8001094:	f001 fdd6 	bl	8002c44 <HAL_GPIO_Init>

}
 8001098:	46c0      	nop			; (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	b00b      	add	sp, #44	; 0x2c
 800109e:	bd90      	pop	{r4, r7, pc}
 80010a0:	40021000 	.word	0x40021000
 80010a4:	48000400 	.word	0x48000400
 80010a8:	48000800 	.word	0x48000800
 80010ac:	48001400 	.word	0x48001400
 80010b0:	00009d03 	.word	0x00009d03
 80010b4:	0000fffc 	.word	0x0000fffc

080010b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010bc:	b672      	cpsid	i
}
 80010be:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <Error_Handler+0x8>

080010c2 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 80010c2:	b580      	push	{r7, lr}
 80010c4:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 80010c6:	2390      	movs	r3, #144	; 0x90
 80010c8:	05db      	lsls	r3, r3, #23
 80010ca:	2201      	movs	r2, #1
 80010cc:	2110      	movs	r1, #16
 80010ce:	0018      	movs	r0, r3
 80010d0:	f001 ff28 	bl	8002f24 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 80010d4:	2390      	movs	r3, #144	; 0x90
 80010d6:	05db      	lsls	r3, r3, #23
 80010d8:	2200      	movs	r2, #0
 80010da:	2108      	movs	r1, #8
 80010dc:	0018      	movs	r0, r3
 80010de:	f001 ff21 	bl	8002f24 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80010e2:	200a      	movs	r0, #10
 80010e4:	f000 feca 	bl	8001e7c <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 80010e8:	2390      	movs	r3, #144	; 0x90
 80010ea:	05db      	lsls	r3, r3, #23
 80010ec:	2201      	movs	r2, #1
 80010ee:	2108      	movs	r1, #8
 80010f0:	0018      	movs	r0, r3
 80010f2:	f001 ff17 	bl	8002f24 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80010f6:	200a      	movs	r0, #10
 80010f8:	f000 fec0 	bl	8001e7c <HAL_Delay>
}
 80010fc:	46c0      	nop			; (mov r8, r8)
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	0002      	movs	r2, r0
 800110c:	1dfb      	adds	r3, r7, #7
 800110e:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8001110:	2390      	movs	r3, #144	; 0x90
 8001112:	05db      	lsls	r3, r3, #23
 8001114:	2200      	movs	r2, #0
 8001116:	2110      	movs	r1, #16
 8001118:	0018      	movs	r0, r3
 800111a:	f001 ff03 	bl	8002f24 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 800111e:	2390      	movs	r3, #144	; 0x90
 8001120:	05db      	lsls	r3, r3, #23
 8001122:	2200      	movs	r2, #0
 8001124:	2140      	movs	r1, #64	; 0x40
 8001126:	0018      	movs	r0, r3
 8001128:	f001 fefc 	bl	8002f24 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 800112c:	2301      	movs	r3, #1
 800112e:	425b      	negs	r3, r3
 8001130:	1df9      	adds	r1, r7, #7
 8001132:	4807      	ldr	r0, [pc, #28]	; (8001150 <ssd1306_WriteCommand+0x4c>)
 8001134:	2201      	movs	r2, #1
 8001136:	f003 f8cd 	bl	80042d4 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 800113a:	2390      	movs	r3, #144	; 0x90
 800113c:	05db      	lsls	r3, r3, #23
 800113e:	2201      	movs	r2, #1
 8001140:	2110      	movs	r1, #16
 8001142:	0018      	movs	r0, r3
 8001144:	f001 feee 	bl	8002f24 <HAL_GPIO_WritePin>
}
 8001148:	46c0      	nop			; (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	b002      	add	sp, #8
 800114e:	bd80      	pop	{r7, pc}
 8001150:	2000038c 	.word	0x2000038c

08001154 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 800115e:	2390      	movs	r3, #144	; 0x90
 8001160:	05db      	lsls	r3, r3, #23
 8001162:	2200      	movs	r2, #0
 8001164:	2110      	movs	r1, #16
 8001166:	0018      	movs	r0, r3
 8001168:	f001 fedc 	bl	8002f24 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 800116c:	2390      	movs	r3, #144	; 0x90
 800116e:	05db      	lsls	r3, r3, #23
 8001170:	2201      	movs	r2, #1
 8001172:	2140      	movs	r1, #64	; 0x40
 8001174:	0018      	movs	r0, r3
 8001176:	f001 fed5 	bl	8002f24 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	b29a      	uxth	r2, r3
 800117e:	2301      	movs	r3, #1
 8001180:	425b      	negs	r3, r3
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	4806      	ldr	r0, [pc, #24]	; (80011a0 <ssd1306_WriteData+0x4c>)
 8001186:	f003 f8a5 	bl	80042d4 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 800118a:	2390      	movs	r3, #144	; 0x90
 800118c:	05db      	lsls	r3, r3, #23
 800118e:	2201      	movs	r2, #1
 8001190:	2110      	movs	r1, #16
 8001192:	0018      	movs	r0, r3
 8001194:	f001 fec6 	bl	8002f24 <HAL_GPIO_WritePin>
}
 8001198:	46c0      	nop			; (mov r8, r8)
 800119a:	46bd      	mov	sp, r7
 800119c:	b002      	add	sp, #8
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	2000038c 	.word	0x2000038c

080011a4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80011a8:	f7ff ff8b 	bl	80010c2 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80011ac:	2064      	movs	r0, #100	; 0x64
 80011ae:	f000 fe65 	bl	8001e7c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80011b2:	2000      	movs	r0, #0
 80011b4:	f000 fb64 	bl	8001880 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80011b8:	2020      	movs	r0, #32
 80011ba:	f7ff ffa3 	bl	8001104 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80011be:	2000      	movs	r0, #0
 80011c0:	f7ff ffa0 	bl	8001104 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80011c4:	20b0      	movs	r0, #176	; 0xb0
 80011c6:	f7ff ff9d 	bl	8001104 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80011ca:	20c8      	movs	r0, #200	; 0xc8
 80011cc:	f7ff ff9a 	bl	8001104 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80011d0:	2000      	movs	r0, #0
 80011d2:	f7ff ff97 	bl	8001104 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80011d6:	2010      	movs	r0, #16
 80011d8:	f7ff ff94 	bl	8001104 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80011dc:	2040      	movs	r0, #64	; 0x40
 80011de:	f7ff ff91 	bl	8001104 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80011e2:	20ff      	movs	r0, #255	; 0xff
 80011e4:	f000 fb33 	bl	800184e <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80011e8:	20a1      	movs	r0, #161	; 0xa1
 80011ea:	f7ff ff8b 	bl	8001104 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80011ee:	20a6      	movs	r0, #166	; 0xa6
 80011f0:	f7ff ff88 	bl	8001104 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80011f4:	20a8      	movs	r0, #168	; 0xa8
 80011f6:	f7ff ff85 	bl	8001104 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80011fa:	203f      	movs	r0, #63	; 0x3f
 80011fc:	f7ff ff82 	bl	8001104 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001200:	20a4      	movs	r0, #164	; 0xa4
 8001202:	f7ff ff7f 	bl	8001104 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001206:	20d3      	movs	r0, #211	; 0xd3
 8001208:	f7ff ff7c 	bl	8001104 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800120c:	2000      	movs	r0, #0
 800120e:	f7ff ff79 	bl	8001104 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001212:	20d5      	movs	r0, #213	; 0xd5
 8001214:	f7ff ff76 	bl	8001104 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001218:	20f0      	movs	r0, #240	; 0xf0
 800121a:	f7ff ff73 	bl	8001104 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800121e:	20d9      	movs	r0, #217	; 0xd9
 8001220:	f7ff ff70 	bl	8001104 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001224:	2022      	movs	r0, #34	; 0x22
 8001226:	f7ff ff6d 	bl	8001104 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800122a:	20da      	movs	r0, #218	; 0xda
 800122c:	f7ff ff6a 	bl	8001104 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001230:	2012      	movs	r0, #18
 8001232:	f7ff ff67 	bl	8001104 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001236:	20db      	movs	r0, #219	; 0xdb
 8001238:	f7ff ff64 	bl	8001104 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800123c:	2020      	movs	r0, #32
 800123e:	f7ff ff61 	bl	8001104 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001242:	208d      	movs	r0, #141	; 0x8d
 8001244:	f7ff ff5e 	bl	8001104 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001248:	2014      	movs	r0, #20
 800124a:	f7ff ff5b 	bl	8001104 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 800124e:	2000      	movs	r0, #0
 8001250:	f000 f814 	bl	800127c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001254:	f000 f82c 	bl	80012b0 <ssd1306_UpdateScreen>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001258:	2001      	movs	r0, #1
 800125a:	f000 fb11 	bl	8001880 <ssd1306_SetDisplayOn>


    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <ssd1306_Init+0xd4>)
 8001260:	2200      	movs	r2, #0
 8001262:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <ssd1306_Init+0xd4>)
 8001266:	2200      	movs	r2, #0
 8001268:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800126a:	4b03      	ldr	r3, [pc, #12]	; (8001278 <ssd1306_Init+0xd4>)
 800126c:	2201      	movs	r2, #1
 800126e:	711a      	strb	r2, [r3, #4]
}
 8001270:	46c0      	nop			; (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	20000838 	.word	0x20000838

0800127c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	0002      	movs	r2, r0
 8001284:	1dfb      	adds	r3, r7, #7
 8001286:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001288:	1dfb      	adds	r3, r7, #7
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d101      	bne.n	8001294 <ssd1306_Fill+0x18>
 8001290:	2300      	movs	r3, #0
 8001292:	e000      	b.n	8001296 <ssd1306_Fill+0x1a>
 8001294:	23ff      	movs	r3, #255	; 0xff
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	00d2      	lsls	r2, r2, #3
 800129a:	4804      	ldr	r0, [pc, #16]	; (80012ac <ssd1306_Fill+0x30>)
 800129c:	0019      	movs	r1, r3
 800129e:	f003 fda1 	bl	8004de4 <memset>
}
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b002      	add	sp, #8
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	20000438 	.word	0x20000438

080012b0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80012b6:	1dfb      	adds	r3, r7, #7
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
 80012bc:	e01a      	b.n	80012f4 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80012be:	1dfb      	adds	r3, r7, #7
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	3b50      	subs	r3, #80	; 0x50
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	0018      	movs	r0, r3
 80012c8:	f7ff ff1c 	bl	8001104 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80012cc:	2000      	movs	r0, #0
 80012ce:	f7ff ff19 	bl	8001104 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80012d2:	2010      	movs	r0, #16
 80012d4:	f7ff ff16 	bl	8001104 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80012d8:	1dfb      	adds	r3, r7, #7
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	01da      	lsls	r2, r3, #7
 80012de:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <ssd1306_UpdateScreen+0x58>)
 80012e0:	18d3      	adds	r3, r2, r3
 80012e2:	2180      	movs	r1, #128	; 0x80
 80012e4:	0018      	movs	r0, r3
 80012e6:	f7ff ff35 	bl	8001154 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80012ea:	1dfb      	adds	r3, r7, #7
 80012ec:	781a      	ldrb	r2, [r3, #0]
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	3201      	adds	r2, #1
 80012f2:	701a      	strb	r2, [r3, #0]
 80012f4:	1dfb      	adds	r3, r7, #7
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b07      	cmp	r3, #7
 80012fa:	d9e0      	bls.n	80012be <ssd1306_UpdateScreen+0xe>
    }
}
 80012fc:	46c0      	nop			; (mov r8, r8)
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	46bd      	mov	sp, r7
 8001302:	b002      	add	sp, #8
 8001304:	bd80      	pop	{r7, pc}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	20000438 	.word	0x20000438

0800130c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800130c:	b590      	push	{r4, r7, lr}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	0004      	movs	r4, r0
 8001314:	0008      	movs	r0, r1
 8001316:	0011      	movs	r1, r2
 8001318:	1dfb      	adds	r3, r7, #7
 800131a:	1c22      	adds	r2, r4, #0
 800131c:	701a      	strb	r2, [r3, #0]
 800131e:	1dbb      	adds	r3, r7, #6
 8001320:	1c02      	adds	r2, r0, #0
 8001322:	701a      	strb	r2, [r3, #0]
 8001324:	1d7b      	adds	r3, r7, #5
 8001326:	1c0a      	adds	r2, r1, #0
 8001328:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800132a:	1dfb      	adds	r3, r7, #7
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	b25b      	sxtb	r3, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	db47      	blt.n	80013c4 <ssd1306_DrawPixel+0xb8>
 8001334:	1dbb      	adds	r3, r7, #6
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b3f      	cmp	r3, #63	; 0x3f
 800133a:	d843      	bhi.n	80013c4 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800133c:	1d7b      	adds	r3, r7, #5
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d11e      	bne.n	8001382 <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001344:	1dfb      	adds	r3, r7, #7
 8001346:	781a      	ldrb	r2, [r3, #0]
 8001348:	1dbb      	adds	r3, r7, #6
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	08db      	lsrs	r3, r3, #3
 800134e:	b2d8      	uxtb	r0, r3
 8001350:	0003      	movs	r3, r0
 8001352:	01db      	lsls	r3, r3, #7
 8001354:	18d3      	adds	r3, r2, r3
 8001356:	4a1d      	ldr	r2, [pc, #116]	; (80013cc <ssd1306_DrawPixel+0xc0>)
 8001358:	5cd3      	ldrb	r3, [r2, r3]
 800135a:	b25a      	sxtb	r2, r3
 800135c:	1dbb      	adds	r3, r7, #6
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2107      	movs	r1, #7
 8001362:	400b      	ands	r3, r1
 8001364:	2101      	movs	r1, #1
 8001366:	4099      	lsls	r1, r3
 8001368:	000b      	movs	r3, r1
 800136a:	b25b      	sxtb	r3, r3
 800136c:	4313      	orrs	r3, r2
 800136e:	b259      	sxtb	r1, r3
 8001370:	1dfb      	adds	r3, r7, #7
 8001372:	781a      	ldrb	r2, [r3, #0]
 8001374:	0003      	movs	r3, r0
 8001376:	01db      	lsls	r3, r3, #7
 8001378:	18d3      	adds	r3, r2, r3
 800137a:	b2c9      	uxtb	r1, r1
 800137c:	4a13      	ldr	r2, [pc, #76]	; (80013cc <ssd1306_DrawPixel+0xc0>)
 800137e:	54d1      	strb	r1, [r2, r3]
 8001380:	e021      	b.n	80013c6 <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001382:	1dfb      	adds	r3, r7, #7
 8001384:	781a      	ldrb	r2, [r3, #0]
 8001386:	1dbb      	adds	r3, r7, #6
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	08db      	lsrs	r3, r3, #3
 800138c:	b2d8      	uxtb	r0, r3
 800138e:	0003      	movs	r3, r0
 8001390:	01db      	lsls	r3, r3, #7
 8001392:	18d3      	adds	r3, r2, r3
 8001394:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <ssd1306_DrawPixel+0xc0>)
 8001396:	5cd3      	ldrb	r3, [r2, r3]
 8001398:	b25b      	sxtb	r3, r3
 800139a:	1dba      	adds	r2, r7, #6
 800139c:	7812      	ldrb	r2, [r2, #0]
 800139e:	2107      	movs	r1, #7
 80013a0:	400a      	ands	r2, r1
 80013a2:	2101      	movs	r1, #1
 80013a4:	4091      	lsls	r1, r2
 80013a6:	000a      	movs	r2, r1
 80013a8:	b252      	sxtb	r2, r2
 80013aa:	43d2      	mvns	r2, r2
 80013ac:	b252      	sxtb	r2, r2
 80013ae:	4013      	ands	r3, r2
 80013b0:	b259      	sxtb	r1, r3
 80013b2:	1dfb      	adds	r3, r7, #7
 80013b4:	781a      	ldrb	r2, [r3, #0]
 80013b6:	0003      	movs	r3, r0
 80013b8:	01db      	lsls	r3, r3, #7
 80013ba:	18d3      	adds	r3, r2, r3
 80013bc:	b2c9      	uxtb	r1, r1
 80013be:	4a03      	ldr	r2, [pc, #12]	; (80013cc <ssd1306_DrawPixel+0xc0>)
 80013c0:	54d1      	strb	r1, [r2, r3]
 80013c2:	e000      	b.n	80013c6 <ssd1306_DrawPixel+0xba>
        return;
 80013c4:	46c0      	nop			; (mov r8, r8)
    }
}
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b003      	add	sp, #12
 80013ca:	bd90      	pop	{r4, r7, pc}
 80013cc:	20000438 	.word	0x20000438

080013d0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b089      	sub	sp, #36	; 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	0004      	movs	r4, r0
 80013d8:	1d38      	adds	r0, r7, #4
 80013da:	6001      	str	r1, [r0, #0]
 80013dc:	6042      	str	r2, [r0, #4]
 80013de:	0019      	movs	r1, r3
 80013e0:	200f      	movs	r0, #15
 80013e2:	183b      	adds	r3, r7, r0
 80013e4:	1c22      	adds	r2, r4, #0
 80013e6:	701a      	strb	r2, [r3, #0]
 80013e8:	230e      	movs	r3, #14
 80013ea:	18fb      	adds	r3, r7, r3
 80013ec:	1c0a      	adds	r2, r1, #0
 80013ee:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80013f0:	183b      	adds	r3, r7, r0
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b1f      	cmp	r3, #31
 80013f6:	d903      	bls.n	8001400 <ssd1306_WriteChar+0x30>
 80013f8:	183b      	adds	r3, r7, r0
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b7e      	cmp	r3, #126	; 0x7e
 80013fe:	d901      	bls.n	8001404 <ssd1306_WriteChar+0x34>
        return 0;
 8001400:	2300      	movs	r3, #0
 8001402:	e078      	b.n	80014f6 <ssd1306_WriteChar+0x126>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001404:	4b3e      	ldr	r3, [pc, #248]	; (8001500 <ssd1306_WriteChar+0x130>)
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	001a      	movs	r2, r3
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	18d3      	adds	r3, r2, r3
 8001410:	2b80      	cmp	r3, #128	; 0x80
 8001412:	dc07      	bgt.n	8001424 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001414:	4b3a      	ldr	r3, [pc, #232]	; (8001500 <ssd1306_WriteChar+0x130>)
 8001416:	885b      	ldrh	r3, [r3, #2]
 8001418:	001a      	movs	r2, r3
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	785b      	ldrb	r3, [r3, #1]
 800141e:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001420:	2b40      	cmp	r3, #64	; 0x40
 8001422:	dd01      	ble.n	8001428 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8001424:	2300      	movs	r3, #0
 8001426:	e066      	b.n	80014f6 <ssd1306_WriteChar+0x126>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
 800142c:	e051      	b.n	80014d2 <ssd1306_WriteChar+0x102>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	230f      	movs	r3, #15
 8001434:	18fb      	adds	r3, r7, r3
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	3b20      	subs	r3, #32
 800143a:	1d39      	adds	r1, r7, #4
 800143c:	7849      	ldrb	r1, [r1, #1]
 800143e:	434b      	muls	r3, r1
 8001440:	0019      	movs	r1, r3
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	18cb      	adds	r3, r1, r3
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	18d3      	adds	r3, r2, r3
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800144e:	2300      	movs	r3, #0
 8001450:	61bb      	str	r3, [r7, #24]
 8001452:	e035      	b.n	80014c0 <ssd1306_WriteChar+0xf0>
            if((b << j) & 0x8000)  {
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	409a      	lsls	r2, r3
 800145a:	2380      	movs	r3, #128	; 0x80
 800145c:	021b      	lsls	r3, r3, #8
 800145e:	4013      	ands	r3, r2
 8001460:	d014      	beq.n	800148c <ssd1306_WriteChar+0xbc>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001462:	4b27      	ldr	r3, [pc, #156]	; (8001500 <ssd1306_WriteChar+0x130>)
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	b2da      	uxtb	r2, r3
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	18d3      	adds	r3, r2, r3
 800146e:	b2d8      	uxtb	r0, r3
 8001470:	4b23      	ldr	r3, [pc, #140]	; (8001500 <ssd1306_WriteChar+0x130>)
 8001472:	885b      	ldrh	r3, [r3, #2]
 8001474:	b2da      	uxtb	r2, r3
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	b2db      	uxtb	r3, r3
 800147a:	18d3      	adds	r3, r2, r3
 800147c:	b2d9      	uxtb	r1, r3
 800147e:	230e      	movs	r3, #14
 8001480:	18fb      	adds	r3, r7, r3
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	001a      	movs	r2, r3
 8001486:	f7ff ff41 	bl	800130c <ssd1306_DrawPixel>
 800148a:	e016      	b.n	80014ba <ssd1306_WriteChar+0xea>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800148c:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <ssd1306_WriteChar+0x130>)
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	18d3      	adds	r3, r2, r3
 8001498:	b2d8      	uxtb	r0, r3
 800149a:	4b19      	ldr	r3, [pc, #100]	; (8001500 <ssd1306_WriteChar+0x130>)
 800149c:	885b      	ldrh	r3, [r3, #2]
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	18d3      	adds	r3, r2, r3
 80014a6:	b2d9      	uxtb	r1, r3
 80014a8:	230e      	movs	r3, #14
 80014aa:	18fb      	adds	r3, r7, r3
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	425a      	negs	r2, r3
 80014b0:	4153      	adcs	r3, r2
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	001a      	movs	r2, r3
 80014b6:	f7ff ff29 	bl	800130c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	3301      	adds	r3, #1
 80014be:	61bb      	str	r3, [r7, #24]
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	001a      	movs	r2, r3
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d3c3      	bcc.n	8001454 <ssd1306_WriteChar+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	3301      	adds	r3, #1
 80014d0:	61fb      	str	r3, [r7, #28]
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	785b      	ldrb	r3, [r3, #1]
 80014d6:	001a      	movs	r2, r3
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	4293      	cmp	r3, r2
 80014dc:	d3a7      	bcc.n	800142e <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <ssd1306_WriteChar+0x130>)
 80014e0:	881a      	ldrh	r2, [r3, #0]
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	18d3      	adds	r3, r2, r3
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <ssd1306_WriteChar+0x130>)
 80014ee:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80014f0:	230f      	movs	r3, #15
 80014f2:	18fb      	adds	r3, r7, r3
 80014f4:	781b      	ldrb	r3, [r3, #0]
}
 80014f6:	0018      	movs	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	b009      	add	sp, #36	; 0x24
 80014fc:	bd90      	pop	{r4, r7, pc}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	20000838 	.word	0x20000838

08001504 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	1d38      	adds	r0, r7, #4
 800150e:	6001      	str	r1, [r0, #0]
 8001510:	6042      	str	r2, [r0, #4]
 8001512:	001a      	movs	r2, r3
 8001514:	1cfb      	adds	r3, r7, #3
 8001516:	701a      	strb	r2, [r3, #0]
    while (*str) {
 8001518:	e014      	b.n	8001544 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	7818      	ldrb	r0, [r3, #0]
 800151e:	1cfb      	adds	r3, r7, #3
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	1d3a      	adds	r2, r7, #4
 8001524:	6811      	ldr	r1, [r2, #0]
 8001526:	6852      	ldr	r2, [r2, #4]
 8001528:	f7ff ff52 	bl	80013d0 <ssd1306_WriteChar>
 800152c:	0003      	movs	r3, r0
 800152e:	001a      	movs	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d002      	beq.n	800153e <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	e008      	b.n	8001550 <ssd1306_WriteString+0x4c>
        }
        str++;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	3301      	adds	r3, #1
 8001542:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1e6      	bne.n	800151a <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	781b      	ldrb	r3, [r3, #0]
}
 8001550:	0018      	movs	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	b004      	add	sp, #16
 8001556:	bd80      	pop	{r7, pc}

08001558 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	0002      	movs	r2, r0
 8001560:	1dfb      	adds	r3, r7, #7
 8001562:	701a      	strb	r2, [r3, #0]
 8001564:	1dbb      	adds	r3, r7, #6
 8001566:	1c0a      	adds	r2, r1, #0
 8001568:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 800156a:	1dfb      	adds	r3, r7, #7
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	b29a      	uxth	r2, r3
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <ssd1306_SetCursor+0x30>)
 8001572:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001574:	1dbb      	adds	r3, r7, #6
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	b29a      	uxth	r2, r3
 800157a:	4b03      	ldr	r3, [pc, #12]	; (8001588 <ssd1306_SetCursor+0x30>)
 800157c:	805a      	strh	r2, [r3, #2]
}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	46bd      	mov	sp, r7
 8001582:	b002      	add	sp, #8
 8001584:	bd80      	pop	{r7, pc}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	20000838 	.word	0x20000838

0800158c <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800158c:	b5b0      	push	{r4, r5, r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
 8001592:	0005      	movs	r5, r0
 8001594:	000c      	movs	r4, r1
 8001596:	0010      	movs	r0, r2
 8001598:	0019      	movs	r1, r3
 800159a:	1dfb      	adds	r3, r7, #7
 800159c:	1c2a      	adds	r2, r5, #0
 800159e:	701a      	strb	r2, [r3, #0]
 80015a0:	1dbb      	adds	r3, r7, #6
 80015a2:	1c22      	adds	r2, r4, #0
 80015a4:	701a      	strb	r2, [r3, #0]
 80015a6:	1d7b      	adds	r3, r7, #5
 80015a8:	1c02      	adds	r2, r0, #0
 80015aa:	701a      	strb	r2, [r3, #0]
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	1c0a      	adds	r2, r1, #0
 80015b0:	701a      	strb	r2, [r3, #0]
    int32_t deltaX = abs(x2 - x1);
 80015b2:	1d7b      	adds	r3, r7, #5
 80015b4:	781a      	ldrb	r2, [r3, #0]
 80015b6:	1dfb      	adds	r3, r7, #7
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	17da      	asrs	r2, r3, #31
 80015be:	189b      	adds	r3, r3, r2
 80015c0:	4053      	eors	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	781a      	ldrb	r2, [r3, #0]
 80015c8:	1dbb      	adds	r3, r7, #6
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	17da      	asrs	r2, r3, #31
 80015d0:	189b      	adds	r3, r3, r2
 80015d2:	4053      	eors	r3, r2
 80015d4:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80015d6:	1dfa      	adds	r2, r7, #7
 80015d8:	1d7b      	adds	r3, r7, #5
 80015da:	7812      	ldrb	r2, [r2, #0]
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d201      	bcs.n	80015e6 <ssd1306_Line+0x5a>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e001      	b.n	80015ea <ssd1306_Line+0x5e>
 80015e6:	2301      	movs	r3, #1
 80015e8:	425b      	negs	r3, r3
 80015ea:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80015ec:	1dba      	adds	r2, r7, #6
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	7812      	ldrb	r2, [r2, #0]
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d201      	bcs.n	80015fc <ssd1306_Line+0x70>
 80015f8:	2301      	movs	r3, #1
 80015fa:	e001      	b.n	8001600 <ssd1306_Line+0x74>
 80015fc:	2301      	movs	r3, #1
 80015fe:	425b      	negs	r3, r3
 8001600:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 800160a:	2330      	movs	r3, #48	; 0x30
 800160c:	18fb      	adds	r3, r7, r3
 800160e:	781a      	ldrb	r2, [r3, #0]
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	7819      	ldrb	r1, [r3, #0]
 8001614:	1d7b      	adds	r3, r7, #5
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	0018      	movs	r0, r3
 800161a:	f7ff fe77 	bl	800130c <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 800161e:	e02f      	b.n	8001680 <ssd1306_Line+0xf4>
        ssd1306_DrawPixel(x1, y1, color);
 8001620:	2330      	movs	r3, #48	; 0x30
 8001622:	18fb      	adds	r3, r7, r3
 8001624:	781a      	ldrb	r2, [r3, #0]
 8001626:	1dbb      	adds	r3, r7, #6
 8001628:	7819      	ldrb	r1, [r3, #0]
 800162a:	1dfb      	adds	r3, r7, #7
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	0018      	movs	r0, r3
 8001630:	f7ff fe6c 	bl	800130c <ssd1306_DrawPixel>
        error2 = error * 2;
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	425b      	negs	r3, r3
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	429a      	cmp	r2, r3
 8001642:	dd0a      	ble.n	800165a <ssd1306_Line+0xce>
            error -= deltaY;
 8001644:	69fa      	ldr	r2, [r7, #28]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	b2d9      	uxtb	r1, r3
 8001650:	1dfb      	adds	r3, r7, #7
 8001652:	1dfa      	adds	r2, r7, #7
 8001654:	7812      	ldrb	r2, [r2, #0]
 8001656:	188a      	adds	r2, r1, r2
 8001658:	701a      	strb	r2, [r3, #0]
 800165a:	1dbb      	adds	r3, r7, #6
 800165c:	1dba      	adds	r2, r7, #6
 800165e:	7812      	ldrb	r2, [r2, #0]
 8001660:	701a      	strb	r2, [r3, #0]
        }
        
        if(error2 < deltaX) {
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	429a      	cmp	r2, r3
 8001668:	da0a      	bge.n	8001680 <ssd1306_Line+0xf4>
            error += deltaX;
 800166a:	69fa      	ldr	r2, [r7, #28]
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	18d3      	adds	r3, r2, r3
 8001670:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	b2d9      	uxtb	r1, r3
 8001676:	1dbb      	adds	r3, r7, #6
 8001678:	1dba      	adds	r2, r7, #6
 800167a:	7812      	ldrb	r2, [r2, #0]
 800167c:	188a      	adds	r2, r1, r2
 800167e:	701a      	strb	r2, [r3, #0]
    while((x1 != x2) || (y1 != y2)) {
 8001680:	1dfa      	adds	r2, r7, #7
 8001682:	1d7b      	adds	r3, r7, #5
 8001684:	7812      	ldrb	r2, [r2, #0]
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	429a      	cmp	r2, r3
 800168a:	d1c9      	bne.n	8001620 <ssd1306_Line+0x94>
 800168c:	1dba      	adds	r2, r7, #6
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	7812      	ldrb	r2, [r2, #0]
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d1c3      	bne.n	8001620 <ssd1306_Line+0x94>
        }
    }
    return;
 8001698:	46c0      	nop			; (mov r8, r8)
}
 800169a:	46bd      	mov	sp, r7
 800169c:	b008      	add	sp, #32
 800169e:	bdb0      	pop	{r4, r5, r7, pc}

080016a0 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80016a0:	b5b0      	push	{r4, r5, r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af02      	add	r7, sp, #8
 80016a6:	0005      	movs	r5, r0
 80016a8:	000c      	movs	r4, r1
 80016aa:	0010      	movs	r0, r2
 80016ac:	0019      	movs	r1, r3
 80016ae:	1dfb      	adds	r3, r7, #7
 80016b0:	1c2a      	adds	r2, r5, #0
 80016b2:	701a      	strb	r2, [r3, #0]
 80016b4:	1dbb      	adds	r3, r7, #6
 80016b6:	1c22      	adds	r2, r4, #0
 80016b8:	701a      	strb	r2, [r3, #0]
 80016ba:	1d7b      	adds	r3, r7, #5
 80016bc:	1c02      	adds	r2, r0, #0
 80016be:	701a      	strb	r2, [r3, #0]
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	1c0a      	adds	r2, r1, #0
 80016c4:	701a      	strb	r2, [r3, #0]
    ssd1306_Line(x1,y1,x2,y1,color);
 80016c6:	1dbb      	adds	r3, r7, #6
 80016c8:	781c      	ldrb	r4, [r3, #0]
 80016ca:	1d7b      	adds	r3, r7, #5
 80016cc:	781a      	ldrb	r2, [r3, #0]
 80016ce:	1dbb      	adds	r3, r7, #6
 80016d0:	7819      	ldrb	r1, [r3, #0]
 80016d2:	1dfb      	adds	r3, r7, #7
 80016d4:	7818      	ldrb	r0, [r3, #0]
 80016d6:	2518      	movs	r5, #24
 80016d8:	197b      	adds	r3, r7, r5
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	0023      	movs	r3, r4
 80016e0:	f7ff ff54 	bl	800158c <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	781c      	ldrb	r4, [r3, #0]
 80016e8:	1d7b      	adds	r3, r7, #5
 80016ea:	781a      	ldrb	r2, [r3, #0]
 80016ec:	1dbb      	adds	r3, r7, #6
 80016ee:	7819      	ldrb	r1, [r3, #0]
 80016f0:	1d7b      	adds	r3, r7, #5
 80016f2:	7818      	ldrb	r0, [r3, #0]
 80016f4:	197b      	adds	r3, r7, r5
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	0023      	movs	r3, r4
 80016fc:	f7ff ff46 	bl	800158c <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	781c      	ldrb	r4, [r3, #0]
 8001704:	1dfb      	adds	r3, r7, #7
 8001706:	781a      	ldrb	r2, [r3, #0]
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	7819      	ldrb	r1, [r3, #0]
 800170c:	1d7b      	adds	r3, r7, #5
 800170e:	7818      	ldrb	r0, [r3, #0]
 8001710:	197b      	adds	r3, r7, r5
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	0023      	movs	r3, r4
 8001718:	f7ff ff38 	bl	800158c <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 800171c:	1dbb      	adds	r3, r7, #6
 800171e:	781c      	ldrb	r4, [r3, #0]
 8001720:	1dfb      	adds	r3, r7, #7
 8001722:	781a      	ldrb	r2, [r3, #0]
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	7819      	ldrb	r1, [r3, #0]
 8001728:	1dfb      	adds	r3, r7, #7
 800172a:	7818      	ldrb	r0, [r3, #0]
 800172c:	197b      	adds	r3, r7, r5
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	0023      	movs	r3, r4
 8001734:	f7ff ff2a 	bl	800158c <ssd1306_Line>

    return;
 8001738:	46c0      	nop			; (mov r8, r8)
}
 800173a:	46bd      	mov	sp, r7
 800173c:	b002      	add	sp, #8
 800173e:	bdb0      	pop	{r4, r5, r7, pc}

08001740 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001740:	b5b0      	push	{r4, r5, r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	0005      	movs	r5, r0
 8001748:	000c      	movs	r4, r1
 800174a:	0010      	movs	r0, r2
 800174c:	0019      	movs	r1, r3
 800174e:	1dfb      	adds	r3, r7, #7
 8001750:	1c2a      	adds	r2, r5, #0
 8001752:	701a      	strb	r2, [r3, #0]
 8001754:	1dbb      	adds	r3, r7, #6
 8001756:	1c22      	adds	r2, r4, #0
 8001758:	701a      	strb	r2, [r3, #0]
 800175a:	1d7b      	adds	r3, r7, #5
 800175c:	1c02      	adds	r2, r0, #0
 800175e:	701a      	strb	r2, [r3, #0]
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	1c0a      	adds	r2, r1, #0
 8001764:	701a      	strb	r2, [r3, #0]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8001766:	230d      	movs	r3, #13
 8001768:	18fa      	adds	r2, r7, r3
 800176a:	1dfb      	adds	r3, r7, #7
 800176c:	1d79      	adds	r1, r7, #5
 800176e:	780c      	ldrb	r4, [r1, #0]
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	b2d8      	uxtb	r0, r3
 8001774:	b2e1      	uxtb	r1, r4
 8001776:	4288      	cmp	r0, r1
 8001778:	d900      	bls.n	800177c <ssd1306_FillRectangle+0x3c>
 800177a:	1c23      	adds	r3, r4, #0
 800177c:	7013      	strb	r3, [r2, #0]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 800177e:	230c      	movs	r3, #12
 8001780:	18fa      	adds	r2, r7, r3
 8001782:	1d7b      	adds	r3, r7, #5
 8001784:	1df9      	adds	r1, r7, #7
 8001786:	780c      	ldrb	r4, [r1, #0]
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	b2d8      	uxtb	r0, r3
 800178c:	b2e1      	uxtb	r1, r4
 800178e:	4288      	cmp	r0, r1
 8001790:	d200      	bcs.n	8001794 <ssd1306_FillRectangle+0x54>
 8001792:	1c23      	adds	r3, r4, #0
 8001794:	7013      	strb	r3, [r2, #0]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8001796:	230b      	movs	r3, #11
 8001798:	18fa      	adds	r2, r7, r3
 800179a:	1dbb      	adds	r3, r7, #6
 800179c:	1d39      	adds	r1, r7, #4
 800179e:	780c      	ldrb	r4, [r1, #0]
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	b2d8      	uxtb	r0, r3
 80017a4:	b2e1      	uxtb	r1, r4
 80017a6:	4288      	cmp	r0, r1
 80017a8:	d900      	bls.n	80017ac <ssd1306_FillRectangle+0x6c>
 80017aa:	1c23      	adds	r3, r4, #0
 80017ac:	7013      	strb	r3, [r2, #0]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 80017ae:	230a      	movs	r3, #10
 80017b0:	18fa      	adds	r2, r7, r3
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	1db9      	adds	r1, r7, #6
 80017b6:	780c      	ldrb	r4, [r1, #0]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	b2d8      	uxtb	r0, r3
 80017bc:	b2e1      	uxtb	r1, r4
 80017be:	4288      	cmp	r0, r1
 80017c0:	d200      	bcs.n	80017c4 <ssd1306_FillRectangle+0x84>
 80017c2:	1c23      	adds	r3, r4, #0
 80017c4:	7013      	strb	r3, [r2, #0]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80017c6:	230f      	movs	r3, #15
 80017c8:	18fb      	adds	r3, r7, r3
 80017ca:	220b      	movs	r2, #11
 80017cc:	18ba      	adds	r2, r7, r2
 80017ce:	7812      	ldrb	r2, [r2, #0]
 80017d0:	701a      	strb	r2, [r3, #0]
 80017d2:	e02b      	b.n	800182c <ssd1306_FillRectangle+0xec>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80017d4:	230e      	movs	r3, #14
 80017d6:	18fb      	adds	r3, r7, r3
 80017d8:	220d      	movs	r2, #13
 80017da:	18ba      	adds	r2, r7, r2
 80017dc:	7812      	ldrb	r2, [r2, #0]
 80017de:	701a      	strb	r2, [r3, #0]
 80017e0:	e011      	b.n	8001806 <ssd1306_FillRectangle+0xc6>
            ssd1306_DrawPixel(x, y, color);
 80017e2:	2320      	movs	r3, #32
 80017e4:	18fb      	adds	r3, r7, r3
 80017e6:	781a      	ldrb	r2, [r3, #0]
 80017e8:	230f      	movs	r3, #15
 80017ea:	18fb      	adds	r3, r7, r3
 80017ec:	7819      	ldrb	r1, [r3, #0]
 80017ee:	240e      	movs	r4, #14
 80017f0:	193b      	adds	r3, r7, r4
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	0018      	movs	r0, r3
 80017f6:	f7ff fd89 	bl	800130c <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80017fa:	0021      	movs	r1, r4
 80017fc:	187b      	adds	r3, r7, r1
 80017fe:	781a      	ldrb	r2, [r3, #0]
 8001800:	187b      	adds	r3, r7, r1
 8001802:	3201      	adds	r2, #1
 8001804:	701a      	strb	r2, [r3, #0]
 8001806:	210e      	movs	r1, #14
 8001808:	187a      	adds	r2, r7, r1
 800180a:	230c      	movs	r3, #12
 800180c:	18fb      	adds	r3, r7, r3
 800180e:	7812      	ldrb	r2, [r2, #0]
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d804      	bhi.n	8001820 <ssd1306_FillRectangle+0xe0>
 8001816:	187b      	adds	r3, r7, r1
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	b25b      	sxtb	r3, r3
 800181c:	2b00      	cmp	r3, #0
 800181e:	dae0      	bge.n	80017e2 <ssd1306_FillRectangle+0xa2>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001820:	210f      	movs	r1, #15
 8001822:	187b      	adds	r3, r7, r1
 8001824:	781a      	ldrb	r2, [r3, #0]
 8001826:	187b      	adds	r3, r7, r1
 8001828:	3201      	adds	r2, #1
 800182a:	701a      	strb	r2, [r3, #0]
 800182c:	210f      	movs	r1, #15
 800182e:	187a      	adds	r2, r7, r1
 8001830:	230a      	movs	r3, #10
 8001832:	18fb      	adds	r3, r7, r3
 8001834:	7812      	ldrb	r2, [r2, #0]
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d804      	bhi.n	8001846 <ssd1306_FillRectangle+0x106>
 800183c:	187b      	adds	r3, r7, r1
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b3f      	cmp	r3, #63	; 0x3f
 8001842:	d9c7      	bls.n	80017d4 <ssd1306_FillRectangle+0x94>
        }
    }
    return;
 8001844:	46c0      	nop			; (mov r8, r8)
 8001846:	46c0      	nop			; (mov r8, r8)
}
 8001848:	46bd      	mov	sp, r7
 800184a:	b004      	add	sp, #16
 800184c:	bdb0      	pop	{r4, r5, r7, pc}

0800184e <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800184e:	b580      	push	{r7, lr}
 8001850:	b084      	sub	sp, #16
 8001852:	af00      	add	r7, sp, #0
 8001854:	0002      	movs	r2, r0
 8001856:	1dfb      	adds	r3, r7, #7
 8001858:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 800185a:	210f      	movs	r1, #15
 800185c:	187b      	adds	r3, r7, r1
 800185e:	2281      	movs	r2, #129	; 0x81
 8001860:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001862:	187b      	adds	r3, r7, r1
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	0018      	movs	r0, r3
 8001868:	f7ff fc4c 	bl	8001104 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800186c:	1dfb      	adds	r3, r7, #7
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	0018      	movs	r0, r3
 8001872:	f7ff fc47 	bl	8001104 <ssd1306_WriteCommand>
}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	46bd      	mov	sp, r7
 800187a:	b004      	add	sp, #16
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	0002      	movs	r2, r0
 8001888:	1dfb      	adds	r3, r7, #7
 800188a:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 800188c:	1dfb      	adds	r3, r7, #7
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d007      	beq.n	80018a4 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8001894:	230f      	movs	r3, #15
 8001896:	18fb      	adds	r3, r7, r3
 8001898:	22af      	movs	r2, #175	; 0xaf
 800189a:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 800189c:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <ssd1306_SetDisplayOn+0x48>)
 800189e:	2201      	movs	r2, #1
 80018a0:	715a      	strb	r2, [r3, #5]
 80018a2:	e006      	b.n	80018b2 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 80018a4:	230f      	movs	r3, #15
 80018a6:	18fb      	adds	r3, r7, r3
 80018a8:	22ae      	movs	r2, #174	; 0xae
 80018aa:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <ssd1306_SetDisplayOn+0x48>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80018b2:	230f      	movs	r3, #15
 80018b4:	18fb      	adds	r3, r7, r3
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	0018      	movs	r0, r3
 80018ba:	f7ff fc23 	bl	8001104 <ssd1306_WriteCommand>
}
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	46bd      	mov	sp, r7
 80018c2:	b004      	add	sp, #16
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	20000838 	.word	0x20000838

080018cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d2:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <HAL_MspInit+0x44>)
 80018d4:	699a      	ldr	r2, [r3, #24]
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <HAL_MspInit+0x44>)
 80018d8:	2101      	movs	r1, #1
 80018da:	430a      	orrs	r2, r1
 80018dc:	619a      	str	r2, [r3, #24]
 80018de:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <HAL_MspInit+0x44>)
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	2201      	movs	r2, #1
 80018e4:	4013      	ands	r3, r2
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <HAL_MspInit+0x44>)
 80018ec:	69da      	ldr	r2, [r3, #28]
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <HAL_MspInit+0x44>)
 80018f0:	2180      	movs	r1, #128	; 0x80
 80018f2:	0549      	lsls	r1, r1, #21
 80018f4:	430a      	orrs	r2, r1
 80018f6:	61da      	str	r2, [r3, #28]
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <HAL_MspInit+0x44>)
 80018fa:	69da      	ldr	r2, [r3, #28]
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	055b      	lsls	r3, r3, #21
 8001900:	4013      	ands	r3, r2
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	46bd      	mov	sp, r7
 800190a:	b002      	add	sp, #8
 800190c:	bd80      	pop	{r7, pc}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	40021000 	.word	0x40021000

08001914 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b08b      	sub	sp, #44	; 0x2c
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	2414      	movs	r4, #20
 800191e:	193b      	adds	r3, r7, r4
 8001920:	0018      	movs	r0, r3
 8001922:	2314      	movs	r3, #20
 8001924:	001a      	movs	r2, r3
 8001926:	2100      	movs	r1, #0
 8001928:	f003 fa5c 	bl	8004de4 <memset>
  if(hadc->Instance==ADC1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a18      	ldr	r2, [pc, #96]	; (8001994 <HAL_ADC_MspInit+0x80>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d12a      	bne.n	800198c <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001936:	4b18      	ldr	r3, [pc, #96]	; (8001998 <HAL_ADC_MspInit+0x84>)
 8001938:	699a      	ldr	r2, [r3, #24]
 800193a:	4b17      	ldr	r3, [pc, #92]	; (8001998 <HAL_ADC_MspInit+0x84>)
 800193c:	2180      	movs	r1, #128	; 0x80
 800193e:	0089      	lsls	r1, r1, #2
 8001940:	430a      	orrs	r2, r1
 8001942:	619a      	str	r2, [r3, #24]
 8001944:	4b14      	ldr	r3, [pc, #80]	; (8001998 <HAL_ADC_MspInit+0x84>)
 8001946:	699a      	ldr	r2, [r3, #24]
 8001948:	2380      	movs	r3, #128	; 0x80
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4013      	ands	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <HAL_ADC_MspInit+0x84>)
 8001954:	695a      	ldr	r2, [r3, #20]
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <HAL_ADC_MspInit+0x84>)
 8001958:	2180      	movs	r1, #128	; 0x80
 800195a:	02c9      	lsls	r1, r1, #11
 800195c:	430a      	orrs	r2, r1
 800195e:	615a      	str	r2, [r3, #20]
 8001960:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <HAL_ADC_MspInit+0x84>)
 8001962:	695a      	ldr	r2, [r3, #20]
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	02db      	lsls	r3, r3, #11
 8001968:	4013      	ands	r3, r2
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = INPUT_FLUID_Pin;
 800196e:	193b      	adds	r3, r7, r4
 8001970:	2202      	movs	r2, #2
 8001972:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001974:	193b      	adds	r3, r7, r4
 8001976:	2203      	movs	r2, #3
 8001978:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	193b      	adds	r3, r7, r4
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(INPUT_FLUID_GPIO_Port, &GPIO_InitStruct);
 8001980:	193b      	adds	r3, r7, r4
 8001982:	4a06      	ldr	r2, [pc, #24]	; (800199c <HAL_ADC_MspInit+0x88>)
 8001984:	0019      	movs	r1, r3
 8001986:	0010      	movs	r0, r2
 8001988:	f001 f95c 	bl	8002c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800198c:	46c0      	nop			; (mov r8, r8)
 800198e:	46bd      	mov	sp, r7
 8001990:	b00b      	add	sp, #44	; 0x2c
 8001992:	bd90      	pop	{r4, r7, pc}
 8001994:	40012400 	.word	0x40012400
 8001998:	40021000 	.word	0x40021000
 800199c:	48000400 	.word	0x48000400

080019a0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80019a0:	b590      	push	{r4, r7, lr}
 80019a2:	b089      	sub	sp, #36	; 0x24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	240c      	movs	r4, #12
 80019aa:	193b      	adds	r3, r7, r4
 80019ac:	0018      	movs	r0, r3
 80019ae:	2314      	movs	r3, #20
 80019b0:	001a      	movs	r2, r3
 80019b2:	2100      	movs	r1, #0
 80019b4:	f003 fa16 	bl	8004de4 <memset>
  if(hrtc->Instance==RTC)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a10      	ldr	r2, [pc, #64]	; (8001a00 <HAL_RTC_MspInit+0x60>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d11a      	bne.n	80019f8 <HAL_RTC_MspInit+0x58>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <HAL_RTC_MspInit+0x64>)
 80019c4:	6a1a      	ldr	r2, [r3, #32]
 80019c6:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <HAL_RTC_MspInit+0x64>)
 80019c8:	2180      	movs	r1, #128	; 0x80
 80019ca:	0209      	lsls	r1, r1, #8
 80019cc:	430a      	orrs	r2, r1
 80019ce:	621a      	str	r2, [r3, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <HAL_RTC_MspInit+0x64>)
 80019d2:	695a      	ldr	r2, [r3, #20]
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_RTC_MspInit+0x64>)
 80019d6:	2180      	movs	r1, #128	; 0x80
 80019d8:	0309      	lsls	r1, r1, #12
 80019da:	430a      	orrs	r2, r1
 80019dc:	615a      	str	r2, [r3, #20]
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <HAL_RTC_MspInit+0x64>)
 80019e0:	695a      	ldr	r2, [r3, #20]
 80019e2:	2380      	movs	r3, #128	; 0x80
 80019e4:	031b      	lsls	r3, r3, #12
 80019e6:	4013      	ands	r3, r2
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration
    PC13     ------> RTC_OUT_CALIB
    */
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ec:	193b      	adds	r3, r7, r4
 80019ee:	4a06      	ldr	r2, [pc, #24]	; (8001a08 <HAL_RTC_MspInit+0x68>)
 80019f0:	0019      	movs	r1, r3
 80019f2:	0010      	movs	r0, r2
 80019f4:	f001 f926 	bl	8002c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80019f8:	46c0      	nop			; (mov r8, r8)
 80019fa:	46bd      	mov	sp, r7
 80019fc:	b009      	add	sp, #36	; 0x24
 80019fe:	bd90      	pop	{r4, r7, pc}
 8001a00:	40002800 	.word	0x40002800
 8001a04:	40021000 	.word	0x40021000
 8001a08:	48000800 	.word	0x48000800

08001a0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b08b      	sub	sp, #44	; 0x2c
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	2414      	movs	r4, #20
 8001a16:	193b      	adds	r3, r7, r4
 8001a18:	0018      	movs	r0, r3
 8001a1a:	2314      	movs	r3, #20
 8001a1c:	001a      	movs	r2, r3
 8001a1e:	2100      	movs	r1, #0
 8001a20:	f003 f9e0 	bl	8004de4 <memset>
  if(hspi->Instance==SPI1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a1c      	ldr	r2, [pc, #112]	; (8001a9c <HAL_SPI_MspInit+0x90>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d132      	bne.n	8001a94 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a2e:	4b1c      	ldr	r3, [pc, #112]	; (8001aa0 <HAL_SPI_MspInit+0x94>)
 8001a30:	699a      	ldr	r2, [r3, #24]
 8001a32:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <HAL_SPI_MspInit+0x94>)
 8001a34:	2180      	movs	r1, #128	; 0x80
 8001a36:	0149      	lsls	r1, r1, #5
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	619a      	str	r2, [r3, #24]
 8001a3c:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <HAL_SPI_MspInit+0x94>)
 8001a3e:	699a      	ldr	r2, [r3, #24]
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	015b      	lsls	r3, r3, #5
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
 8001a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <HAL_SPI_MspInit+0x94>)
 8001a4c:	695a      	ldr	r2, [r3, #20]
 8001a4e:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <HAL_SPI_MspInit+0x94>)
 8001a50:	2180      	movs	r1, #128	; 0x80
 8001a52:	0289      	lsls	r1, r1, #10
 8001a54:	430a      	orrs	r2, r1
 8001a56:	615a      	str	r2, [r3, #20]
 8001a58:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <HAL_SPI_MspInit+0x94>)
 8001a5a:	695a      	ldr	r2, [r3, #20]
 8001a5c:	2380      	movs	r3, #128	; 0x80
 8001a5e:	029b      	lsls	r3, r3, #10
 8001a60:	4013      	ands	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001a66:	0021      	movs	r1, r4
 8001a68:	187b      	adds	r3, r7, r1
 8001a6a:	22a0      	movs	r2, #160	; 0xa0
 8001a6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6e:	187b      	adds	r3, r7, r1
 8001a70:	2202      	movs	r2, #2
 8001a72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	187b      	adds	r3, r7, r1
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a7a:	187b      	adds	r3, r7, r1
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001a80:	187b      	adds	r3, r7, r1
 8001a82:	2200      	movs	r2, #0
 8001a84:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a86:	187a      	adds	r2, r7, r1
 8001a88:	2390      	movs	r3, #144	; 0x90
 8001a8a:	05db      	lsls	r3, r3, #23
 8001a8c:	0011      	movs	r1, r2
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f001 f8d8 	bl	8002c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a94:	46c0      	nop			; (mov r8, r8)
 8001a96:	46bd      	mov	sp, r7
 8001a98:	b00b      	add	sp, #44	; 0x2c
 8001a9a:	bd90      	pop	{r4, r7, pc}
 8001a9c:	40013000 	.word	0x40013000
 8001aa0:	40021000 	.word	0x40021000

08001aa4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a09      	ldr	r2, [pc, #36]	; (8001ad8 <HAL_TIM_Base_MspInit+0x34>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d10b      	bne.n	8001ace <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <HAL_TIM_Base_MspInit+0x38>)
 8001ab8:	69da      	ldr	r2, [r3, #28]
 8001aba:	4b08      	ldr	r3, [pc, #32]	; (8001adc <HAL_TIM_Base_MspInit+0x38>)
 8001abc:	2120      	movs	r1, #32
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	61da      	str	r2, [r3, #28]
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_TIM_Base_MspInit+0x38>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	2220      	movs	r2, #32
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	b004      	add	sp, #16
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	40001400 	.word	0x40001400
 8001adc:	40021000 	.word	0x40021000

08001ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <NMI_Handler+0x4>

08001ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aea:	e7fe      	b.n	8001aea <HardFault_Handler+0x4>

08001aec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001af0:	46c0      	nop			; (mov r8, r8)
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b04:	f000 f99e 	bl	8001e44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b08:	46c0      	nop			; (mov r8, r8)
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f001 fa20 	bl	8002f60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn); //FOR BUTTON DEBOUNCE
 8001b20:	2007      	movs	r0, #7
 8001b22:	f001 f872 	bl	8002c0a <HAL_NVIC_DisableIRQ>





	for(int i=0; i<350000; i++){};	//BUTTON DEBOUNCE DELAY
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	e002      	b.n	8001b32 <EXTI4_15_IRQHandler+0x22>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4a1c      	ldr	r2, [pc, #112]	; (8001ba8 <EXTI4_15_IRQHandler+0x98>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	ddf8      	ble.n	8001b2c <EXTI4_15_IRQHandler+0x1c>

	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);	//DEBOUNCE DISABLED !!! DELETE LATER!!!
 8001b3a:	2007      	movs	r0, #7
 8001b3c:	f001 f855 	bl	8002bea <HAL_NVIC_EnableIRQ>
	ssd1306_SetDisplayOn(1);			//DISPLAY SET ON
 8001b40:	2001      	movs	r0, #1
 8001b42:	f7ff fe9d 	bl	8001880 <ssd1306_SetDisplayOn>
	for(int i=0; i<30000; i++){};
 8001b46:	2300      	movs	r3, #0
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	e002      	b.n	8001b52 <EXTI4_15_IRQHandler+0x42>
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	4a15      	ldr	r2, [pc, #84]	; (8001bac <EXTI4_15_IRQHandler+0x9c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	ddf8      	ble.n	8001b4c <EXTI4_15_IRQHandler+0x3c>
	for(int i=0; i<10000; i++){};
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	607b      	str	r3, [r7, #4]
 8001b5e:	e002      	b.n	8001b66 <EXTI4_15_IRQHandler+0x56>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3301      	adds	r3, #1
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a11      	ldr	r2, [pc, #68]	; (8001bb0 <EXTI4_15_IRQHandler+0xa0>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	ddf8      	ble.n	8001b60 <EXTI4_15_IRQHandler+0x50>

	HAL_TIM_Base_Stop_IT(&htim7);
 8001b6e:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <EXTI4_15_IRQHandler+0xa4>)
 8001b70:	0018      	movs	r0, r3
 8001b72:	f002 ff21 	bl	80049b8 <HAL_TIM_Base_Stop_IT>
	htim7.Instance->CNT=0;				//NULLIFY THE COUNTER
 8001b76:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <EXTI4_15_IRQHandler+0xa4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	625a      	str	r2, [r3, #36]	; 0x24
	for(int i=0; i<10000; i++){};
 8001b7e:	2300      	movs	r3, #0
 8001b80:	603b      	str	r3, [r7, #0]
 8001b82:	e002      	b.n	8001b8a <EXTI4_15_IRQHandler+0x7a>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	3301      	adds	r3, #1
 8001b88:	603b      	str	r3, [r7, #0]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	4a08      	ldr	r2, [pc, #32]	; (8001bb0 <EXTI4_15_IRQHandler+0xa0>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	ddf8      	ble.n	8001b84 <EXTI4_15_IRQHandler+0x74>
	HAL_TIM_Base_Start_IT(&htim7);		//STARTING 5 SECS CONTDOWN
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <EXTI4_15_IRQHandler+0xa4>)
 8001b94:	0018      	movs	r0, r3
 8001b96:	f002 fec3 	bl	8004920 <HAL_TIM_Base_Start_IT>

	HAL_ResumeTick();					//WAKE THE CPU UP
 8001b9a:	f000 f9a1 	bl	8001ee0 <HAL_ResumeTick>

	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);	//DEBOUNCE DISABLED
*/

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	b004      	add	sp, #16
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	0005572f 	.word	0x0005572f
 8001bac:	0000752f 	.word	0x0000752f
 8001bb0:	0000270f 	.word	0x0000270f
 8001bb4:	200003f0 	.word	0x200003f0

08001bb8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001bbe:	4b33      	ldr	r3, [pc, #204]	; (8001c8c <ADC1_IRQHandler+0xd4>)
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f000 fc3b 	bl	800243c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  	  HAL_ADC_PollForConversion(&hadc, 50);
 8001bc6:	4b31      	ldr	r3, [pc, #196]	; (8001c8c <ADC1_IRQHandler+0xd4>)
 8001bc8:	2132      	movs	r1, #50	; 0x32
 8001bca:	0018      	movs	r0, r3
 8001bcc:	f000 fad6 	bl	800217c <HAL_ADC_PollForConversion>
  	  adcConverted=HAL_ADC_GetValue(&hadc);
 8001bd0:	4b2e      	ldr	r3, [pc, #184]	; (8001c8c <ADC1_IRQHandler+0xd4>)
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	f000 fc26 	bl	8002424 <HAL_ADC_GetValue>
 8001bd8:	0002      	movs	r2, r0
 8001bda:	4b2d      	ldr	r3, [pc, #180]	; (8001c90 <ADC1_IRQHandler+0xd8>)
 8001bdc:	601a      	str	r2, [r3, #0]
  	  HAL_ADC_Stop_IT(&hadc);
 8001bde:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <ADC1_IRQHandler+0xd4>)
 8001be0:	0018      	movs	r0, r3
 8001be2:	f000 fbd5 	bl	8002390 <HAL_ADC_Stop_IT>

	if(adcConverted>23){
 8001be6:	4b2a      	ldr	r3, [pc, #168]	; (8001c90 <ADC1_IRQHandler+0xd8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2b17      	cmp	r3, #23
 8001bec:	d831      	bhi.n	8001c52 <ADC1_IRQHandler+0x9a>

	}

  	  else if (adcConverted<3){			//BUTTON 3	(BACK)
 8001bee:	4b28      	ldr	r3, [pc, #160]	; (8001c90 <ADC1_IRQHandler+0xd8>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d80a      	bhi.n	8001c0c <ADC1_IRQHandler+0x54>
  		htim7.Instance->CNT=0;
 8001bf6:	4b27      	ldr	r3, [pc, #156]	; (8001c94 <ADC1_IRQHandler+0xdc>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24
  		htim7.Instance->ARR=25000;
 8001bfe:	4b25      	ldr	r3, [pc, #148]	; (8001c94 <ADC1_IRQHandler+0xdc>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a25      	ldr	r2, [pc, #148]	; (8001c98 <ADC1_IRQHandler+0xe0>)
 8001c04:	62da      	str	r2, [r3, #44]	; 0x2c
  		unselectPage();
 8001c06:	f7fe fc09 	bl	800041c <unselectPage>
 8001c0a:	e022      	b.n	8001c52 <ADC1_IRQHandler+0x9a>
  	  }
  	  else if (adcConverted<12){		//BUTTON 2	(RIGHT/DOWN)
 8001c0c:	4b20      	ldr	r3, [pc, #128]	; (8001c90 <ADC1_IRQHandler+0xd8>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b0b      	cmp	r3, #11
 8001c12:	d80f      	bhi.n	8001c34 <ADC1_IRQHandler+0x7c>
  		nextOrPrev=NEXT;
 8001c14:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <ADC1_IRQHandler+0xe4>)
 8001c16:	2202      	movs	r2, #2
 8001c18:	601a      	str	r2, [r3, #0]
  		nextPage();
 8001c1a:	f7fe faff 	bl	800021c <nextPage>
  		moveCursor();
 8001c1e:	f7fe fb93 	bl	8000348 <moveCursor>

  		htim7.Instance->CNT=0;
 8001c22:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <ADC1_IRQHandler+0xdc>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2200      	movs	r2, #0
 8001c28:	625a      	str	r2, [r3, #36]	; 0x24
  		htim7.Instance->ARR=25000;
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <ADC1_IRQHandler+0xdc>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a1a      	ldr	r2, [pc, #104]	; (8001c98 <ADC1_IRQHandler+0xe0>)
 8001c30:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c32:	e00e      	b.n	8001c52 <ADC1_IRQHandler+0x9a>
  	  }
  	  else {							//BUTTON 1	(LEFT/UP)[if (adcConverted<24||adcConverted>11)]
  		nextOrPrev=PREV;
 8001c34:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <ADC1_IRQHandler+0xe4>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	601a      	str	r2, [r3, #0]
  		moveCursor();
 8001c3a:	f7fe fb85 	bl	8000348 <moveCursor>
  		nextPage();
 8001c3e:	f7fe faed 	bl	800021c <nextPage>

  		htim7.Instance->CNT=0;
 8001c42:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <ADC1_IRQHandler+0xdc>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2200      	movs	r2, #0
 8001c48:	625a      	str	r2, [r3, #36]	; 0x24
  		htim7.Instance->ARR=25000;
 8001c4a:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <ADC1_IRQHandler+0xdc>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a12      	ldr	r2, [pc, #72]	; (8001c98 <ADC1_IRQHandler+0xe0>)
 8001c50:	62da      	str	r2, [r3, #44]	; 0x2c
  	  }
	for(int i=0; i<30000; i++){};
 8001c52:	2300      	movs	r3, #0
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	e002      	b.n	8001c5e <ADC1_IRQHandler+0xa6>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a0f      	ldr	r2, [pc, #60]	; (8001ca0 <ADC1_IRQHandler+0xe8>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	ddf8      	ble.n	8001c58 <ADC1_IRQHandler+0xa0>


  	  HAL_ADC_Start_IT(&hadc);
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <ADC1_IRQHandler+0xd4>)
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f000 fb1f 	bl	80022ac <HAL_ADC_Start_IT>

 	 checkTime();
 8001c6e:	f7fe fd0f 	bl	8000690 <checkTime>
 	 ssd1306_SetCursor(2, 52);
 8001c72:	2134      	movs	r1, #52	; 0x34
 8001c74:	2002      	movs	r0, #2
 8001c76:	f7ff fc6f 	bl	8001558 <ssd1306_SetCursor>
 	 displayTime();
 8001c7a:	f7fe fc5d 	bl	8000538 <displayTime>
 	 ssd1306_UpdateScreen();
 8001c7e:	f7ff fb17 	bl	80012b0 <ssd1306_UpdateScreen>
  /* USER CODE END ADC1_IRQn 1 */
}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	46bd      	mov	sp, r7
 8001c86:	b002      	add	sp, #8
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	2000032c 	.word	0x2000032c
 8001c90:	200002cc 	.word	0x200002cc
 8001c94:	200003f0 	.word	0x200003f0
 8001c98:	000061a8 	.word	0x000061a8
 8001c9c:	20000004 	.word	0x20000004
 8001ca0:	0000752f 	.word	0x0000752f

08001ca4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001caa:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <TIM7_IRQHandler+0x98>)
 8001cac:	0018      	movs	r0, r3
 8001cae:	f002 feb1 	bl	8004a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
		ssd1306_SetDisplayOn(0);
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	f7ff fde4 	bl	8001880 <ssd1306_SetDisplayOn>
		for(int i=0; i<30000; i++){};
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	e002      	b.n	8001cc4 <TIM7_IRQHandler+0x20>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4a1e      	ldr	r2, [pc, #120]	; (8001d40 <TIM7_IRQHandler+0x9c>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	ddf8      	ble.n	8001cbe <TIM7_IRQHandler+0x1a>
		HAL_TIM_Base_Stop_IT(&htim7);
 8001ccc:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <TIM7_IRQHandler+0x98>)
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f002 fe72 	bl	80049b8 <HAL_TIM_Base_Stop_IT>
		htim7.Instance->CNT=0;
 8001cd4:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <TIM7_IRQHandler+0x98>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	625a      	str	r2, [r3, #36]	; 0x24
		for(int i=0; i<10000; i++){};
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60bb      	str	r3, [r7, #8]
 8001ce0:	e002      	b.n	8001ce8 <TIM7_IRQHandler+0x44>
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	4a16      	ldr	r2, [pc, #88]	; (8001d44 <TIM7_IRQHandler+0xa0>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	ddf8      	ble.n	8001ce2 <TIM7_IRQHandler+0x3e>
		HAL_ADC_Stop_IT(&hadc);
 8001cf0:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <TIM7_IRQHandler+0xa4>)
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f000 fb4c 	bl	8002390 <HAL_ADC_Stop_IT>
		for(int i=0; i<10000; i++){};
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	e002      	b.n	8001d04 <TIM7_IRQHandler+0x60>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3301      	adds	r3, #1
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a0f      	ldr	r2, [pc, #60]	; (8001d44 <TIM7_IRQHandler+0xa0>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	ddf8      	ble.n	8001cfe <TIM7_IRQHandler+0x5a>

		for(int i=0; i<50000; i++){};
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	e002      	b.n	8001d18 <TIM7_IRQHandler+0x74>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	3301      	adds	r3, #1
 8001d16:	603b      	str	r3, [r7, #0]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	4a0c      	ldr	r2, [pc, #48]	; (8001d4c <TIM7_IRQHandler+0xa8>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	ddf8      	ble.n	8001d12 <TIM7_IRQHandler+0x6e>
		htim7.Instance->ARR=5000;
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <TIM7_IRQHandler+0x98>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <TIM7_IRQHandler+0xac>)
 8001d26:	62da      	str	r2, [r3, #44]	; 0x2c

		HAL_SuspendTick();
 8001d28:	f000 f8cc 	bl	8001ec4 <HAL_SuspendTick>
		HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	2001      	movs	r0, #1
 8001d30:	f001 f93c 	bl	8002fac <HAL_PWR_EnterSLEEPMode>


  /* USER CODE END TIM7_IRQn 1 */
}
 8001d34:	46c0      	nop			; (mov r8, r8)
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b004      	add	sp, #16
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	200003f0 	.word	0x200003f0
 8001d40:	0000752f 	.word	0x0000752f
 8001d44:	0000270f 	.word	0x0000270f
 8001d48:	2000032c 	.word	0x2000032c
 8001d4c:	0000c34f 	.word	0x0000c34f
 8001d50:	00001388 	.word	0x00001388

08001d54 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001d58:	46c0      	nop			; (mov r8, r8)
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d60:	480d      	ldr	r0, [pc, #52]	; (8001d98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d62:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d64:	f7ff fff6 	bl	8001d54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d68:	480c      	ldr	r0, [pc, #48]	; (8001d9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001d6a:	490d      	ldr	r1, [pc, #52]	; (8001da0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d6c:	4a0d      	ldr	r2, [pc, #52]	; (8001da4 <LoopForever+0xe>)
  movs r3, #0
 8001d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d70:	e002      	b.n	8001d78 <LoopCopyDataInit>

08001d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d76:	3304      	adds	r3, #4

08001d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d7c:	d3f9      	bcc.n	8001d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d80:	4c0a      	ldr	r4, [pc, #40]	; (8001dac <LoopForever+0x16>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d84:	e001      	b.n	8001d8a <LoopFillZerobss>

08001d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d88:	3204      	adds	r2, #4

08001d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d8c:	d3fb      	bcc.n	8001d86 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d8e:	f003 f805 	bl	8004d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d92:	f7fe fe87 	bl	8000aa4 <main>

08001d96 <LoopForever>:

LoopForever:
    b LoopForever
 8001d96:	e7fe      	b.n	8001d96 <LoopForever>
  ldr   r0, =_estack
 8001d98:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da0:	200002dc 	.word	0x200002dc
  ldr r2, =_sidata
 8001da4:	08005450 	.word	0x08005450
  ldr r2, =_sbss
 8001da8:	200002dc 	.word	0x200002dc
  ldr r4, =_ebss
 8001dac:	20000844 	.word	0x20000844

08001db0 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001db0:	e7fe      	b.n	8001db0 <DMA1_Channel1_IRQHandler>
	...

08001db4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001db8:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <HAL_Init+0x24>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_Init+0x24>)
 8001dbe:	2110      	movs	r1, #16
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001dc4:	2003      	movs	r0, #3
 8001dc6:	f000 f809 	bl	8001ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dca:	f7ff fd7f 	bl	80018cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	40022000 	.word	0x40022000

08001ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ddc:	b590      	push	{r4, r7, lr}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001de4:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <HAL_InitTick+0x5c>)
 8001de6:	681c      	ldr	r4, [r3, #0]
 8001de8:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <HAL_InitTick+0x60>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	0019      	movs	r1, r3
 8001dee:	23fa      	movs	r3, #250	; 0xfa
 8001df0:	0098      	lsls	r0, r3, #2
 8001df2:	f7fe f987 	bl	8000104 <__udivsi3>
 8001df6:	0003      	movs	r3, r0
 8001df8:	0019      	movs	r1, r3
 8001dfa:	0020      	movs	r0, r4
 8001dfc:	f7fe f982 	bl	8000104 <__udivsi3>
 8001e00:	0003      	movs	r3, r0
 8001e02:	0018      	movs	r0, r3
 8001e04:	f000 ff11 	bl	8002c2a <HAL_SYSTICK_Config>
 8001e08:	1e03      	subs	r3, r0, #0
 8001e0a:	d001      	beq.n	8001e10 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e00f      	b.n	8001e30 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d80b      	bhi.n	8001e2e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	2301      	movs	r3, #1
 8001e1a:	425b      	negs	r3, r3
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f000 fece 	bl	8002bc0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <HAL_InitTick+0x64>)
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e000      	b.n	8001e30 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
}
 8001e30:	0018      	movs	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	b003      	add	sp, #12
 8001e36:	bd90      	pop	{r4, r7, pc}
 8001e38:	200002d0 	.word	0x200002d0
 8001e3c:	200002d8 	.word	0x200002d8
 8001e40:	200002d4 	.word	0x200002d4

08001e44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_IncTick+0x1c>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	001a      	movs	r2, r3
 8001e4e:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_IncTick+0x20>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	18d2      	adds	r2, r2, r3
 8001e54:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <HAL_IncTick+0x20>)
 8001e56:	601a      	str	r2, [r3, #0]
}
 8001e58:	46c0      	nop			; (mov r8, r8)
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	200002d8 	.word	0x200002d8
 8001e64:	20000840 	.word	0x20000840

08001e68 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e6c:	4b02      	ldr	r3, [pc, #8]	; (8001e78 <HAL_GetTick+0x10>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	0018      	movs	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	46c0      	nop			; (mov r8, r8)
 8001e78:	20000840 	.word	0x20000840

08001e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e84:	f7ff fff0 	bl	8001e68 <HAL_GetTick>
 8001e88:	0003      	movs	r3, r0
 8001e8a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	3301      	adds	r3, #1
 8001e94:	d005      	beq.n	8001ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e96:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <HAL_Delay+0x44>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	001a      	movs	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	189b      	adds	r3, r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	f7ff ffe0 	bl	8001e68 <HAL_GetTick>
 8001ea8:	0002      	movs	r2, r0
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d8f7      	bhi.n	8001ea4 <HAL_Delay+0x28>
  {
  }
}
 8001eb4:	46c0      	nop			; (mov r8, r8)
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b004      	add	sp, #16
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	46c0      	nop			; (mov r8, r8)
 8001ec0:	200002d8 	.word	0x200002d8

08001ec4 <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001ec8:	4b04      	ldr	r3, [pc, #16]	; (8001edc <HAL_SuspendTick+0x18>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	4b03      	ldr	r3, [pc, #12]	; (8001edc <HAL_SuspendTick+0x18>)
 8001ece:	2102      	movs	r1, #2
 8001ed0:	438a      	bics	r2, r1
 8001ed2:	601a      	str	r2, [r3, #0]
}
 8001ed4:	46c0      	nop			; (mov r8, r8)
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	e000e010 	.word	0xe000e010

08001ee0 <HAL_ResumeTick>:
  * @note This function is declared as __weak  to be overwritten  in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001ee4:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <HAL_ResumeTick+0x18>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <HAL_ResumeTick+0x18>)
 8001eea:	2102      	movs	r1, #2
 8001eec:	430a      	orrs	r2, r1
 8001eee:	601a      	str	r2, [r3, #0]
}
 8001ef0:	46c0      	nop			; (mov r8, r8)
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	e000e010 	.word	0xe000e010

08001efc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f04:	230f      	movs	r3, #15
 8001f06:	18fb      	adds	r3, r7, r3
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e125      	b.n	8002166 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10a      	bne.n	8001f38 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2234      	movs	r2, #52	; 0x34
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	0018      	movs	r0, r3
 8001f34:	f7ff fcee 	bl	8001914 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3c:	2210      	movs	r2, #16
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d000      	beq.n	8001f44 <HAL_ADC_Init+0x48>
 8001f42:	e103      	b.n	800214c <HAL_ADC_Init+0x250>
 8001f44:	230f      	movs	r3, #15
 8001f46:	18fb      	adds	r3, r7, r3
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d000      	beq.n	8001f50 <HAL_ADC_Init+0x54>
 8001f4e:	e0fd      	b.n	800214c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	2204      	movs	r2, #4
 8001f58:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001f5a:	d000      	beq.n	8001f5e <HAL_ADC_Init+0x62>
 8001f5c:	e0f6      	b.n	800214c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f62:	4a83      	ldr	r2, [pc, #524]	; (8002170 <HAL_ADC_Init+0x274>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	2202      	movs	r2, #2
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	2203      	movs	r2, #3
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d112      	bne.n	8001fa2 <HAL_ADC_Init+0xa6>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2201      	movs	r2, #1
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d009      	beq.n	8001f9e <HAL_ADC_Init+0xa2>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	021b      	lsls	r3, r3, #8
 8001f94:	401a      	ands	r2, r3
 8001f96:	2380      	movs	r3, #128	; 0x80
 8001f98:	021b      	lsls	r3, r3, #8
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d101      	bne.n	8001fa2 <HAL_ADC_Init+0xa6>
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <HAL_ADC_Init+0xa8>
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d116      	bne.n	8001fd6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	2218      	movs	r2, #24
 8001fb0:	4393      	bics	r3, r2
 8001fb2:	0019      	movs	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	0899      	lsrs	r1, r3, #2
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68da      	ldr	r2, [r3, #12]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4964      	ldr	r1, [pc, #400]	; (8002174 <HAL_ADC_Init+0x278>)
 8001fe2:	400a      	ands	r2, r1
 8001fe4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	7e1b      	ldrb	r3, [r3, #24]
 8001fea:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	7e5b      	ldrb	r3, [r3, #25]
 8001ff0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ff2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	7e9b      	ldrb	r3, [r3, #26]
 8001ff8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001ffa:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002000:	2b01      	cmp	r3, #1
 8002002:	d002      	beq.n	800200a <HAL_ADC_Init+0x10e>
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	015b      	lsls	r3, r3, #5
 8002008:	e000      	b.n	800200c <HAL_ADC_Init+0x110>
 800200a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800200c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002012:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d101      	bne.n	8002020 <HAL_ADC_Init+0x124>
 800201c:	2304      	movs	r3, #4
 800201e:	e000      	b.n	8002022 <HAL_ADC_Init+0x126>
 8002020:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002022:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2124      	movs	r1, #36	; 0x24
 8002028:	5c5b      	ldrb	r3, [r3, r1]
 800202a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800202c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	4313      	orrs	r3, r2
 8002032:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	7edb      	ldrb	r3, [r3, #27]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d115      	bne.n	8002068 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	7e9b      	ldrb	r3, [r3, #26]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d105      	bne.n	8002050 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	2280      	movs	r2, #128	; 0x80
 8002048:	0252      	lsls	r2, r2, #9
 800204a:	4313      	orrs	r3, r2
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	e00b      	b.n	8002068 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002054:	2220      	movs	r2, #32
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002060:	2201      	movs	r2, #1
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69da      	ldr	r2, [r3, #28]
 800206c:	23c2      	movs	r3, #194	; 0xc2
 800206e:	33ff      	adds	r3, #255	; 0xff
 8002070:	429a      	cmp	r2, r3
 8002072:	d007      	beq.n	8002084 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800207c:	4313      	orrs	r3, r2
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	4313      	orrs	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68d9      	ldr	r1, [r3, #12]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	430a      	orrs	r2, r1
 8002092:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002098:	2380      	movs	r3, #128	; 0x80
 800209a:	055b      	lsls	r3, r3, #21
 800209c:	429a      	cmp	r2, r3
 800209e:	d01b      	beq.n	80020d8 <HAL_ADC_Init+0x1dc>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d017      	beq.n	80020d8 <HAL_ADC_Init+0x1dc>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d013      	beq.n	80020d8 <HAL_ADC_Init+0x1dc>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	d00f      	beq.n	80020d8 <HAL_ADC_Init+0x1dc>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020bc:	2b04      	cmp	r3, #4
 80020be:	d00b      	beq.n	80020d8 <HAL_ADC_Init+0x1dc>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c4:	2b05      	cmp	r3, #5
 80020c6:	d007      	beq.n	80020d8 <HAL_ADC_Init+0x1dc>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020cc:	2b06      	cmp	r3, #6
 80020ce:	d003      	beq.n	80020d8 <HAL_ADC_Init+0x1dc>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d4:	2b07      	cmp	r3, #7
 80020d6:	d112      	bne.n	80020fe <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	695a      	ldr	r2, [r3, #20]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2107      	movs	r1, #7
 80020e4:	438a      	bics	r2, r1
 80020e6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6959      	ldr	r1, [r3, #20]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f2:	2207      	movs	r2, #7
 80020f4:	401a      	ands	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	4a1c      	ldr	r2, [pc, #112]	; (8002178 <HAL_ADC_Init+0x27c>)
 8002106:	4013      	ands	r3, r2
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	429a      	cmp	r2, r3
 800210c:	d10b      	bne.n	8002126 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002118:	2203      	movs	r2, #3
 800211a:	4393      	bics	r3, r2
 800211c:	2201      	movs	r2, #1
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002124:	e01c      	b.n	8002160 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212a:	2212      	movs	r2, #18
 800212c:	4393      	bics	r3, r2
 800212e:	2210      	movs	r2, #16
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213a:	2201      	movs	r2, #1
 800213c:	431a      	orrs	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002142:	230f      	movs	r3, #15
 8002144:	18fb      	adds	r3, r7, r3
 8002146:	2201      	movs	r2, #1
 8002148:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800214a:	e009      	b.n	8002160 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002150:	2210      	movs	r2, #16
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002158:	230f      	movs	r3, #15
 800215a:	18fb      	adds	r3, r7, r3
 800215c:	2201      	movs	r2, #1
 800215e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002160:	230f      	movs	r3, #15
 8002162:	18fb      	adds	r3, r7, r3
 8002164:	781b      	ldrb	r3, [r3, #0]
}
 8002166:	0018      	movs	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	b004      	add	sp, #16
 800216c:	bd80      	pop	{r7, pc}
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	fffffefd 	.word	0xfffffefd
 8002174:	fffe0219 	.word	0xfffe0219
 8002178:	833fffe7 	.word	0x833fffe7

0800217c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	2b08      	cmp	r3, #8
 800218c:	d102      	bne.n	8002194 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800218e:	2308      	movs	r3, #8
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	e014      	b.n	80021be <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	2201      	movs	r2, #1
 800219c:	4013      	ands	r3, r2
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d10b      	bne.n	80021ba <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a6:	2220      	movs	r2, #32
 80021a8:	431a      	orrs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2234      	movs	r2, #52	; 0x34
 80021b2:	2100      	movs	r1, #0
 80021b4:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e071      	b.n	800229e <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80021ba:	230c      	movs	r3, #12
 80021bc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80021be:	f7ff fe53 	bl	8001e68 <HAL_GetTick>
 80021c2:	0003      	movs	r3, r0
 80021c4:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80021c6:	e01f      	b.n	8002208 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	3301      	adds	r3, #1
 80021cc:	d01c      	beq.n	8002208 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d007      	beq.n	80021e4 <HAL_ADC_PollForConversion+0x68>
 80021d4:	f7ff fe48 	bl	8001e68 <HAL_GetTick>
 80021d8:	0002      	movs	r2, r0
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d211      	bcs.n	8002208 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	4013      	ands	r3, r2
 80021ee:	d10b      	bne.n	8002208 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f4:	2204      	movs	r2, #4
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2234      	movs	r2, #52	; 0x34
 8002200:	2100      	movs	r1, #0
 8002202:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e04a      	b.n	800229e <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4013      	ands	r3, r2
 8002212:	d0d9      	beq.n	80021c8 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002218:	2280      	movs	r2, #128	; 0x80
 800221a:	0092      	lsls	r2, r2, #2
 800221c:	431a      	orrs	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	23c0      	movs	r3, #192	; 0xc0
 800222a:	011b      	lsls	r3, r3, #4
 800222c:	4013      	ands	r3, r2
 800222e:	d12d      	bne.n	800228c <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002234:	2b00      	cmp	r3, #0
 8002236:	d129      	bne.n	800228c <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2208      	movs	r2, #8
 8002240:	4013      	ands	r3, r2
 8002242:	2b08      	cmp	r3, #8
 8002244:	d122      	bne.n	800228c <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	2204      	movs	r2, #4
 800224e:	4013      	ands	r3, r2
 8002250:	d110      	bne.n	8002274 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	210c      	movs	r1, #12
 800225e:	438a      	bics	r2, r1
 8002260:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002266:	4a10      	ldr	r2, [pc, #64]	; (80022a8 <HAL_ADC_PollForConversion+0x12c>)
 8002268:	4013      	ands	r3, r2
 800226a:	2201      	movs	r2, #1
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	639a      	str	r2, [r3, #56]	; 0x38
 8002272:	e00b      	b.n	800228c <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002278:	2220      	movs	r2, #32
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002284:	2201      	movs	r2, #1
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	7e1b      	ldrb	r3, [r3, #24]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d103      	bne.n	800229c <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	220c      	movs	r2, #12
 800229a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	0018      	movs	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	b004      	add	sp, #16
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	fffffefe 	.word	0xfffffefe

080022ac <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80022ac:	b590      	push	{r4, r7, lr}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022b4:	230f      	movs	r3, #15
 80022b6:	18fb      	adds	r3, r7, r3
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2204      	movs	r2, #4
 80022c4:	4013      	ands	r3, r2
 80022c6:	d156      	bne.n	8002376 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2234      	movs	r2, #52	; 0x34
 80022cc:	5c9b      	ldrb	r3, [r3, r2]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_ADC_Start_IT+0x2a>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e056      	b.n	8002384 <HAL_ADC_Start_IT+0xd8>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2234      	movs	r2, #52	; 0x34
 80022da:	2101      	movs	r1, #1
 80022dc:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	7e5b      	ldrb	r3, [r3, #25]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d007      	beq.n	80022f6 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80022e6:	230f      	movs	r3, #15
 80022e8:	18fc      	adds	r4, r7, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	0018      	movs	r0, r3
 80022ee:	f000 fa57 	bl	80027a0 <ADC_Enable>
 80022f2:	0003      	movs	r3, r0
 80022f4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80022f6:	230f      	movs	r3, #15
 80022f8:	18fb      	adds	r3, r7, r3
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d13e      	bne.n	800237e <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002304:	4a21      	ldr	r2, [pc, #132]	; (800238c <HAL_ADC_Start_IT+0xe0>)
 8002306:	4013      	ands	r3, r2
 8002308:	2280      	movs	r2, #128	; 0x80
 800230a:	0052      	lsls	r2, r2, #1
 800230c:	431a      	orrs	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2234      	movs	r2, #52	; 0x34
 800231c:	2100      	movs	r1, #0
 800231e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	221c      	movs	r2, #28
 8002326:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	2b08      	cmp	r3, #8
 800232e:	d110      	bne.n	8002352 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2104      	movs	r1, #4
 800233c:	438a      	bics	r2, r1
 800233e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2118      	movs	r1, #24
 800234c:	430a      	orrs	r2, r1
 800234e:	605a      	str	r2, [r3, #4]
          break;
 8002350:	e008      	b.n	8002364 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	211c      	movs	r1, #28
 800235e:	430a      	orrs	r2, r1
 8002360:	605a      	str	r2, [r3, #4]
          break;
 8002362:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689a      	ldr	r2, [r3, #8]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2104      	movs	r1, #4
 8002370:	430a      	orrs	r2, r1
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	e003      	b.n	800237e <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002376:	230f      	movs	r3, #15
 8002378:	18fb      	adds	r3, r7, r3
 800237a:	2202      	movs	r2, #2
 800237c:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 800237e:	230f      	movs	r3, #15
 8002380:	18fb      	adds	r3, r7, r3
 8002382:	781b      	ldrb	r3, [r3, #0]
}
 8002384:	0018      	movs	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	b005      	add	sp, #20
 800238a:	bd90      	pop	{r4, r7, pc}
 800238c:	fffff0fe 	.word	0xfffff0fe

08002390 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8002390:	b5b0      	push	{r4, r5, r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002398:	230f      	movs	r3, #15
 800239a:	18fb      	adds	r3, r7, r3
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2234      	movs	r2, #52	; 0x34
 80023a4:	5c9b      	ldrb	r3, [r3, r2]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_ADC_Stop_IT+0x1e>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e033      	b.n	8002416 <HAL_ADC_Stop_IT+0x86>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2234      	movs	r2, #52	; 0x34
 80023b2:	2101      	movs	r1, #1
 80023b4:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80023b6:	250f      	movs	r5, #15
 80023b8:	197c      	adds	r4, r7, r5
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	0018      	movs	r0, r3
 80023be:	f000 fae4 	bl	800298a <ADC_ConversionStop>
 80023c2:	0003      	movs	r3, r0
 80023c4:	7023      	strb	r3, [r4, #0]
   
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80023c6:	0028      	movs	r0, r5
 80023c8:	183b      	adds	r3, r7, r0
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d11b      	bne.n	8002408 <HAL_ADC_Stop_IT+0x78>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	211c      	movs	r1, #28
 80023dc:	438a      	bics	r2, r1
 80023de:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80023e0:	0005      	movs	r5, r0
 80023e2:	183c      	adds	r4, r7, r0
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	0018      	movs	r0, r3
 80023e8:	f000 fa5e 	bl	80028a8 <ADC_Disable>
 80023ec:	0003      	movs	r3, r0
 80023ee:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80023f0:	197b      	adds	r3, r7, r5
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d107      	bne.n	8002408 <HAL_ADC_Stop_IT+0x78>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fc:	4a08      	ldr	r2, [pc, #32]	; (8002420 <HAL_ADC_Stop_IT+0x90>)
 80023fe:	4013      	ands	r3, r2
 8002400:	2201      	movs	r2, #1
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2234      	movs	r2, #52	; 0x34
 800240c:	2100      	movs	r1, #0
 800240e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002410:	230f      	movs	r3, #15
 8002412:	18fb      	adds	r3, r7, r3
 8002414:	781b      	ldrb	r3, [r3, #0]
}
 8002416:	0018      	movs	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	b004      	add	sp, #16
 800241c:	bdb0      	pop	{r4, r5, r7, pc}
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	fffffefe 	.word	0xfffffefe

08002424 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002432:	0018      	movs	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	b002      	add	sp, #8
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2204      	movs	r2, #4
 8002458:	4013      	ands	r3, r2
 800245a:	d003      	beq.n	8002464 <HAL_ADC_IRQHandler+0x28>
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2204      	movs	r2, #4
 8002460:	4013      	ands	r3, r2
 8002462:	d107      	bne.n	8002474 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2208      	movs	r2, #8
 8002468:	4013      	ands	r3, r2
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800246a:	d049      	beq.n	8002500 <HAL_ADC_IRQHandler+0xc4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2208      	movs	r2, #8
 8002470:	4013      	ands	r3, r2
 8002472:	d045      	beq.n	8002500 <HAL_ADC_IRQHandler+0xc4>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002478:	2210      	movs	r2, #16
 800247a:	4013      	ands	r3, r2
 800247c:	d106      	bne.n	800248c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002482:	2280      	movs	r2, #128	; 0x80
 8002484:	0092      	lsls	r2, r2, #2
 8002486:	431a      	orrs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	23c0      	movs	r3, #192	; 0xc0
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	4013      	ands	r3, r2
 8002498:	d12a      	bne.n	80024f0 <HAL_ADC_IRQHandler+0xb4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d126      	bne.n	80024f0 <HAL_ADC_IRQHandler+0xb4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2208      	movs	r2, #8
 80024a6:	4013      	ands	r3, r2
 80024a8:	d022      	beq.n	80024f0 <HAL_ADC_IRQHandler+0xb4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2204      	movs	r2, #4
 80024b2:	4013      	ands	r3, r2
 80024b4:	d110      	bne.n	80024d8 <HAL_ADC_IRQHandler+0x9c>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	210c      	movs	r1, #12
 80024c2:	438a      	bics	r2, r1
 80024c4:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ca:	4a2d      	ldr	r2, [pc, #180]	; (8002580 <HAL_ADC_IRQHandler+0x144>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	2201      	movs	r2, #1
 80024d0:	431a      	orrs	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	639a      	str	r2, [r3, #56]	; 0x38
 80024d6:	e00b      	b.n	80024f0 <HAL_ADC_IRQHandler+0xb4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024dc:	2220      	movs	r2, #32
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e8:	2201      	movs	r2, #1
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	0018      	movs	r0, r3
 80024f4:	f000 f846 	bl	8002584 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	220c      	movs	r2, #12
 80024fe:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2280      	movs	r2, #128	; 0x80
 8002504:	4013      	ands	r3, r2
 8002506:	d012      	beq.n	800252e <HAL_ADC_IRQHandler+0xf2>
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2280      	movs	r2, #128	; 0x80
 800250c:	4013      	ands	r3, r2
 800250e:	d00e      	beq.n	800252e <HAL_ADC_IRQHandler+0xf2>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002514:	2280      	movs	r2, #128	; 0x80
 8002516:	0252      	lsls	r2, r2, #9
 8002518:	431a      	orrs	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	0018      	movs	r0, r3
 8002522:	f000 f837 	bl	8002594 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2280      	movs	r2, #128	; 0x80
 800252c:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2210      	movs	r2, #16
 8002532:	4013      	ands	r3, r2
 8002534:	d020      	beq.n	8002578 <HAL_ADC_IRQHandler+0x13c>
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2210      	movs	r2, #16
 800253a:	4013      	ands	r3, r2
 800253c:	d01c      	beq.n	8002578 <HAL_ADC_IRQHandler+0x13c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002542:	2b01      	cmp	r3, #1
 8002544:	d006      	beq.n	8002554 <HAL_ADC_IRQHandler+0x118>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	2201      	movs	r2, #1
 800254e:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002550:	2b01      	cmp	r3, #1
 8002552:	d10d      	bne.n	8002570 <HAL_ADC_IRQHandler+0x134>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002558:	2202      	movs	r2, #2
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2210      	movs	r2, #16
 8002566:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	0018      	movs	r0, r3
 800256c:	f000 f81a 	bl	80025a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2210      	movs	r2, #16
 8002576:	601a      	str	r2, [r3, #0]
  }

}
 8002578:	46c0      	nop			; (mov r8, r8)
 800257a:	46bd      	mov	sp, r7
 800257c:	b004      	add	sp, #16
 800257e:	bd80      	pop	{r7, pc}
 8002580:	fffffefe 	.word	0xfffffefe

08002584 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800258c:	46c0      	nop			; (mov r8, r8)
 800258e:	46bd      	mov	sp, r7
 8002590:	b002      	add	sp, #8
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 800259c:	46c0      	nop			; (mov r8, r8)
 800259e:	46bd      	mov	sp, r7
 80025a0:	b002      	add	sp, #8
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025ac:	46c0      	nop			; (mov r8, r8)
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b002      	add	sp, #8
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025be:	230f      	movs	r3, #15
 80025c0:	18fb      	adds	r3, r7, r3
 80025c2:	2200      	movs	r2, #0
 80025c4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ce:	2380      	movs	r3, #128	; 0x80
 80025d0:	055b      	lsls	r3, r3, #21
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d011      	beq.n	80025fa <HAL_ADC_ConfigChannel+0x46>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d00d      	beq.n	80025fa <HAL_ADC_ConfigChannel+0x46>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d009      	beq.n	80025fa <HAL_ADC_ConfigChannel+0x46>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	d005      	beq.n	80025fa <HAL_ADC_ConfigChannel+0x46>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d001      	beq.n	80025fa <HAL_ADC_ConfigChannel+0x46>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2234      	movs	r2, #52	; 0x34
 80025fe:	5c9b      	ldrb	r3, [r3, r2]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d101      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x54>
 8002604:	2302      	movs	r3, #2
 8002606:	e0bb      	b.n	8002780 <HAL_ADC_ConfigChannel+0x1cc>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2234      	movs	r2, #52	; 0x34
 800260c:	2101      	movs	r1, #1
 800260e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2204      	movs	r2, #4
 8002618:	4013      	ands	r3, r2
 800261a:	d000      	beq.n	800261e <HAL_ADC_ConfigChannel+0x6a>
 800261c:	e09f      	b.n	800275e <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	4a59      	ldr	r2, [pc, #356]	; (8002788 <HAL_ADC_ConfigChannel+0x1d4>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d100      	bne.n	800262a <HAL_ADC_ConfigChannel+0x76>
 8002628:	e077      	b.n	800271a <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2201      	movs	r2, #1
 8002636:	409a      	lsls	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002644:	2380      	movs	r3, #128	; 0x80
 8002646:	055b      	lsls	r3, r3, #21
 8002648:	429a      	cmp	r2, r3
 800264a:	d037      	beq.n	80026bc <HAL_ADC_ConfigChannel+0x108>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002650:	2b01      	cmp	r3, #1
 8002652:	d033      	beq.n	80026bc <HAL_ADC_ConfigChannel+0x108>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002658:	2b02      	cmp	r3, #2
 800265a:	d02f      	beq.n	80026bc <HAL_ADC_ConfigChannel+0x108>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002660:	2b03      	cmp	r3, #3
 8002662:	d02b      	beq.n	80026bc <HAL_ADC_ConfigChannel+0x108>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002668:	2b04      	cmp	r3, #4
 800266a:	d027      	beq.n	80026bc <HAL_ADC_ConfigChannel+0x108>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	2b05      	cmp	r3, #5
 8002672:	d023      	beq.n	80026bc <HAL_ADC_ConfigChannel+0x108>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002678:	2b06      	cmp	r3, #6
 800267a:	d01f      	beq.n	80026bc <HAL_ADC_ConfigChannel+0x108>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002680:	2b07      	cmp	r3, #7
 8002682:	d01b      	beq.n	80026bc <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	2107      	movs	r1, #7
 8002690:	400b      	ands	r3, r1
 8002692:	429a      	cmp	r2, r3
 8002694:	d012      	beq.n	80026bc <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695a      	ldr	r2, [r3, #20]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2107      	movs	r1, #7
 80026a2:	438a      	bics	r2, r1
 80026a4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6959      	ldr	r1, [r3, #20]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2207      	movs	r2, #7
 80026b2:	401a      	ands	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b10      	cmp	r3, #16
 80026c2:	d003      	beq.n	80026cc <HAL_ADC_ConfigChannel+0x118>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b11      	cmp	r3, #17
 80026ca:	d152      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80026cc:	4b2f      	ldr	r3, [pc, #188]	; (800278c <HAL_ADC_ConfigChannel+0x1d8>)
 80026ce:	6819      	ldr	r1, [r3, #0]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b10      	cmp	r3, #16
 80026d6:	d102      	bne.n	80026de <HAL_ADC_ConfigChannel+0x12a>
 80026d8:	2380      	movs	r3, #128	; 0x80
 80026da:	041b      	lsls	r3, r3, #16
 80026dc:	e001      	b.n	80026e2 <HAL_ADC_ConfigChannel+0x12e>
 80026de:	2380      	movs	r3, #128	; 0x80
 80026e0:	03db      	lsls	r3, r3, #15
 80026e2:	4a2a      	ldr	r2, [pc, #168]	; (800278c <HAL_ADC_ConfigChannel+0x1d8>)
 80026e4:	430b      	orrs	r3, r1
 80026e6:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b10      	cmp	r3, #16
 80026ee:	d140      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026f0:	4b27      	ldr	r3, [pc, #156]	; (8002790 <HAL_ADC_ConfigChannel+0x1dc>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4927      	ldr	r1, [pc, #156]	; (8002794 <HAL_ADC_ConfigChannel+0x1e0>)
 80026f6:	0018      	movs	r0, r3
 80026f8:	f7fd fd04 	bl	8000104 <__udivsi3>
 80026fc:	0003      	movs	r3, r0
 80026fe:	001a      	movs	r2, r3
 8002700:	0013      	movs	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	189b      	adds	r3, r3, r2
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800270a:	e002      	b.n	8002712 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	3b01      	subs	r3, #1
 8002710:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f9      	bne.n	800270c <HAL_ADC_ConfigChannel+0x158>
 8002718:	e02b      	b.n	8002772 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2101      	movs	r1, #1
 8002726:	4099      	lsls	r1, r3
 8002728:	000b      	movs	r3, r1
 800272a:	43d9      	mvns	r1, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	400a      	ands	r2, r1
 8002732:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b10      	cmp	r3, #16
 800273a:	d003      	beq.n	8002744 <HAL_ADC_ConfigChannel+0x190>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b11      	cmp	r3, #17
 8002742:	d116      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002744:	4b11      	ldr	r3, [pc, #68]	; (800278c <HAL_ADC_ConfigChannel+0x1d8>)
 8002746:	6819      	ldr	r1, [r3, #0]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b10      	cmp	r3, #16
 800274e:	d101      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x1a0>
 8002750:	4a11      	ldr	r2, [pc, #68]	; (8002798 <HAL_ADC_ConfigChannel+0x1e4>)
 8002752:	e000      	b.n	8002756 <HAL_ADC_ConfigChannel+0x1a2>
 8002754:	4a11      	ldr	r2, [pc, #68]	; (800279c <HAL_ADC_ConfigChannel+0x1e8>)
 8002756:	4b0d      	ldr	r3, [pc, #52]	; (800278c <HAL_ADC_ConfigChannel+0x1d8>)
 8002758:	400a      	ands	r2, r1
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	e009      	b.n	8002772 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002762:	2220      	movs	r2, #32
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800276a:	230f      	movs	r3, #15
 800276c:	18fb      	adds	r3, r7, r3
 800276e:	2201      	movs	r2, #1
 8002770:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2234      	movs	r2, #52	; 0x34
 8002776:	2100      	movs	r1, #0
 8002778:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800277a:	230f      	movs	r3, #15
 800277c:	18fb      	adds	r3, r7, r3
 800277e:	781b      	ldrb	r3, [r3, #0]
}
 8002780:	0018      	movs	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	b004      	add	sp, #16
 8002786:	bd80      	pop	{r7, pc}
 8002788:	00001001 	.word	0x00001001
 800278c:	40012708 	.word	0x40012708
 8002790:	200002d0 	.word	0x200002d0
 8002794:	000f4240 	.word	0x000f4240
 8002798:	ff7fffff 	.word	0xff7fffff
 800279c:	ffbfffff 	.word	0xffbfffff

080027a0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2203      	movs	r2, #3
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d112      	bne.n	80027e4 <ADC_Enable+0x44>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2201      	movs	r2, #1
 80027c6:	4013      	ands	r3, r2
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d009      	beq.n	80027e0 <ADC_Enable+0x40>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	2380      	movs	r3, #128	; 0x80
 80027d4:	021b      	lsls	r3, r3, #8
 80027d6:	401a      	ands	r2, r3
 80027d8:	2380      	movs	r3, #128	; 0x80
 80027da:	021b      	lsls	r3, r3, #8
 80027dc:	429a      	cmp	r2, r3
 80027de:	d101      	bne.n	80027e4 <ADC_Enable+0x44>
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <ADC_Enable+0x46>
 80027e4:	2300      	movs	r3, #0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d152      	bne.n	8002890 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	4a2a      	ldr	r2, [pc, #168]	; (800289c <ADC_Enable+0xfc>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	d00d      	beq.n	8002812 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fa:	2210      	movs	r2, #16
 80027fc:	431a      	orrs	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002806:	2201      	movs	r2, #1
 8002808:	431a      	orrs	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e03f      	b.n	8002892 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2101      	movs	r1, #1
 800281e:	430a      	orrs	r2, r1
 8002820:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002822:	4b1f      	ldr	r3, [pc, #124]	; (80028a0 <ADC_Enable+0x100>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	491f      	ldr	r1, [pc, #124]	; (80028a4 <ADC_Enable+0x104>)
 8002828:	0018      	movs	r0, r3
 800282a:	f7fd fc6b 	bl	8000104 <__udivsi3>
 800282e:	0003      	movs	r3, r0
 8002830:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002832:	e002      	b.n	800283a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	3b01      	subs	r3, #1
 8002838:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1f9      	bne.n	8002834 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002840:	f7ff fb12 	bl	8001e68 <HAL_GetTick>
 8002844:	0003      	movs	r3, r0
 8002846:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002848:	e01b      	b.n	8002882 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800284a:	f7ff fb0d 	bl	8001e68 <HAL_GetTick>
 800284e:	0002      	movs	r2, r0
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d914      	bls.n	8002882 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2201      	movs	r2, #1
 8002860:	4013      	ands	r3, r2
 8002862:	2b01      	cmp	r3, #1
 8002864:	d00d      	beq.n	8002882 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286a:	2210      	movs	r2, #16
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002876:	2201      	movs	r2, #1
 8002878:	431a      	orrs	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e007      	b.n	8002892 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2201      	movs	r2, #1
 800288a:	4013      	ands	r3, r2
 800288c:	2b01      	cmp	r3, #1
 800288e:	d1dc      	bne.n	800284a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	0018      	movs	r0, r3
 8002894:	46bd      	mov	sp, r7
 8002896:	b004      	add	sp, #16
 8002898:	bd80      	pop	{r7, pc}
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	80000017 	.word	0x80000017
 80028a0:	200002d0 	.word	0x200002d0
 80028a4:	000f4240 	.word	0x000f4240

080028a8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2203      	movs	r2, #3
 80028bc:	4013      	ands	r3, r2
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d112      	bne.n	80028e8 <ADC_Disable+0x40>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2201      	movs	r2, #1
 80028ca:	4013      	ands	r3, r2
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d009      	beq.n	80028e4 <ADC_Disable+0x3c>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	2380      	movs	r3, #128	; 0x80
 80028d8:	021b      	lsls	r3, r3, #8
 80028da:	401a      	ands	r2, r3
 80028dc:	2380      	movs	r3, #128	; 0x80
 80028de:	021b      	lsls	r3, r3, #8
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d101      	bne.n	80028e8 <ADC_Disable+0x40>
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <ADC_Disable+0x42>
 80028e8:	2300      	movs	r3, #0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d048      	beq.n	8002980 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2205      	movs	r2, #5
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d110      	bne.n	800291e <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2102      	movs	r1, #2
 8002908:	430a      	orrs	r2, r1
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2203      	movs	r2, #3
 8002912:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002914:	f7ff faa8 	bl	8001e68 <HAL_GetTick>
 8002918:	0003      	movs	r3, r0
 800291a:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800291c:	e029      	b.n	8002972 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002922:	2210      	movs	r2, #16
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292e:	2201      	movs	r2, #1
 8002930:	431a      	orrs	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e023      	b.n	8002982 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800293a:	f7ff fa95 	bl	8001e68 <HAL_GetTick>
 800293e:	0002      	movs	r2, r0
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d914      	bls.n	8002972 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2201      	movs	r2, #1
 8002950:	4013      	ands	r3, r2
 8002952:	2b01      	cmp	r3, #1
 8002954:	d10d      	bne.n	8002972 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295a:	2210      	movs	r2, #16
 800295c:	431a      	orrs	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002966:	2201      	movs	r2, #1
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e007      	b.n	8002982 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2201      	movs	r2, #1
 800297a:	4013      	ands	r3, r2
 800297c:	2b01      	cmp	r3, #1
 800297e:	d0dc      	beq.n	800293a <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	0018      	movs	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	b004      	add	sp, #16
 8002988:	bd80      	pop	{r7, pc}

0800298a <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b084      	sub	sp, #16
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2204      	movs	r2, #4
 800299e:	4013      	ands	r3, r2
 80029a0:	d03a      	beq.n	8002a18 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	2204      	movs	r2, #4
 80029aa:	4013      	ands	r3, r2
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d10d      	bne.n	80029cc <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2202      	movs	r2, #2
 80029b8:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80029ba:	d107      	bne.n	80029cc <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2110      	movs	r1, #16
 80029c8:	430a      	orrs	r2, r1
 80029ca:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029cc:	f7ff fa4c 	bl	8001e68 <HAL_GetTick>
 80029d0:	0003      	movs	r3, r0
 80029d2:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80029d4:	e01a      	b.n	8002a0c <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80029d6:	f7ff fa47 	bl	8001e68 <HAL_GetTick>
 80029da:	0002      	movs	r2, r0
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d913      	bls.n	8002a0c <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2204      	movs	r2, #4
 80029ec:	4013      	ands	r3, r2
 80029ee:	d00d      	beq.n	8002a0c <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f4:	2210      	movs	r2, #16
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a00:	2201      	movs	r2, #1
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e006      	b.n	8002a1a <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	2204      	movs	r2, #4
 8002a14:	4013      	ands	r3, r2
 8002a16:	d1de      	bne.n	80029d6 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	b004      	add	sp, #16
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	0002      	movs	r2, r0
 8002a2c:	1dfb      	adds	r3, r7, #7
 8002a2e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a30:	1dfb      	adds	r3, r7, #7
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b7f      	cmp	r3, #127	; 0x7f
 8002a36:	d809      	bhi.n	8002a4c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a38:	1dfb      	adds	r3, r7, #7
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	001a      	movs	r2, r3
 8002a3e:	231f      	movs	r3, #31
 8002a40:	401a      	ands	r2, r3
 8002a42:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <__NVIC_EnableIRQ+0x30>)
 8002a44:	2101      	movs	r1, #1
 8002a46:	4091      	lsls	r1, r2
 8002a48:	000a      	movs	r2, r1
 8002a4a:	601a      	str	r2, [r3, #0]
  }
}
 8002a4c:	46c0      	nop			; (mov r8, r8)
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b002      	add	sp, #8
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	e000e100 	.word	0xe000e100

08002a58 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	0002      	movs	r2, r0
 8002a60:	1dfb      	adds	r3, r7, #7
 8002a62:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a64:	1dfb      	adds	r3, r7, #7
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b7f      	cmp	r3, #127	; 0x7f
 8002a6a:	d810      	bhi.n	8002a8e <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a6c:	1dfb      	adds	r3, r7, #7
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	001a      	movs	r2, r3
 8002a72:	231f      	movs	r3, #31
 8002a74:	4013      	ands	r3, r2
 8002a76:	4908      	ldr	r1, [pc, #32]	; (8002a98 <__NVIC_DisableIRQ+0x40>)
 8002a78:	2201      	movs	r2, #1
 8002a7a:	409a      	lsls	r2, r3
 8002a7c:	0013      	movs	r3, r2
 8002a7e:	2280      	movs	r2, #128	; 0x80
 8002a80:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002a82:	f3bf 8f4f 	dsb	sy
}
 8002a86:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8002a88:	f3bf 8f6f 	isb	sy
}
 8002a8c:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	46bd      	mov	sp, r7
 8002a92:	b002      	add	sp, #8
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	e000e100 	.word	0xe000e100

08002a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a9c:	b590      	push	{r4, r7, lr}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	0002      	movs	r2, r0
 8002aa4:	6039      	str	r1, [r7, #0]
 8002aa6:	1dfb      	adds	r3, r7, #7
 8002aa8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002aaa:	1dfb      	adds	r3, r7, #7
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b7f      	cmp	r3, #127	; 0x7f
 8002ab0:	d828      	bhi.n	8002b04 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ab2:	4a2f      	ldr	r2, [pc, #188]	; (8002b70 <__NVIC_SetPriority+0xd4>)
 8002ab4:	1dfb      	adds	r3, r7, #7
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	b25b      	sxtb	r3, r3
 8002aba:	089b      	lsrs	r3, r3, #2
 8002abc:	33c0      	adds	r3, #192	; 0xc0
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	589b      	ldr	r3, [r3, r2]
 8002ac2:	1dfa      	adds	r2, r7, #7
 8002ac4:	7812      	ldrb	r2, [r2, #0]
 8002ac6:	0011      	movs	r1, r2
 8002ac8:	2203      	movs	r2, #3
 8002aca:	400a      	ands	r2, r1
 8002acc:	00d2      	lsls	r2, r2, #3
 8002ace:	21ff      	movs	r1, #255	; 0xff
 8002ad0:	4091      	lsls	r1, r2
 8002ad2:	000a      	movs	r2, r1
 8002ad4:	43d2      	mvns	r2, r2
 8002ad6:	401a      	ands	r2, r3
 8002ad8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	019b      	lsls	r3, r3, #6
 8002ade:	22ff      	movs	r2, #255	; 0xff
 8002ae0:	401a      	ands	r2, r3
 8002ae2:	1dfb      	adds	r3, r7, #7
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	2303      	movs	r3, #3
 8002aea:	4003      	ands	r3, r0
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002af0:	481f      	ldr	r0, [pc, #124]	; (8002b70 <__NVIC_SetPriority+0xd4>)
 8002af2:	1dfb      	adds	r3, r7, #7
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	b25b      	sxtb	r3, r3
 8002af8:	089b      	lsrs	r3, r3, #2
 8002afa:	430a      	orrs	r2, r1
 8002afc:	33c0      	adds	r3, #192	; 0xc0
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002b02:	e031      	b.n	8002b68 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b04:	4a1b      	ldr	r2, [pc, #108]	; (8002b74 <__NVIC_SetPriority+0xd8>)
 8002b06:	1dfb      	adds	r3, r7, #7
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	230f      	movs	r3, #15
 8002b0e:	400b      	ands	r3, r1
 8002b10:	3b08      	subs	r3, #8
 8002b12:	089b      	lsrs	r3, r3, #2
 8002b14:	3306      	adds	r3, #6
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	18d3      	adds	r3, r2, r3
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	1dfa      	adds	r2, r7, #7
 8002b20:	7812      	ldrb	r2, [r2, #0]
 8002b22:	0011      	movs	r1, r2
 8002b24:	2203      	movs	r2, #3
 8002b26:	400a      	ands	r2, r1
 8002b28:	00d2      	lsls	r2, r2, #3
 8002b2a:	21ff      	movs	r1, #255	; 0xff
 8002b2c:	4091      	lsls	r1, r2
 8002b2e:	000a      	movs	r2, r1
 8002b30:	43d2      	mvns	r2, r2
 8002b32:	401a      	ands	r2, r3
 8002b34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	019b      	lsls	r3, r3, #6
 8002b3a:	22ff      	movs	r2, #255	; 0xff
 8002b3c:	401a      	ands	r2, r3
 8002b3e:	1dfb      	adds	r3, r7, #7
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	0018      	movs	r0, r3
 8002b44:	2303      	movs	r3, #3
 8002b46:	4003      	ands	r3, r0
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b4c:	4809      	ldr	r0, [pc, #36]	; (8002b74 <__NVIC_SetPriority+0xd8>)
 8002b4e:	1dfb      	adds	r3, r7, #7
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	001c      	movs	r4, r3
 8002b54:	230f      	movs	r3, #15
 8002b56:	4023      	ands	r3, r4
 8002b58:	3b08      	subs	r3, #8
 8002b5a:	089b      	lsrs	r3, r3, #2
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	3306      	adds	r3, #6
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	18c3      	adds	r3, r0, r3
 8002b64:	3304      	adds	r3, #4
 8002b66:	601a      	str	r2, [r3, #0]
}
 8002b68:	46c0      	nop			; (mov r8, r8)
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	b003      	add	sp, #12
 8002b6e:	bd90      	pop	{r4, r7, pc}
 8002b70:	e000e100 	.word	0xe000e100
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	1e5a      	subs	r2, r3, #1
 8002b84:	2380      	movs	r3, #128	; 0x80
 8002b86:	045b      	lsls	r3, r3, #17
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d301      	bcc.n	8002b90 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e010      	b.n	8002bb2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b90:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <SysTick_Config+0x44>)
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	3a01      	subs	r2, #1
 8002b96:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b98:	2301      	movs	r3, #1
 8002b9a:	425b      	negs	r3, r3
 8002b9c:	2103      	movs	r1, #3
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f7ff ff7c 	bl	8002a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <SysTick_Config+0x44>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002baa:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <SysTick_Config+0x44>)
 8002bac:	2207      	movs	r2, #7
 8002bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	b002      	add	sp, #8
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	e000e010 	.word	0xe000e010

08002bc0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	607a      	str	r2, [r7, #4]
 8002bca:	210f      	movs	r1, #15
 8002bcc:	187b      	adds	r3, r7, r1
 8002bce:	1c02      	adds	r2, r0, #0
 8002bd0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	187b      	adds	r3, r7, r1
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	b25b      	sxtb	r3, r3
 8002bda:	0011      	movs	r1, r2
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f7ff ff5d 	bl	8002a9c <__NVIC_SetPriority>
}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	46bd      	mov	sp, r7
 8002be6:	b004      	add	sp, #16
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	0002      	movs	r2, r0
 8002bf2:	1dfb      	adds	r3, r7, #7
 8002bf4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bf6:	1dfb      	adds	r3, r7, #7
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	b25b      	sxtb	r3, r3
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f7ff ff11 	bl	8002a24 <__NVIC_EnableIRQ>
}
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	46bd      	mov	sp, r7
 8002c06:	b002      	add	sp, #8
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	0002      	movs	r2, r0
 8002c12:	1dfb      	adds	r3, r7, #7
 8002c14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002c16:	1dfb      	adds	r3, r7, #7
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	b25b      	sxtb	r3, r3
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	f7ff ff1b 	bl	8002a58 <__NVIC_DisableIRQ>
}
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	46bd      	mov	sp, r7
 8002c26:	b002      	add	sp, #8
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	0018      	movs	r0, r3
 8002c36:	f7ff ff9f 	bl	8002b78 <SysTick_Config>
 8002c3a:	0003      	movs	r3, r0
}
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b002      	add	sp, #8
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c52:	e14f      	b.n	8002ef4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2101      	movs	r1, #1
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4091      	lsls	r1, r2
 8002c5e:	000a      	movs	r2, r1
 8002c60:	4013      	ands	r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d100      	bne.n	8002c6c <HAL_GPIO_Init+0x28>
 8002c6a:	e140      	b.n	8002eee <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2203      	movs	r2, #3
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d005      	beq.n	8002c84 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2203      	movs	r2, #3
 8002c7e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d130      	bne.n	8002ce6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	2203      	movs	r2, #3
 8002c90:	409a      	lsls	r2, r3
 8002c92:	0013      	movs	r3, r2
 8002c94:	43da      	mvns	r2, r3
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	409a      	lsls	r2, r3
 8002ca6:	0013      	movs	r3, r2
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cba:	2201      	movs	r2, #1
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	0013      	movs	r3, r2
 8002cc2:	43da      	mvns	r2, r3
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	091b      	lsrs	r3, r3, #4
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	401a      	ands	r2, r3
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	409a      	lsls	r2, r3
 8002cd8:	0013      	movs	r3, r2
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2203      	movs	r2, #3
 8002cec:	4013      	ands	r3, r2
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	d017      	beq.n	8002d22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	2203      	movs	r2, #3
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	0013      	movs	r3, r2
 8002d02:	43da      	mvns	r2, r3
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4013      	ands	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	689a      	ldr	r2, [r3, #8]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	409a      	lsls	r2, r3
 8002d14:	0013      	movs	r3, r2
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2203      	movs	r2, #3
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d123      	bne.n	8002d76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	08da      	lsrs	r2, r3, #3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	3208      	adds	r2, #8
 8002d36:	0092      	lsls	r2, r2, #2
 8002d38:	58d3      	ldr	r3, [r2, r3]
 8002d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	2207      	movs	r2, #7
 8002d40:	4013      	ands	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	220f      	movs	r2, #15
 8002d46:	409a      	lsls	r2, r3
 8002d48:	0013      	movs	r3, r2
 8002d4a:	43da      	mvns	r2, r3
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	691a      	ldr	r2, [r3, #16]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2107      	movs	r1, #7
 8002d5a:	400b      	ands	r3, r1
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	409a      	lsls	r2, r3
 8002d60:	0013      	movs	r3, r2
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	08da      	lsrs	r2, r3, #3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3208      	adds	r2, #8
 8002d70:	0092      	lsls	r2, r2, #2
 8002d72:	6939      	ldr	r1, [r7, #16]
 8002d74:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	2203      	movs	r2, #3
 8002d82:	409a      	lsls	r2, r3
 8002d84:	0013      	movs	r3, r2
 8002d86:	43da      	mvns	r2, r3
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2203      	movs	r2, #3
 8002d94:	401a      	ands	r2, r3
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	409a      	lsls	r2, r3
 8002d9c:	0013      	movs	r3, r2
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	23c0      	movs	r3, #192	; 0xc0
 8002db0:	029b      	lsls	r3, r3, #10
 8002db2:	4013      	ands	r3, r2
 8002db4:	d100      	bne.n	8002db8 <HAL_GPIO_Init+0x174>
 8002db6:	e09a      	b.n	8002eee <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db8:	4b54      	ldr	r3, [pc, #336]	; (8002f0c <HAL_GPIO_Init+0x2c8>)
 8002dba:	699a      	ldr	r2, [r3, #24]
 8002dbc:	4b53      	ldr	r3, [pc, #332]	; (8002f0c <HAL_GPIO_Init+0x2c8>)
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	619a      	str	r2, [r3, #24]
 8002dc4:	4b51      	ldr	r3, [pc, #324]	; (8002f0c <HAL_GPIO_Init+0x2c8>)
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	4013      	ands	r3, r2
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002dd0:	4a4f      	ldr	r2, [pc, #316]	; (8002f10 <HAL_GPIO_Init+0x2cc>)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	089b      	lsrs	r3, r3, #2
 8002dd6:	3302      	adds	r3, #2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	589b      	ldr	r3, [r3, r2]
 8002ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	2203      	movs	r2, #3
 8002de2:	4013      	ands	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	220f      	movs	r2, #15
 8002de8:	409a      	lsls	r2, r3
 8002dea:	0013      	movs	r3, r2
 8002dec:	43da      	mvns	r2, r3
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	4013      	ands	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	2390      	movs	r3, #144	; 0x90
 8002df8:	05db      	lsls	r3, r3, #23
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d013      	beq.n	8002e26 <HAL_GPIO_Init+0x1e2>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a44      	ldr	r2, [pc, #272]	; (8002f14 <HAL_GPIO_Init+0x2d0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d00d      	beq.n	8002e22 <HAL_GPIO_Init+0x1de>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a43      	ldr	r2, [pc, #268]	; (8002f18 <HAL_GPIO_Init+0x2d4>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d007      	beq.n	8002e1e <HAL_GPIO_Init+0x1da>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a42      	ldr	r2, [pc, #264]	; (8002f1c <HAL_GPIO_Init+0x2d8>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d101      	bne.n	8002e1a <HAL_GPIO_Init+0x1d6>
 8002e16:	2303      	movs	r3, #3
 8002e18:	e006      	b.n	8002e28 <HAL_GPIO_Init+0x1e4>
 8002e1a:	2305      	movs	r3, #5
 8002e1c:	e004      	b.n	8002e28 <HAL_GPIO_Init+0x1e4>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e002      	b.n	8002e28 <HAL_GPIO_Init+0x1e4>
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <HAL_GPIO_Init+0x1e4>
 8002e26:	2300      	movs	r3, #0
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	2103      	movs	r1, #3
 8002e2c:	400a      	ands	r2, r1
 8002e2e:	0092      	lsls	r2, r2, #2
 8002e30:	4093      	lsls	r3, r2
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e38:	4935      	ldr	r1, [pc, #212]	; (8002f10 <HAL_GPIO_Init+0x2cc>)
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	089b      	lsrs	r3, r3, #2
 8002e3e:	3302      	adds	r3, #2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e46:	4b36      	ldr	r3, [pc, #216]	; (8002f20 <HAL_GPIO_Init+0x2dc>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	43da      	mvns	r2, r3
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4013      	ands	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	2380      	movs	r3, #128	; 0x80
 8002e5c:	035b      	lsls	r3, r3, #13
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d003      	beq.n	8002e6a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002e6a:	4b2d      	ldr	r3, [pc, #180]	; (8002f20 <HAL_GPIO_Init+0x2dc>)
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002e70:	4b2b      	ldr	r3, [pc, #172]	; (8002f20 <HAL_GPIO_Init+0x2dc>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	43da      	mvns	r2, r3
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	2380      	movs	r3, #128	; 0x80
 8002e86:	039b      	lsls	r3, r3, #14
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d003      	beq.n	8002e94 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e94:	4b22      	ldr	r3, [pc, #136]	; (8002f20 <HAL_GPIO_Init+0x2dc>)
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002e9a:	4b21      	ldr	r3, [pc, #132]	; (8002f20 <HAL_GPIO_Init+0x2dc>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	43da      	mvns	r2, r3
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	2380      	movs	r3, #128	; 0x80
 8002eb0:	029b      	lsls	r3, r3, #10
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d003      	beq.n	8002ebe <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ebe:	4b18      	ldr	r3, [pc, #96]	; (8002f20 <HAL_GPIO_Init+0x2dc>)
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002ec4:	4b16      	ldr	r3, [pc, #88]	; (8002f20 <HAL_GPIO_Init+0x2dc>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	43da      	mvns	r2, r3
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	2380      	movs	r3, #128	; 0x80
 8002eda:	025b      	lsls	r3, r3, #9
 8002edc:	4013      	ands	r3, r2
 8002ede:	d003      	beq.n	8002ee8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002ee8:	4b0d      	ldr	r3, [pc, #52]	; (8002f20 <HAL_GPIO_Init+0x2dc>)
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	40da      	lsrs	r2, r3
 8002efc:	1e13      	subs	r3, r2, #0
 8002efe:	d000      	beq.n	8002f02 <HAL_GPIO_Init+0x2be>
 8002f00:	e6a8      	b.n	8002c54 <HAL_GPIO_Init+0x10>
  } 
}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	46c0      	nop			; (mov r8, r8)
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b006      	add	sp, #24
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	40010000 	.word	0x40010000
 8002f14:	48000400 	.word	0x48000400
 8002f18:	48000800 	.word	0x48000800
 8002f1c:	48000c00 	.word	0x48000c00
 8002f20:	40010400 	.word	0x40010400

08002f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	0008      	movs	r0, r1
 8002f2e:	0011      	movs	r1, r2
 8002f30:	1cbb      	adds	r3, r7, #2
 8002f32:	1c02      	adds	r2, r0, #0
 8002f34:	801a      	strh	r2, [r3, #0]
 8002f36:	1c7b      	adds	r3, r7, #1
 8002f38:	1c0a      	adds	r2, r1, #0
 8002f3a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f3c:	1c7b      	adds	r3, r7, #1
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d004      	beq.n	8002f4e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f44:	1cbb      	adds	r3, r7, #2
 8002f46:	881a      	ldrh	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f4c:	e003      	b.n	8002f56 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f4e:	1cbb      	adds	r3, r7, #2
 8002f50:	881a      	ldrh	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	b002      	add	sp, #8
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	0002      	movs	r2, r0
 8002f68:	1dbb      	adds	r3, r7, #6
 8002f6a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f6c:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	1dba      	adds	r2, r7, #6
 8002f72:	8812      	ldrh	r2, [r2, #0]
 8002f74:	4013      	ands	r3, r2
 8002f76:	d008      	beq.n	8002f8a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002f7a:	1dba      	adds	r2, r7, #6
 8002f7c:	8812      	ldrh	r2, [r2, #0]
 8002f7e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f80:	1dbb      	adds	r3, r7, #6
 8002f82:	881b      	ldrh	r3, [r3, #0]
 8002f84:	0018      	movs	r0, r3
 8002f86:	f000 f807 	bl	8002f98 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	b002      	add	sp, #8
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	40010400 	.word	0x40010400

08002f98 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	0002      	movs	r2, r0
 8002fa0:	1dbb      	adds	r3, r7, #6
 8002fa2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8002fa4:	46c0      	nop			; (mov r8, r8)
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	b002      	add	sp, #8
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	000a      	movs	r2, r1
 8002fb6:	1cfb      	adds	r3, r7, #3
 8002fb8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8002fba:	4b09      	ldr	r3, [pc, #36]	; (8002fe0 <HAL_PWR_EnterSLEEPMode+0x34>)
 8002fbc:	691a      	ldr	r2, [r3, #16]
 8002fbe:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <HAL_PWR_EnterSLEEPMode+0x34>)
 8002fc0:	2104      	movs	r1, #4
 8002fc2:	438a      	bics	r2, r1
 8002fc4:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002fc6:	1cfb      	adds	r3, r7, #3
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_PWR_EnterSLEEPMode+0x26>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002fce:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8002fd0:	e002      	b.n	8002fd8 <HAL_PWR_EnterSLEEPMode+0x2c>
    __SEV();
 8002fd2:	bf40      	sev
    __WFE();
 8002fd4:	bf20      	wfe
    __WFE();
 8002fd6:	bf20      	wfe
}
 8002fd8:	46c0      	nop			; (mov r8, r8)
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	b002      	add	sp, #8
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	e000ed00 	.word	0xe000ed00

08002fe4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b088      	sub	sp, #32
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e305      	b.n	8003602 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d100      	bne.n	8003002 <HAL_RCC_OscConfig+0x1e>
 8003000:	e08d      	b.n	800311e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003002:	4bc5      	ldr	r3, [pc, #788]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	220c      	movs	r2, #12
 8003008:	4013      	ands	r3, r2
 800300a:	2b04      	cmp	r3, #4
 800300c:	d00e      	beq.n	800302c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800300e:	4bc2      	ldr	r3, [pc, #776]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	220c      	movs	r2, #12
 8003014:	4013      	ands	r3, r2
 8003016:	2b08      	cmp	r3, #8
 8003018:	d116      	bne.n	8003048 <HAL_RCC_OscConfig+0x64>
 800301a:	4bbf      	ldr	r3, [pc, #764]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	23c0      	movs	r3, #192	; 0xc0
 8003020:	025b      	lsls	r3, r3, #9
 8003022:	401a      	ands	r2, r3
 8003024:	2380      	movs	r3, #128	; 0x80
 8003026:	025b      	lsls	r3, r3, #9
 8003028:	429a      	cmp	r2, r3
 800302a:	d10d      	bne.n	8003048 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800302c:	4bba      	ldr	r3, [pc, #744]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	2380      	movs	r3, #128	; 0x80
 8003032:	029b      	lsls	r3, r3, #10
 8003034:	4013      	ands	r3, r2
 8003036:	d100      	bne.n	800303a <HAL_RCC_OscConfig+0x56>
 8003038:	e070      	b.n	800311c <HAL_RCC_OscConfig+0x138>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d000      	beq.n	8003044 <HAL_RCC_OscConfig+0x60>
 8003042:	e06b      	b.n	800311c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e2dc      	b.n	8003602 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d107      	bne.n	8003060 <HAL_RCC_OscConfig+0x7c>
 8003050:	4bb1      	ldr	r3, [pc, #708]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	4bb0      	ldr	r3, [pc, #704]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 8003056:	2180      	movs	r1, #128	; 0x80
 8003058:	0249      	lsls	r1, r1, #9
 800305a:	430a      	orrs	r2, r1
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	e02f      	b.n	80030c0 <HAL_RCC_OscConfig+0xdc>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10c      	bne.n	8003082 <HAL_RCC_OscConfig+0x9e>
 8003068:	4bab      	ldr	r3, [pc, #684]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	4baa      	ldr	r3, [pc, #680]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 800306e:	49ab      	ldr	r1, [pc, #684]	; (800331c <HAL_RCC_OscConfig+0x338>)
 8003070:	400a      	ands	r2, r1
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	4ba8      	ldr	r3, [pc, #672]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	4ba7      	ldr	r3, [pc, #668]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 800307a:	49a9      	ldr	r1, [pc, #676]	; (8003320 <HAL_RCC_OscConfig+0x33c>)
 800307c:	400a      	ands	r2, r1
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	e01e      	b.n	80030c0 <HAL_RCC_OscConfig+0xdc>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b05      	cmp	r3, #5
 8003088:	d10e      	bne.n	80030a8 <HAL_RCC_OscConfig+0xc4>
 800308a:	4ba3      	ldr	r3, [pc, #652]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	4ba2      	ldr	r3, [pc, #648]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 8003090:	2180      	movs	r1, #128	; 0x80
 8003092:	02c9      	lsls	r1, r1, #11
 8003094:	430a      	orrs	r2, r1
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	4b9f      	ldr	r3, [pc, #636]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	4b9e      	ldr	r3, [pc, #632]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 800309e:	2180      	movs	r1, #128	; 0x80
 80030a0:	0249      	lsls	r1, r1, #9
 80030a2:	430a      	orrs	r2, r1
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	e00b      	b.n	80030c0 <HAL_RCC_OscConfig+0xdc>
 80030a8:	4b9b      	ldr	r3, [pc, #620]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	4b9a      	ldr	r3, [pc, #616]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 80030ae:	499b      	ldr	r1, [pc, #620]	; (800331c <HAL_RCC_OscConfig+0x338>)
 80030b0:	400a      	ands	r2, r1
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	4b98      	ldr	r3, [pc, #608]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	4b97      	ldr	r3, [pc, #604]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 80030ba:	4999      	ldr	r1, [pc, #612]	; (8003320 <HAL_RCC_OscConfig+0x33c>)
 80030bc:	400a      	ands	r2, r1
 80030be:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d014      	beq.n	80030f2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c8:	f7fe fece 	bl	8001e68 <HAL_GetTick>
 80030cc:	0003      	movs	r3, r0
 80030ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030d2:	f7fe fec9 	bl	8001e68 <HAL_GetTick>
 80030d6:	0002      	movs	r2, r0
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b64      	cmp	r3, #100	; 0x64
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e28e      	b.n	8003602 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e4:	4b8c      	ldr	r3, [pc, #560]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	2380      	movs	r3, #128	; 0x80
 80030ea:	029b      	lsls	r3, r3, #10
 80030ec:	4013      	ands	r3, r2
 80030ee:	d0f0      	beq.n	80030d2 <HAL_RCC_OscConfig+0xee>
 80030f0:	e015      	b.n	800311e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f2:	f7fe feb9 	bl	8001e68 <HAL_GetTick>
 80030f6:	0003      	movs	r3, r0
 80030f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030fc:	f7fe feb4 	bl	8001e68 <HAL_GetTick>
 8003100:	0002      	movs	r2, r0
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b64      	cmp	r3, #100	; 0x64
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e279      	b.n	8003602 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800310e:	4b82      	ldr	r3, [pc, #520]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	2380      	movs	r3, #128	; 0x80
 8003114:	029b      	lsls	r3, r3, #10
 8003116:	4013      	ands	r3, r2
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x118>
 800311a:	e000      	b.n	800311e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800311c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2202      	movs	r2, #2
 8003124:	4013      	ands	r3, r2
 8003126:	d100      	bne.n	800312a <HAL_RCC_OscConfig+0x146>
 8003128:	e06c      	b.n	8003204 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800312a:	4b7b      	ldr	r3, [pc, #492]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	220c      	movs	r2, #12
 8003130:	4013      	ands	r3, r2
 8003132:	d00e      	beq.n	8003152 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003134:	4b78      	ldr	r3, [pc, #480]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	220c      	movs	r2, #12
 800313a:	4013      	ands	r3, r2
 800313c:	2b08      	cmp	r3, #8
 800313e:	d11f      	bne.n	8003180 <HAL_RCC_OscConfig+0x19c>
 8003140:	4b75      	ldr	r3, [pc, #468]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	23c0      	movs	r3, #192	; 0xc0
 8003146:	025b      	lsls	r3, r3, #9
 8003148:	401a      	ands	r2, r3
 800314a:	2380      	movs	r3, #128	; 0x80
 800314c:	021b      	lsls	r3, r3, #8
 800314e:	429a      	cmp	r2, r3
 8003150:	d116      	bne.n	8003180 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003152:	4b71      	ldr	r3, [pc, #452]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2202      	movs	r2, #2
 8003158:	4013      	ands	r3, r2
 800315a:	d005      	beq.n	8003168 <HAL_RCC_OscConfig+0x184>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d001      	beq.n	8003168 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e24c      	b.n	8003602 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003168:	4b6b      	ldr	r3, [pc, #428]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	22f8      	movs	r2, #248	; 0xf8
 800316e:	4393      	bics	r3, r2
 8003170:	0019      	movs	r1, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	00da      	lsls	r2, r3, #3
 8003178:	4b67      	ldr	r3, [pc, #412]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 800317a:	430a      	orrs	r2, r1
 800317c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800317e:	e041      	b.n	8003204 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d024      	beq.n	80031d2 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003188:	4b63      	ldr	r3, [pc, #396]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	4b62      	ldr	r3, [pc, #392]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 800318e:	2101      	movs	r1, #1
 8003190:	430a      	orrs	r2, r1
 8003192:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003194:	f7fe fe68 	bl	8001e68 <HAL_GetTick>
 8003198:	0003      	movs	r3, r0
 800319a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800319e:	f7fe fe63 	bl	8001e68 <HAL_GetTick>
 80031a2:	0002      	movs	r2, r0
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e228      	b.n	8003602 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b0:	4b59      	ldr	r3, [pc, #356]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2202      	movs	r2, #2
 80031b6:	4013      	ands	r3, r2
 80031b8:	d0f1      	beq.n	800319e <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ba:	4b57      	ldr	r3, [pc, #348]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	22f8      	movs	r2, #248	; 0xf8
 80031c0:	4393      	bics	r3, r2
 80031c2:	0019      	movs	r1, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	00da      	lsls	r2, r3, #3
 80031ca:	4b53      	ldr	r3, [pc, #332]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 80031cc:	430a      	orrs	r2, r1
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	e018      	b.n	8003204 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031d2:	4b51      	ldr	r3, [pc, #324]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	4b50      	ldr	r3, [pc, #320]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 80031d8:	2101      	movs	r1, #1
 80031da:	438a      	bics	r2, r1
 80031dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031de:	f7fe fe43 	bl	8001e68 <HAL_GetTick>
 80031e2:	0003      	movs	r3, r0
 80031e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031e8:	f7fe fe3e 	bl	8001e68 <HAL_GetTick>
 80031ec:	0002      	movs	r2, r0
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e203      	b.n	8003602 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031fa:	4b47      	ldr	r3, [pc, #284]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2202      	movs	r2, #2
 8003200:	4013      	ands	r3, r2
 8003202:	d1f1      	bne.n	80031e8 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2208      	movs	r2, #8
 800320a:	4013      	ands	r3, r2
 800320c:	d036      	beq.n	800327c <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d019      	beq.n	800324a <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003216:	4b40      	ldr	r3, [pc, #256]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 8003218:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800321a:	4b3f      	ldr	r3, [pc, #252]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 800321c:	2101      	movs	r1, #1
 800321e:	430a      	orrs	r2, r1
 8003220:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003222:	f7fe fe21 	bl	8001e68 <HAL_GetTick>
 8003226:	0003      	movs	r3, r0
 8003228:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800322c:	f7fe fe1c 	bl	8001e68 <HAL_GetTick>
 8003230:	0002      	movs	r2, r0
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e1e1      	b.n	8003602 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800323e:	4b36      	ldr	r3, [pc, #216]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	2202      	movs	r2, #2
 8003244:	4013      	ands	r3, r2
 8003246:	d0f1      	beq.n	800322c <HAL_RCC_OscConfig+0x248>
 8003248:	e018      	b.n	800327c <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800324a:	4b33      	ldr	r3, [pc, #204]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 800324c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800324e:	4b32      	ldr	r3, [pc, #200]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 8003250:	2101      	movs	r1, #1
 8003252:	438a      	bics	r2, r1
 8003254:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003256:	f7fe fe07 	bl	8001e68 <HAL_GetTick>
 800325a:	0003      	movs	r3, r0
 800325c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003260:	f7fe fe02 	bl	8001e68 <HAL_GetTick>
 8003264:	0002      	movs	r2, r0
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e1c7      	b.n	8003602 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003272:	4b29      	ldr	r3, [pc, #164]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	2202      	movs	r2, #2
 8003278:	4013      	ands	r3, r2
 800327a:	d1f1      	bne.n	8003260 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2204      	movs	r2, #4
 8003282:	4013      	ands	r3, r2
 8003284:	d100      	bne.n	8003288 <HAL_RCC_OscConfig+0x2a4>
 8003286:	e0b5      	b.n	80033f4 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003288:	201f      	movs	r0, #31
 800328a:	183b      	adds	r3, r7, r0
 800328c:	2200      	movs	r2, #0
 800328e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003290:	4b21      	ldr	r3, [pc, #132]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 8003292:	69da      	ldr	r2, [r3, #28]
 8003294:	2380      	movs	r3, #128	; 0x80
 8003296:	055b      	lsls	r3, r3, #21
 8003298:	4013      	ands	r3, r2
 800329a:	d110      	bne.n	80032be <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800329c:	4b1e      	ldr	r3, [pc, #120]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 800329e:	69da      	ldr	r2, [r3, #28]
 80032a0:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 80032a2:	2180      	movs	r1, #128	; 0x80
 80032a4:	0549      	lsls	r1, r1, #21
 80032a6:	430a      	orrs	r2, r1
 80032a8:	61da      	str	r2, [r3, #28]
 80032aa:	4b1b      	ldr	r3, [pc, #108]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 80032ac:	69da      	ldr	r2, [r3, #28]
 80032ae:	2380      	movs	r3, #128	; 0x80
 80032b0:	055b      	lsls	r3, r3, #21
 80032b2:	4013      	ands	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80032b8:	183b      	adds	r3, r7, r0
 80032ba:	2201      	movs	r2, #1
 80032bc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032be:	4b19      	ldr	r3, [pc, #100]	; (8003324 <HAL_RCC_OscConfig+0x340>)
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	2380      	movs	r3, #128	; 0x80
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	4013      	ands	r3, r2
 80032c8:	d11a      	bne.n	8003300 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ca:	4b16      	ldr	r3, [pc, #88]	; (8003324 <HAL_RCC_OscConfig+0x340>)
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	4b15      	ldr	r3, [pc, #84]	; (8003324 <HAL_RCC_OscConfig+0x340>)
 80032d0:	2180      	movs	r1, #128	; 0x80
 80032d2:	0049      	lsls	r1, r1, #1
 80032d4:	430a      	orrs	r2, r1
 80032d6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032d8:	f7fe fdc6 	bl	8001e68 <HAL_GetTick>
 80032dc:	0003      	movs	r3, r0
 80032de:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e2:	f7fe fdc1 	bl	8001e68 <HAL_GetTick>
 80032e6:	0002      	movs	r2, r0
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b64      	cmp	r3, #100	; 0x64
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e186      	b.n	8003602 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f4:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <HAL_RCC_OscConfig+0x340>)
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	2380      	movs	r3, #128	; 0x80
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	4013      	ands	r3, r2
 80032fe:	d0f0      	beq.n	80032e2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d10f      	bne.n	8003328 <HAL_RCC_OscConfig+0x344>
 8003308:	4b03      	ldr	r3, [pc, #12]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 800330a:	6a1a      	ldr	r2, [r3, #32]
 800330c:	4b02      	ldr	r3, [pc, #8]	; (8003318 <HAL_RCC_OscConfig+0x334>)
 800330e:	2101      	movs	r1, #1
 8003310:	430a      	orrs	r2, r1
 8003312:	621a      	str	r2, [r3, #32]
 8003314:	e036      	b.n	8003384 <HAL_RCC_OscConfig+0x3a0>
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	40021000 	.word	0x40021000
 800331c:	fffeffff 	.word	0xfffeffff
 8003320:	fffbffff 	.word	0xfffbffff
 8003324:	40007000 	.word	0x40007000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10c      	bne.n	800334a <HAL_RCC_OscConfig+0x366>
 8003330:	4bb6      	ldr	r3, [pc, #728]	; (800360c <HAL_RCC_OscConfig+0x628>)
 8003332:	6a1a      	ldr	r2, [r3, #32]
 8003334:	4bb5      	ldr	r3, [pc, #724]	; (800360c <HAL_RCC_OscConfig+0x628>)
 8003336:	2101      	movs	r1, #1
 8003338:	438a      	bics	r2, r1
 800333a:	621a      	str	r2, [r3, #32]
 800333c:	4bb3      	ldr	r3, [pc, #716]	; (800360c <HAL_RCC_OscConfig+0x628>)
 800333e:	6a1a      	ldr	r2, [r3, #32]
 8003340:	4bb2      	ldr	r3, [pc, #712]	; (800360c <HAL_RCC_OscConfig+0x628>)
 8003342:	2104      	movs	r1, #4
 8003344:	438a      	bics	r2, r1
 8003346:	621a      	str	r2, [r3, #32]
 8003348:	e01c      	b.n	8003384 <HAL_RCC_OscConfig+0x3a0>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	2b05      	cmp	r3, #5
 8003350:	d10c      	bne.n	800336c <HAL_RCC_OscConfig+0x388>
 8003352:	4bae      	ldr	r3, [pc, #696]	; (800360c <HAL_RCC_OscConfig+0x628>)
 8003354:	6a1a      	ldr	r2, [r3, #32]
 8003356:	4bad      	ldr	r3, [pc, #692]	; (800360c <HAL_RCC_OscConfig+0x628>)
 8003358:	2104      	movs	r1, #4
 800335a:	430a      	orrs	r2, r1
 800335c:	621a      	str	r2, [r3, #32]
 800335e:	4bab      	ldr	r3, [pc, #684]	; (800360c <HAL_RCC_OscConfig+0x628>)
 8003360:	6a1a      	ldr	r2, [r3, #32]
 8003362:	4baa      	ldr	r3, [pc, #680]	; (800360c <HAL_RCC_OscConfig+0x628>)
 8003364:	2101      	movs	r1, #1
 8003366:	430a      	orrs	r2, r1
 8003368:	621a      	str	r2, [r3, #32]
 800336a:	e00b      	b.n	8003384 <HAL_RCC_OscConfig+0x3a0>
 800336c:	4ba7      	ldr	r3, [pc, #668]	; (800360c <HAL_RCC_OscConfig+0x628>)
 800336e:	6a1a      	ldr	r2, [r3, #32]
 8003370:	4ba6      	ldr	r3, [pc, #664]	; (800360c <HAL_RCC_OscConfig+0x628>)
 8003372:	2101      	movs	r1, #1
 8003374:	438a      	bics	r2, r1
 8003376:	621a      	str	r2, [r3, #32]
 8003378:	4ba4      	ldr	r3, [pc, #656]	; (800360c <HAL_RCC_OscConfig+0x628>)
 800337a:	6a1a      	ldr	r2, [r3, #32]
 800337c:	4ba3      	ldr	r3, [pc, #652]	; (800360c <HAL_RCC_OscConfig+0x628>)
 800337e:	2104      	movs	r1, #4
 8003380:	438a      	bics	r2, r1
 8003382:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d014      	beq.n	80033b6 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800338c:	f7fe fd6c 	bl	8001e68 <HAL_GetTick>
 8003390:	0003      	movs	r3, r0
 8003392:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003394:	e009      	b.n	80033aa <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003396:	f7fe fd67 	bl	8001e68 <HAL_GetTick>
 800339a:	0002      	movs	r2, r0
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	4a9b      	ldr	r2, [pc, #620]	; (8003610 <HAL_RCC_OscConfig+0x62c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e12b      	b.n	8003602 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033aa:	4b98      	ldr	r3, [pc, #608]	; (800360c <HAL_RCC_OscConfig+0x628>)
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	2202      	movs	r2, #2
 80033b0:	4013      	ands	r3, r2
 80033b2:	d0f0      	beq.n	8003396 <HAL_RCC_OscConfig+0x3b2>
 80033b4:	e013      	b.n	80033de <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b6:	f7fe fd57 	bl	8001e68 <HAL_GetTick>
 80033ba:	0003      	movs	r3, r0
 80033bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033be:	e009      	b.n	80033d4 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c0:	f7fe fd52 	bl	8001e68 <HAL_GetTick>
 80033c4:	0002      	movs	r2, r0
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	4a91      	ldr	r2, [pc, #580]	; (8003610 <HAL_RCC_OscConfig+0x62c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e116      	b.n	8003602 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d4:	4b8d      	ldr	r3, [pc, #564]	; (800360c <HAL_RCC_OscConfig+0x628>)
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	2202      	movs	r2, #2
 80033da:	4013      	ands	r3, r2
 80033dc:	d1f0      	bne.n	80033c0 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033de:	231f      	movs	r3, #31
 80033e0:	18fb      	adds	r3, r7, r3
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d105      	bne.n	80033f4 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e8:	4b88      	ldr	r3, [pc, #544]	; (800360c <HAL_RCC_OscConfig+0x628>)
 80033ea:	69da      	ldr	r2, [r3, #28]
 80033ec:	4b87      	ldr	r3, [pc, #540]	; (800360c <HAL_RCC_OscConfig+0x628>)
 80033ee:	4989      	ldr	r1, [pc, #548]	; (8003614 <HAL_RCC_OscConfig+0x630>)
 80033f0:	400a      	ands	r2, r1
 80033f2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2210      	movs	r2, #16
 80033fa:	4013      	ands	r3, r2
 80033fc:	d063      	beq.n	80034c6 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d12a      	bne.n	800345c <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003406:	4b81      	ldr	r3, [pc, #516]	; (800360c <HAL_RCC_OscConfig+0x628>)
 8003408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800340a:	4b80      	ldr	r3, [pc, #512]	; (800360c <HAL_RCC_OscConfig+0x628>)
 800340c:	2104      	movs	r1, #4
 800340e:	430a      	orrs	r2, r1
 8003410:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003412:	4b7e      	ldr	r3, [pc, #504]	; (800360c <HAL_RCC_OscConfig+0x628>)
 8003414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003416:	4b7d      	ldr	r3, [pc, #500]	; (800360c <HAL_RCC_OscConfig+0x628>)
 8003418:	2101      	movs	r1, #1
 800341a:	430a      	orrs	r2, r1
 800341c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800341e:	f7fe fd23 	bl	8001e68 <HAL_GetTick>
 8003422:	0003      	movs	r3, r0
 8003424:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003428:	f7fe fd1e 	bl	8001e68 <HAL_GetTick>
 800342c:	0002      	movs	r2, r0
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e0e3      	b.n	8003602 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800343a:	4b74      	ldr	r3, [pc, #464]	; (800360c <HAL_RCC_OscConfig+0x628>)
 800343c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800343e:	2202      	movs	r2, #2
 8003440:	4013      	ands	r3, r2
 8003442:	d0f1      	beq.n	8003428 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003444:	4b71      	ldr	r3, [pc, #452]	; (800360c <HAL_RCC_OscConfig+0x628>)
 8003446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003448:	22f8      	movs	r2, #248	; 0xf8
 800344a:	4393      	bics	r3, r2
 800344c:	0019      	movs	r1, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	00da      	lsls	r2, r3, #3
 8003454:	4b6d      	ldr	r3, [pc, #436]	; (800360c <HAL_RCC_OscConfig+0x628>)
 8003456:	430a      	orrs	r2, r1
 8003458:	635a      	str	r2, [r3, #52]	; 0x34
 800345a:	e034      	b.n	80034c6 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	3305      	adds	r3, #5
 8003462:	d111      	bne.n	8003488 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003464:	4b69      	ldr	r3, [pc, #420]	; (800360c <HAL_RCC_OscConfig+0x628>)
 8003466:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003468:	4b68      	ldr	r3, [pc, #416]	; (800360c <HAL_RCC_OscConfig+0x628>)
 800346a:	2104      	movs	r1, #4
 800346c:	438a      	bics	r2, r1
 800346e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003470:	4b66      	ldr	r3, [pc, #408]	; (800360c <HAL_RCC_OscConfig+0x628>)
 8003472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003474:	22f8      	movs	r2, #248	; 0xf8
 8003476:	4393      	bics	r3, r2
 8003478:	0019      	movs	r1, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	00da      	lsls	r2, r3, #3
 8003480:	4b62      	ldr	r3, [pc, #392]	; (800360c <HAL_RCC_OscConfig+0x628>)
 8003482:	430a      	orrs	r2, r1
 8003484:	635a      	str	r2, [r3, #52]	; 0x34
 8003486:	e01e      	b.n	80034c6 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003488:	4b60      	ldr	r3, [pc, #384]	; (800360c <HAL_RCC_OscConfig+0x628>)
 800348a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800348c:	4b5f      	ldr	r3, [pc, #380]	; (800360c <HAL_RCC_OscConfig+0x628>)
 800348e:	2104      	movs	r1, #4
 8003490:	430a      	orrs	r2, r1
 8003492:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003494:	4b5d      	ldr	r3, [pc, #372]	; (800360c <HAL_RCC_OscConfig+0x628>)
 8003496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003498:	4b5c      	ldr	r3, [pc, #368]	; (800360c <HAL_RCC_OscConfig+0x628>)
 800349a:	2101      	movs	r1, #1
 800349c:	438a      	bics	r2, r1
 800349e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a0:	f7fe fce2 	bl	8001e68 <HAL_GetTick>
 80034a4:	0003      	movs	r3, r0
 80034a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80034aa:	f7fe fcdd 	bl	8001e68 <HAL_GetTick>
 80034ae:	0002      	movs	r2, r0
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e0a2      	b.n	8003602 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80034bc:	4b53      	ldr	r3, [pc, #332]	; (800360c <HAL_RCC_OscConfig+0x628>)
 80034be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c0:	2202      	movs	r2, #2
 80034c2:	4013      	ands	r3, r2
 80034c4:	d1f1      	bne.n	80034aa <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d100      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4ec>
 80034ce:	e097      	b.n	8003600 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034d0:	4b4e      	ldr	r3, [pc, #312]	; (800360c <HAL_RCC_OscConfig+0x628>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	220c      	movs	r2, #12
 80034d6:	4013      	ands	r3, r2
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d100      	bne.n	80034de <HAL_RCC_OscConfig+0x4fa>
 80034dc:	e06b      	b.n	80035b6 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d14c      	bne.n	8003580 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e6:	4b49      	ldr	r3, [pc, #292]	; (800360c <HAL_RCC_OscConfig+0x628>)
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	4b48      	ldr	r3, [pc, #288]	; (800360c <HAL_RCC_OscConfig+0x628>)
 80034ec:	494a      	ldr	r1, [pc, #296]	; (8003618 <HAL_RCC_OscConfig+0x634>)
 80034ee:	400a      	ands	r2, r1
 80034f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f2:	f7fe fcb9 	bl	8001e68 <HAL_GetTick>
 80034f6:	0003      	movs	r3, r0
 80034f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034fc:	f7fe fcb4 	bl	8001e68 <HAL_GetTick>
 8003500:	0002      	movs	r2, r0
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e079      	b.n	8003602 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800350e:	4b3f      	ldr	r3, [pc, #252]	; (800360c <HAL_RCC_OscConfig+0x628>)
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	2380      	movs	r3, #128	; 0x80
 8003514:	049b      	lsls	r3, r3, #18
 8003516:	4013      	ands	r3, r2
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800351a:	4b3c      	ldr	r3, [pc, #240]	; (800360c <HAL_RCC_OscConfig+0x628>)
 800351c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351e:	220f      	movs	r2, #15
 8003520:	4393      	bics	r3, r2
 8003522:	0019      	movs	r1, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003528:	4b38      	ldr	r3, [pc, #224]	; (800360c <HAL_RCC_OscConfig+0x628>)
 800352a:	430a      	orrs	r2, r1
 800352c:	62da      	str	r2, [r3, #44]	; 0x2c
 800352e:	4b37      	ldr	r3, [pc, #220]	; (800360c <HAL_RCC_OscConfig+0x628>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	4a3a      	ldr	r2, [pc, #232]	; (800361c <HAL_RCC_OscConfig+0x638>)
 8003534:	4013      	ands	r3, r2
 8003536:	0019      	movs	r1, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	431a      	orrs	r2, r3
 8003542:	4b32      	ldr	r3, [pc, #200]	; (800360c <HAL_RCC_OscConfig+0x628>)
 8003544:	430a      	orrs	r2, r1
 8003546:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003548:	4b30      	ldr	r3, [pc, #192]	; (800360c <HAL_RCC_OscConfig+0x628>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	4b2f      	ldr	r3, [pc, #188]	; (800360c <HAL_RCC_OscConfig+0x628>)
 800354e:	2180      	movs	r1, #128	; 0x80
 8003550:	0449      	lsls	r1, r1, #17
 8003552:	430a      	orrs	r2, r1
 8003554:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003556:	f7fe fc87 	bl	8001e68 <HAL_GetTick>
 800355a:	0003      	movs	r3, r0
 800355c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003560:	f7fe fc82 	bl	8001e68 <HAL_GetTick>
 8003564:	0002      	movs	r2, r0
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e047      	b.n	8003602 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003572:	4b26      	ldr	r3, [pc, #152]	; (800360c <HAL_RCC_OscConfig+0x628>)
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	2380      	movs	r3, #128	; 0x80
 8003578:	049b      	lsls	r3, r3, #18
 800357a:	4013      	ands	r3, r2
 800357c:	d0f0      	beq.n	8003560 <HAL_RCC_OscConfig+0x57c>
 800357e:	e03f      	b.n	8003600 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003580:	4b22      	ldr	r3, [pc, #136]	; (800360c <HAL_RCC_OscConfig+0x628>)
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	4b21      	ldr	r3, [pc, #132]	; (800360c <HAL_RCC_OscConfig+0x628>)
 8003586:	4924      	ldr	r1, [pc, #144]	; (8003618 <HAL_RCC_OscConfig+0x634>)
 8003588:	400a      	ands	r2, r1
 800358a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358c:	f7fe fc6c 	bl	8001e68 <HAL_GetTick>
 8003590:	0003      	movs	r3, r0
 8003592:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003596:	f7fe fc67 	bl	8001e68 <HAL_GetTick>
 800359a:	0002      	movs	r2, r0
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e02c      	b.n	8003602 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a8:	4b18      	ldr	r3, [pc, #96]	; (800360c <HAL_RCC_OscConfig+0x628>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	2380      	movs	r3, #128	; 0x80
 80035ae:	049b      	lsls	r3, r3, #18
 80035b0:	4013      	ands	r3, r2
 80035b2:	d1f0      	bne.n	8003596 <HAL_RCC_OscConfig+0x5b2>
 80035b4:	e024      	b.n	8003600 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d101      	bne.n	80035c2 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e01f      	b.n	8003602 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80035c2:	4b12      	ldr	r3, [pc, #72]	; (800360c <HAL_RCC_OscConfig+0x628>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80035c8:	4b10      	ldr	r3, [pc, #64]	; (800360c <HAL_RCC_OscConfig+0x628>)
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	23c0      	movs	r3, #192	; 0xc0
 80035d2:	025b      	lsls	r3, r3, #9
 80035d4:	401a      	ands	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	429a      	cmp	r2, r3
 80035dc:	d10e      	bne.n	80035fc <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	220f      	movs	r2, #15
 80035e2:	401a      	ands	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d107      	bne.n	80035fc <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	23f0      	movs	r3, #240	; 0xf0
 80035f0:	039b      	lsls	r3, r3, #14
 80035f2:	401a      	ands	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d001      	beq.n	8003600 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e000      	b.n	8003602 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	0018      	movs	r0, r3
 8003604:	46bd      	mov	sp, r7
 8003606:	b008      	add	sp, #32
 8003608:	bd80      	pop	{r7, pc}
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	40021000 	.word	0x40021000
 8003610:	00001388 	.word	0x00001388
 8003614:	efffffff 	.word	0xefffffff
 8003618:	feffffff 	.word	0xfeffffff
 800361c:	ffc27fff 	.word	0xffc27fff

08003620 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e0b3      	b.n	800379c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003634:	4b5b      	ldr	r3, [pc, #364]	; (80037a4 <HAL_RCC_ClockConfig+0x184>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2201      	movs	r2, #1
 800363a:	4013      	ands	r3, r2
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d911      	bls.n	8003666 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003642:	4b58      	ldr	r3, [pc, #352]	; (80037a4 <HAL_RCC_ClockConfig+0x184>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2201      	movs	r2, #1
 8003648:	4393      	bics	r3, r2
 800364a:	0019      	movs	r1, r3
 800364c:	4b55      	ldr	r3, [pc, #340]	; (80037a4 <HAL_RCC_ClockConfig+0x184>)
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003654:	4b53      	ldr	r3, [pc, #332]	; (80037a4 <HAL_RCC_ClockConfig+0x184>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2201      	movs	r2, #1
 800365a:	4013      	ands	r3, r2
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d001      	beq.n	8003666 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e09a      	b.n	800379c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2202      	movs	r2, #2
 800366c:	4013      	ands	r3, r2
 800366e:	d015      	beq.n	800369c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2204      	movs	r2, #4
 8003676:	4013      	ands	r3, r2
 8003678:	d006      	beq.n	8003688 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800367a:	4b4b      	ldr	r3, [pc, #300]	; (80037a8 <HAL_RCC_ClockConfig+0x188>)
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	4b4a      	ldr	r3, [pc, #296]	; (80037a8 <HAL_RCC_ClockConfig+0x188>)
 8003680:	21e0      	movs	r1, #224	; 0xe0
 8003682:	00c9      	lsls	r1, r1, #3
 8003684:	430a      	orrs	r2, r1
 8003686:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003688:	4b47      	ldr	r3, [pc, #284]	; (80037a8 <HAL_RCC_ClockConfig+0x188>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	22f0      	movs	r2, #240	; 0xf0
 800368e:	4393      	bics	r3, r2
 8003690:	0019      	movs	r1, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	4b44      	ldr	r3, [pc, #272]	; (80037a8 <HAL_RCC_ClockConfig+0x188>)
 8003698:	430a      	orrs	r2, r1
 800369a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2201      	movs	r2, #1
 80036a2:	4013      	ands	r3, r2
 80036a4:	d040      	beq.n	8003728 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d107      	bne.n	80036be <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ae:	4b3e      	ldr	r3, [pc, #248]	; (80037a8 <HAL_RCC_ClockConfig+0x188>)
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	2380      	movs	r3, #128	; 0x80
 80036b4:	029b      	lsls	r3, r3, #10
 80036b6:	4013      	ands	r3, r2
 80036b8:	d114      	bne.n	80036e4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e06e      	b.n	800379c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d107      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c6:	4b38      	ldr	r3, [pc, #224]	; (80037a8 <HAL_RCC_ClockConfig+0x188>)
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	2380      	movs	r3, #128	; 0x80
 80036cc:	049b      	lsls	r3, r3, #18
 80036ce:	4013      	ands	r3, r2
 80036d0:	d108      	bne.n	80036e4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e062      	b.n	800379c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d6:	4b34      	ldr	r3, [pc, #208]	; (80037a8 <HAL_RCC_ClockConfig+0x188>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2202      	movs	r2, #2
 80036dc:	4013      	ands	r3, r2
 80036de:	d101      	bne.n	80036e4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e05b      	b.n	800379c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036e4:	4b30      	ldr	r3, [pc, #192]	; (80037a8 <HAL_RCC_ClockConfig+0x188>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2203      	movs	r2, #3
 80036ea:	4393      	bics	r3, r2
 80036ec:	0019      	movs	r1, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	4b2d      	ldr	r3, [pc, #180]	; (80037a8 <HAL_RCC_ClockConfig+0x188>)
 80036f4:	430a      	orrs	r2, r1
 80036f6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036f8:	f7fe fbb6 	bl	8001e68 <HAL_GetTick>
 80036fc:	0003      	movs	r3, r0
 80036fe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003700:	e009      	b.n	8003716 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003702:	f7fe fbb1 	bl	8001e68 <HAL_GetTick>
 8003706:	0002      	movs	r2, r0
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	4a27      	ldr	r2, [pc, #156]	; (80037ac <HAL_RCC_ClockConfig+0x18c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e042      	b.n	800379c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003716:	4b24      	ldr	r3, [pc, #144]	; (80037a8 <HAL_RCC_ClockConfig+0x188>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	220c      	movs	r2, #12
 800371c:	401a      	ands	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	429a      	cmp	r2, r3
 8003726:	d1ec      	bne.n	8003702 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003728:	4b1e      	ldr	r3, [pc, #120]	; (80037a4 <HAL_RCC_ClockConfig+0x184>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2201      	movs	r2, #1
 800372e:	4013      	ands	r3, r2
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d211      	bcs.n	800375a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003736:	4b1b      	ldr	r3, [pc, #108]	; (80037a4 <HAL_RCC_ClockConfig+0x184>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2201      	movs	r2, #1
 800373c:	4393      	bics	r3, r2
 800373e:	0019      	movs	r1, r3
 8003740:	4b18      	ldr	r3, [pc, #96]	; (80037a4 <HAL_RCC_ClockConfig+0x184>)
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003748:	4b16      	ldr	r3, [pc, #88]	; (80037a4 <HAL_RCC_ClockConfig+0x184>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2201      	movs	r2, #1
 800374e:	4013      	ands	r3, r2
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d001      	beq.n	800375a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e020      	b.n	800379c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2204      	movs	r2, #4
 8003760:	4013      	ands	r3, r2
 8003762:	d009      	beq.n	8003778 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003764:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <HAL_RCC_ClockConfig+0x188>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	4a11      	ldr	r2, [pc, #68]	; (80037b0 <HAL_RCC_ClockConfig+0x190>)
 800376a:	4013      	ands	r3, r2
 800376c:	0019      	movs	r1, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <HAL_RCC_ClockConfig+0x188>)
 8003774:	430a      	orrs	r2, r1
 8003776:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003778:	f000 f820 	bl	80037bc <HAL_RCC_GetSysClockFreq>
 800377c:	0001      	movs	r1, r0
 800377e:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <HAL_RCC_ClockConfig+0x188>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	091b      	lsrs	r3, r3, #4
 8003784:	220f      	movs	r2, #15
 8003786:	4013      	ands	r3, r2
 8003788:	4a0a      	ldr	r2, [pc, #40]	; (80037b4 <HAL_RCC_ClockConfig+0x194>)
 800378a:	5cd3      	ldrb	r3, [r2, r3]
 800378c:	000a      	movs	r2, r1
 800378e:	40da      	lsrs	r2, r3
 8003790:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <HAL_RCC_ClockConfig+0x198>)
 8003792:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003794:	2003      	movs	r0, #3
 8003796:	f7fe fb21 	bl	8001ddc <HAL_InitTick>
  
  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	0018      	movs	r0, r3
 800379e:	46bd      	mov	sp, r7
 80037a0:	b004      	add	sp, #16
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40022000 	.word	0x40022000
 80037a8:	40021000 	.word	0x40021000
 80037ac:	00001388 	.word	0x00001388
 80037b0:	fffff8ff 	.word	0xfffff8ff
 80037b4:	08005418 	.word	0x08005418
 80037b8:	200002d0 	.word	0x200002d0

080037bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	2300      	movs	r3, #0
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	2300      	movs	r3, #0
 80037cc:	617b      	str	r3, [r7, #20]
 80037ce:	2300      	movs	r3, #0
 80037d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80037d6:	4b21      	ldr	r3, [pc, #132]	; (800385c <HAL_RCC_GetSysClockFreq+0xa0>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	220c      	movs	r2, #12
 80037e0:	4013      	ands	r3, r2
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d002      	beq.n	80037ec <HAL_RCC_GetSysClockFreq+0x30>
 80037e6:	2b08      	cmp	r3, #8
 80037e8:	d003      	beq.n	80037f2 <HAL_RCC_GetSysClockFreq+0x36>
 80037ea:	e02e      	b.n	800384a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037ec:	4b1c      	ldr	r3, [pc, #112]	; (8003860 <HAL_RCC_GetSysClockFreq+0xa4>)
 80037ee:	613b      	str	r3, [r7, #16]
      break;
 80037f0:	e02e      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	0c9b      	lsrs	r3, r3, #18
 80037f6:	220f      	movs	r2, #15
 80037f8:	4013      	ands	r3, r2
 80037fa:	4a1a      	ldr	r2, [pc, #104]	; (8003864 <HAL_RCC_GetSysClockFreq+0xa8>)
 80037fc:	5cd3      	ldrb	r3, [r2, r3]
 80037fe:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003800:	4b16      	ldr	r3, [pc, #88]	; (800385c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	220f      	movs	r2, #15
 8003806:	4013      	ands	r3, r2
 8003808:	4a17      	ldr	r2, [pc, #92]	; (8003868 <HAL_RCC_GetSysClockFreq+0xac>)
 800380a:	5cd3      	ldrb	r3, [r2, r3]
 800380c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	23c0      	movs	r3, #192	; 0xc0
 8003812:	025b      	lsls	r3, r3, #9
 8003814:	401a      	ands	r2, r3
 8003816:	2380      	movs	r3, #128	; 0x80
 8003818:	025b      	lsls	r3, r3, #9
 800381a:	429a      	cmp	r2, r3
 800381c:	d109      	bne.n	8003832 <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800381e:	68b9      	ldr	r1, [r7, #8]
 8003820:	480f      	ldr	r0, [pc, #60]	; (8003860 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003822:	f7fc fc6f 	bl	8000104 <__udivsi3>
 8003826:	0003      	movs	r3, r0
 8003828:	001a      	movs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4353      	muls	r3, r2
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	e008      	b.n	8003844 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003832:	68b9      	ldr	r1, [r7, #8]
 8003834:	480d      	ldr	r0, [pc, #52]	; (800386c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003836:	f7fc fc65 	bl	8000104 <__udivsi3>
 800383a:	0003      	movs	r3, r0
 800383c:	001a      	movs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4353      	muls	r3, r2
 8003842:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	613b      	str	r3, [r7, #16]
      break;
 8003848:	e002      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800384a:	4b08      	ldr	r3, [pc, #32]	; (800386c <HAL_RCC_GetSysClockFreq+0xb0>)
 800384c:	613b      	str	r3, [r7, #16]
      break;
 800384e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003850:	693b      	ldr	r3, [r7, #16]
}
 8003852:	0018      	movs	r0, r3
 8003854:	46bd      	mov	sp, r7
 8003856:	b006      	add	sp, #24
 8003858:	bd80      	pop	{r7, pc}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	40021000 	.word	0x40021000
 8003860:	01e84800 	.word	0x01e84800
 8003864:	08005428 	.word	0x08005428
 8003868:	08005438 	.word	0x08005438
 800386c:	007a1200 	.word	0x007a1200

08003870 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800387c:	2300      	movs	r3, #0
 800387e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	2380      	movs	r3, #128	; 0x80
 8003886:	025b      	lsls	r3, r3, #9
 8003888:	4013      	ands	r3, r2
 800388a:	d100      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800388c:	e08e      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800388e:	2017      	movs	r0, #23
 8003890:	183b      	adds	r3, r7, r0
 8003892:	2200      	movs	r2, #0
 8003894:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003896:	4b57      	ldr	r3, [pc, #348]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003898:	69da      	ldr	r2, [r3, #28]
 800389a:	2380      	movs	r3, #128	; 0x80
 800389c:	055b      	lsls	r3, r3, #21
 800389e:	4013      	ands	r3, r2
 80038a0:	d110      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038a2:	4b54      	ldr	r3, [pc, #336]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038a4:	69da      	ldr	r2, [r3, #28]
 80038a6:	4b53      	ldr	r3, [pc, #332]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038a8:	2180      	movs	r1, #128	; 0x80
 80038aa:	0549      	lsls	r1, r1, #21
 80038ac:	430a      	orrs	r2, r1
 80038ae:	61da      	str	r2, [r3, #28]
 80038b0:	4b50      	ldr	r3, [pc, #320]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038b2:	69da      	ldr	r2, [r3, #28]
 80038b4:	2380      	movs	r3, #128	; 0x80
 80038b6:	055b      	lsls	r3, r3, #21
 80038b8:	4013      	ands	r3, r2
 80038ba:	60bb      	str	r3, [r7, #8]
 80038bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038be:	183b      	adds	r3, r7, r0
 80038c0:	2201      	movs	r2, #1
 80038c2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c4:	4b4c      	ldr	r3, [pc, #304]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	2380      	movs	r3, #128	; 0x80
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	4013      	ands	r3, r2
 80038ce:	d11a      	bne.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038d0:	4b49      	ldr	r3, [pc, #292]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	4b48      	ldr	r3, [pc, #288]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80038d6:	2180      	movs	r1, #128	; 0x80
 80038d8:	0049      	lsls	r1, r1, #1
 80038da:	430a      	orrs	r2, r1
 80038dc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038de:	f7fe fac3 	bl	8001e68 <HAL_GetTick>
 80038e2:	0003      	movs	r3, r0
 80038e4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e6:	e008      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038e8:	f7fe fabe 	bl	8001e68 <HAL_GetTick>
 80038ec:	0002      	movs	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b64      	cmp	r3, #100	; 0x64
 80038f4:	d901      	bls.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e077      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038fa:	4b3f      	ldr	r3, [pc, #252]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	2380      	movs	r3, #128	; 0x80
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	4013      	ands	r3, r2
 8003904:	d0f0      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003906:	4b3b      	ldr	r3, [pc, #236]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003908:	6a1a      	ldr	r2, [r3, #32]
 800390a:	23c0      	movs	r3, #192	; 0xc0
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4013      	ands	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d034      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	23c0      	movs	r3, #192	; 0xc0
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4013      	ands	r3, r2
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	429a      	cmp	r2, r3
 8003926:	d02c      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003928:	4b32      	ldr	r3, [pc, #200]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	4a33      	ldr	r2, [pc, #204]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800392e:	4013      	ands	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003932:	4b30      	ldr	r3, [pc, #192]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003934:	6a1a      	ldr	r2, [r3, #32]
 8003936:	4b2f      	ldr	r3, [pc, #188]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003938:	2180      	movs	r1, #128	; 0x80
 800393a:	0249      	lsls	r1, r1, #9
 800393c:	430a      	orrs	r2, r1
 800393e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003940:	4b2c      	ldr	r3, [pc, #176]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003942:	6a1a      	ldr	r2, [r3, #32]
 8003944:	4b2b      	ldr	r3, [pc, #172]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003946:	492e      	ldr	r1, [pc, #184]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003948:	400a      	ands	r2, r1
 800394a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800394c:	4b29      	ldr	r3, [pc, #164]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2201      	movs	r2, #1
 8003956:	4013      	ands	r3, r2
 8003958:	d013      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395a:	f7fe fa85 	bl	8001e68 <HAL_GetTick>
 800395e:	0003      	movs	r3, r0
 8003960:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003962:	e009      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003964:	f7fe fa80 	bl	8001e68 <HAL_GetTick>
 8003968:	0002      	movs	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	4a25      	ldr	r2, [pc, #148]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d901      	bls.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e038      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003978:	4b1e      	ldr	r3, [pc, #120]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	2202      	movs	r2, #2
 800397e:	4013      	ands	r3, r2
 8003980:	d0f0      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003982:	4b1c      	ldr	r3, [pc, #112]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	4a1d      	ldr	r2, [pc, #116]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003988:	4013      	ands	r3, r2
 800398a:	0019      	movs	r1, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	4b18      	ldr	r3, [pc, #96]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003992:	430a      	orrs	r2, r1
 8003994:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003996:	2317      	movs	r3, #23
 8003998:	18fb      	adds	r3, r7, r3
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d105      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039a0:	4b14      	ldr	r3, [pc, #80]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80039a2:	69da      	ldr	r2, [r3, #28]
 80039a4:	4b13      	ldr	r3, [pc, #76]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80039a6:	4918      	ldr	r1, [pc, #96]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80039a8:	400a      	ands	r2, r1
 80039aa:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2201      	movs	r2, #1
 80039b2:	4013      	ands	r3, r2
 80039b4:	d009      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039b6:	4b0f      	ldr	r3, [pc, #60]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	2203      	movs	r2, #3
 80039bc:	4393      	bics	r3, r2
 80039be:	0019      	movs	r1, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80039c6:	430a      	orrs	r2, r1
 80039c8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2220      	movs	r2, #32
 80039d0:	4013      	ands	r3, r2
 80039d2:	d009      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039d4:	4b07      	ldr	r3, [pc, #28]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80039d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d8:	2210      	movs	r2, #16
 80039da:	4393      	bics	r3, r2
 80039dc:	0019      	movs	r1, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80039e4:	430a      	orrs	r2, r1
 80039e6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	0018      	movs	r0, r3
 80039ec:	46bd      	mov	sp, r7
 80039ee:	b006      	add	sp, #24
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	46c0      	nop			; (mov r8, r8)
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40007000 	.word	0x40007000
 80039fc:	fffffcff 	.word	0xfffffcff
 8003a00:	fffeffff 	.word	0xfffeffff
 8003a04:	00001388 	.word	0x00001388
 8003a08:	efffffff 	.word	0xefffffff

08003a0c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003a0c:	b5b0      	push	{r4, r5, r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003a14:	230f      	movs	r3, #15
 8003a16:	18fb      	adds	r3, r7, r3
 8003a18:	2201      	movs	r2, #1
 8003a1a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e081      	b.n	8003b2a <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	7f5b      	ldrb	r3, [r3, #29]
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d106      	bne.n	8003a3e <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f7fd ffb1 	bl	80019a0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2202      	movs	r2, #2
 8003a42:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	2210      	movs	r2, #16
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	2b10      	cmp	r3, #16
 8003a50:	d05c      	beq.n	8003b0c <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	22ca      	movs	r2, #202	; 0xca
 8003a58:	625a      	str	r2, [r3, #36]	; 0x24
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2253      	movs	r2, #83	; 0x53
 8003a60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003a62:	250f      	movs	r5, #15
 8003a64:	197c      	adds	r4, r7, r5
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f000 faa9 	bl	8003fc0 <RTC_EnterInitMode>
 8003a6e:	0003      	movs	r3, r0
 8003a70:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8003a72:	0028      	movs	r0, r5
 8003a74:	183b      	adds	r3, r7, r0
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d12c      	bne.n	8003ad6 <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	492b      	ldr	r1, [pc, #172]	; (8003b34 <HAL_RTC_Init+0x128>)
 8003a88:	400a      	ands	r2, r1
 8003a8a:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6899      	ldr	r1, [r3, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	68d2      	ldr	r2, [r2, #12]
 8003ab2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6919      	ldr	r1, [r3, #16]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	041a      	lsls	r2, r3, #16
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003ac8:	183c      	adds	r4, r7, r0
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	0018      	movs	r0, r3
 8003ace:	f000 faba 	bl	8004046 <RTC_ExitInitMode>
 8003ad2:	0003      	movs	r3, r0
 8003ad4:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8003ad6:	230f      	movs	r3, #15
 8003ad8:	18fb      	adds	r3, r7, r3
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d110      	bne.n	8003b02 <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4913      	ldr	r1, [pc, #76]	; (8003b38 <HAL_RTC_Init+0x12c>)
 8003aec:	400a      	ands	r2, r1
 8003aee:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699a      	ldr	r2, [r3, #24]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	22ff      	movs	r2, #255	; 0xff
 8003b08:	625a      	str	r2, [r3, #36]	; 0x24
 8003b0a:	e003      	b.n	8003b14 <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003b0c:	230f      	movs	r3, #15
 8003b0e:	18fb      	adds	r3, r7, r3
 8003b10:	2200      	movs	r2, #0
 8003b12:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8003b14:	230f      	movs	r3, #15
 8003b16:	18fb      	adds	r3, r7, r3
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d102      	bne.n	8003b24 <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003b24:	230f      	movs	r3, #15
 8003b26:	18fb      	adds	r3, r7, r3
 8003b28:	781b      	ldrb	r3, [r3, #0]
}
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	b004      	add	sp, #16
 8003b30:	bdb0      	pop	{r4, r5, r7, pc}
 8003b32:	46c0      	nop			; (mov r8, r8)
 8003b34:	ff8fffbf 	.word	0xff8fffbf
 8003b38:	fffbffff 	.word	0xfffbffff

08003b3c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003b3c:	b5b0      	push	{r4, r5, r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	7f1b      	ldrb	r3, [r3, #28]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_RTC_SetTime+0x1c>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e08e      	b.n	8003c76 <HAL_RTC_SetTime+0x13a>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2202      	movs	r2, #2
 8003b62:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d125      	bne.n	8003bb6 <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2240      	movs	r2, #64	; 0x40
 8003b72:	4013      	ands	r3, r2
 8003b74:	d102      	bne.n	8003b7c <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	0018      	movs	r0, r3
 8003b82:	f000 fa89 	bl	8004098 <RTC_ByteToBcd2>
 8003b86:	0003      	movs	r3, r0
 8003b88:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	785b      	ldrb	r3, [r3, #1]
 8003b8e:	0018      	movs	r0, r3
 8003b90:	f000 fa82 	bl	8004098 <RTC_ByteToBcd2>
 8003b94:	0003      	movs	r3, r0
 8003b96:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003b98:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	789b      	ldrb	r3, [r3, #2]
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f000 fa7a 	bl	8004098 <RTC_ByteToBcd2>
 8003ba4:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003ba6:	0022      	movs	r2, r4
 8003ba8:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	78db      	ldrb	r3, [r3, #3]
 8003bae:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	e017      	b.n	8003be6 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	2240      	movs	r2, #64	; 0x40
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d102      	bne.n	8003bc8 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	785b      	ldrb	r3, [r3, #1]
 8003bd2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003bd4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003bda:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	78db      	ldrb	r3, [r3, #3]
 8003be0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003be2:	4313      	orrs	r3, r2
 8003be4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	22ca      	movs	r2, #202	; 0xca
 8003bec:	625a      	str	r2, [r3, #36]	; 0x24
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2253      	movs	r2, #83	; 0x53
 8003bf4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003bf6:	2513      	movs	r5, #19
 8003bf8:	197c      	adds	r4, r7, r5
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	f000 f9df 	bl	8003fc0 <RTC_EnterInitMode>
 8003c02:	0003      	movs	r3, r0
 8003c04:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8003c06:	0028      	movs	r0, r5
 8003c08:	183b      	adds	r3, r7, r0
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d120      	bne.n	8003c52 <HAL_RTC_SetTime+0x116>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	491a      	ldr	r1, [pc, #104]	; (8003c80 <HAL_RTC_SetTime+0x144>)
 8003c18:	400a      	ands	r2, r1
 8003c1a:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4917      	ldr	r1, [pc, #92]	; (8003c84 <HAL_RTC_SetTime+0x148>)
 8003c28:	400a      	ands	r2, r1
 8003c2a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6899      	ldr	r1, [r3, #8]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003c44:	183c      	adds	r4, r7, r0
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f000 f9fc 	bl	8004046 <RTC_ExitInitMode>
 8003c4e:	0003      	movs	r3, r0
 8003c50:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8003c52:	2313      	movs	r3, #19
 8003c54:	18fb      	adds	r3, r7, r3
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d102      	bne.n	8003c62 <HAL_RTC_SetTime+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	22ff      	movs	r2, #255	; 0xff
 8003c68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	771a      	strb	r2, [r3, #28]

  return status;
 8003c70:	2313      	movs	r3, #19
 8003c72:	18fb      	adds	r3, r7, r3
 8003c74:	781b      	ldrb	r3, [r3, #0]
}
 8003c76:	0018      	movs	r0, r3
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	b006      	add	sp, #24
 8003c7c:	bdb0      	pop	{r4, r5, r7, pc}
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	007f7f7f 	.word	0x007f7f7f
 8003c84:	fffbffff 	.word	0xfffbffff

08003c88 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003c88:	b5b0      	push	{r4, r5, r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	7f1b      	ldrb	r3, [r3, #28]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_RTC_SetDate+0x1c>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e07a      	b.n	8003d9a <HAL_RTC_SetDate+0x112>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2202      	movs	r2, #2
 8003cae:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10e      	bne.n	8003cd4 <HAL_RTC_SetDate+0x4c>
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	785b      	ldrb	r3, [r3, #1]
 8003cba:	001a      	movs	r2, r3
 8003cbc:	2310      	movs	r3, #16
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	d008      	beq.n	8003cd4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	785b      	ldrb	r3, [r3, #1]
 8003cc6:	2210      	movs	r2, #16
 8003cc8:	4393      	bics	r3, r2
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	330a      	adds	r3, #10
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d11c      	bne.n	8003d14 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	78db      	ldrb	r3, [r3, #3]
 8003cde:	0018      	movs	r0, r3
 8003ce0:	f000 f9da 	bl	8004098 <RTC_ByteToBcd2>
 8003ce4:	0003      	movs	r3, r0
 8003ce6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	785b      	ldrb	r3, [r3, #1]
 8003cec:	0018      	movs	r0, r3
 8003cee:	f000 f9d3 	bl	8004098 <RTC_ByteToBcd2>
 8003cf2:	0003      	movs	r3, r0
 8003cf4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003cf6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	789b      	ldrb	r3, [r3, #2]
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f000 f9cb 	bl	8004098 <RTC_ByteToBcd2>
 8003d02:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003d04:	0022      	movs	r2, r4
 8003d06:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	617b      	str	r3, [r7, #20]
 8003d12:	e00e      	b.n	8003d32 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	78db      	ldrb	r3, [r3, #3]
 8003d18:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	785b      	ldrb	r3, [r3, #1]
 8003d1e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003d20:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003d26:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	22ca      	movs	r2, #202	; 0xca
 8003d38:	625a      	str	r2, [r3, #36]	; 0x24
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2253      	movs	r2, #83	; 0x53
 8003d40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003d42:	2513      	movs	r5, #19
 8003d44:	197c      	adds	r4, r7, r5
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	0018      	movs	r0, r3
 8003d4a:	f000 f939 	bl	8003fc0 <RTC_EnterInitMode>
 8003d4e:	0003      	movs	r3, r0
 8003d50:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8003d52:	0028      	movs	r0, r5
 8003d54:	183b      	adds	r3, r7, r0
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10c      	bne.n	8003d76 <HAL_RTC_SetDate+0xee>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	4910      	ldr	r1, [pc, #64]	; (8003da4 <HAL_RTC_SetDate+0x11c>)
 8003d64:	400a      	ands	r2, r1
 8003d66:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003d68:	183c      	adds	r4, r7, r0
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f000 f96a 	bl	8004046 <RTC_ExitInitMode>
 8003d72:	0003      	movs	r3, r0
 8003d74:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8003d76:	2313      	movs	r3, #19
 8003d78:	18fb      	adds	r3, r7, r3
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d102      	bne.n	8003d86 <HAL_RTC_SetDate+0xfe>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2201      	movs	r2, #1
 8003d84:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	22ff      	movs	r2, #255	; 0xff
 8003d8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	771a      	strb	r2, [r3, #28]

  return status;
 8003d94:	2313      	movs	r3, #19
 8003d96:	18fb      	adds	r3, r7, r3
 8003d98:	781b      	ldrb	r3, [r3, #0]
}
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	b006      	add	sp, #24
 8003da0:	bdb0      	pop	{r4, r5, r7, pc}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	00ffff3f 	.word	0x00ffff3f

08003da8 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003da8:	b590      	push	{r4, r7, lr}
 8003daa:	b089      	sub	sp, #36	; 0x24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	7f1b      	ldrb	r3, [r3, #28]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d101      	bne.n	8003dcc <HAL_RTC_SetAlarm+0x24>
 8003dc8:	2302      	movs	r3, #2
 8003dca:	e0c6      	b.n	8003f5a <HAL_RTC_SetAlarm+0x1b2>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d136      	bne.n	8003e4c <HAL_RTC_SetAlarm+0xa4>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2240      	movs	r2, #64	; 0x40
 8003de6:	4013      	ands	r3, r2
 8003de8:	d102      	bne.n	8003df0 <HAL_RTC_SetAlarm+0x48>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2200      	movs	r2, #0
 8003dee:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	0018      	movs	r0, r3
 8003df6:	f000 f94f 	bl	8004098 <RTC_ByteToBcd2>
 8003dfa:	0003      	movs	r3, r0
 8003dfc:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	785b      	ldrb	r3, [r3, #1]
 8003e02:	0018      	movs	r0, r3
 8003e04:	f000 f948 	bl	8004098 <RTC_ByteToBcd2>
 8003e08:	0003      	movs	r3, r0
 8003e0a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003e0c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	789b      	ldrb	r3, [r3, #2]
 8003e12:	0018      	movs	r0, r3
 8003e14:	f000 f940 	bl	8004098 <RTC_ByteToBcd2>
 8003e18:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003e1a:	0022      	movs	r2, r4
 8003e1c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	78db      	ldrb	r3, [r3, #3]
 8003e22:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003e24:	431a      	orrs	r2, r3
 8003e26:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	5c9b      	ldrb	r3, [r3, r2]
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f000 f932 	bl	8004098 <RTC_ByteToBcd2>
 8003e34:	0003      	movs	r3, r0
 8003e36:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8003e38:	0022      	movs	r2, r4
 8003e3a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003e40:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003e46:	4313      	orrs	r3, r2
 8003e48:	61fb      	str	r3, [r7, #28]
 8003e4a:	e022      	b.n	8003e92 <HAL_RTC_SetAlarm+0xea>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	2240      	movs	r2, #64	; 0x40
 8003e54:	4013      	ands	r3, r2
 8003e56:	d102      	bne.n	8003e5e <HAL_RTC_SetAlarm+0xb6>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	785b      	ldrb	r3, [r3, #1]
 8003e68:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003e6a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8003e70:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	78db      	ldrb	r3, [r3, #3]
 8003e76:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8003e78:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2120      	movs	r1, #32
 8003e7e:	5c5b      	ldrb	r3, [r3, r1]
 8003e80:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003e82:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003e88:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	22ca      	movs	r2, #202	; 0xca
 8003ea4:	625a      	str	r2, [r3, #36]	; 0x24
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2253      	movs	r2, #83	; 0x53
 8003eac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	492a      	ldr	r1, [pc, #168]	; (8003f64 <HAL_RTC_SetAlarm+0x1bc>)
 8003eba:	400a      	ands	r2, r1
 8003ebc:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4927      	ldr	r1, [pc, #156]	; (8003f68 <HAL_RTC_SetAlarm+0x1c0>)
 8003eca:	400a      	ands	r2, r1
 8003ecc:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	22ff      	movs	r2, #255	; 0xff
 8003ed6:	401a      	ands	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4923      	ldr	r1, [pc, #140]	; (8003f6c <HAL_RTC_SetAlarm+0x1c4>)
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ee2:	f7fd ffc1 	bl	8001e68 <HAL_GetTick>
 8003ee6:	0003      	movs	r3, r0
 8003ee8:	61bb      	str	r3, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003eea:	e014      	b.n	8003f16 <HAL_RTC_SetAlarm+0x16e>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003eec:	f7fd ffbc 	bl	8001e68 <HAL_GetTick>
 8003ef0:	0002      	movs	r2, r0
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	1ad2      	subs	r2, r2, r3
 8003ef6:	23fa      	movs	r3, #250	; 0xfa
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d90b      	bls.n	8003f16 <HAL_RTC_SetAlarm+0x16e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	22ff      	movs	r2, #255	; 0xff
 8003f04:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2203      	movs	r2, #3
 8003f0a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e021      	b.n	8003f5a <HAL_RTC_SetAlarm+0x1b2>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d0e4      	beq.n	8003eec <HAL_RTC_SetAlarm+0x144>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	69fa      	ldr	r2, [r7, #28]
 8003f28:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2180      	movs	r1, #128	; 0x80
 8003f3e:	0049      	lsls	r1, r1, #1
 8003f40:	430a      	orrs	r2, r1
 8003f42:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	22ff      	movs	r2, #255	; 0xff
 8003f4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	b009      	add	sp, #36	; 0x24
 8003f60:	bd90      	pop	{r4, r7, pc}
 8003f62:	46c0      	nop			; (mov r8, r8)
 8003f64:	fffffeff 	.word	0xfffffeff
 8003f68:	ffffefff 	.word	0xffffefff
 8003f6c:	fffffe7f 	.word	0xfffffe7f

08003f70 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a0e      	ldr	r2, [pc, #56]	; (8003fbc <HAL_RTC_WaitForSynchro+0x4c>)
 8003f82:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f84:	f7fd ff70 	bl	8001e68 <HAL_GetTick>
 8003f88:	0003      	movs	r3, r0
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003f8c:	e00a      	b.n	8003fa4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003f8e:	f7fd ff6b 	bl	8001e68 <HAL_GetTick>
 8003f92:	0002      	movs	r2, r0
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	1ad2      	subs	r2, r2, r3
 8003f98:	23fa      	movs	r3, #250	; 0xfa
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e006      	b.n	8003fb2 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	4013      	ands	r3, r2
 8003fae:	d0ee      	beq.n	8003f8e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	b004      	add	sp, #16
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	46c0      	nop			; (mov r8, r8)
 8003fbc:	00017d5d 	.word	0x00017d5d

08003fc0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003fcc:	230f      	movs	r3, #15
 8003fce:	18fb      	adds	r3, r7, r3
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	2240      	movs	r2, #64	; 0x40
 8003fdc:	4013      	ands	r3, r2
 8003fde:	d12b      	bne.n	8004038 <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2180      	movs	r1, #128	; 0x80
 8003fec:	430a      	orrs	r2, r1
 8003fee:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ff0:	f7fd ff3a 	bl	8001e68 <HAL_GetTick>
 8003ff4:	0003      	movs	r3, r0
 8003ff6:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003ff8:	e013      	b.n	8004022 <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003ffa:	f7fd ff35 	bl	8001e68 <HAL_GetTick>
 8003ffe:	0002      	movs	r2, r0
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	1ad2      	subs	r2, r2, r3
 8004004:	200f      	movs	r0, #15
 8004006:	183b      	adds	r3, r7, r0
 8004008:	1839      	adds	r1, r7, r0
 800400a:	7809      	ldrb	r1, [r1, #0]
 800400c:	7019      	strb	r1, [r3, #0]
 800400e:	23fa      	movs	r3, #250	; 0xfa
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	429a      	cmp	r2, r3
 8004014:	d905      	bls.n	8004022 <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2204      	movs	r2, #4
 800401a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800401c:	183b      	adds	r3, r7, r0
 800401e:	2201      	movs	r2, #1
 8004020:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	2240      	movs	r2, #64	; 0x40
 800402a:	4013      	ands	r3, r2
 800402c:	d104      	bne.n	8004038 <RTC_EnterInitMode+0x78>
 800402e:	230f      	movs	r3, #15
 8004030:	18fb      	adds	r3, r7, r3
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d1e0      	bne.n	8003ffa <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8004038:	230f      	movs	r3, #15
 800403a:	18fb      	adds	r3, r7, r3
 800403c:	781b      	ldrb	r3, [r3, #0]
}
 800403e:	0018      	movs	r0, r3
 8004040:	46bd      	mov	sp, r7
 8004042:	b004      	add	sp, #16
 8004044:	bd80      	pop	{r7, pc}

08004046 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004046:	b590      	push	{r4, r7, lr}
 8004048:	b085      	sub	sp, #20
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800404e:	240f      	movs	r4, #15
 8004050:	193b      	adds	r3, r7, r4
 8004052:	2200      	movs	r2, #0
 8004054:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2180      	movs	r1, #128	; 0x80
 8004062:	438a      	bics	r2, r1
 8004064:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2220      	movs	r2, #32
 800406e:	4013      	ands	r3, r2
 8004070:	d10b      	bne.n	800408a <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	0018      	movs	r0, r3
 8004076:	f7ff ff7b 	bl	8003f70 <HAL_RTC_WaitForSynchro>
 800407a:	1e03      	subs	r3, r0, #0
 800407c:	d005      	beq.n	800408a <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2204      	movs	r2, #4
 8004082:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004084:	193b      	adds	r3, r7, r4
 8004086:	2201      	movs	r2, #1
 8004088:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800408a:	230f      	movs	r3, #15
 800408c:	18fb      	adds	r3, r7, r3
 800408e:	781b      	ldrb	r3, [r3, #0]
}
 8004090:	0018      	movs	r0, r3
 8004092:	46bd      	mov	sp, r7
 8004094:	b005      	add	sp, #20
 8004096:	bd90      	pop	{r4, r7, pc}

08004098 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	0002      	movs	r2, r0
 80040a0:	1dfb      	adds	r3, r7, #7
 80040a2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80040a8:	e007      	b.n	80040ba <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	3301      	adds	r3, #1
 80040ae:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80040b0:	1dfb      	adds	r3, r7, #7
 80040b2:	1dfa      	adds	r2, r7, #7
 80040b4:	7812      	ldrb	r2, [r2, #0]
 80040b6:	3a0a      	subs	r2, #10
 80040b8:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 80040ba:	1dfb      	adds	r3, r7, #7
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b09      	cmp	r3, #9
 80040c0:	d8f3      	bhi.n	80040aa <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	011b      	lsls	r3, r3, #4
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	1dfb      	adds	r3, r7, #7
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	b2db      	uxtb	r3, r3
}
 80040d2:	0018      	movs	r0, r3
 80040d4:	46bd      	mov	sp, r7
 80040d6:	b004      	add	sp, #16
 80040d8:	bd80      	pop	{r7, pc}
	...

080040dc <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef *hrtc, uint32_t CalibOutput)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	7f1b      	ldrb	r3, [r3, #28]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d101      	bne.n	80040f2 <HAL_RTCEx_SetCalibrationOutPut+0x16>
 80040ee:	2302      	movs	r3, #2
 80040f0:	e031      	b.n	8004156 <HAL_RTCEx_SetCalibrationOutPut+0x7a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	22ca      	movs	r2, #202	; 0xca
 8004104:	625a      	str	r2, [r3, #36]	; 0x24
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2253      	movs	r2, #83	; 0x53
 800410c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4911      	ldr	r1, [pc, #68]	; (8004160 <HAL_RTCEx_SetCalibrationOutPut+0x84>)
 800411a:	400a      	ands	r2, r1
 800411c:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6899      	ldr	r1, [r3, #8]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2180      	movs	r1, #128	; 0x80
 800413a:	0409      	lsls	r1, r1, #16
 800413c:	430a      	orrs	r2, r1
 800413e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	22ff      	movs	r2, #255	; 0xff
 8004146:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	0018      	movs	r0, r3
 8004158:	46bd      	mov	sp, r7
 800415a:	b002      	add	sp, #8
 800415c:	bd80      	pop	{r7, pc}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	fff7ffff 	.word	0xfff7ffff

08004164 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e0a8      	b.n	80042c8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	2b00      	cmp	r3, #0
 800417c:	d109      	bne.n	8004192 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	2382      	movs	r3, #130	; 0x82
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	429a      	cmp	r2, r3
 8004188:	d009      	beq.n	800419e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	61da      	str	r2, [r3, #28]
 8004190:	e005      	b.n	800419e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	225d      	movs	r2, #93	; 0x5d
 80041a8:	5c9b      	ldrb	r3, [r3, r2]
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d107      	bne.n	80041c0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	225c      	movs	r2, #92	; 0x5c
 80041b4:	2100      	movs	r1, #0
 80041b6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	0018      	movs	r0, r3
 80041bc:	f7fd fc26 	bl	8001a0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	225d      	movs	r2, #93	; 0x5d
 80041c4:	2102      	movs	r1, #2
 80041c6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2140      	movs	r1, #64	; 0x40
 80041d4:	438a      	bics	r2, r1
 80041d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68da      	ldr	r2, [r3, #12]
 80041dc:	23e0      	movs	r3, #224	; 0xe0
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d902      	bls.n	80041ea <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	e002      	b.n	80041f0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80041ea:	2380      	movs	r3, #128	; 0x80
 80041ec:	015b      	lsls	r3, r3, #5
 80041ee:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	23f0      	movs	r3, #240	; 0xf0
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d008      	beq.n	800420e <HAL_SPI_Init+0xaa>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	23e0      	movs	r3, #224	; 0xe0
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	429a      	cmp	r2, r3
 8004206:	d002      	beq.n	800420e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	2382      	movs	r3, #130	; 0x82
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	401a      	ands	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6899      	ldr	r1, [r3, #8]
 800421c:	2384      	movs	r3, #132	; 0x84
 800421e:	021b      	lsls	r3, r3, #8
 8004220:	400b      	ands	r3, r1
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	2102      	movs	r1, #2
 800422a:	400b      	ands	r3, r1
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	2101      	movs	r1, #1
 8004234:	400b      	ands	r3, r1
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6999      	ldr	r1, [r3, #24]
 800423c:	2380      	movs	r3, #128	; 0x80
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	400b      	ands	r3, r1
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	2138      	movs	r1, #56	; 0x38
 800424a:	400b      	ands	r3, r1
 800424c:	431a      	orrs	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	2180      	movs	r1, #128	; 0x80
 8004254:	400b      	ands	r3, r1
 8004256:	431a      	orrs	r2, r3
 8004258:	0011      	movs	r1, r2
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800425e:	2380      	movs	r3, #128	; 0x80
 8004260:	019b      	lsls	r3, r3, #6
 8004262:	401a      	ands	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	0c1b      	lsrs	r3, r3, #16
 8004272:	2204      	movs	r2, #4
 8004274:	401a      	ands	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	2110      	movs	r1, #16
 800427c:	400b      	ands	r3, r1
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004284:	2108      	movs	r1, #8
 8004286:	400b      	ands	r3, r1
 8004288:	431a      	orrs	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68d9      	ldr	r1, [r3, #12]
 800428e:	23f0      	movs	r3, #240	; 0xf0
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	400b      	ands	r3, r1
 8004294:	431a      	orrs	r2, r3
 8004296:	0011      	movs	r1, r2
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	2380      	movs	r3, #128	; 0x80
 800429c:	015b      	lsls	r3, r3, #5
 800429e:	401a      	ands	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	69da      	ldr	r2, [r3, #28]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4907      	ldr	r1, [pc, #28]	; (80042d0 <HAL_SPI_Init+0x16c>)
 80042b4:	400a      	ands	r2, r1
 80042b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	225d      	movs	r2, #93	; 0x5d
 80042c2:	2101      	movs	r1, #1
 80042c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	0018      	movs	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b004      	add	sp, #16
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	fffff7ff 	.word	0xfffff7ff

080042d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	1dbb      	adds	r3, r7, #6
 80042e2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042e4:	231f      	movs	r3, #31
 80042e6:	18fb      	adds	r3, r7, r3
 80042e8:	2200      	movs	r2, #0
 80042ea:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	225c      	movs	r2, #92	; 0x5c
 80042f0:	5c9b      	ldrb	r3, [r3, r2]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d101      	bne.n	80042fa <HAL_SPI_Transmit+0x26>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e147      	b.n	800458a <HAL_SPI_Transmit+0x2b6>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	225c      	movs	r2, #92	; 0x5c
 80042fe:	2101      	movs	r1, #1
 8004300:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004302:	f7fd fdb1 	bl	8001e68 <HAL_GetTick>
 8004306:	0003      	movs	r3, r0
 8004308:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800430a:	2316      	movs	r3, #22
 800430c:	18fb      	adds	r3, r7, r3
 800430e:	1dba      	adds	r2, r7, #6
 8004310:	8812      	ldrh	r2, [r2, #0]
 8004312:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	225d      	movs	r2, #93	; 0x5d
 8004318:	5c9b      	ldrb	r3, [r3, r2]
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b01      	cmp	r3, #1
 800431e:	d004      	beq.n	800432a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004320:	231f      	movs	r3, #31
 8004322:	18fb      	adds	r3, r7, r3
 8004324:	2202      	movs	r2, #2
 8004326:	701a      	strb	r2, [r3, #0]
    goto error;
 8004328:	e128      	b.n	800457c <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <HAL_SPI_Transmit+0x64>
 8004330:	1dbb      	adds	r3, r7, #6
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d104      	bne.n	8004342 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004338:	231f      	movs	r3, #31
 800433a:	18fb      	adds	r3, r7, r3
 800433c:	2201      	movs	r2, #1
 800433e:	701a      	strb	r2, [r3, #0]
    goto error;
 8004340:	e11c      	b.n	800457c <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	225d      	movs	r2, #93	; 0x5d
 8004346:	2103      	movs	r1, #3
 8004348:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	1dba      	adds	r2, r7, #6
 800435a:	8812      	ldrh	r2, [r2, #0]
 800435c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	1dba      	adds	r2, r7, #6
 8004362:	8812      	ldrh	r2, [r2, #0]
 8004364:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2244      	movs	r2, #68	; 0x44
 8004370:	2100      	movs	r1, #0
 8004372:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2246      	movs	r2, #70	; 0x46
 8004378:	2100      	movs	r1, #0
 800437a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	2380      	movs	r3, #128	; 0x80
 800438e:	021b      	lsls	r3, r3, #8
 8004390:	429a      	cmp	r2, r3
 8004392:	d110      	bne.n	80043b6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2140      	movs	r1, #64	; 0x40
 80043a0:	438a      	bics	r2, r1
 80043a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2180      	movs	r1, #128	; 0x80
 80043b0:	01c9      	lsls	r1, r1, #7
 80043b2:	430a      	orrs	r2, r1
 80043b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2240      	movs	r2, #64	; 0x40
 80043be:	4013      	ands	r3, r2
 80043c0:	2b40      	cmp	r3, #64	; 0x40
 80043c2:	d007      	beq.n	80043d4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2140      	movs	r1, #64	; 0x40
 80043d0:	430a      	orrs	r2, r1
 80043d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	68da      	ldr	r2, [r3, #12]
 80043d8:	23e0      	movs	r3, #224	; 0xe0
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	429a      	cmp	r2, r3
 80043de:	d952      	bls.n	8004486 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d004      	beq.n	80043f2 <HAL_SPI_Transmit+0x11e>
 80043e8:	2316      	movs	r3, #22
 80043ea:	18fb      	adds	r3, r7, r3
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d143      	bne.n	800447a <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f6:	881a      	ldrh	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004402:	1c9a      	adds	r2, r3, #2
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800440c:	b29b      	uxth	r3, r3
 800440e:	3b01      	subs	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004416:	e030      	b.n	800447a <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	2202      	movs	r2, #2
 8004420:	4013      	ands	r3, r2
 8004422:	2b02      	cmp	r3, #2
 8004424:	d112      	bne.n	800444c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442a:	881a      	ldrh	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004436:	1c9a      	adds	r2, r3, #2
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004440:	b29b      	uxth	r3, r3
 8004442:	3b01      	subs	r3, #1
 8004444:	b29a      	uxth	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	87da      	strh	r2, [r3, #62]	; 0x3e
 800444a:	e016      	b.n	800447a <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800444c:	f7fd fd0c 	bl	8001e68 <HAL_GetTick>
 8004450:	0002      	movs	r2, r0
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	429a      	cmp	r2, r3
 800445a:	d802      	bhi.n	8004462 <HAL_SPI_Transmit+0x18e>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	3301      	adds	r3, #1
 8004460:	d102      	bne.n	8004468 <HAL_SPI_Transmit+0x194>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d108      	bne.n	800447a <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8004468:	231f      	movs	r3, #31
 800446a:	18fb      	adds	r3, r7, r3
 800446c:	2203      	movs	r2, #3
 800446e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	225d      	movs	r2, #93	; 0x5d
 8004474:	2101      	movs	r1, #1
 8004476:	5499      	strb	r1, [r3, r2]
          goto error;
 8004478:	e080      	b.n	800457c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800447e:	b29b      	uxth	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1c9      	bne.n	8004418 <HAL_SPI_Transmit+0x144>
 8004484:	e053      	b.n	800452e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d004      	beq.n	8004498 <HAL_SPI_Transmit+0x1c4>
 800448e:	2316      	movs	r3, #22
 8004490:	18fb      	adds	r3, r7, r3
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d145      	bne.n	8004524 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	330c      	adds	r3, #12
 80044a2:	7812      	ldrb	r2, [r2, #0]
 80044a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044aa:	1c5a      	adds	r2, r3, #1
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	3b01      	subs	r3, #1
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80044be:	e031      	b.n	8004524 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	2202      	movs	r2, #2
 80044c8:	4013      	ands	r3, r2
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d113      	bne.n	80044f6 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	330c      	adds	r3, #12
 80044d8:	7812      	ldrb	r2, [r2, #0]
 80044da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e0:	1c5a      	adds	r2, r3, #1
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	3b01      	subs	r3, #1
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044f4:	e016      	b.n	8004524 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044f6:	f7fd fcb7 	bl	8001e68 <HAL_GetTick>
 80044fa:	0002      	movs	r2, r0
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	429a      	cmp	r2, r3
 8004504:	d802      	bhi.n	800450c <HAL_SPI_Transmit+0x238>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	3301      	adds	r3, #1
 800450a:	d102      	bne.n	8004512 <HAL_SPI_Transmit+0x23e>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d108      	bne.n	8004524 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8004512:	231f      	movs	r3, #31
 8004514:	18fb      	adds	r3, r7, r3
 8004516:	2203      	movs	r2, #3
 8004518:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	225d      	movs	r2, #93	; 0x5d
 800451e:	2101      	movs	r1, #1
 8004520:	5499      	strb	r1, [r3, r2]
          goto error;
 8004522:	e02b      	b.n	800457c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004528:	b29b      	uxth	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1c8      	bne.n	80044c0 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	6839      	ldr	r1, [r7, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	0018      	movs	r0, r3
 8004536:	f000 f95d 	bl	80047f4 <SPI_EndRxTxTransaction>
 800453a:	1e03      	subs	r3, r0, #0
 800453c:	d002      	beq.n	8004544 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2220      	movs	r2, #32
 8004542:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10a      	bne.n	8004562 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800454c:	2300      	movs	r3, #0
 800454e:	613b      	str	r3, [r7, #16]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	613b      	str	r3, [r7, #16]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	613b      	str	r3, [r7, #16]
 8004560:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004566:	2b00      	cmp	r3, #0
 8004568:	d004      	beq.n	8004574 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800456a:	231f      	movs	r3, #31
 800456c:	18fb      	adds	r3, r7, r3
 800456e:	2201      	movs	r2, #1
 8004570:	701a      	strb	r2, [r3, #0]
 8004572:	e003      	b.n	800457c <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	225d      	movs	r2, #93	; 0x5d
 8004578:	2101      	movs	r1, #1
 800457a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	225c      	movs	r2, #92	; 0x5c
 8004580:	2100      	movs	r1, #0
 8004582:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004584:	231f      	movs	r3, #31
 8004586:	18fb      	adds	r3, r7, r3
 8004588:	781b      	ldrb	r3, [r3, #0]
}
 800458a:	0018      	movs	r0, r3
 800458c:	46bd      	mov	sp, r7
 800458e:	b008      	add	sp, #32
 8004590:	bd80      	pop	{r7, pc}
	...

08004594 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	603b      	str	r3, [r7, #0]
 80045a0:	1dfb      	adds	r3, r7, #7
 80045a2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045a4:	f7fd fc60 	bl	8001e68 <HAL_GetTick>
 80045a8:	0002      	movs	r2, r0
 80045aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ac:	1a9b      	subs	r3, r3, r2
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	18d3      	adds	r3, r2, r3
 80045b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045b4:	f7fd fc58 	bl	8001e68 <HAL_GetTick>
 80045b8:	0003      	movs	r3, r0
 80045ba:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045bc:	4b3a      	ldr	r3, [pc, #232]	; (80046a8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	015b      	lsls	r3, r3, #5
 80045c2:	0d1b      	lsrs	r3, r3, #20
 80045c4:	69fa      	ldr	r2, [r7, #28]
 80045c6:	4353      	muls	r3, r2
 80045c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045ca:	e058      	b.n	800467e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	3301      	adds	r3, #1
 80045d0:	d055      	beq.n	800467e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045d2:	f7fd fc49 	bl	8001e68 <HAL_GetTick>
 80045d6:	0002      	movs	r2, r0
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	69fa      	ldr	r2, [r7, #28]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d902      	bls.n	80045e8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d142      	bne.n	800466e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	21e0      	movs	r1, #224	; 0xe0
 80045f4:	438a      	bics	r2, r1
 80045f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	2382      	movs	r3, #130	; 0x82
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	429a      	cmp	r2, r3
 8004602:	d113      	bne.n	800462c <SPI_WaitFlagStateUntilTimeout+0x98>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	2380      	movs	r3, #128	; 0x80
 800460a:	021b      	lsls	r3, r3, #8
 800460c:	429a      	cmp	r2, r3
 800460e:	d005      	beq.n	800461c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	2380      	movs	r3, #128	; 0x80
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	429a      	cmp	r2, r3
 800461a:	d107      	bne.n	800462c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2140      	movs	r1, #64	; 0x40
 8004628:	438a      	bics	r2, r1
 800462a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004630:	2380      	movs	r3, #128	; 0x80
 8004632:	019b      	lsls	r3, r3, #6
 8004634:	429a      	cmp	r2, r3
 8004636:	d110      	bne.n	800465a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	491a      	ldr	r1, [pc, #104]	; (80046ac <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004644:	400a      	ands	r2, r1
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2180      	movs	r1, #128	; 0x80
 8004654:	0189      	lsls	r1, r1, #6
 8004656:	430a      	orrs	r2, r1
 8004658:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	225d      	movs	r2, #93	; 0x5d
 800465e:	2101      	movs	r1, #1
 8004660:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	225c      	movs	r2, #92	; 0x5c
 8004666:	2100      	movs	r1, #0
 8004668:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e017      	b.n	800469e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	3b01      	subs	r3, #1
 800467c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	4013      	ands	r3, r2
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	425a      	negs	r2, r3
 800468e:	4153      	adcs	r3, r2
 8004690:	b2db      	uxtb	r3, r3
 8004692:	001a      	movs	r2, r3
 8004694:	1dfb      	adds	r3, r7, #7
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d197      	bne.n	80045cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	0018      	movs	r0, r3
 80046a0:	46bd      	mov	sp, r7
 80046a2:	b008      	add	sp, #32
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	46c0      	nop			; (mov r8, r8)
 80046a8:	200002d0 	.word	0x200002d0
 80046ac:	ffffdfff 	.word	0xffffdfff

080046b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08a      	sub	sp, #40	; 0x28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
 80046bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80046be:	2317      	movs	r3, #23
 80046c0:	18fb      	adds	r3, r7, r3
 80046c2:	2200      	movs	r2, #0
 80046c4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80046c6:	f7fd fbcf 	bl	8001e68 <HAL_GetTick>
 80046ca:	0002      	movs	r2, r0
 80046cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ce:	1a9b      	subs	r3, r3, r2
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	18d3      	adds	r3, r2, r3
 80046d4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80046d6:	f7fd fbc7 	bl	8001e68 <HAL_GetTick>
 80046da:	0003      	movs	r3, r0
 80046dc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	330c      	adds	r3, #12
 80046e4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80046e6:	4b41      	ldr	r3, [pc, #260]	; (80047ec <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	0013      	movs	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	189b      	adds	r3, r3, r2
 80046f0:	00da      	lsls	r2, r3, #3
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	0d1b      	lsrs	r3, r3, #20
 80046f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f8:	4353      	muls	r3, r2
 80046fa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80046fc:	e068      	b.n	80047d0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	23c0      	movs	r3, #192	; 0xc0
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	429a      	cmp	r2, r3
 8004706:	d10a      	bne.n	800471e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d107      	bne.n	800471e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	b2da      	uxtb	r2, r3
 8004714:	2117      	movs	r1, #23
 8004716:	187b      	adds	r3, r7, r1
 8004718:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800471a:	187b      	adds	r3, r7, r1
 800471c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	3301      	adds	r3, #1
 8004722:	d055      	beq.n	80047d0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004724:	f7fd fba0 	bl	8001e68 <HAL_GetTick>
 8004728:	0002      	movs	r2, r0
 800472a:	6a3b      	ldr	r3, [r7, #32]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004730:	429a      	cmp	r2, r3
 8004732:	d902      	bls.n	800473a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	2b00      	cmp	r3, #0
 8004738:	d142      	bne.n	80047c0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	21e0      	movs	r1, #224	; 0xe0
 8004746:	438a      	bics	r2, r1
 8004748:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	2382      	movs	r3, #130	; 0x82
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	429a      	cmp	r2, r3
 8004754:	d113      	bne.n	800477e <SPI_WaitFifoStateUntilTimeout+0xce>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	2380      	movs	r3, #128	; 0x80
 800475c:	021b      	lsls	r3, r3, #8
 800475e:	429a      	cmp	r2, r3
 8004760:	d005      	beq.n	800476e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	689a      	ldr	r2, [r3, #8]
 8004766:	2380      	movs	r3, #128	; 0x80
 8004768:	00db      	lsls	r3, r3, #3
 800476a:	429a      	cmp	r2, r3
 800476c:	d107      	bne.n	800477e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2140      	movs	r1, #64	; 0x40
 800477a:	438a      	bics	r2, r1
 800477c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004782:	2380      	movs	r3, #128	; 0x80
 8004784:	019b      	lsls	r3, r3, #6
 8004786:	429a      	cmp	r2, r3
 8004788:	d110      	bne.n	80047ac <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4916      	ldr	r1, [pc, #88]	; (80047f0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004796:	400a      	ands	r2, r1
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2180      	movs	r1, #128	; 0x80
 80047a6:	0189      	lsls	r1, r1, #6
 80047a8:	430a      	orrs	r2, r1
 80047aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	225d      	movs	r2, #93	; 0x5d
 80047b0:	2101      	movs	r1, #1
 80047b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	225c      	movs	r2, #92	; 0x5c
 80047b8:	2100      	movs	r1, #0
 80047ba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e010      	b.n	80047e2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	3b01      	subs	r3, #1
 80047ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	4013      	ands	r3, r2
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d18e      	bne.n	80046fe <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	0018      	movs	r0, r3
 80047e4:	46bd      	mov	sp, r7
 80047e6:	b00a      	add	sp, #40	; 0x28
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	46c0      	nop			; (mov r8, r8)
 80047ec:	200002d0 	.word	0x200002d0
 80047f0:	ffffdfff 	.word	0xffffdfff

080047f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	23c0      	movs	r3, #192	; 0xc0
 8004804:	0159      	lsls	r1, r3, #5
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	0013      	movs	r3, r2
 800480e:	2200      	movs	r2, #0
 8004810:	f7ff ff4e 	bl	80046b0 <SPI_WaitFifoStateUntilTimeout>
 8004814:	1e03      	subs	r3, r0, #0
 8004816:	d007      	beq.n	8004828 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800481c:	2220      	movs	r2, #32
 800481e:	431a      	orrs	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e027      	b.n	8004878 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	0013      	movs	r3, r2
 8004832:	2200      	movs	r2, #0
 8004834:	2180      	movs	r1, #128	; 0x80
 8004836:	f7ff fead 	bl	8004594 <SPI_WaitFlagStateUntilTimeout>
 800483a:	1e03      	subs	r3, r0, #0
 800483c:	d007      	beq.n	800484e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004842:	2220      	movs	r2, #32
 8004844:	431a      	orrs	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e014      	b.n	8004878 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	23c0      	movs	r3, #192	; 0xc0
 8004852:	00d9      	lsls	r1, r3, #3
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	0013      	movs	r3, r2
 800485c:	2200      	movs	r2, #0
 800485e:	f7ff ff27 	bl	80046b0 <SPI_WaitFifoStateUntilTimeout>
 8004862:	1e03      	subs	r3, r0, #0
 8004864:	d007      	beq.n	8004876 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800486a:	2220      	movs	r2, #32
 800486c:	431a      	orrs	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e000      	b.n	8004878 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	0018      	movs	r0, r3
 800487a:	46bd      	mov	sp, r7
 800487c:	b004      	add	sp, #16
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e042      	b.n	8004918 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	223d      	movs	r2, #61	; 0x3d
 8004896:	5c9b      	ldrb	r3, [r3, r2]
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d107      	bne.n	80048ae <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	223c      	movs	r2, #60	; 0x3c
 80048a2:	2100      	movs	r1, #0
 80048a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	0018      	movs	r0, r3
 80048aa:	f7fd f8fb 	bl	8001aa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	223d      	movs	r2, #61	; 0x3d
 80048b2:	2102      	movs	r1, #2
 80048b4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	3304      	adds	r3, #4
 80048be:	0019      	movs	r1, r3
 80048c0:	0010      	movs	r0, r2
 80048c2:	f000 f9e5 	bl	8004c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2246      	movs	r2, #70	; 0x46
 80048ca:	2101      	movs	r1, #1
 80048cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	223e      	movs	r2, #62	; 0x3e
 80048d2:	2101      	movs	r1, #1
 80048d4:	5499      	strb	r1, [r3, r2]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	223f      	movs	r2, #63	; 0x3f
 80048da:	2101      	movs	r1, #1
 80048dc:	5499      	strb	r1, [r3, r2]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2240      	movs	r2, #64	; 0x40
 80048e2:	2101      	movs	r1, #1
 80048e4:	5499      	strb	r1, [r3, r2]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2241      	movs	r2, #65	; 0x41
 80048ea:	2101      	movs	r1, #1
 80048ec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2242      	movs	r2, #66	; 0x42
 80048f2:	2101      	movs	r1, #1
 80048f4:	5499      	strb	r1, [r3, r2]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2243      	movs	r2, #67	; 0x43
 80048fa:	2101      	movs	r1, #1
 80048fc:	5499      	strb	r1, [r3, r2]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2244      	movs	r2, #68	; 0x44
 8004902:	2101      	movs	r1, #1
 8004904:	5499      	strb	r1, [r3, r2]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2245      	movs	r2, #69	; 0x45
 800490a:	2101      	movs	r1, #1
 800490c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	223d      	movs	r2, #61	; 0x3d
 8004912:	2101      	movs	r1, #1
 8004914:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	0018      	movs	r0, r3
 800491a:	46bd      	mov	sp, r7
 800491c:	b002      	add	sp, #8
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	223d      	movs	r2, #61	; 0x3d
 800492c:	5c9b      	ldrb	r3, [r3, r2]
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b01      	cmp	r3, #1
 8004932:	d001      	beq.n	8004938 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e035      	b.n	80049a4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	223d      	movs	r2, #61	; 0x3d
 800493c:	2102      	movs	r1, #2
 800493e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2101      	movs	r1, #1
 800494c:	430a      	orrs	r2, r1
 800494e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a15      	ldr	r2, [pc, #84]	; (80049ac <HAL_TIM_Base_Start_IT+0x8c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d009      	beq.n	800496e <HAL_TIM_Base_Start_IT+0x4e>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a14      	ldr	r2, [pc, #80]	; (80049b0 <HAL_TIM_Base_Start_IT+0x90>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d004      	beq.n	800496e <HAL_TIM_Base_Start_IT+0x4e>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a12      	ldr	r2, [pc, #72]	; (80049b4 <HAL_TIM_Base_Start_IT+0x94>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d111      	bne.n	8004992 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	2207      	movs	r2, #7
 8004976:	4013      	ands	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2b06      	cmp	r3, #6
 800497e:	d010      	beq.n	80049a2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2101      	movs	r1, #1
 800498c:	430a      	orrs	r2, r1
 800498e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004990:	e007      	b.n	80049a2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2101      	movs	r1, #1
 800499e:	430a      	orrs	r2, r1
 80049a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	0018      	movs	r0, r3
 80049a6:	46bd      	mov	sp, r7
 80049a8:	b004      	add	sp, #16
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	40012c00 	.word	0x40012c00
 80049b0:	40000400 	.word	0x40000400
 80049b4:	40014000 	.word	0x40014000

080049b8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68da      	ldr	r2, [r3, #12]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2101      	movs	r1, #1
 80049cc:	438a      	bics	r2, r1
 80049ce:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	4a0d      	ldr	r2, [pc, #52]	; (8004a0c <HAL_TIM_Base_Stop_IT+0x54>)
 80049d8:	4013      	ands	r3, r2
 80049da:	d10d      	bne.n	80049f8 <HAL_TIM_Base_Stop_IT+0x40>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	4a0b      	ldr	r2, [pc, #44]	; (8004a10 <HAL_TIM_Base_Stop_IT+0x58>)
 80049e4:	4013      	ands	r3, r2
 80049e6:	d107      	bne.n	80049f8 <HAL_TIM_Base_Stop_IT+0x40>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2101      	movs	r1, #1
 80049f4:	438a      	bics	r2, r1
 80049f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	223d      	movs	r2, #61	; 0x3d
 80049fc:	2101      	movs	r1, #1
 80049fe:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	0018      	movs	r0, r3
 8004a04:	46bd      	mov	sp, r7
 8004a06:	b002      	add	sp, #8
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	46c0      	nop			; (mov r8, r8)
 8004a0c:	00001111 	.word	0x00001111
 8004a10:	00000444 	.word	0x00000444

08004a14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	2202      	movs	r2, #2
 8004a24:	4013      	ands	r3, r2
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d124      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	2202      	movs	r2, #2
 8004a32:	4013      	ands	r3, r2
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d11d      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2203      	movs	r2, #3
 8004a3e:	4252      	negs	r2, r2
 8004a40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	2203      	movs	r2, #3
 8004a50:	4013      	ands	r3, r2
 8004a52:	d004      	beq.n	8004a5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	0018      	movs	r0, r3
 8004a58:	f000 f902 	bl	8004c60 <HAL_TIM_IC_CaptureCallback>
 8004a5c:	e007      	b.n	8004a6e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	0018      	movs	r0, r3
 8004a62:	f000 f8f5 	bl	8004c50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	0018      	movs	r0, r3
 8004a6a:	f000 f901 	bl	8004c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	2204      	movs	r2, #4
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	2b04      	cmp	r3, #4
 8004a80:	d125      	bne.n	8004ace <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	2204      	movs	r2, #4
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d11e      	bne.n	8004ace <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2205      	movs	r2, #5
 8004a96:	4252      	negs	r2, r2
 8004a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699a      	ldr	r2, [r3, #24]
 8004aa6:	23c0      	movs	r3, #192	; 0xc0
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4013      	ands	r3, r2
 8004aac:	d004      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	f000 f8d5 	bl	8004c60 <HAL_TIM_IC_CaptureCallback>
 8004ab6:	e007      	b.n	8004ac8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	0018      	movs	r0, r3
 8004abc:	f000 f8c8 	bl	8004c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	f000 f8d4 	bl	8004c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	2208      	movs	r2, #8
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d124      	bne.n	8004b26 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	2208      	movs	r2, #8
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	2b08      	cmp	r3, #8
 8004ae8:	d11d      	bne.n	8004b26 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2209      	movs	r2, #9
 8004af0:	4252      	negs	r2, r2
 8004af2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2204      	movs	r2, #4
 8004af8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	2203      	movs	r2, #3
 8004b02:	4013      	ands	r3, r2
 8004b04:	d004      	beq.n	8004b10 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f000 f8a9 	bl	8004c60 <HAL_TIM_IC_CaptureCallback>
 8004b0e:	e007      	b.n	8004b20 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	0018      	movs	r0, r3
 8004b14:	f000 f89c 	bl	8004c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	f000 f8a8 	bl	8004c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	2210      	movs	r2, #16
 8004b2e:	4013      	ands	r3, r2
 8004b30:	2b10      	cmp	r3, #16
 8004b32:	d125      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	2210      	movs	r2, #16
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	2b10      	cmp	r3, #16
 8004b40:	d11e      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2211      	movs	r2, #17
 8004b48:	4252      	negs	r2, r2
 8004b4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2208      	movs	r2, #8
 8004b50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	69da      	ldr	r2, [r3, #28]
 8004b58:	23c0      	movs	r3, #192	; 0xc0
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	d004      	beq.n	8004b6a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	0018      	movs	r0, r3
 8004b64:	f000 f87c 	bl	8004c60 <HAL_TIM_IC_CaptureCallback>
 8004b68:	e007      	b.n	8004b7a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	f000 f86f 	bl	8004c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	0018      	movs	r0, r3
 8004b76:	f000 f87b 	bl	8004c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	2201      	movs	r2, #1
 8004b88:	4013      	ands	r3, r2
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d10f      	bne.n	8004bae <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	2201      	movs	r2, #1
 8004b96:	4013      	ands	r3, r2
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d108      	bne.n	8004bae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	4252      	negs	r2, r2
 8004ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f000 f849 	bl	8004c40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	2280      	movs	r2, #128	; 0x80
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	2b80      	cmp	r3, #128	; 0x80
 8004bba:	d10f      	bne.n	8004bdc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	2280      	movs	r2, #128	; 0x80
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	2b80      	cmp	r3, #128	; 0x80
 8004bc8:	d108      	bne.n	8004bdc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2281      	movs	r2, #129	; 0x81
 8004bd0:	4252      	negs	r2, r2
 8004bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	f000 f8d8 	bl	8004d8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	2240      	movs	r2, #64	; 0x40
 8004be4:	4013      	ands	r3, r2
 8004be6:	2b40      	cmp	r3, #64	; 0x40
 8004be8:	d10f      	bne.n	8004c0a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	2240      	movs	r2, #64	; 0x40
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	2b40      	cmp	r3, #64	; 0x40
 8004bf6:	d108      	bne.n	8004c0a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2241      	movs	r2, #65	; 0x41
 8004bfe:	4252      	negs	r2, r2
 8004c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	0018      	movs	r0, r3
 8004c06:	f000 f83b 	bl	8004c80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	2220      	movs	r2, #32
 8004c12:	4013      	ands	r3, r2
 8004c14:	2b20      	cmp	r3, #32
 8004c16:	d10f      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	4013      	ands	r3, r2
 8004c22:	2b20      	cmp	r3, #32
 8004c24:	d108      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2221      	movs	r2, #33	; 0x21
 8004c2c:	4252      	negs	r2, r2
 8004c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	0018      	movs	r0, r3
 8004c34:	f000 f8a2 	bl	8004d7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c38:	46c0      	nop			; (mov r8, r8)
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	b002      	add	sp, #8
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c48:	46c0      	nop			; (mov r8, r8)
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	b002      	add	sp, #8
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c58:	46c0      	nop			; (mov r8, r8)
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	b002      	add	sp, #8
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c68:	46c0      	nop			; (mov r8, r8)
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	b002      	add	sp, #8
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c78:	46c0      	nop			; (mov r8, r8)
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	b002      	add	sp, #8
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c88:	46c0      	nop			; (mov r8, r8)
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	b002      	add	sp, #8
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a2f      	ldr	r2, [pc, #188]	; (8004d60 <TIM_Base_SetConfig+0xd0>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d003      	beq.n	8004cb0 <TIM_Base_SetConfig+0x20>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a2e      	ldr	r2, [pc, #184]	; (8004d64 <TIM_Base_SetConfig+0xd4>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d108      	bne.n	8004cc2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2270      	movs	r2, #112	; 0x70
 8004cb4:	4393      	bics	r3, r2
 8004cb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a26      	ldr	r2, [pc, #152]	; (8004d60 <TIM_Base_SetConfig+0xd0>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d013      	beq.n	8004cf2 <TIM_Base_SetConfig+0x62>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a25      	ldr	r2, [pc, #148]	; (8004d64 <TIM_Base_SetConfig+0xd4>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d00f      	beq.n	8004cf2 <TIM_Base_SetConfig+0x62>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a24      	ldr	r2, [pc, #144]	; (8004d68 <TIM_Base_SetConfig+0xd8>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d00b      	beq.n	8004cf2 <TIM_Base_SetConfig+0x62>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a23      	ldr	r2, [pc, #140]	; (8004d6c <TIM_Base_SetConfig+0xdc>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d007      	beq.n	8004cf2 <TIM_Base_SetConfig+0x62>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a22      	ldr	r2, [pc, #136]	; (8004d70 <TIM_Base_SetConfig+0xe0>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d003      	beq.n	8004cf2 <TIM_Base_SetConfig+0x62>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a21      	ldr	r2, [pc, #132]	; (8004d74 <TIM_Base_SetConfig+0xe4>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d108      	bne.n	8004d04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4a20      	ldr	r2, [pc, #128]	; (8004d78 <TIM_Base_SetConfig+0xe8>)
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2280      	movs	r2, #128	; 0x80
 8004d08:	4393      	bics	r3, r2
 8004d0a:	001a      	movs	r2, r3
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	689a      	ldr	r2, [r3, #8]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a0c      	ldr	r2, [pc, #48]	; (8004d60 <TIM_Base_SetConfig+0xd0>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d00b      	beq.n	8004d4a <TIM_Base_SetConfig+0xba>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a0d      	ldr	r2, [pc, #52]	; (8004d6c <TIM_Base_SetConfig+0xdc>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d007      	beq.n	8004d4a <TIM_Base_SetConfig+0xba>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a0c      	ldr	r2, [pc, #48]	; (8004d70 <TIM_Base_SetConfig+0xe0>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d003      	beq.n	8004d4a <TIM_Base_SetConfig+0xba>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a0b      	ldr	r2, [pc, #44]	; (8004d74 <TIM_Base_SetConfig+0xe4>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d103      	bne.n	8004d52 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	691a      	ldr	r2, [r3, #16]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	615a      	str	r2, [r3, #20]
}
 8004d58:	46c0      	nop			; (mov r8, r8)
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	b004      	add	sp, #16
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	40012c00 	.word	0x40012c00
 8004d64:	40000400 	.word	0x40000400
 8004d68:	40002000 	.word	0x40002000
 8004d6c:	40014000 	.word	0x40014000
 8004d70:	40014400 	.word	0x40014400
 8004d74:	40014800 	.word	0x40014800
 8004d78:	fffffcff 	.word	0xfffffcff

08004d7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d84:	46c0      	nop			; (mov r8, r8)
 8004d86:	46bd      	mov	sp, r7
 8004d88:	b002      	add	sp, #8
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d94:	46c0      	nop			; (mov r8, r8)
 8004d96:	46bd      	mov	sp, r7
 8004d98:	b002      	add	sp, #8
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <__libc_init_array>:
 8004d9c:	b570      	push	{r4, r5, r6, lr}
 8004d9e:	2600      	movs	r6, #0
 8004da0:	4d0c      	ldr	r5, [pc, #48]	; (8004dd4 <__libc_init_array+0x38>)
 8004da2:	4c0d      	ldr	r4, [pc, #52]	; (8004dd8 <__libc_init_array+0x3c>)
 8004da4:	1b64      	subs	r4, r4, r5
 8004da6:	10a4      	asrs	r4, r4, #2
 8004da8:	42a6      	cmp	r6, r4
 8004daa:	d109      	bne.n	8004dc0 <__libc_init_array+0x24>
 8004dac:	2600      	movs	r6, #0
 8004dae:	f000 f821 	bl	8004df4 <_init>
 8004db2:	4d0a      	ldr	r5, [pc, #40]	; (8004ddc <__libc_init_array+0x40>)
 8004db4:	4c0a      	ldr	r4, [pc, #40]	; (8004de0 <__libc_init_array+0x44>)
 8004db6:	1b64      	subs	r4, r4, r5
 8004db8:	10a4      	asrs	r4, r4, #2
 8004dba:	42a6      	cmp	r6, r4
 8004dbc:	d105      	bne.n	8004dca <__libc_init_array+0x2e>
 8004dbe:	bd70      	pop	{r4, r5, r6, pc}
 8004dc0:	00b3      	lsls	r3, r6, #2
 8004dc2:	58eb      	ldr	r3, [r5, r3]
 8004dc4:	4798      	blx	r3
 8004dc6:	3601      	adds	r6, #1
 8004dc8:	e7ee      	b.n	8004da8 <__libc_init_array+0xc>
 8004dca:	00b3      	lsls	r3, r6, #2
 8004dcc:	58eb      	ldr	r3, [r5, r3]
 8004dce:	4798      	blx	r3
 8004dd0:	3601      	adds	r6, #1
 8004dd2:	e7f2      	b.n	8004dba <__libc_init_array+0x1e>
 8004dd4:	08005448 	.word	0x08005448
 8004dd8:	08005448 	.word	0x08005448
 8004ddc:	08005448 	.word	0x08005448
 8004de0:	0800544c 	.word	0x0800544c

08004de4 <memset>:
 8004de4:	0003      	movs	r3, r0
 8004de6:	1882      	adds	r2, r0, r2
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d100      	bne.n	8004dee <memset+0xa>
 8004dec:	4770      	bx	lr
 8004dee:	7019      	strb	r1, [r3, #0]
 8004df0:	3301      	adds	r3, #1
 8004df2:	e7f9      	b.n	8004de8 <memset+0x4>

08004df4 <_init>:
 8004df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df6:	46c0      	nop			; (mov r8, r8)
 8004df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfa:	bc08      	pop	{r3}
 8004dfc:	469e      	mov	lr, r3
 8004dfe:	4770      	bx	lr

08004e00 <_fini>:
 8004e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e02:	46c0      	nop			; (mov r8, r8)
 8004e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e06:	bc08      	pop	{r3}
 8004e08:	469e      	mov	lr, r3
 8004e0a:	4770      	bx	lr
