
Lodestone-1 1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006278  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007bc  08006334  08006334  00016334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006af0  08006af0  00020558  2**0
                  CONTENTS
  4 .ARM          00000000  08006af0  08006af0  00020558  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006af0  08006af0  00020558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006af0  08006af0  00016af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006af4  08006af4  00016af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000558  20000000  08006af8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000628  20000558  08007050  00020558  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20000b80  08007050  00020b80  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020558  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f6a0  00000000  00000000  00020580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025e3  00000000  00000000  0002fc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00032208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e30  00000000  00000000  00033198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000134e1  00000000  00000000  00033fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010cf7  00000000  00000000  000474a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000739ab  00000000  00000000  000581a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  000cbb4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ad0  00000000  00000000  000cbb94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000558 	.word	0x20000558
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800631c 	.word	0x0800631c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000055c 	.word	0x2000055c
 8000100:	0800631c 	.word	0x0800631c

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <nextPage>:
////////////////////////////////////////////////////////////////////////////////////////////

struct uiPage * currentPage= &page1;
struct uiSubPage * currentSubPage = &calibTime;

void nextPage(){
 8000230:	b590      	push	{r4, r7, lr}
 8000232:	b083      	sub	sp, #12
 8000234:	af02      	add	r7, sp, #8
if(allowNextPage==1){
 8000236:	4bae      	ldr	r3, [pc, #696]	; (80004f0 <nextPage+0x2c0>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	2b01      	cmp	r3, #1
 800023c:	d000      	beq.n	8000240 <nextPage+0x10>
 800023e:	e153      	b.n	80004e8 <nextPage+0x2b8>
	ssd1306_FillRectangle(0, 0, 127, 63, 0x0);//wipeScreen();
 8000240:	2300      	movs	r3, #0
 8000242:	9300      	str	r3, [sp, #0]
 8000244:	233f      	movs	r3, #63	; 0x3f
 8000246:	227f      	movs	r2, #127	; 0x7f
 8000248:	2100      	movs	r1, #0
 800024a:	2000      	movs	r0, #0
 800024c:	f001 ffc0 	bl	80021d0 <ssd1306_FillRectangle>

	if (nextOrPrev==NEXT)
 8000250:	4ba8      	ldr	r3, [pc, #672]	; (80004f4 <nextPage+0x2c4>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	2b02      	cmp	r3, #2
 8000256:	d105      	bne.n	8000264 <nextPage+0x34>
		currentPage = currentPage->nextoPage;
 8000258:	4ba7      	ldr	r3, [pc, #668]	; (80004f8 <nextPage+0x2c8>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	689a      	ldr	r2, [r3, #8]
 800025e:	4ba6      	ldr	r3, [pc, #664]	; (80004f8 <nextPage+0x2c8>)
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	e011      	b.n	8000288 <nextPage+0x58>
	else if (nextOrPrev==PREV)
 8000264:	4ba3      	ldr	r3, [pc, #652]	; (80004f4 <nextPage+0x2c4>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	2b01      	cmp	r3, #1
 800026a:	d105      	bne.n	8000278 <nextPage+0x48>
		currentPage = currentPage->prevPage;
 800026c:	4ba2      	ldr	r3, [pc, #648]	; (80004f8 <nextPage+0x2c8>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	68da      	ldr	r2, [r3, #12]
 8000272:	4ba1      	ldr	r3, [pc, #644]	; (80004f8 <nextPage+0x2c8>)
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	e007      	b.n	8000288 <nextPage+0x58>
	else if (nextOrPrev==CURRENT){currentPage = currentPage;}
 8000278:	4b9e      	ldr	r3, [pc, #632]	; (80004f4 <nextPage+0x2c4>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d103      	bne.n	8000288 <nextPage+0x58>
 8000280:	4b9d      	ldr	r3, [pc, #628]	; (80004f8 <nextPage+0x2c8>)
 8000282:	681a      	ldr	r2, [r3, #0]
 8000284:	4b9c      	ldr	r3, [pc, #624]	; (80004f8 <nextPage+0x2c8>)
 8000286:	601a      	str	r2, [r3, #0]

	currentSubPage->selected=0;
 8000288:	4b9c      	ldr	r3, [pc, #624]	; (80004fc <nextPage+0x2cc>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2200      	movs	r2, #0
 800028e:	605a      	str	r2, [r3, #4]

	ssd1306_SetCursor(1*symbolHorizontalShift, 1+0*symbolVerticalShift);		//Paste name of page
 8000290:	4b9b      	ldr	r3, [pc, #620]	; (8000500 <nextPage+0x2d0>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	b2db      	uxtb	r3, r3
 8000296:	2101      	movs	r1, #1
 8000298:	0018      	movs	r0, r3
 800029a:	f001 fea5 	bl	8001fe8 <ssd1306_SetCursor>
	ssd1306_WriteString(currentPage->nameOfPage, Font_6x8, White);
 800029e:	4b96      	ldr	r3, [pc, #600]	; (80004f8 <nextPage+0x2c8>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	3310      	adds	r3, #16
 80002a4:	0018      	movs	r0, r3
 80002a6:	4a97      	ldr	r2, [pc, #604]	; (8000504 <nextPage+0x2d4>)
 80002a8:	2301      	movs	r3, #1
 80002aa:	6811      	ldr	r1, [r2, #0]
 80002ac:	6852      	ldr	r2, [r2, #4]
 80002ae:	f001 fe71 	bl	8001f94 <ssd1306_WriteString>

	if(currentSubPage->selected==0)
 80002b2:	4b92      	ldr	r3, [pc, #584]	; (80004fc <nextPage+0x2cc>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	685b      	ldr	r3, [r3, #4]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d000      	beq.n	80002be <nextPage+0x8e>
 80002bc:	e112      	b.n	80004e4 <nextPage+0x2b4>
			//(	currentPage->numberOfPage!=2)&&(	currentPage->buttonMenu[currentPage->currentButton].selected!=1)
			{	//IF THIS IS NOT A SUBPAGE
		//////////////////////////////////////	BUTTONS ///////////////////////////////////////////////

		ssd1306_SetCursor(1*symbolHorizontalShift, 2+2*symbolVerticalShift);		//Place corresponding buttons
 80002be:	4b90      	ldr	r3, [pc, #576]	; (8000500 <nextPage+0x2d0>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	4b90      	ldr	r3, [pc, #576]	; (8000508 <nextPage+0x2d8>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	3301      	adds	r3, #1
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	18db      	adds	r3, r3, r3
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	0019      	movs	r1, r3
 80002d2:	0010      	movs	r0, r2
 80002d4:	f001 fe88 	bl	8001fe8 <ssd1306_SetCursor>
		ssd1306_WriteString(currentPage->buttonMenu[0].title, Font_6x8, White);		//1.
 80002d8:	4b87      	ldr	r3, [pc, #540]	; (80004f8 <nextPage+0x2c8>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	3340      	adds	r3, #64	; 0x40
 80002de:	0018      	movs	r0, r3
 80002e0:	4a88      	ldr	r2, [pc, #544]	; (8000504 <nextPage+0x2d4>)
 80002e2:	2301      	movs	r3, #1
 80002e4:	6811      	ldr	r1, [r2, #0]
 80002e6:	6852      	ldr	r2, [r2, #4]
 80002e8:	f001 fe54 	bl	8001f94 <ssd1306_WriteString>
		if ((currentPage->buttonMenu[0].buttonType==SETORRESET)&&(currentPage->buttonMenu[0].state == STATE_SET)){				//IF SET - MARK AS SET
 80002ec:	4b82      	ldr	r3, [pc, #520]	; (80004f8 <nextPage+0x2c8>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d121      	bne.n	800033a <nextPage+0x10a>
 80002f6:	4b80      	ldr	r3, [pc, #512]	; (80004f8 <nextPage+0x2c8>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d11c      	bne.n	800033a <nextPage+0x10a>
			ssd1306_FillRectangle(	currentPage->cursorAxis[0][0]+115,
 8000300:	4b7d      	ldr	r3, [pc, #500]	; (80004f8 <nextPage+0x2c8>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000306:	b2db      	uxtb	r3, r3
 8000308:	3373      	adds	r3, #115	; 0x73
 800030a:	b2d8      	uxtb	r0, r3
									currentPage->cursorAxis[0][1]+2,
 800030c:	4b7a      	ldr	r3, [pc, #488]	; (80004f8 <nextPage+0x2c8>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			ssd1306_FillRectangle(	currentPage->cursorAxis[0][0]+115,
 8000312:	b2db      	uxtb	r3, r3
 8000314:	3302      	adds	r3, #2
 8000316:	b2d9      	uxtb	r1, r3
									currentPage->cursorAxis[0][0]+117,
 8000318:	4b77      	ldr	r3, [pc, #476]	; (80004f8 <nextPage+0x2c8>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			ssd1306_FillRectangle(	currentPage->cursorAxis[0][0]+115,
 800031e:	b2db      	uxtb	r3, r3
 8000320:	3375      	adds	r3, #117	; 0x75
 8000322:	b2da      	uxtb	r2, r3
									currentPage->cursorAxis[0][1]+4,
 8000324:	4b74      	ldr	r3, [pc, #464]	; (80004f8 <nextPage+0x2c8>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			ssd1306_FillRectangle(	currentPage->cursorAxis[0][0]+115,
 800032a:	b2db      	uxtb	r3, r3
 800032c:	3304      	adds	r3, #4
 800032e:	b2db      	uxtb	r3, r3
 8000330:	2401      	movs	r4, #1
 8000332:	9400      	str	r4, [sp, #0]
 8000334:	f001 ff4c 	bl	80021d0 <ssd1306_FillRectangle>
 8000338:	e01b      	b.n	8000372 <nextPage+0x142>
									0x01);}
		else {
			ssd1306_FillRectangle(	currentPage->cursorAxis[0][0]+115,				//IF RESET - MARK AS RESET
 800033a:	4b6f      	ldr	r3, [pc, #444]	; (80004f8 <nextPage+0x2c8>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000340:	b2db      	uxtb	r3, r3
 8000342:	3373      	adds	r3, #115	; 0x73
 8000344:	b2d8      	uxtb	r0, r3
									currentPage->cursorAxis[0][1]+2,
 8000346:	4b6c      	ldr	r3, [pc, #432]	; (80004f8 <nextPage+0x2c8>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			ssd1306_FillRectangle(	currentPage->cursorAxis[0][0]+115,				//IF RESET - MARK AS RESET
 800034c:	b2db      	uxtb	r3, r3
 800034e:	3302      	adds	r3, #2
 8000350:	b2d9      	uxtb	r1, r3
									currentPage->cursorAxis[0][0]+117,
 8000352:	4b69      	ldr	r3, [pc, #420]	; (80004f8 <nextPage+0x2c8>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			ssd1306_FillRectangle(	currentPage->cursorAxis[0][0]+115,				//IF RESET - MARK AS RESET
 8000358:	b2db      	uxtb	r3, r3
 800035a:	3375      	adds	r3, #117	; 0x75
 800035c:	b2da      	uxtb	r2, r3
									currentPage->cursorAxis[0][1]+4,
 800035e:	4b66      	ldr	r3, [pc, #408]	; (80004f8 <nextPage+0x2c8>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			ssd1306_FillRectangle(	currentPage->cursorAxis[0][0]+115,				//IF RESET - MARK AS RESET
 8000364:	b2db      	uxtb	r3, r3
 8000366:	3304      	adds	r3, #4
 8000368:	b2db      	uxtb	r3, r3
 800036a:	2400      	movs	r4, #0
 800036c:	9400      	str	r4, [sp, #0]
 800036e:	f001 ff2f 	bl	80021d0 <ssd1306_FillRectangle>
									0x00);}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////

		ssd1306_SetCursor(1*symbolHorizontalShift, 3+3*symbolVerticalShift);		//2.
 8000372:	4b63      	ldr	r3, [pc, #396]	; (8000500 <nextPage+0x2d0>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	b2da      	uxtb	r2, r3
 8000378:	4b63      	ldr	r3, [pc, #396]	; (8000508 <nextPage+0x2d8>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	3301      	adds	r3, #1
 800037e:	b2db      	uxtb	r3, r3
 8000380:	1c19      	adds	r1, r3, #0
 8000382:	1c0b      	adds	r3, r1, #0
 8000384:	18db      	adds	r3, r3, r3
 8000386:	185b      	adds	r3, r3, r1
 8000388:	b2db      	uxtb	r3, r3
 800038a:	0019      	movs	r1, r3
 800038c:	0010      	movs	r0, r2
 800038e:	f001 fe2b 	bl	8001fe8 <ssd1306_SetCursor>
		ssd1306_WriteString(currentPage->buttonMenu[1].title, Font_6x8, White);
 8000392:	4b59      	ldr	r3, [pc, #356]	; (80004f8 <nextPage+0x2c8>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	3378      	adds	r3, #120	; 0x78
 8000398:	0018      	movs	r0, r3
 800039a:	4a5a      	ldr	r2, [pc, #360]	; (8000504 <nextPage+0x2d4>)
 800039c:	2301      	movs	r3, #1
 800039e:	6811      	ldr	r1, [r2, #0]
 80003a0:	6852      	ldr	r2, [r2, #4]
 80003a2:	f001 fdf7 	bl	8001f94 <ssd1306_WriteString>
		if ((currentPage->buttonMenu[0].buttonType==SETORRESET)&&(currentPage->buttonMenu[1].state == STATE_SET)){				//IF SET - MARK AS SET
 80003a6:	4b54      	ldr	r3, [pc, #336]	; (80004f8 <nextPage+0x2c8>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d122      	bne.n	80003f6 <nextPage+0x1c6>
 80003b0:	4b51      	ldr	r3, [pc, #324]	; (80004f8 <nextPage+0x2c8>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	229c      	movs	r2, #156	; 0x9c
 80003b6:	589b      	ldr	r3, [r3, r2]
 80003b8:	2b01      	cmp	r3, #1
 80003ba:	d11c      	bne.n	80003f6 <nextPage+0x1c6>
			ssd1306_FillRectangle(	currentPage->cursorAxis[1][0]+115,
 80003bc:	4b4e      	ldr	r3, [pc, #312]	; (80004f8 <nextPage+0x2c8>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	3373      	adds	r3, #115	; 0x73
 80003c6:	b2d8      	uxtb	r0, r3
									currentPage->cursorAxis[1][1]+2,
 80003c8:	4b4b      	ldr	r3, [pc, #300]	; (80004f8 <nextPage+0x2c8>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
			ssd1306_FillRectangle(	currentPage->cursorAxis[1][0]+115,
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	3302      	adds	r3, #2
 80003d2:	b2d9      	uxtb	r1, r3
									currentPage->cursorAxis[1][0]+117,
 80003d4:	4b48      	ldr	r3, [pc, #288]	; (80004f8 <nextPage+0x2c8>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			ssd1306_FillRectangle(	currentPage->cursorAxis[1][0]+115,
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	3375      	adds	r3, #117	; 0x75
 80003de:	b2da      	uxtb	r2, r3
									currentPage->cursorAxis[1][1]+4,
 80003e0:	4b45      	ldr	r3, [pc, #276]	; (80004f8 <nextPage+0x2c8>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
			ssd1306_FillRectangle(	currentPage->cursorAxis[1][0]+115,
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	3304      	adds	r3, #4
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	2401      	movs	r4, #1
 80003ee:	9400      	str	r4, [sp, #0]
 80003f0:	f001 feee 	bl	80021d0 <ssd1306_FillRectangle>
 80003f4:	e01b      	b.n	800042e <nextPage+0x1fe>
									0x01);}
		else {
			ssd1306_FillRectangle(	currentPage->cursorAxis[1][0]+115,				//IF RESET - MARK AS RESET
 80003f6:	4b40      	ldr	r3, [pc, #256]	; (80004f8 <nextPage+0x2c8>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	3373      	adds	r3, #115	; 0x73
 8000400:	b2d8      	uxtb	r0, r3
									currentPage->cursorAxis[1][1]+2,
 8000402:	4b3d      	ldr	r3, [pc, #244]	; (80004f8 <nextPage+0x2c8>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
			ssd1306_FillRectangle(	currentPage->cursorAxis[1][0]+115,				//IF RESET - MARK AS RESET
 8000408:	b2db      	uxtb	r3, r3
 800040a:	3302      	adds	r3, #2
 800040c:	b2d9      	uxtb	r1, r3
									currentPage->cursorAxis[1][0]+117,
 800040e:	4b3a      	ldr	r3, [pc, #232]	; (80004f8 <nextPage+0x2c8>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			ssd1306_FillRectangle(	currentPage->cursorAxis[1][0]+115,				//IF RESET - MARK AS RESET
 8000414:	b2db      	uxtb	r3, r3
 8000416:	3375      	adds	r3, #117	; 0x75
 8000418:	b2da      	uxtb	r2, r3
									currentPage->cursorAxis[1][1]+4,
 800041a:	4b37      	ldr	r3, [pc, #220]	; (80004f8 <nextPage+0x2c8>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
			ssd1306_FillRectangle(	currentPage->cursorAxis[1][0]+115,				//IF RESET - MARK AS RESET
 8000420:	b2db      	uxtb	r3, r3
 8000422:	3304      	adds	r3, #4
 8000424:	b2db      	uxtb	r3, r3
 8000426:	2400      	movs	r4, #0
 8000428:	9400      	str	r4, [sp, #0]
 800042a:	f001 fed1 	bl	80021d0 <ssd1306_FillRectangle>
									0x00);}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////

		ssd1306_SetCursor(1*symbolHorizontalShift, 4+4*symbolVerticalShift);		//3.
 800042e:	4b34      	ldr	r3, [pc, #208]	; (8000500 <nextPage+0x2d0>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	b2da      	uxtb	r2, r3
 8000434:	4b34      	ldr	r3, [pc, #208]	; (8000508 <nextPage+0x2d8>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	3301      	adds	r3, #1
 800043a:	b2db      	uxtb	r3, r3
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	b2db      	uxtb	r3, r3
 8000440:	0019      	movs	r1, r3
 8000442:	0010      	movs	r0, r2
 8000444:	f001 fdd0 	bl	8001fe8 <ssd1306_SetCursor>
		ssd1306_WriteString(currentPage->buttonMenu[2].title, Font_6x8, White);
 8000448:	4b2b      	ldr	r3, [pc, #172]	; (80004f8 <nextPage+0x2c8>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	33b0      	adds	r3, #176	; 0xb0
 800044e:	0018      	movs	r0, r3
 8000450:	4a2c      	ldr	r2, [pc, #176]	; (8000504 <nextPage+0x2d4>)
 8000452:	2301      	movs	r3, #1
 8000454:	6811      	ldr	r1, [r2, #0]
 8000456:	6852      	ldr	r2, [r2, #4]
 8000458:	f001 fd9c 	bl	8001f94 <ssd1306_WriteString>
		if ((currentPage->buttonMenu[0].buttonType==SETORRESET)&&(currentPage->buttonMenu[2].state == STATE_SET)){				//IF SET - MARK AS SET
 800045c:	4b26      	ldr	r3, [pc, #152]	; (80004f8 <nextPage+0x2c8>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000462:	2b00      	cmp	r3, #0
 8000464:	d122      	bne.n	80004ac <nextPage+0x27c>
 8000466:	4b24      	ldr	r3, [pc, #144]	; (80004f8 <nextPage+0x2c8>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	22d4      	movs	r2, #212	; 0xd4
 800046c:	589b      	ldr	r3, [r3, r2]
 800046e:	2b01      	cmp	r3, #1
 8000470:	d11c      	bne.n	80004ac <nextPage+0x27c>
			ssd1306_FillRectangle(	currentPage->cursorAxis[2][0]+115,
 8000472:	4b21      	ldr	r3, [pc, #132]	; (80004f8 <nextPage+0x2c8>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000478:	b2db      	uxtb	r3, r3
 800047a:	3373      	adds	r3, #115	; 0x73
 800047c:	b2d8      	uxtb	r0, r3
									currentPage->cursorAxis[2][1]+2,
 800047e:	4b1e      	ldr	r3, [pc, #120]	; (80004f8 <nextPage+0x2c8>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
			ssd1306_FillRectangle(	currentPage->cursorAxis[2][0]+115,
 8000484:	b2db      	uxtb	r3, r3
 8000486:	3302      	adds	r3, #2
 8000488:	b2d9      	uxtb	r1, r3
									currentPage->cursorAxis[2][0]+117,
 800048a:	4b1b      	ldr	r3, [pc, #108]	; (80004f8 <nextPage+0x2c8>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ssd1306_FillRectangle(	currentPage->cursorAxis[2][0]+115,
 8000490:	b2db      	uxtb	r3, r3
 8000492:	3375      	adds	r3, #117	; 0x75
 8000494:	b2da      	uxtb	r2, r3
									currentPage->cursorAxis[2][1]+4,
 8000496:	4b18      	ldr	r3, [pc, #96]	; (80004f8 <nextPage+0x2c8>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
			ssd1306_FillRectangle(	currentPage->cursorAxis[2][0]+115,
 800049c:	b2db      	uxtb	r3, r3
 800049e:	3304      	adds	r3, #4
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	2401      	movs	r4, #1
 80004a4:	9400      	str	r4, [sp, #0]
 80004a6:	f001 fe93 	bl	80021d0 <ssd1306_FillRectangle>
 80004aa:	e01b      	b.n	80004e4 <nextPage+0x2b4>
									0x01);}
		else {
			ssd1306_FillRectangle(	currentPage->cursorAxis[2][0]+115,				//IF RESET - MARK AS RESET
 80004ac:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <nextPage+0x2c8>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	3373      	adds	r3, #115	; 0x73
 80004b6:	b2d8      	uxtb	r0, r3
									currentPage->cursorAxis[2][1]+2,
 80004b8:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <nextPage+0x2c8>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
			ssd1306_FillRectangle(	currentPage->cursorAxis[2][0]+115,				//IF RESET - MARK AS RESET
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	3302      	adds	r3, #2
 80004c2:	b2d9      	uxtb	r1, r3
									currentPage->cursorAxis[2][0]+117,
 80004c4:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <nextPage+0x2c8>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ssd1306_FillRectangle(	currentPage->cursorAxis[2][0]+115,				//IF RESET - MARK AS RESET
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	3375      	adds	r3, #117	; 0x75
 80004ce:	b2da      	uxtb	r2, r3
									currentPage->cursorAxis[2][1]+4,
 80004d0:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <nextPage+0x2c8>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
			ssd1306_FillRectangle(	currentPage->cursorAxis[2][0]+115,				//IF RESET - MARK AS RESET
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	3304      	adds	r3, #4
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	2400      	movs	r4, #0
 80004de:	9400      	str	r4, [sp, #0]
 80004e0:	f001 fe76 	bl	80021d0 <ssd1306_FillRectangle>
		//////////////////////////////////////////////////////////////////////////////////////////////////////////
}
	else {											//THE PAGE IS A SUBPAGE ADJ TIME

	}
	ssd1306_UpdateScreen();}
 80004e4:	f001 fc2c 	bl	8001d40 <ssd1306_UpdateScreen>
else {}
}
 80004e8:	46c0      	nop			; (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b001      	add	sp, #4
 80004ee:	bd90      	pop	{r4, r7, pc}
 80004f0:	20000000 	.word	0x20000000
 80004f4:	20000004 	.word	0x20000004
 80004f8:	200004b8 	.word	0x200004b8
 80004fc:	200004bc 	.word	0x200004bc
 8000500:	200004c0 	.word	0x200004c0
 8000504:	200004dc 	.word	0x200004dc
 8000508:	200004c4 	.word	0x200004c4

0800050c <nextSubPage>:

void nextSubPage(){
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af02      	add	r7, sp, #8
	if(allowNextSubPage==1){
 8000512:	4b28      	ldr	r3, [pc, #160]	; (80005b4 <nextSubPage+0xa8>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2b01      	cmp	r3, #1
 8000518:	d148      	bne.n	80005ac <nextSubPage+0xa0>
		ssd1306_FillRectangle(0, 0, 127, 63, 0x0);//wipeScreen();
 800051a:	2300      	movs	r3, #0
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	233f      	movs	r3, #63	; 0x3f
 8000520:	227f      	movs	r2, #127	; 0x7f
 8000522:	2100      	movs	r1, #0
 8000524:	2000      	movs	r0, #0
 8000526:	f001 fe53 	bl	80021d0 <ssd1306_FillRectangle>

			checkTime();
 800052a:	f000 fd1f 	bl	8000f6c <checkTime>
			if (nextOrPrev==NEXT)
 800052e:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <nextSubPage+0xac>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	2b02      	cmp	r3, #2
 8000534:	d105      	bne.n	8000542 <nextSubPage+0x36>
				currentSubPage = currentSubPage->nextoPage;
 8000536:	4b21      	ldr	r3, [pc, #132]	; (80005bc <nextSubPage+0xb0>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	689a      	ldr	r2, [r3, #8]
 800053c:	4b1f      	ldr	r3, [pc, #124]	; (80005bc <nextSubPage+0xb0>)
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	e011      	b.n	8000566 <nextSubPage+0x5a>
			else if (nextOrPrev==PREV)
 8000542:	4b1d      	ldr	r3, [pc, #116]	; (80005b8 <nextSubPage+0xac>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d105      	bne.n	8000556 <nextSubPage+0x4a>
				currentSubPage = currentSubPage->prevPage;
 800054a:	4b1c      	ldr	r3, [pc, #112]	; (80005bc <nextSubPage+0xb0>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	68da      	ldr	r2, [r3, #12]
 8000550:	4b1a      	ldr	r3, [pc, #104]	; (80005bc <nextSubPage+0xb0>)
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	e007      	b.n	8000566 <nextSubPage+0x5a>
			else if (nextOrPrev==CURRENT){currentSubPage = currentSubPage;}
 8000556:	4b18      	ldr	r3, [pc, #96]	; (80005b8 <nextSubPage+0xac>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d103      	bne.n	8000566 <nextSubPage+0x5a>
 800055e:	4b17      	ldr	r3, [pc, #92]	; (80005bc <nextSubPage+0xb0>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	4b16      	ldr	r3, [pc, #88]	; (80005bc <nextSubPage+0xb0>)
 8000564:	601a      	str	r2, [r3, #0]

			ssd1306_SetCursor(1*symbolHorizontalShift, 1+0*symbolVerticalShift);
 8000566:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <nextSubPage+0xb4>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	b2db      	uxtb	r3, r3
 800056c:	2101      	movs	r1, #1
 800056e:	0018      	movs	r0, r3
 8000570:	f001 fd3a 	bl	8001fe8 <ssd1306_SetCursor>

			ssd1306_WriteString(currentSubPage->nameOfPage, Font_6x8, White);		//Paste name of page
 8000574:	4b11      	ldr	r3, [pc, #68]	; (80005bc <nextSubPage+0xb0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	3310      	adds	r3, #16
 800057a:	0018      	movs	r0, r3
 800057c:	4a11      	ldr	r2, [pc, #68]	; (80005c4 <nextSubPage+0xb8>)
 800057e:	2301      	movs	r3, #1
 8000580:	6811      	ldr	r1, [r2, #0]
 8000582:	6852      	ldr	r2, [r2, #4]
 8000584:	f001 fd06 	bl	8001f94 <ssd1306_WriteString>

			ssd1306_SetCursor(1*symbolHorizontalShift, 1+2*symbolVerticalShift);	//DISPLAY TIME FOR ADJUSTING
 8000588:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <nextSubPage+0xb4>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	b2da      	uxtb	r2, r3
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <nextSubPage+0xbc>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	b2db      	uxtb	r3, r3
 8000594:	18db      	adds	r3, r3, r3
 8000596:	b2db      	uxtb	r3, r3
 8000598:	3301      	adds	r3, #1
 800059a:	b2db      	uxtb	r3, r3
 800059c:	0019      	movs	r1, r3
 800059e:	0010      	movs	r0, r2
 80005a0:	f001 fd22 	bl	8001fe8 <ssd1306_SetCursor>
			displayTime();
 80005a4:	f000 fd22 	bl	8000fec <displayTime>

			ssd1306_UpdateScreen();
 80005a8:	f001 fbca 	bl	8001d40 <ssd1306_UpdateScreen>
	}
}
 80005ac:	46c0      	nop			; (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	20000574 	.word	0x20000574
 80005b8:	20000004 	.word	0x20000004
 80005bc:	200004bc 	.word	0x200004bc
 80005c0:	200004c0 	.word	0x200004c0
 80005c4:	200004dc 	.word	0x200004dc
 80005c8:	200004c4 	.word	0x200004c4

080005cc <moveCursor>:

void moveCursor(){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af02      	add	r7, sp, #8
if (currentPage->selected==1&&currentSubPage->selected==0){
 80005d2:	4b38      	ldr	r3, [pc, #224]	; (80006b4 <moveCursor+0xe8>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d167      	bne.n	80006ac <moveCursor+0xe0>
 80005dc:	4b36      	ldr	r3, [pc, #216]	; (80006b8 <moveCursor+0xec>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d162      	bne.n	80006ac <moveCursor+0xe0>
		ssd1306_FillRectangle(0, 10, 5, 54, 0x00);				//CLEAR BUTTON MARKERS
 80005e6:	2300      	movs	r3, #0
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2336      	movs	r3, #54	; 0x36
 80005ec:	2205      	movs	r2, #5
 80005ee:	210a      	movs	r1, #10
 80005f0:	2000      	movs	r0, #0
 80005f2:	f001 fded 	bl	80021d0 <ssd1306_FillRectangle>

		currentPage->buttonMenu[0].selected=0;
 80005f6:	4b2f      	ldr	r3, [pc, #188]	; (80006b4 <moveCursor+0xe8>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2200      	movs	r2, #0
 80005fc:	669a      	str	r2, [r3, #104]	; 0x68
		currentPage->buttonMenu[1].selected=0;
 80005fe:	4b2d      	ldr	r3, [pc, #180]	; (80006b4 <moveCursor+0xe8>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	22a0      	movs	r2, #160	; 0xa0
 8000604:	2100      	movs	r1, #0
 8000606:	5099      	str	r1, [r3, r2]
		currentPage->buttonMenu[2].selected=0;
 8000608:	4b2a      	ldr	r3, [pc, #168]	; (80006b4 <moveCursor+0xe8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	22d8      	movs	r2, #216	; 0xd8
 800060e:	2100      	movs	r1, #0
 8000610:	5099      	str	r1, [r3, r2]


		if 			(nextOrPrev==PREV)
 8000612:	4b2a      	ldr	r3, [pc, #168]	; (80006bc <moveCursor+0xf0>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d120      	bne.n	800065c <moveCursor+0x90>
		{currentPage->currentButton = currentPage->buttonMenu[currentPage->currentButton].prevObject;
 800061a:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <moveCursor+0xe8>)
 800061c:	6819      	ldr	r1, [r3, #0]
 800061e:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <moveCursor+0xe8>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	22e8      	movs	r2, #232	; 0xe8
 8000624:	589a      	ldr	r2, [r3, r2]
 8000626:	0013      	movs	r3, r2
 8000628:	00db      	lsls	r3, r3, #3
 800062a:	1a9b      	subs	r3, r3, r2
 800062c:	00db      	lsls	r3, r3, #3
 800062e:	18cb      	adds	r3, r1, r3
 8000630:	3360      	adds	r3, #96	; 0x60
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <moveCursor+0xe8>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	0011      	movs	r1, r2
 800063a:	22e8      	movs	r2, #232	; 0xe8
 800063c:	5099      	str	r1, [r3, r2]
		currentPage->buttonMenu[currentPage->currentButton].selected=1;}
 800063e:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <moveCursor+0xe8>)
 8000640:	6819      	ldr	r1, [r3, #0]
 8000642:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <moveCursor+0xe8>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	22e8      	movs	r2, #232	; 0xe8
 8000648:	589a      	ldr	r2, [r3, r2]
 800064a:	0013      	movs	r3, r2
 800064c:	00db      	lsls	r3, r3, #3
 800064e:	1a9b      	subs	r3, r3, r2
 8000650:	00db      	lsls	r3, r3, #3
 8000652:	18cb      	adds	r3, r1, r3
 8000654:	3368      	adds	r3, #104	; 0x68
 8000656:	2201      	movs	r2, #1
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	e023      	b.n	80006a4 <moveCursor+0xd8>

		else if 	(nextOrPrev==NEXT)
 800065c:	4b17      	ldr	r3, [pc, #92]	; (80006bc <moveCursor+0xf0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b02      	cmp	r3, #2
 8000662:	d11f      	bne.n	80006a4 <moveCursor+0xd8>
		{currentPage->currentButton = currentPage->buttonMenu[currentPage->currentButton].nextObject;
 8000664:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <moveCursor+0xe8>)
 8000666:	6819      	ldr	r1, [r3, #0]
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <moveCursor+0xe8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	22e8      	movs	r2, #232	; 0xe8
 800066e:	589a      	ldr	r2, [r3, r2]
 8000670:	0013      	movs	r3, r2
 8000672:	00db      	lsls	r3, r3, #3
 8000674:	1a9b      	subs	r3, r3, r2
 8000676:	00db      	lsls	r3, r3, #3
 8000678:	18cb      	adds	r3, r1, r3
 800067a:	335c      	adds	r3, #92	; 0x5c
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <moveCursor+0xe8>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	0011      	movs	r1, r2
 8000684:	22e8      	movs	r2, #232	; 0xe8
 8000686:	5099      	str	r1, [r3, r2]
		currentPage->buttonMenu[currentPage->currentButton].selected=1;}
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <moveCursor+0xe8>)
 800068a:	6819      	ldr	r1, [r3, #0]
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <moveCursor+0xe8>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	22e8      	movs	r2, #232	; 0xe8
 8000692:	589a      	ldr	r2, [r3, r2]
 8000694:	0013      	movs	r3, r2
 8000696:	00db      	lsls	r3, r3, #3
 8000698:	1a9b      	subs	r3, r3, r2
 800069a:	00db      	lsls	r3, r3, #3
 800069c:	18cb      	adds	r3, r1, r3
 800069e:	3368      	adds	r3, #104	; 0x68
 80006a0:	2201      	movs	r2, #1
 80006a2:	601a      	str	r2, [r3, #0]

		markButton();					//MARK THE BUTTON
 80006a4:	f000 fa76 	bl	8000b94 <markButton>

		ssd1306_UpdateScreen();
 80006a8:	f001 fb4a 	bl	8001d40 <ssd1306_UpdateScreen>
	}
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	200004b8 	.word	0x200004b8
 80006b8:	200004bc 	.word	0x200004bc
 80006bc:	20000004 	.word	0x20000004

080006c0 <moveSPCursor>:

void moveSPCursor(){
 80006c0:	b5b0      	push	{r4, r5, r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af02      	add	r7, sp, #8
if ((currentSubPage->selected==1)&&(allowCursorCalibTime==1)&&(allowMove==1)){
 80006c6:	4b60      	ldr	r3, [pc, #384]	; (8000848 <moveSPCursor+0x188>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d000      	beq.n	80006d2 <moveSPCursor+0x12>
 80006d0:	e0b7      	b.n	8000842 <moveSPCursor+0x182>
 80006d2:	4b5e      	ldr	r3, [pc, #376]	; (800084c <moveSPCursor+0x18c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d000      	beq.n	80006dc <moveSPCursor+0x1c>
 80006da:	e0b2      	b.n	8000842 <moveSPCursor+0x182>
 80006dc:	4b5c      	ldr	r3, [pc, #368]	; (8000850 <moveSPCursor+0x190>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d000      	beq.n	80006e6 <moveSPCursor+0x26>
 80006e4:	e0ad      	b.n	8000842 <moveSPCursor+0x182>
		ssd1306_Line(			currentSubPage->cursorAxis[currentPage->currentButton][0]-1, //CLEAR ALL SubPage CURSORS
 80006e6:	4b58      	ldr	r3, [pc, #352]	; (8000848 <moveSPCursor+0x188>)
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	4b5a      	ldr	r3, [pc, #360]	; (8000854 <moveSPCursor+0x194>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	21e8      	movs	r1, #232	; 0xe8
 80006f0:	585b      	ldr	r3, [r3, r1]
 80006f2:	3305      	adds	r3, #5
 80006f4:	00db      	lsls	r3, r3, #3
 80006f6:	589b      	ldr	r3, [r3, r2]
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	3b01      	subs	r3, #1
 80006fc:	b2d8      	uxtb	r0, r3
								currentSubPage->cursorAxis[currentSubPage->currentButton][1]+9,
 80006fe:	4b52      	ldr	r3, [pc, #328]	; (8000848 <moveSPCursor+0x188>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	4b51      	ldr	r3, [pc, #324]	; (8000848 <moveSPCursor+0x188>)
 8000704:	6819      	ldr	r1, [r3, #0]
 8000706:	23f4      	movs	r3, #244	; 0xf4
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	58cb      	ldr	r3, [r1, r3]
 800070c:	00db      	lsls	r3, r3, #3
 800070e:	18d3      	adds	r3, r2, r3
 8000710:	332c      	adds	r3, #44	; 0x2c
 8000712:	681b      	ldr	r3, [r3, #0]
		ssd1306_Line(			currentSubPage->cursorAxis[currentPage->currentButton][0]-1, //CLEAR ALL SubPage CURSORS
 8000714:	b2db      	uxtb	r3, r3
 8000716:	3309      	adds	r3, #9
 8000718:	b2dc      	uxtb	r4, r3
								currentSubPage->cursorAxis[currentSubPage->currentButton][0]+127,
 800071a:	4b4b      	ldr	r3, [pc, #300]	; (8000848 <moveSPCursor+0x188>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	4b4a      	ldr	r3, [pc, #296]	; (8000848 <moveSPCursor+0x188>)
 8000720:	6819      	ldr	r1, [r3, #0]
 8000722:	23f4      	movs	r3, #244	; 0xf4
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	58cb      	ldr	r3, [r1, r3]
 8000728:	3305      	adds	r3, #5
 800072a:	00db      	lsls	r3, r3, #3
 800072c:	589b      	ldr	r3, [r3, r2]
		ssd1306_Line(			currentSubPage->cursorAxis[currentPage->currentButton][0]-1, //CLEAR ALL SubPage CURSORS
 800072e:	b2db      	uxtb	r3, r3
 8000730:	337f      	adds	r3, #127	; 0x7f
 8000732:	b2dd      	uxtb	r5, r3
								currentSubPage->cursorAxis[currentSubPage->currentButton][1]+9,
 8000734:	4b44      	ldr	r3, [pc, #272]	; (8000848 <moveSPCursor+0x188>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	4b43      	ldr	r3, [pc, #268]	; (8000848 <moveSPCursor+0x188>)
 800073a:	6819      	ldr	r1, [r3, #0]
 800073c:	23f4      	movs	r3, #244	; 0xf4
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	58cb      	ldr	r3, [r1, r3]
 8000742:	00db      	lsls	r3, r3, #3
 8000744:	18d3      	adds	r3, r2, r3
 8000746:	332c      	adds	r3, #44	; 0x2c
 8000748:	681b      	ldr	r3, [r3, #0]
		ssd1306_Line(			currentSubPage->cursorAxis[currentPage->currentButton][0]-1, //CLEAR ALL SubPage CURSORS
 800074a:	b2db      	uxtb	r3, r3
 800074c:	3309      	adds	r3, #9
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2200      	movs	r2, #0
 8000752:	9200      	str	r2, [sp, #0]
 8000754:	002a      	movs	r2, r5
 8000756:	0021      	movs	r1, r4
 8000758:	f001 fc60 	bl	800201c <ssd1306_Line>
								0x00);

		if 	(nextOrPrev==PREV)
 800075c:	4b3e      	ldr	r3, [pc, #248]	; (8000858 <moveSPCursor+0x198>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2b01      	cmp	r3, #1
 8000762:	d133      	bne.n	80007cc <moveSPCursor+0x10c>
		{
			currentSubPage->buttonMenu[currentSubPage->currentButton].selected=0;
 8000764:	4b38      	ldr	r3, [pc, #224]	; (8000848 <moveSPCursor+0x188>)
 8000766:	6819      	ldr	r1, [r3, #0]
 8000768:	4b37      	ldr	r3, [pc, #220]	; (8000848 <moveSPCursor+0x188>)
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	23f4      	movs	r3, #244	; 0xf4
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	58d2      	ldr	r2, [r2, r3]
 8000772:	2088      	movs	r0, #136	; 0x88
 8000774:	0013      	movs	r3, r2
 8000776:	00db      	lsls	r3, r3, #3
 8000778:	1a9b      	subs	r3, r3, r2
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	18cb      	adds	r3, r1, r3
 800077e:	181b      	adds	r3, r3, r0
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
			currentSubPage->currentButton = currentSubPage->buttonMenu[currentSubPage->currentButton].prevObject;
 8000784:	4b30      	ldr	r3, [pc, #192]	; (8000848 <moveSPCursor+0x188>)
 8000786:	6819      	ldr	r1, [r3, #0]
 8000788:	4b2f      	ldr	r3, [pc, #188]	; (8000848 <moveSPCursor+0x188>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	23f4      	movs	r3, #244	; 0xf4
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	58d2      	ldr	r2, [r2, r3]
 8000792:	2080      	movs	r0, #128	; 0x80
 8000794:	0013      	movs	r3, r2
 8000796:	00db      	lsls	r3, r3, #3
 8000798:	1a9b      	subs	r3, r3, r2
 800079a:	00db      	lsls	r3, r3, #3
 800079c:	18cb      	adds	r3, r1, r3
 800079e:	181b      	adds	r3, r3, r0
 80007a0:	6819      	ldr	r1, [r3, #0]
 80007a2:	4b29      	ldr	r3, [pc, #164]	; (8000848 <moveSPCursor+0x188>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	23f4      	movs	r3, #244	; 0xf4
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	50d1      	str	r1, [r2, r3]
			currentSubPage->buttonMenu[currentSubPage->currentButton].selected=1;
 80007ac:	4b26      	ldr	r3, [pc, #152]	; (8000848 <moveSPCursor+0x188>)
 80007ae:	6819      	ldr	r1, [r3, #0]
 80007b0:	4b25      	ldr	r3, [pc, #148]	; (8000848 <moveSPCursor+0x188>)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	23f4      	movs	r3, #244	; 0xf4
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	58d2      	ldr	r2, [r2, r3]
 80007ba:	2088      	movs	r0, #136	; 0x88
 80007bc:	0013      	movs	r3, r2
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	1a9b      	subs	r3, r3, r2
 80007c2:	00db      	lsls	r3, r3, #3
 80007c4:	18cb      	adds	r3, r1, r3
 80007c6:	181b      	adds	r3, r3, r0
 80007c8:	2201      	movs	r2, #1
 80007ca:	601a      	str	r2, [r3, #0]
		}

		if 	(nextOrPrev==NEXT)
 80007cc:	4b22      	ldr	r3, [pc, #136]	; (8000858 <moveSPCursor+0x198>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b02      	cmp	r3, #2
 80007d2:	d132      	bne.n	800083a <moveSPCursor+0x17a>
		{
			currentSubPage->buttonMenu[currentSubPage->currentButton].selected=0;
 80007d4:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <moveSPCursor+0x188>)
 80007d6:	6819      	ldr	r1, [r3, #0]
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <moveSPCursor+0x188>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	23f4      	movs	r3, #244	; 0xf4
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	58d2      	ldr	r2, [r2, r3]
 80007e2:	2088      	movs	r0, #136	; 0x88
 80007e4:	0013      	movs	r3, r2
 80007e6:	00db      	lsls	r3, r3, #3
 80007e8:	1a9b      	subs	r3, r3, r2
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	18cb      	adds	r3, r1, r3
 80007ee:	181b      	adds	r3, r3, r0
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
			currentSubPage->currentButton = currentSubPage->buttonMenu[currentSubPage->currentButton].nextObject;
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <moveSPCursor+0x188>)
 80007f6:	6819      	ldr	r1, [r3, #0]
 80007f8:	4b13      	ldr	r3, [pc, #76]	; (8000848 <moveSPCursor+0x188>)
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	23f4      	movs	r3, #244	; 0xf4
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	58d2      	ldr	r2, [r2, r3]
 8000802:	0013      	movs	r3, r2
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	1a9b      	subs	r3, r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	18cb      	adds	r3, r1, r3
 800080c:	337c      	adds	r3, #124	; 0x7c
 800080e:	6819      	ldr	r1, [r3, #0]
 8000810:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <moveSPCursor+0x188>)
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	23f4      	movs	r3, #244	; 0xf4
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	50d1      	str	r1, [r2, r3]
			currentSubPage->buttonMenu[currentSubPage->currentButton].selected=1;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <moveSPCursor+0x188>)
 800081c:	6819      	ldr	r1, [r3, #0]
 800081e:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <moveSPCursor+0x188>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	23f4      	movs	r3, #244	; 0xf4
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	58d2      	ldr	r2, [r2, r3]
 8000828:	2088      	movs	r0, #136	; 0x88
 800082a:	0013      	movs	r3, r2
 800082c:	00db      	lsls	r3, r3, #3
 800082e:	1a9b      	subs	r3, r3, r2
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	18cb      	adds	r3, r1, r3
 8000834:	181b      	adds	r3, r3, r0
 8000836:	2201      	movs	r2, #1
 8000838:	601a      	str	r2, [r3, #0]
		}

		markSubPageButton();																	//MARK THE SP BUTTON
 800083a:	f000 f9eb 	bl	8000c14 <markSubPageButton>

		ssd1306_UpdateScreen();
 800083e:	f001 fa7f 	bl	8001d40 <ssd1306_UpdateScreen>
	}
}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	bdb0      	pop	{r4, r5, r7, pc}
 8000848:	200004bc 	.word	0x200004bc
 800084c:	2000059c 	.word	0x2000059c
 8000850:	200004cc 	.word	0x200004cc
 8000854:	200004b8 	.word	0x200004b8
 8000858:	20000004 	.word	0x20000004

0800085c <selectPage>:

void selectPage(){
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af02      	add	r7, sp, #8
	if(		(currentSubPage->selected==1)||(allowCalibTime==1)||
 8000862:	4b3d      	ldr	r3, [pc, #244]	; (8000958 <selectPage+0xfc>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d100      	bne.n	800086e <selectPage+0x12>
 800086c:	e070      	b.n	8000950 <selectPage+0xf4>
 800086e:	4b3b      	ldr	r3, [pc, #236]	; (800095c <selectPage+0x100>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d06c      	beq.n	8000950 <selectPage+0xf4>
			(allowSelectCalibTime==1)||(allowCursorCalibTime==1)||(currentPage->selected==1)){}
 8000876:	4b3a      	ldr	r3, [pc, #232]	; (8000960 <selectPage+0x104>)
 8000878:	681b      	ldr	r3, [r3, #0]
	if(		(currentSubPage->selected==1)||(allowCalibTime==1)||
 800087a:	2b01      	cmp	r3, #1
 800087c:	d068      	beq.n	8000950 <selectPage+0xf4>
			(allowSelectCalibTime==1)||(allowCursorCalibTime==1)||(currentPage->selected==1)){}
 800087e:	4b39      	ldr	r3, [pc, #228]	; (8000964 <selectPage+0x108>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d064      	beq.n	8000950 <selectPage+0xf4>
 8000886:	4b38      	ldr	r3, [pc, #224]	; (8000968 <selectPage+0x10c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d05f      	beq.n	8000950 <selectPage+0xf4>
	else{
		ssd1306_DrawRectangle(0, 0, 127, 9, 0x01);
 8000890:	2301      	movs	r3, #1
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	2309      	movs	r3, #9
 8000896:	227f      	movs	r2, #127	; 0x7f
 8000898:	2100      	movs	r1, #0
 800089a:	2000      	movs	r0, #0
 800089c:	f001 fc48 	bl	8002130 <ssd1306_DrawRectangle>

		ssd1306_FillRectangle(0, 10, 5, 54, 0x00);				//CLEAR BUTTON MARKERS
 80008a0:	2300      	movs	r3, #0
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2336      	movs	r3, #54	; 0x36
 80008a6:	2205      	movs	r2, #5
 80008a8:	210a      	movs	r1, #10
 80008aa:	2000      	movs	r0, #0
 80008ac:	f001 fc90 	bl	80021d0 <ssd1306_FillRectangle>
		if ((currentPage->buttonMenu[0].selected==0)&&(currentPage->selected==0)&&(currentSubPage->selected==0))
 80008b0:	4b2d      	ldr	r3, [pc, #180]	; (8000968 <selectPage+0x10c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d14a      	bne.n	8000950 <selectPage+0xf4>
 80008ba:	4b2b      	ldr	r3, [pc, #172]	; (8000968 <selectPage+0x10c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d145      	bne.n	8000950 <selectPage+0xf4>
 80008c4:	4b24      	ldr	r3, [pc, #144]	; (8000958 <selectPage+0xfc>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d140      	bne.n	8000950 <selectPage+0xf4>
			{
			allowNextPage=0;
 80008ce:	4b27      	ldr	r3, [pc, #156]	; (800096c <selectPage+0x110>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]

			page1.selected=0;
 80008d4:	4b26      	ldr	r3, [pc, #152]	; (8000970 <selectPage+0x114>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	605a      	str	r2, [r3, #4]
			page2.selected=0;
 80008da:	4b26      	ldr	r3, [pc, #152]	; (8000974 <selectPage+0x118>)
 80008dc:	2200      	movs	r2, #0
 80008de:	605a      	str	r2, [r3, #4]
			page3.selected=0;
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <selectPage+0x11c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	605a      	str	r2, [r3, #4]
			calibTime.selected=0;
 80008e6:	4b25      	ldr	r3, [pc, #148]	; (800097c <selectPage+0x120>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	605a      	str	r2, [r3, #4]

			currentPage->selected=1;
 80008ec:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <selectPage+0x10c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2201      	movs	r2, #1
 80008f2:	605a      	str	r2, [r3, #4]
			currentPage->buttonMenu[0].selected=1;
 80008f4:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <selectPage+0x10c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2201      	movs	r2, #1
 80008fa:	669a      	str	r2, [r3, #104]	; 0x68
			currentPage->buttonMenu[1].selected=0;
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <selectPage+0x10c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	22a0      	movs	r2, #160	; 0xa0
 8000902:	2100      	movs	r1, #0
 8000904:	5099      	str	r1, [r3, r2]
			currentPage->buttonMenu[2].selected=0;
 8000906:	4b18      	ldr	r3, [pc, #96]	; (8000968 <selectPage+0x10c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	22d8      	movs	r2, #216	; 0xd8
 800090c:	2100      	movs	r1, #0
 800090e:	5099      	str	r1, [r3, r2]
			currentPage->currentButton=0;
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <selectPage+0x10c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	22e8      	movs	r2, #232	; 0xe8
 8000916:	2100      	movs	r1, #0
 8000918:	5099      	str	r1, [r3, r2]

			markButton();//MARK THE BUTTON
 800091a:	f000 f93b 	bl	8000b94 <markButton>

			if (currentPage->numberOfPage==0){
 800091e:	4b12      	ldr	r3, [pc, #72]	; (8000968 <selectPage+0x10c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d107      	bne.n	8000938 <selectPage+0xdc>
				 checkTime();					//DISPLAY TIME AT THE BOTTOM OF THE SCREEN
 8000928:	f000 fb20 	bl	8000f6c <checkTime>
				 ssd1306_SetCursor(0, 55);
 800092c:	2137      	movs	r1, #55	; 0x37
 800092e:	2000      	movs	r0, #0
 8000930:	f001 fb5a 	bl	8001fe8 <ssd1306_SetCursor>
				 displayTime();
 8000934:	f000 fb5a 	bl	8000fec <displayTime>
			}

			ssd1306_UpdateScreen();
 8000938:	f001 fa02 	bl	8001d40 <ssd1306_UpdateScreen>
			for(int i=0; i<350000; i++){};	//BUTTON DEBOUNCE DELAY
 800093c:	2300      	movs	r3, #0
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	e002      	b.n	8000948 <selectPage+0xec>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	3301      	adds	r3, #1
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a0d      	ldr	r2, [pc, #52]	; (8000980 <selectPage+0x124>)
 800094c:	4293      	cmp	r3, r2
 800094e:	ddf8      	ble.n	8000942 <selectPage+0xe6>
		}
	}
}
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	b002      	add	sp, #8
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200004bc 	.word	0x200004bc
 800095c:	20000594 	.word	0x20000594
 8000960:	20000598 	.word	0x20000598
 8000964:	2000059c 	.word	0x2000059c
 8000968:	200004b8 	.word	0x200004b8
 800096c:	20000000 	.word	0x20000000
 8000970:	20000008 	.word	0x20000008
 8000974:	200000f4 	.word	0x200000f4
 8000978:	200001e0 	.word	0x200001e0
 800097c:	200002cc 	.word	0x200002cc
 8000980:	0005572f 	.word	0x0005572f

08000984 <selectSubPage>:

void selectSubPage(){
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af02      	add	r7, sp, #8
	if ((currentPage->selected==0)){
 800098a:	4b2e      	ldr	r3, [pc, #184]	; (8000a44 <selectSubPage+0xc0>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d152      	bne.n	8000a3a <selectSubPage+0xb6>
			ssd1306_DrawRectangle(0, 0, 127, 9, 0x01);
 8000994:	2301      	movs	r3, #1
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	2309      	movs	r3, #9
 800099a:	227f      	movs	r2, #127	; 0x7f
 800099c:	2100      	movs	r1, #0
 800099e:	2000      	movs	r0, #0
 80009a0:	f001 fbc6 	bl	8002130 <ssd1306_DrawRectangle>

			allowNextSubPage=0;
 80009a4:	4b28      	ldr	r3, [pc, #160]	; (8000a48 <selectSubPage+0xc4>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]

			page1.selected=0;
 80009aa:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <selectSubPage+0xc8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	605a      	str	r2, [r3, #4]
			page2.selected=0;
 80009b0:	4b27      	ldr	r3, [pc, #156]	; (8000a50 <selectSubPage+0xcc>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	605a      	str	r2, [r3, #4]
			page3.selected=0;
 80009b6:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <selectSubPage+0xd0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	605a      	str	r2, [r3, #4]

			currentSubPage->selected=1;
 80009bc:	4b26      	ldr	r3, [pc, #152]	; (8000a58 <selectSubPage+0xd4>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2201      	movs	r2, #1
 80009c2:	605a      	str	r2, [r3, #4]
			currentSubPage->buttonMenu[0].selected=1;
 80009c4:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <selectSubPage+0xd4>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2288      	movs	r2, #136	; 0x88
 80009ca:	2101      	movs	r1, #1
 80009cc:	5099      	str	r1, [r3, r2]
			currentSubPage->buttonMenu[1].selected=0;
 80009ce:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <selectSubPage+0xd4>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	22c0      	movs	r2, #192	; 0xc0
 80009d4:	2100      	movs	r1, #0
 80009d6:	5099      	str	r1, [r3, r2]
			currentSubPage->buttonMenu[2].selected=0;
 80009d8:	4b1f      	ldr	r3, [pc, #124]	; (8000a58 <selectSubPage+0xd4>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	22f8      	movs	r2, #248	; 0xf8
 80009de:	2100      	movs	r1, #0
 80009e0:	5099      	str	r1, [r3, r2]
			currentSubPage->buttonMenu[3].selected=0;
 80009e2:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <selectSubPage+0xd4>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	2398      	movs	r3, #152	; 0x98
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	2100      	movs	r1, #0
 80009ec:	50d1      	str	r1, [r2, r3]
			currentSubPage->buttonMenu[4].selected=0;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <selectSubPage+0xd4>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	23b4      	movs	r3, #180	; 0xb4
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	2100      	movs	r1, #0
 80009f8:	50d1      	str	r1, [r2, r3]
			currentSubPage->buttonMenu[5].selected=0;
 80009fa:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <selectSubPage+0xd4>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	23d0      	movs	r3, #208	; 0xd0
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	2100      	movs	r1, #0
 8000a04:	50d1      	str	r1, [r2, r3]
			currentSubPage->buttonMenu[6].selected=0;
 8000a06:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <selectSubPage+0xd4>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	23ec      	movs	r3, #236	; 0xec
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	2100      	movs	r1, #0
 8000a10:	50d1      	str	r1, [r2, r3]
			currentSubPage->currentButton=0;
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <selectSubPage+0xd4>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	23f4      	movs	r3, #244	; 0xf4
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	50d1      	str	r1, [r2, r3]

			markSubPageButton();//MARK THE BUTTON
 8000a1e:	f000 f8f9 	bl	8000c14 <markSubPageButton>

			ssd1306_UpdateScreen();
 8000a22:	f001 f98d 	bl	8001d40 <ssd1306_UpdateScreen>
			for(int i=0; i<350000; i++){};	//BUTTON DEBOUNCE DELAY
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	e002      	b.n	8000a32 <selectSubPage+0xae>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a09      	ldr	r2, [pc, #36]	; (8000a5c <selectSubPage+0xd8>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	ddf8      	ble.n	8000a2c <selectSubPage+0xa8>
		}
}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b002      	add	sp, #8
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	200004b8 	.word	0x200004b8
 8000a48:	20000574 	.word	0x20000574
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	200000f4 	.word	0x200000f4
 8000a54:	200001e0 	.word	0x200001e0
 8000a58:	200004bc 	.word	0x200004bc
 8000a5c:	0005572f 	.word	0x0005572f

08000a60 <unselectPage>:

void unselectPage(){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af02      	add	r7, sp, #8
	if (currentSubPage->selected!=1){							//IF WE'RE NOT BUSY WITH A SUBPAGE
 8000a66:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <unselectPage+0x88>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d037      	beq.n	8000ae0 <unselectPage+0x80>
		ssd1306_DrawRectangle(0, 0, 127, 9, 0x00);				//CLEAR SELECT RECTANGLE
 8000a70:	2300      	movs	r3, #0
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	2309      	movs	r3, #9
 8000a76:	227f      	movs	r2, #127	; 0x7f
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f001 fb58 	bl	8002130 <ssd1306_DrawRectangle>
		ssd1306_FillRectangle(0, 9, 5, 54, 0x00);				//CLEAR BUTTON MARKERS
 8000a80:	2300      	movs	r3, #0
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	2336      	movs	r3, #54	; 0x36
 8000a86:	2205      	movs	r2, #5
 8000a88:	2109      	movs	r1, #9
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f001 fba0 	bl	80021d0 <ssd1306_FillRectangle>
		//ssd1306_Line(0, 9, 127, 9, 0x01);						//GET BACK TITLE UNDERLINE

		currentPage->currentButton=0;
 8000a90:	4b16      	ldr	r3, [pc, #88]	; (8000aec <unselectPage+0x8c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	22e8      	movs	r2, #232	; 0xe8
 8000a96:	2100      	movs	r1, #0
 8000a98:	5099      	str	r1, [r3, r2]
		currentPage->buttonMenu[0].selected=0;
 8000a9a:	4b14      	ldr	r3, [pc, #80]	; (8000aec <unselectPage+0x8c>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	669a      	str	r2, [r3, #104]	; 0x68
		currentPage->buttonMenu[1].selected=0;
 8000aa2:	4b12      	ldr	r3, [pc, #72]	; (8000aec <unselectPage+0x8c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	22a0      	movs	r2, #160	; 0xa0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	5099      	str	r1, [r3, r2]
		currentPage->buttonMenu[2].selected=0;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <unselectPage+0x8c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	22d8      	movs	r2, #216	; 0xd8
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	5099      	str	r1, [r3, r2]

		currentPage->selected=0;
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <unselectPage+0x8c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2200      	movs	r2, #0
 8000abc:	605a      	str	r2, [r3, #4]
		allowNextPage=1;
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <unselectPage+0x90>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	601a      	str	r2, [r3, #0]
		//allowNextSubPage=0;

		page1.selected=0;
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <unselectPage+0x94>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	605a      	str	r2, [r3, #4]
		page2.selected=0;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <unselectPage+0x98>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	605a      	str	r2, [r3, #4]
		page3.selected=0;
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <unselectPage+0x9c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	605a      	str	r2, [r3, #4]
		calibTime.selected=0;
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <unselectPage+0xa0>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	605a      	str	r2, [r3, #4]
		ssd1306_UpdateScreen();
 8000adc:	f001 f930 	bl	8001d40 <ssd1306_UpdateScreen>
	}
}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	200004bc 	.word	0x200004bc
 8000aec:	200004b8 	.word	0x200004b8
 8000af0:	20000000 	.word	0x20000000
 8000af4:	20000008 	.word	0x20000008
 8000af8:	200000f4 	.word	0x200000f4
 8000afc:	200001e0 	.word	0x200001e0
 8000b00:	200002cc 	.word	0x200002cc

08000b04 <unselectSubPage>:

void unselectSubPage(){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af02      	add	r7, sp, #8

	ssd1306_DrawRectangle(0, 0, 127, 9, 0x00);				//CLEAR SELECT RECTANGLE
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	2309      	movs	r3, #9
 8000b10:	227f      	movs	r2, #127	; 0x7f
 8000b12:	2100      	movs	r1, #0
 8000b14:	2000      	movs	r0, #0
 8000b16:	f001 fb0b 	bl	8002130 <ssd1306_DrawRectangle>

	currentSubPage->currentButton=0;
 8000b1a:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <unselectSubPage+0x88>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	23f4      	movs	r3, #244	; 0xf4
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	2100      	movs	r1, #0
 8000b24:	50d1      	str	r1, [r2, r3]
	currentSubPage->buttonMenu[0].selected=0;
 8000b26:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <unselectSubPage+0x88>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2288      	movs	r2, #136	; 0x88
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	5099      	str	r1, [r3, r2]
	currentSubPage->buttonMenu[1].selected=0;
 8000b30:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <unselectSubPage+0x88>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	22c0      	movs	r2, #192	; 0xc0
 8000b36:	2100      	movs	r1, #0
 8000b38:	5099      	str	r1, [r3, r2]
	currentSubPage->buttonMenu[2].selected=0;
 8000b3a:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <unselectSubPage+0x88>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	22f8      	movs	r2, #248	; 0xf8
 8000b40:	2100      	movs	r1, #0
 8000b42:	5099      	str	r1, [r3, r2]
	currentSubPage->buttonMenu[3].selected=0;
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <unselectSubPage+0x88>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	2398      	movs	r3, #152	; 0x98
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	50d1      	str	r1, [r2, r3]
	currentSubPage->buttonMenu[4].selected=0;
 8000b50:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <unselectSubPage+0x88>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	23b4      	movs	r3, #180	; 0xb4
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	2100      	movs	r1, #0
 8000b5a:	50d1      	str	r1, [r2, r3]
	currentSubPage->buttonMenu[5].selected=0;
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <unselectSubPage+0x88>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	23d0      	movs	r3, #208	; 0xd0
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	2100      	movs	r1, #0
 8000b66:	50d1      	str	r1, [r2, r3]
	currentSubPage->buttonMenu[6].selected=0;
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <unselectSubPage+0x88>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	23ec      	movs	r3, #236	; 0xec
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	2100      	movs	r1, #0
 8000b72:	50d1      	str	r1, [r2, r3]

	currentSubPage->selected=0;
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <unselectSubPage+0x88>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	605a      	str	r2, [r3, #4]
	//allowNextSubPage=1;
	nextOrPrev=CURRENT;
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <unselectSubPage+0x8c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
	//nextPage();
	ssd1306_UpdateScreen();
 8000b82:	f001 f8dd 	bl	8001d40 <ssd1306_UpdateScreen>
}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	200004bc 	.word	0x200004bc
 8000b90:	20000004 	.word	0x20000004

08000b94 <markButton>:

void markButton(){
 8000b94:	b5b0      	push	{r4, r5, r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af02      	add	r7, sp, #8
	ssd1306_DrawRectangle(	currentPage->cursorAxis[currentPage->currentButton][0]-5,
 8000b9a:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <markButton+0x7c>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <markButton+0x7c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	21e8      	movs	r1, #232	; 0xe8
 8000ba4:	585b      	ldr	r3, [r3, r1]
 8000ba6:	3305      	adds	r3, #5
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	589b      	ldr	r3, [r3, r2]
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	3b05      	subs	r3, #5
 8000bb0:	b2d8      	uxtb	r0, r3
							currentPage->cursorAxis[currentPage->currentButton][1]+2,
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <markButton+0x7c>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <markButton+0x7c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	21e8      	movs	r1, #232	; 0xe8
 8000bbc:	585b      	ldr	r3, [r3, r1]
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	18d3      	adds	r3, r2, r3
 8000bc2:	332c      	adds	r3, #44	; 0x2c
 8000bc4:	681b      	ldr	r3, [r3, #0]
	ssd1306_DrawRectangle(	currentPage->cursorAxis[currentPage->currentButton][0]-5,
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	3302      	adds	r3, #2
 8000bca:	b2d9      	uxtb	r1, r3
							currentPage->cursorAxis[currentPage->currentButton][0]-3,
 8000bcc:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <markButton+0x7c>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <markButton+0x7c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	24e8      	movs	r4, #232	; 0xe8
 8000bd6:	591b      	ldr	r3, [r3, r4]
 8000bd8:	3305      	adds	r3, #5
 8000bda:	00db      	lsls	r3, r3, #3
 8000bdc:	589b      	ldr	r3, [r3, r2]
	ssd1306_DrawRectangle(	currentPage->cursorAxis[currentPage->currentButton][0]-5,
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	3b03      	subs	r3, #3
 8000be2:	b2dc      	uxtb	r4, r3
							currentPage->cursorAxis[currentPage->currentButton][1]+4,
 8000be4:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <markButton+0x7c>)
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <markButton+0x7c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	25e8      	movs	r5, #232	; 0xe8
 8000bee:	595b      	ldr	r3, [r3, r5]
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	18d3      	adds	r3, r2, r3
 8000bf4:	332c      	adds	r3, #44	; 0x2c
 8000bf6:	681b      	ldr	r3, [r3, #0]
	ssd1306_DrawRectangle(	currentPage->cursorAxis[currentPage->currentButton][0]-5,
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	3304      	adds	r3, #4
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2201      	movs	r2, #1
 8000c00:	9200      	str	r2, [sp, #0]
 8000c02:	0022      	movs	r2, r4
 8000c04:	f001 fa94 	bl	8002130 <ssd1306_DrawRectangle>
							0x01);
}
 8000c08:	46c0      	nop			; (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bdb0      	pop	{r4, r5, r7, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	200004b8 	.word	0x200004b8

08000c14 <markSubPageButton>:

void markSubPageButton(){
 8000c14:	b5b0      	push	{r4, r5, r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af02      	add	r7, sp, #8
	ssd1306_Line(			currentSubPage->cursorAxis[currentSubPage->currentButton][0]-1,
 8000c1a:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <markSubPageButton+0x84>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <markSubPageButton+0x84>)
 8000c20:	6819      	ldr	r1, [r3, #0]
 8000c22:	23f4      	movs	r3, #244	; 0xf4
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	58cb      	ldr	r3, [r1, r3]
 8000c28:	3305      	adds	r3, #5
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	589b      	ldr	r3, [r3, r2]
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	3b01      	subs	r3, #1
 8000c32:	b2d8      	uxtb	r0, r3
							currentSubPage->cursorAxis[currentSubPage->currentButton][1]+9,
 8000c34:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <markSubPageButton+0x84>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <markSubPageButton+0x84>)
 8000c3a:	6819      	ldr	r1, [r3, #0]
 8000c3c:	23f4      	movs	r3, #244	; 0xf4
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	58cb      	ldr	r3, [r1, r3]
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	18d3      	adds	r3, r2, r3
 8000c46:	332c      	adds	r3, #44	; 0x2c
 8000c48:	681b      	ldr	r3, [r3, #0]
	ssd1306_Line(			currentSubPage->cursorAxis[currentSubPage->currentButton][0]-1,
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	3309      	adds	r3, #9
 8000c4e:	b2dc      	uxtb	r4, r3
							currentSubPage->cursorAxis[currentSubPage->currentButton][0]+7,
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <markSubPageButton+0x84>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <markSubPageButton+0x84>)
 8000c56:	6819      	ldr	r1, [r3, #0]
 8000c58:	23f4      	movs	r3, #244	; 0xf4
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	58cb      	ldr	r3, [r1, r3]
 8000c5e:	3305      	adds	r3, #5
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	589b      	ldr	r3, [r3, r2]
	ssd1306_Line(			currentSubPage->cursorAxis[currentSubPage->currentButton][0]-1,
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	3307      	adds	r3, #7
 8000c68:	b2dd      	uxtb	r5, r3
							currentSubPage->cursorAxis[currentSubPage->currentButton][1]+9,
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <markSubPageButton+0x84>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <markSubPageButton+0x84>)
 8000c70:	6819      	ldr	r1, [r3, #0]
 8000c72:	23f4      	movs	r3, #244	; 0xf4
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	58cb      	ldr	r3, [r1, r3]
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	18d3      	adds	r3, r2, r3
 8000c7c:	332c      	adds	r3, #44	; 0x2c
 8000c7e:	681b      	ldr	r3, [r3, #0]
	ssd1306_Line(			currentSubPage->cursorAxis[currentSubPage->currentButton][0]-1,
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	3309      	adds	r3, #9
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2201      	movs	r2, #1
 8000c88:	9200      	str	r2, [sp, #0]
 8000c8a:	002a      	movs	r2, r5
 8000c8c:	0021      	movs	r1, r4
 8000c8e:	f001 f9c5 	bl	800201c <ssd1306_Line>
							0x01);
}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bdb0      	pop	{r4, r5, r7, pc}
 8000c98:	200004bc 	.word	0x200004bc

08000c9c <markSet>:

void markSet(){
 8000c9c:	b5b0      	push	{r4, r5, r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af02      	add	r7, sp, #8
	ssd1306_FillRectangle(	currentPage->cursorAxis[currentPage->currentButton][0]+115,
 8000ca2:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <markSet+0x7c>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <markSet+0x7c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	21e8      	movs	r1, #232	; 0xe8
 8000cac:	585b      	ldr	r3, [r3, r1]
 8000cae:	3305      	adds	r3, #5
 8000cb0:	00db      	lsls	r3, r3, #3
 8000cb2:	589b      	ldr	r3, [r3, r2]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	3373      	adds	r3, #115	; 0x73
 8000cb8:	b2d8      	uxtb	r0, r3
							currentPage->cursorAxis[currentPage->currentButton][1]+2,
 8000cba:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <markSet+0x7c>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <markSet+0x7c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	21e8      	movs	r1, #232	; 0xe8
 8000cc4:	585b      	ldr	r3, [r3, r1]
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	18d3      	adds	r3, r2, r3
 8000cca:	332c      	adds	r3, #44	; 0x2c
 8000ccc:	681b      	ldr	r3, [r3, #0]
	ssd1306_FillRectangle(	currentPage->cursorAxis[currentPage->currentButton][0]+115,
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	3302      	adds	r3, #2
 8000cd2:	b2d9      	uxtb	r1, r3
							currentPage->cursorAxis[currentPage->currentButton][0]+117,
 8000cd4:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <markSet+0x7c>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <markSet+0x7c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	24e8      	movs	r4, #232	; 0xe8
 8000cde:	591b      	ldr	r3, [r3, r4]
 8000ce0:	3305      	adds	r3, #5
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	589b      	ldr	r3, [r3, r2]
	ssd1306_FillRectangle(	currentPage->cursorAxis[currentPage->currentButton][0]+115,
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	3375      	adds	r3, #117	; 0x75
 8000cea:	b2dc      	uxtb	r4, r3
							currentPage->cursorAxis[currentPage->currentButton][1]+4,
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <markSet+0x7c>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <markSet+0x7c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	25e8      	movs	r5, #232	; 0xe8
 8000cf6:	595b      	ldr	r3, [r3, r5]
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	18d3      	adds	r3, r2, r3
 8000cfc:	332c      	adds	r3, #44	; 0x2c
 8000cfe:	681b      	ldr	r3, [r3, #0]
	ssd1306_FillRectangle(	currentPage->cursorAxis[currentPage->currentButton][0]+115,
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	3304      	adds	r3, #4
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2201      	movs	r2, #1
 8000d08:	9200      	str	r2, [sp, #0]
 8000d0a:	0022      	movs	r2, r4
 8000d0c:	f001 fa60 	bl	80021d0 <ssd1306_FillRectangle>
							0x01);
}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bdb0      	pop	{r4, r5, r7, pc}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	200004b8 	.word	0x200004b8

08000d1c <unmarkSet>:

void unmarkSet(){
 8000d1c:	b5b0      	push	{r4, r5, r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af02      	add	r7, sp, #8
	ssd1306_FillRectangle(	currentPage->cursorAxis[currentPage->currentButton][0]+115,
 8000d22:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <unmarkSet+0x7c>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <unmarkSet+0x7c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	21e8      	movs	r1, #232	; 0xe8
 8000d2c:	585b      	ldr	r3, [r3, r1]
 8000d2e:	3305      	adds	r3, #5
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	589b      	ldr	r3, [r3, r2]
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	3373      	adds	r3, #115	; 0x73
 8000d38:	b2d8      	uxtb	r0, r3
							currentPage->cursorAxis[currentPage->currentButton][1]+2,
 8000d3a:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <unmarkSet+0x7c>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <unmarkSet+0x7c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	21e8      	movs	r1, #232	; 0xe8
 8000d44:	585b      	ldr	r3, [r3, r1]
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	18d3      	adds	r3, r2, r3
 8000d4a:	332c      	adds	r3, #44	; 0x2c
 8000d4c:	681b      	ldr	r3, [r3, #0]
	ssd1306_FillRectangle(	currentPage->cursorAxis[currentPage->currentButton][0]+115,
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	3302      	adds	r3, #2
 8000d52:	b2d9      	uxtb	r1, r3
							currentPage->cursorAxis[currentPage->currentButton][0]+117,
 8000d54:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <unmarkSet+0x7c>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <unmarkSet+0x7c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	24e8      	movs	r4, #232	; 0xe8
 8000d5e:	591b      	ldr	r3, [r3, r4]
 8000d60:	3305      	adds	r3, #5
 8000d62:	00db      	lsls	r3, r3, #3
 8000d64:	589b      	ldr	r3, [r3, r2]
	ssd1306_FillRectangle(	currentPage->cursorAxis[currentPage->currentButton][0]+115,
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	3375      	adds	r3, #117	; 0x75
 8000d6a:	b2dc      	uxtb	r4, r3
							currentPage->cursorAxis[currentPage->currentButton][1]+4,
 8000d6c:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <unmarkSet+0x7c>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <unmarkSet+0x7c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	25e8      	movs	r5, #232	; 0xe8
 8000d76:	595b      	ldr	r3, [r3, r5]
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	18d3      	adds	r3, r2, r3
 8000d7c:	332c      	adds	r3, #44	; 0x2c
 8000d7e:	681b      	ldr	r3, [r3, #0]
	ssd1306_FillRectangle(	currentPage->cursorAxis[currentPage->currentButton][0]+115,
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	3304      	adds	r3, #4
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	2200      	movs	r2, #0
 8000d88:	9200      	str	r2, [sp, #0]
 8000d8a:	0022      	movs	r2, r4
 8000d8c:	f001 fa20 	bl	80021d0 <ssd1306_FillRectangle>
							0x00);
}
 8000d90:	46c0      	nop			; (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bdb0      	pop	{r4, r5, r7, pc}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	200004b8 	.word	0x200004b8

08000d9c <markSetSPButton>:

void markSetSPButton(){
 8000d9c:	b5b0      	push	{r4, r5, r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af02      	add	r7, sp, #8
	ssd1306_DrawRectangle(	currentSubPage->cursorAxis[currentSubPage->currentButton][0]-2,
 8000da2:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <markSetSPButton+0x88>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <markSetSPButton+0x88>)
 8000da8:	6819      	ldr	r1, [r3, #0]
 8000daa:	23f4      	movs	r3, #244	; 0xf4
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	58cb      	ldr	r3, [r1, r3]
 8000db0:	3305      	adds	r3, #5
 8000db2:	00db      	lsls	r3, r3, #3
 8000db4:	589b      	ldr	r3, [r3, r2]
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	3b02      	subs	r3, #2
 8000dba:	b2d8      	uxtb	r0, r3
							currentSubPage->cursorAxis[currentSubPage->currentButton][1]-3,
 8000dbc:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <markSetSPButton+0x88>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <markSetSPButton+0x88>)
 8000dc2:	6819      	ldr	r1, [r3, #0]
 8000dc4:	23f4      	movs	r3, #244	; 0xf4
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	58cb      	ldr	r3, [r1, r3]
 8000dca:	00db      	lsls	r3, r3, #3
 8000dcc:	18d3      	adds	r3, r2, r3
 8000dce:	332c      	adds	r3, #44	; 0x2c
 8000dd0:	681b      	ldr	r3, [r3, #0]
	ssd1306_DrawRectangle(	currentSubPage->cursorAxis[currentSubPage->currentButton][0]-2,
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	3b03      	subs	r3, #3
 8000dd6:	b2dc      	uxtb	r4, r3
							currentSubPage->cursorAxis[currentSubPage->currentButton][0]+10,
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <markSetSPButton+0x88>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <markSetSPButton+0x88>)
 8000dde:	6819      	ldr	r1, [r3, #0]
 8000de0:	23f4      	movs	r3, #244	; 0xf4
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	58cb      	ldr	r3, [r1, r3]
 8000de6:	3305      	adds	r3, #5
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	589b      	ldr	r3, [r3, r2]
	ssd1306_DrawRectangle(	currentSubPage->cursorAxis[currentSubPage->currentButton][0]-2,
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	330a      	adds	r3, #10
 8000df0:	b2dd      	uxtb	r5, r3
							currentSubPage->cursorAxis[currentSubPage->currentButton][1]+8,
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <markSetSPButton+0x88>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <markSetSPButton+0x88>)
 8000df8:	6819      	ldr	r1, [r3, #0]
 8000dfa:	23f4      	movs	r3, #244	; 0xf4
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	58cb      	ldr	r3, [r1, r3]
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	18d3      	adds	r3, r2, r3
 8000e04:	332c      	adds	r3, #44	; 0x2c
 8000e06:	681b      	ldr	r3, [r3, #0]
	ssd1306_DrawRectangle(	currentSubPage->cursorAxis[currentSubPage->currentButton][0]-2,
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	3308      	adds	r3, #8
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2201      	movs	r2, #1
 8000e10:	9200      	str	r2, [sp, #0]
 8000e12:	002a      	movs	r2, r5
 8000e14:	0021      	movs	r1, r4
 8000e16:	f001 f98b 	bl	8002130 <ssd1306_DrawRectangle>
							0x01);
	ssd1306_UpdateScreen();
 8000e1a:	f000 ff91 	bl	8001d40 <ssd1306_UpdateScreen>
}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bdb0      	pop	{r4, r5, r7, pc}
 8000e24:	200004bc 	.word	0x200004bc

08000e28 <pressButton>:
							currentSubPage->cursorAxis[currentSubPage->currentButton][1]+8,
							0x00);
	ssd1306_UpdateScreen();
}

void pressButton(){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	//if (currentPage->selected==1){
		////////////////////////// SETORRESET  /////////////////////////
		if (	(currentPage->buttonMenu[currentPage->currentButton].selected==1)&&				//CHECKIN IF BUTTON IS SELECTED
 8000e2c:	4b4d      	ldr	r3, [pc, #308]	; (8000f64 <pressButton+0x13c>)
 8000e2e:	6819      	ldr	r1, [r3, #0]
 8000e30:	4b4c      	ldr	r3, [pc, #304]	; (8000f64 <pressButton+0x13c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	22e8      	movs	r2, #232	; 0xe8
 8000e36:	589a      	ldr	r2, [r3, r2]
 8000e38:	0013      	movs	r3, r2
 8000e3a:	00db      	lsls	r3, r3, #3
 8000e3c:	1a9b      	subs	r3, r3, r2
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	18cb      	adds	r3, r1, r3
 8000e42:	3368      	adds	r3, #104	; 0x68
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d143      	bne.n	8000ed2 <pressButton+0xaa>
				(currentPage->buttonMenu[currentPage->currentButton].buttonType == SETORRESET))	//CHECKING BUTTON TYPE
 8000e4a:	4b46      	ldr	r3, [pc, #280]	; (8000f64 <pressButton+0x13c>)
 8000e4c:	6819      	ldr	r1, [r3, #0]
 8000e4e:	4b45      	ldr	r3, [pc, #276]	; (8000f64 <pressButton+0x13c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	22e8      	movs	r2, #232	; 0xe8
 8000e54:	589a      	ldr	r2, [r3, r2]
 8000e56:	0013      	movs	r3, r2
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	1a9b      	subs	r3, r3, r2
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	18cb      	adds	r3, r1, r3
 8000e60:	336c      	adds	r3, #108	; 0x6c
 8000e62:	681b      	ldr	r3, [r3, #0]
		if (	(currentPage->buttonMenu[currentPage->currentButton].selected==1)&&				//CHECKIN IF BUTTON IS SELECTED
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d134      	bne.n	8000ed2 <pressButton+0xaa>
		{
			if (	currentPage->buttonMenu[currentPage->currentButton].state == STATE_RESET){		//IF RESET - SET
 8000e68:	4b3e      	ldr	r3, [pc, #248]	; (8000f64 <pressButton+0x13c>)
 8000e6a:	6819      	ldr	r1, [r3, #0]
 8000e6c:	4b3d      	ldr	r3, [pc, #244]	; (8000f64 <pressButton+0x13c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	22e8      	movs	r2, #232	; 0xe8
 8000e72:	589a      	ldr	r2, [r3, r2]
 8000e74:	0013      	movs	r3, r2
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	1a9b      	subs	r3, r3, r2
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	18cb      	adds	r3, r1, r3
 8000e7e:	3364      	adds	r3, #100	; 0x64
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d112      	bne.n	8000eac <pressButton+0x84>
					currentPage->buttonMenu[currentPage->currentButton].state = STATE_SET;
 8000e86:	4b37      	ldr	r3, [pc, #220]	; (8000f64 <pressButton+0x13c>)
 8000e88:	6819      	ldr	r1, [r3, #0]
 8000e8a:	4b36      	ldr	r3, [pc, #216]	; (8000f64 <pressButton+0x13c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	22e8      	movs	r2, #232	; 0xe8
 8000e90:	589a      	ldr	r2, [r3, r2]
 8000e92:	0013      	movs	r3, r2
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	1a9b      	subs	r3, r3, r2
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	18cb      	adds	r3, r1, r3
 8000e9c:	3364      	adds	r3, #100	; 0x64
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	601a      	str	r2, [r3, #0]
					markSet();
 8000ea2:	f7ff fefb 	bl	8000c9c <markSet>
					ssd1306_UpdateScreen();}
 8000ea6:	f000 ff4b 	bl	8001d40 <ssd1306_UpdateScreen>
			if (	currentPage->buttonMenu[currentPage->currentButton].state == STATE_RESET){		//IF RESET - SET
 8000eaa:	e058      	b.n	8000f5e <pressButton+0x136>

			else {	currentPage->buttonMenu[currentPage->currentButton].state = STATE_RESET;
 8000eac:	4b2d      	ldr	r3, [pc, #180]	; (8000f64 <pressButton+0x13c>)
 8000eae:	6819      	ldr	r1, [r3, #0]
 8000eb0:	4b2c      	ldr	r3, [pc, #176]	; (8000f64 <pressButton+0x13c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	22e8      	movs	r2, #232	; 0xe8
 8000eb6:	589a      	ldr	r2, [r3, r2]
 8000eb8:	0013      	movs	r3, r2
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	1a9b      	subs	r3, r3, r2
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	18cb      	adds	r3, r1, r3
 8000ec2:	3364      	adds	r3, #100	; 0x64
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
					unmarkSet();
 8000ec8:	f7ff ff28 	bl	8000d1c <unmarkSet>
					ssd1306_UpdateScreen();}		//IF SET - RESET
 8000ecc:	f000 ff38 	bl	8001d40 <ssd1306_UpdateScreen>
			if (	currentPage->buttonMenu[currentPage->currentButton].state == STATE_RESET){		//IF RESET - SET
 8000ed0:	e045      	b.n	8000f5e <pressButton+0x136>
		}
		////////////////////////// SINGLEPRESS /////////////////////////
		else if ((	currentPage->buttonMenu[currentPage->currentButton].selected==1)&&			//CHECKIN IF BUTTON IS SELECTED
 8000ed2:	4b24      	ldr	r3, [pc, #144]	; (8000f64 <pressButton+0x13c>)
 8000ed4:	6819      	ldr	r1, [r3, #0]
 8000ed6:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <pressButton+0x13c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	22e8      	movs	r2, #232	; 0xe8
 8000edc:	589a      	ldr	r2, [r3, r2]
 8000ede:	0013      	movs	r3, r2
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	1a9b      	subs	r3, r3, r2
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	18cb      	adds	r3, r1, r3
 8000ee8:	3368      	adds	r3, #104	; 0x68
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d111      	bne.n	8000f14 <pressButton+0xec>
					(currentPage->buttonMenu[currentPage->currentButton].buttonType == SINGLEPRESS)){
 8000ef0:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <pressButton+0x13c>)
 8000ef2:	6819      	ldr	r1, [r3, #0]
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <pressButton+0x13c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	22e8      	movs	r2, #232	; 0xe8
 8000efa:	589a      	ldr	r2, [r3, r2]
 8000efc:	0013      	movs	r3, r2
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	1a9b      	subs	r3, r3, r2
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	18cb      	adds	r3, r1, r3
 8000f06:	336c      	adds	r3, #108	; 0x6c
 8000f08:	681b      	ldr	r3, [r3, #0]
		else if ((	currentPage->buttonMenu[currentPage->currentButton].selected==1)&&			//CHECKIN IF BUTTON IS SELECTED
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d102      	bne.n	8000f14 <pressButton+0xec>
					event();
 8000f0e:	f000 fa37 	bl	8001380 <event>
 8000f12:	e024      	b.n	8000f5e <pressButton+0x136>
		}
		///////////////////////// SUBMENU /////////////////////////////////
		else if (currentPage->buttonMenu[currentPage->currentButton].buttonType == SUBMENU)	//AND IF IT'S SUBMENU
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <pressButton+0x13c>)
 8000f16:	6819      	ldr	r1, [r3, #0]
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <pressButton+0x13c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	22e8      	movs	r2, #232	; 0xe8
 8000f1e:	589a      	ldr	r2, [r3, r2]
 8000f20:	0013      	movs	r3, r2
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	1a9b      	subs	r3, r3, r2
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	18cb      	adds	r3, r1, r3
 8000f2a:	336c      	adds	r3, #108	; 0x6c
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d115      	bne.n	8000f5e <pressButton+0x136>
		{
/*			currentSubPage->selected=0;
			event();
			currentPage->buttonMenu[currentPage->currentButton].selected=1;
			currentPage->selected=1;*/
			if((currentPage->numberOfPage==2)&&(currentPage->currentButton==0)){
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <pressButton+0x13c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d110      	bne.n	8000f5e <pressButton+0x136>
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <pressButton+0x13c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	22e8      	movs	r2, #232	; 0xe8
 8000f42:	589b      	ldr	r3, [r3, r2]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d10a      	bne.n	8000f5e <pressButton+0x136>
				if(currentPage->selected==1)
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <pressButton+0x13c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d102      	bne.n	8000f58 <pressButton+0x130>
				{
				allowCalibTime=1;
 8000f52:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <pressButton+0x140>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	601a      	str	r2, [r3, #0]
				}
				event();
 8000f58:	f000 fa12 	bl	8001380 <event>
			}
		}
	//}
}
 8000f5c:	e7ff      	b.n	8000f5e <pressButton+0x136>
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200004b8 	.word	0x200004b8
 8000f68:	20000594 	.word	0x20000594

08000f6c <checkTime>:
RTC_TimeTypeDef timeBuffer={
		0, 0, 0,
		0, 0, 0, 0, 0,
};

void checkTime(){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000f70:	491a      	ldr	r1, [pc, #104]	; (8000fdc <checkTime+0x70>)
 8000f72:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <checkTime+0x74>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	0018      	movs	r0, r3
 8000f78:	f003 fc9c 	bl	80048b4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000f7c:	4919      	ldr	r1, [pc, #100]	; (8000fe4 <checkTime+0x78>)
 8000f7e:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <checkTime+0x74>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	0018      	movs	r0, r3
 8000f84:	f003 fd84 	bl	8004a90 <HAL_RTC_GetDate>
	calibTime.buttonMenu[0].value = sTime.Hours;
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <checkTime+0x70>)
 8000f8a:	7819      	ldrb	r1, [r3, #0]
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <checkTime+0x7c>)
 8000f8e:	2276      	movs	r2, #118	; 0x76
 8000f90:	5499      	strb	r1, [r3, r2]
	calibTime.buttonMenu[1].value = sTime.Minutes;
 8000f92:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <checkTime+0x70>)
 8000f94:	7859      	ldrb	r1, [r3, #1]
 8000f96:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <checkTime+0x7c>)
 8000f98:	22ae      	movs	r2, #174	; 0xae
 8000f9a:	5499      	strb	r1, [r3, r2]
	calibTime.buttonMenu[2].value = sTime.Seconds;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <checkTime+0x70>)
 8000f9e:	7899      	ldrb	r1, [r3, #2]
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <checkTime+0x7c>)
 8000fa2:	22e6      	movs	r2, #230	; 0xe6
 8000fa4:	5499      	strb	r1, [r3, r2]
	calibTime.buttonMenu[3].value = sDate.WeekDay;
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <checkTime+0x78>)
 8000fa8:	7819      	ldrb	r1, [r3, #0]
 8000faa:	4a0f      	ldr	r2, [pc, #60]	; (8000fe8 <checkTime+0x7c>)
 8000fac:	238f      	movs	r3, #143	; 0x8f
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	54d1      	strb	r1, [r2, r3]
	calibTime.buttonMenu[4].value = sDate.Date;
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <checkTime+0x78>)
 8000fb4:	7899      	ldrb	r1, [r3, #2]
 8000fb6:	4a0c      	ldr	r2, [pc, #48]	; (8000fe8 <checkTime+0x7c>)
 8000fb8:	23ab      	movs	r3, #171	; 0xab
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	54d1      	strb	r1, [r2, r3]
	calibTime.buttonMenu[5].value = sDate.Month;
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <checkTime+0x78>)
 8000fc0:	7859      	ldrb	r1, [r3, #1]
 8000fc2:	4a09      	ldr	r2, [pc, #36]	; (8000fe8 <checkTime+0x7c>)
 8000fc4:	23c7      	movs	r3, #199	; 0xc7
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	54d1      	strb	r1, [r2, r3]
	calibTime.buttonMenu[6].value = sDate.Year;
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <checkTime+0x78>)
 8000fcc:	78d9      	ldrb	r1, [r3, #3]
 8000fce:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <checkTime+0x7c>)
 8000fd0:	23e3      	movs	r3, #227	; 0xe3
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	54d1      	strb	r1, [r2, r3]
}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000748 	.word	0x20000748
 8000fe0:	200005ec 	.word	0x200005ec
 8000fe4:	2000075c 	.word	0x2000075c
 8000fe8:	200002cc 	.word	0x200002cc

08000fec <displayTime>:

void displayTime() {
 8000fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fee:	b08f      	sub	sp, #60	; 0x3c
 8000ff0:	af06      	add	r7, sp, #24
		char timeString[21];
		char * wd;
	    // Format: YYYY-MM-DD WD HH:MM:SS
		switch (sDate.WeekDay){
 8000ff2:	4b24      	ldr	r3, [pc, #144]	; (8001084 <displayTime+0x98>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b07      	cmp	r3, #7
 8000ff8:	d819      	bhi.n	800102e <displayTime+0x42>
 8000ffa:	009a      	lsls	r2, r3, #2
 8000ffc:	4b22      	ldr	r3, [pc, #136]	; (8001088 <displayTime+0x9c>)
 8000ffe:	18d3      	adds	r3, r2, r3
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	469f      	mov	pc, r3
		case 1: 	wd="Mo";
 8001004:	4b21      	ldr	r3, [pc, #132]	; (800108c <displayTime+0xa0>)
 8001006:	61fb      	str	r3, [r7, #28]
					break;
 8001008:	e011      	b.n	800102e <displayTime+0x42>
		case 2:  	wd="Tu";
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <displayTime+0xa4>)
 800100c:	61fb      	str	r3, [r7, #28]
					break;
 800100e:	e00e      	b.n	800102e <displayTime+0x42>
		case 3:  	wd="We";
 8001010:	4b20      	ldr	r3, [pc, #128]	; (8001094 <displayTime+0xa8>)
 8001012:	61fb      	str	r3, [r7, #28]
					break;
 8001014:	e00b      	b.n	800102e <displayTime+0x42>
		case 4:  	wd="Th";
 8001016:	4b20      	ldr	r3, [pc, #128]	; (8001098 <displayTime+0xac>)
 8001018:	61fb      	str	r3, [r7, #28]
					break;
 800101a:	e008      	b.n	800102e <displayTime+0x42>
		case 5:  	wd="Fr";
 800101c:	4b1f      	ldr	r3, [pc, #124]	; (800109c <displayTime+0xb0>)
 800101e:	61fb      	str	r3, [r7, #28]
					break;
 8001020:	e005      	b.n	800102e <displayTime+0x42>
		case 6:  	wd="Sa";
 8001022:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <displayTime+0xb4>)
 8001024:	61fb      	str	r3, [r7, #28]
					break;
 8001026:	e002      	b.n	800102e <displayTime+0x42>
		case 7:  	wd="Su";
 8001028:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <displayTime+0xb8>)
 800102a:	61fb      	str	r3, [r7, #28]
					break;
 800102c:	46c0      	nop			; (mov r8, r8)
		}


	    sprintf(timeString, "%02d:%02d:%02d %s %02d/%02d/%02d",
	    		 // Assuming Year is offset from 2000
				sTime.Hours,
 800102e:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <displayTime+0xbc>)
 8001030:	781b      	ldrb	r3, [r3, #0]
	    sprintf(timeString, "%02d:%02d:%02d %s %02d/%02d/%02d",
 8001032:	001e      	movs	r6, r3
				sTime.Minutes,
 8001034:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <displayTime+0xbc>)
 8001036:	785b      	ldrb	r3, [r3, #1]
	    sprintf(timeString, "%02d:%02d:%02d %s %02d/%02d/%02d",
 8001038:	469c      	mov	ip, r3
				sTime.Seconds,
 800103a:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <displayTime+0xbc>)
 800103c:	789b      	ldrb	r3, [r3, #2]
	    sprintf(timeString, "%02d:%02d:%02d %s %02d/%02d/%02d",
 800103e:	001a      	movs	r2, r3
				wd,
				sDate.Date,
 8001040:	4b10      	ldr	r3, [pc, #64]	; (8001084 <displayTime+0x98>)
 8001042:	789b      	ldrb	r3, [r3, #2]
	    sprintf(timeString, "%02d:%02d:%02d %s %02d/%02d/%02d",
 8001044:	001c      	movs	r4, r3
				sDate.Month,
 8001046:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <displayTime+0x98>)
 8001048:	785b      	ldrb	r3, [r3, #1]
	    sprintf(timeString, "%02d:%02d:%02d %s %02d/%02d/%02d",
 800104a:	001d      	movs	r5, r3
				sDate.Year
 800104c:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <displayTime+0x98>)
 800104e:	78db      	ldrb	r3, [r3, #3]
	    sprintf(timeString, "%02d:%02d:%02d %s %02d/%02d/%02d",
 8001050:	4916      	ldr	r1, [pc, #88]	; (80010ac <displayTime+0xc0>)
 8001052:	1d38      	adds	r0, r7, #4
 8001054:	9304      	str	r3, [sp, #16]
 8001056:	9503      	str	r5, [sp, #12]
 8001058:	9402      	str	r4, [sp, #8]
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	9301      	str	r3, [sp, #4]
 800105e:	9200      	str	r2, [sp, #0]
 8001060:	4663      	mov	r3, ip
 8001062:	0032      	movs	r2, r6
 8001064:	f004 fcfa 	bl	8005a5c <siprintf>
);
		ssd1306_WriteString(timeString, Font_6x8, White);
 8001068:	4a11      	ldr	r2, [pc, #68]	; (80010b0 <displayTime+0xc4>)
 800106a:	1d38      	adds	r0, r7, #4
 800106c:	2301      	movs	r3, #1
 800106e:	6811      	ldr	r1, [r2, #0]
 8001070:	6852      	ldr	r2, [r2, #4]
 8001072:	f000 ff8f 	bl	8001f94 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8001076:	f000 fe63 	bl	8001d40 <ssd1306_UpdateScreen>
	}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	46bd      	mov	sp, r7
 800107e:	b009      	add	sp, #36	; 0x24
 8001080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	2000075c 	.word	0x2000075c
 8001088:	08006460 	.word	0x08006460
 800108c:	08006334 	.word	0x08006334
 8001090:	08006338 	.word	0x08006338
 8001094:	0800633c 	.word	0x0800633c
 8001098:	08006340 	.word	0x08006340
 800109c:	08006344 	.word	0x08006344
 80010a0:	08006348 	.word	0x08006348
 80010a4:	0800634c 	.word	0x0800634c
 80010a8:	20000748 	.word	0x20000748
 80010ac:	08006350 	.word	0x08006350
 80010b0:	200004dc 	.word	0x200004dc

080010b4 <adjustTime>:

void adjustTime()
{
 80010b4:	b5b0      	push	{r4, r5, r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	if(allowAdjust==1){
 80010b8:	4ba5      	ldr	r3, [pc, #660]	; (8001350 <adjustTime+0x29c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d000      	beq.n	80010c2 <adjustTime+0xe>
 80010c0:	e143      	b.n	800134a <adjustTime+0x296>
		checkTime();
 80010c2:	f7ff ff53 	bl	8000f6c <checkTime>
		timeBuffer=sTime;
 80010c6:	4ba3      	ldr	r3, [pc, #652]	; (8001354 <adjustTime+0x2a0>)
 80010c8:	4aa3      	ldr	r2, [pc, #652]	; (8001358 <adjustTime+0x2a4>)
 80010ca:	ca13      	ldmia	r2!, {r0, r1, r4}
 80010cc:	c313      	stmia	r3!, {r0, r1, r4}
 80010ce:	ca03      	ldmia	r2!, {r0, r1}
 80010d0:	c303      	stmia	r3!, {r0, r1}
		dateBuffer=sDate;
 80010d2:	4aa2      	ldr	r2, [pc, #648]	; (800135c <adjustTime+0x2a8>)
 80010d4:	4ba2      	ldr	r3, [pc, #648]	; (8001360 <adjustTime+0x2ac>)
 80010d6:	0010      	movs	r0, r2
 80010d8:	0019      	movs	r1, r3
 80010da:	2304      	movs	r3, #4
 80010dc:	001a      	movs	r2, r3
 80010de:	f004 fcab 	bl	8005a38 <memcpy>

		if(calibTime.currentButton==0)											//IF HOURS (1-23)
 80010e2:	4aa0      	ldr	r2, [pc, #640]	; (8001364 <adjustTime+0x2b0>)
 80010e4:	23f4      	movs	r3, #244	; 0xf4
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	58d3      	ldr	r3, [r2, r3]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d102      	bne.n	80010f4 <adjustTime+0x40>
		{
			adjustLimit=23;
 80010ee:	4b9e      	ldr	r3, [pc, #632]	; (8001368 <adjustTime+0x2b4>)
 80010f0:	2217      	movs	r2, #23
 80010f2:	601a      	str	r2, [r3, #0]
		}
		if(calibTime.currentButton==1)											//IF MINUTES (1-59)
 80010f4:	4a9b      	ldr	r2, [pc, #620]	; (8001364 <adjustTime+0x2b0>)
 80010f6:	23f4      	movs	r3, #244	; 0xf4
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	58d3      	ldr	r3, [r2, r3]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d102      	bne.n	8001106 <adjustTime+0x52>
		{
			adjustLimit=59;
 8001100:	4b99      	ldr	r3, [pc, #612]	; (8001368 <adjustTime+0x2b4>)
 8001102:	223b      	movs	r2, #59	; 0x3b
 8001104:	601a      	str	r2, [r3, #0]
		}
		if(calibTime.currentButton==2)											//IF SECONDS (1-59)
 8001106:	4a97      	ldr	r2, [pc, #604]	; (8001364 <adjustTime+0x2b0>)
 8001108:	23f4      	movs	r3, #244	; 0xf4
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	58d3      	ldr	r3, [r2, r3]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d102      	bne.n	8001118 <adjustTime+0x64>
		{
			adjustLimit=59;
 8001112:	4b95      	ldr	r3, [pc, #596]	; (8001368 <adjustTime+0x2b4>)
 8001114:	223b      	movs	r2, #59	; 0x3b
 8001116:	601a      	str	r2, [r3, #0]
		}
		if(calibTime.currentButton==3)											//IF WEEKDAY (1-7)
 8001118:	4a92      	ldr	r2, [pc, #584]	; (8001364 <adjustTime+0x2b0>)
 800111a:	23f4      	movs	r3, #244	; 0xf4
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	58d3      	ldr	r3, [r2, r3]
 8001120:	2b03      	cmp	r3, #3
 8001122:	d102      	bne.n	800112a <adjustTime+0x76>
		{
			adjustLimit=7;
 8001124:	4b90      	ldr	r3, [pc, #576]	; (8001368 <adjustTime+0x2b4>)
 8001126:	2207      	movs	r2, #7
 8001128:	601a      	str	r2, [r3, #0]
		}
		if(calibTime.currentButton==4)											//IF DAY (1-30)
 800112a:	4a8e      	ldr	r2, [pc, #568]	; (8001364 <adjustTime+0x2b0>)
 800112c:	23f4      	movs	r3, #244	; 0xf4
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	58d3      	ldr	r3, [r2, r3]
 8001132:	2b04      	cmp	r3, #4
 8001134:	d102      	bne.n	800113c <adjustTime+0x88>
		{
			adjustLimit=30;
 8001136:	4b8c      	ldr	r3, [pc, #560]	; (8001368 <adjustTime+0x2b4>)
 8001138:	221e      	movs	r2, #30
 800113a:	601a      	str	r2, [r3, #0]
		}
		if(calibTime.currentButton==5)											//IF MONTH (1-12)
 800113c:	4a89      	ldr	r2, [pc, #548]	; (8001364 <adjustTime+0x2b0>)
 800113e:	23f4      	movs	r3, #244	; 0xf4
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	58d3      	ldr	r3, [r2, r3]
 8001144:	2b05      	cmp	r3, #5
 8001146:	d102      	bne.n	800114e <adjustTime+0x9a>
		{
			adjustLimit=12;
 8001148:	4b87      	ldr	r3, [pc, #540]	; (8001368 <adjustTime+0x2b4>)
 800114a:	220c      	movs	r2, #12
 800114c:	601a      	str	r2, [r3, #0]
		}
		if(calibTime.currentButton==6)											//IF YEAR (1-99)
 800114e:	4a85      	ldr	r2, [pc, #532]	; (8001364 <adjustTime+0x2b0>)
 8001150:	23f4      	movs	r3, #244	; 0xf4
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	58d3      	ldr	r3, [r2, r3]
 8001156:	2b06      	cmp	r3, #6
 8001158:	d102      	bne.n	8001160 <adjustTime+0xac>
		{
			adjustLimit=99;
 800115a:	4b83      	ldr	r3, [pc, #524]	; (8001368 <adjustTime+0x2b4>)
 800115c:	2263      	movs	r2, #99	; 0x63
 800115e:	601a      	str	r2, [r3, #0]
		}

	//////////////////////////////////////////////////////////////////////////////////////////////////

		if (nextOrPrev==NEXT)													//INCREMENT
 8001160:	4b82      	ldr	r3, [pc, #520]	; (800136c <adjustTime+0x2b8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b02      	cmp	r3, #2
 8001166:	d12b      	bne.n	80011c0 <adjustTime+0x10c>
		{
			if(	(int)((calibTime.buttonMenu[calibTime.currentButton].value)+1)	>=	adjustLimit	)
 8001168:	4a7e      	ldr	r2, [pc, #504]	; (8001364 <adjustTime+0x2b0>)
 800116a:	23f4      	movs	r3, #244	; 0xf4
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	58d2      	ldr	r2, [r2, r3]
 8001170:	497c      	ldr	r1, [pc, #496]	; (8001364 <adjustTime+0x2b0>)
 8001172:	2076      	movs	r0, #118	; 0x76
 8001174:	0013      	movs	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	18cb      	adds	r3, r1, r3
 800117e:	181b      	adds	r3, r3, r0
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	1c5a      	adds	r2, r3, #1
 8001184:	4b78      	ldr	r3, [pc, #480]	; (8001368 <adjustTime+0x2b4>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	429a      	cmp	r2, r3
 800118a:	da45      	bge.n	8001218 <adjustTime+0x164>
			{}
			else
			{
			calibTime.buttonMenu[calibTime.currentButton].value++;
 800118c:	4a75      	ldr	r2, [pc, #468]	; (8001364 <adjustTime+0x2b0>)
 800118e:	23f4      	movs	r3, #244	; 0xf4
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	58d2      	ldr	r2, [r2, r3]
 8001194:	4973      	ldr	r1, [pc, #460]	; (8001364 <adjustTime+0x2b0>)
 8001196:	2076      	movs	r0, #118	; 0x76
 8001198:	0013      	movs	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	1a9b      	subs	r3, r3, r2
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	18cb      	adds	r3, r1, r3
 80011a2:	181b      	adds	r3, r3, r0
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	3301      	adds	r3, #1
 80011a8:	b2dc      	uxtb	r4, r3
 80011aa:	496e      	ldr	r1, [pc, #440]	; (8001364 <adjustTime+0x2b0>)
 80011ac:	2076      	movs	r0, #118	; 0x76
 80011ae:	0013      	movs	r3, r2
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	1a9b      	subs	r3, r3, r2
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	18cb      	adds	r3, r1, r3
 80011b8:	181b      	adds	r3, r3, r0
 80011ba:	1c22      	adds	r2, r4, #0
 80011bc:	701a      	strb	r2, [r3, #0]
 80011be:	e02b      	b.n	8001218 <adjustTime+0x164>
			}
		}

		else if (nextOrPrev==PREV)												//DECREMENT
 80011c0:	4b6a      	ldr	r3, [pc, #424]	; (800136c <adjustTime+0x2b8>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d127      	bne.n	8001218 <adjustTime+0x164>
		{
			if(	(int)((calibTime.buttonMenu[calibTime.currentButton].value)-1)	<=1	)
 80011c8:	4a66      	ldr	r2, [pc, #408]	; (8001364 <adjustTime+0x2b0>)
 80011ca:	23f4      	movs	r3, #244	; 0xf4
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	58d2      	ldr	r2, [r2, r3]
 80011d0:	4964      	ldr	r1, [pc, #400]	; (8001364 <adjustTime+0x2b0>)
 80011d2:	2076      	movs	r0, #118	; 0x76
 80011d4:	0013      	movs	r3, r2
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	1a9b      	subs	r3, r3, r2
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	18cb      	adds	r3, r1, r3
 80011de:	181b      	adds	r3, r3, r0
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d918      	bls.n	8001218 <adjustTime+0x164>
			{}
			else
			{
				calibTime.buttonMenu[calibTime.currentButton].value--;
 80011e6:	4a5f      	ldr	r2, [pc, #380]	; (8001364 <adjustTime+0x2b0>)
 80011e8:	23f4      	movs	r3, #244	; 0xf4
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	58d2      	ldr	r2, [r2, r3]
 80011ee:	495d      	ldr	r1, [pc, #372]	; (8001364 <adjustTime+0x2b0>)
 80011f0:	2076      	movs	r0, #118	; 0x76
 80011f2:	0013      	movs	r3, r2
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	1a9b      	subs	r3, r3, r2
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	18cb      	adds	r3, r1, r3
 80011fc:	181b      	adds	r3, r3, r0
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	3b01      	subs	r3, #1
 8001202:	b2dc      	uxtb	r4, r3
 8001204:	4957      	ldr	r1, [pc, #348]	; (8001364 <adjustTime+0x2b0>)
 8001206:	2076      	movs	r0, #118	; 0x76
 8001208:	0013      	movs	r3, r2
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	1a9b      	subs	r3, r3, r2
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	18cb      	adds	r3, r1, r3
 8001212:	181b      	adds	r3, r3, r0
 8001214:	1c22      	adds	r2, r4, #0
 8001216:	701a      	strb	r2, [r3, #0]
			}
		}

		switch(calibTime.currentButton){													//ASSIGNING THE time/date STRUCTURE
 8001218:	4a52      	ldr	r2, [pc, #328]	; (8001364 <adjustTime+0x2b0>)
 800121a:	23f4      	movs	r3, #244	; 0xf4
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	58d3      	ldr	r3, [r2, r3]
 8001220:	2b06      	cmp	r3, #6
 8001222:	d874      	bhi.n	800130e <adjustTime+0x25a>
 8001224:	009a      	lsls	r2, r3, #2
 8001226:	4b52      	ldr	r3, [pc, #328]	; (8001370 <adjustTime+0x2bc>)
 8001228:	18d3      	adds	r3, r2, r3
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	469f      	mov	pc, r3
			case 0:																			//VALUES OF SET:
				timeBuffer.Hours=	calibTime.buttonMenu[calibTime.currentButton].value;	//HOURS
 800122e:	4a4d      	ldr	r2, [pc, #308]	; (8001364 <adjustTime+0x2b0>)
 8001230:	23f4      	movs	r3, #244	; 0xf4
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	58d2      	ldr	r2, [r2, r3]
 8001236:	494b      	ldr	r1, [pc, #300]	; (8001364 <adjustTime+0x2b0>)
 8001238:	2076      	movs	r0, #118	; 0x76
 800123a:	0013      	movs	r3, r2
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	1a9b      	subs	r3, r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	18cb      	adds	r3, r1, r3
 8001244:	181b      	adds	r3, r3, r0
 8001246:	781a      	ldrb	r2, [r3, #0]
 8001248:	4b42      	ldr	r3, [pc, #264]	; (8001354 <adjustTime+0x2a0>)
 800124a:	701a      	strb	r2, [r3, #0]
				break;
 800124c:	e05f      	b.n	800130e <adjustTime+0x25a>
			case 1:
				timeBuffer.Minutes=calibTime.buttonMenu[calibTime.currentButton].value;	//MINUTES
 800124e:	4a45      	ldr	r2, [pc, #276]	; (8001364 <adjustTime+0x2b0>)
 8001250:	23f4      	movs	r3, #244	; 0xf4
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	58d2      	ldr	r2, [r2, r3]
 8001256:	4943      	ldr	r1, [pc, #268]	; (8001364 <adjustTime+0x2b0>)
 8001258:	2076      	movs	r0, #118	; 0x76
 800125a:	0013      	movs	r3, r2
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	1a9b      	subs	r3, r3, r2
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	18cb      	adds	r3, r1, r3
 8001264:	181b      	adds	r3, r3, r0
 8001266:	781a      	ldrb	r2, [r3, #0]
 8001268:	4b3a      	ldr	r3, [pc, #232]	; (8001354 <adjustTime+0x2a0>)
 800126a:	705a      	strb	r2, [r3, #1]
				break;
 800126c:	e04f      	b.n	800130e <adjustTime+0x25a>
			case 2:
				timeBuffer.Seconds=calibTime.buttonMenu[calibTime.currentButton].value;	//SECONDS
 800126e:	4a3d      	ldr	r2, [pc, #244]	; (8001364 <adjustTime+0x2b0>)
 8001270:	23f4      	movs	r3, #244	; 0xf4
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	58d2      	ldr	r2, [r2, r3]
 8001276:	493b      	ldr	r1, [pc, #236]	; (8001364 <adjustTime+0x2b0>)
 8001278:	2076      	movs	r0, #118	; 0x76
 800127a:	0013      	movs	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	1a9b      	subs	r3, r3, r2
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	18cb      	adds	r3, r1, r3
 8001284:	181b      	adds	r3, r3, r0
 8001286:	781a      	ldrb	r2, [r3, #0]
 8001288:	4b32      	ldr	r3, [pc, #200]	; (8001354 <adjustTime+0x2a0>)
 800128a:	709a      	strb	r2, [r3, #2]
				break;
 800128c:	e03f      	b.n	800130e <adjustTime+0x25a>
			case 3:
				dateBuffer.WeekDay=calibTime.buttonMenu[calibTime.currentButton].value;	//WEEKDAY
 800128e:	4a35      	ldr	r2, [pc, #212]	; (8001364 <adjustTime+0x2b0>)
 8001290:	23f4      	movs	r3, #244	; 0xf4
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	58d2      	ldr	r2, [r2, r3]
 8001296:	4933      	ldr	r1, [pc, #204]	; (8001364 <adjustTime+0x2b0>)
 8001298:	2076      	movs	r0, #118	; 0x76
 800129a:	0013      	movs	r3, r2
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	1a9b      	subs	r3, r3, r2
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	18cb      	adds	r3, r1, r3
 80012a4:	181b      	adds	r3, r3, r0
 80012a6:	781a      	ldrb	r2, [r3, #0]
 80012a8:	4b2c      	ldr	r3, [pc, #176]	; (800135c <adjustTime+0x2a8>)
 80012aa:	701a      	strb	r2, [r3, #0]
				break;
 80012ac:	e02f      	b.n	800130e <adjustTime+0x25a>
			case 4:
				dateBuffer.Date=calibTime.buttonMenu[calibTime.currentButton].value;		//DAY
 80012ae:	4a2d      	ldr	r2, [pc, #180]	; (8001364 <adjustTime+0x2b0>)
 80012b0:	23f4      	movs	r3, #244	; 0xf4
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	58d2      	ldr	r2, [r2, r3]
 80012b6:	492b      	ldr	r1, [pc, #172]	; (8001364 <adjustTime+0x2b0>)
 80012b8:	2076      	movs	r0, #118	; 0x76
 80012ba:	0013      	movs	r3, r2
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	1a9b      	subs	r3, r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	18cb      	adds	r3, r1, r3
 80012c4:	181b      	adds	r3, r3, r0
 80012c6:	781a      	ldrb	r2, [r3, #0]
 80012c8:	4b24      	ldr	r3, [pc, #144]	; (800135c <adjustTime+0x2a8>)
 80012ca:	709a      	strb	r2, [r3, #2]
				break;
 80012cc:	e01f      	b.n	800130e <adjustTime+0x25a>
			case 5:
				dateBuffer.Month=calibTime.buttonMenu[calibTime.currentButton].value;		//MONTH
 80012ce:	4a25      	ldr	r2, [pc, #148]	; (8001364 <adjustTime+0x2b0>)
 80012d0:	23f4      	movs	r3, #244	; 0xf4
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	58d2      	ldr	r2, [r2, r3]
 80012d6:	4923      	ldr	r1, [pc, #140]	; (8001364 <adjustTime+0x2b0>)
 80012d8:	2076      	movs	r0, #118	; 0x76
 80012da:	0013      	movs	r3, r2
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	1a9b      	subs	r3, r3, r2
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	18cb      	adds	r3, r1, r3
 80012e4:	181b      	adds	r3, r3, r0
 80012e6:	781a      	ldrb	r2, [r3, #0]
 80012e8:	4b1c      	ldr	r3, [pc, #112]	; (800135c <adjustTime+0x2a8>)
 80012ea:	705a      	strb	r2, [r3, #1]
				break;
 80012ec:	e00f      	b.n	800130e <adjustTime+0x25a>
			case 6:
				dateBuffer.Year=calibTime.buttonMenu[calibTime.currentButton].value;		//YEAR
 80012ee:	4a1d      	ldr	r2, [pc, #116]	; (8001364 <adjustTime+0x2b0>)
 80012f0:	23f4      	movs	r3, #244	; 0xf4
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	58d2      	ldr	r2, [r2, r3]
 80012f6:	491b      	ldr	r1, [pc, #108]	; (8001364 <adjustTime+0x2b0>)
 80012f8:	2076      	movs	r0, #118	; 0x76
 80012fa:	0013      	movs	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	1a9b      	subs	r3, r3, r2
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	18cb      	adds	r3, r1, r3
 8001304:	181b      	adds	r3, r3, r0
 8001306:	781a      	ldrb	r2, [r3, #0]
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <adjustTime+0x2a8>)
 800130a:	70da      	strb	r2, [r3, #3]
				break;
 800130c:	46c0      	nop			; (mov r8, r8)
		}

		HAL_RTC_SetDate(&hrtc, &dateBuffer, RTC_FORMAT_BIN);
 800130e:	4913      	ldr	r1, [pc, #76]	; (800135c <adjustTime+0x2a8>)
 8001310:	4b18      	ldr	r3, [pc, #96]	; (8001374 <adjustTime+0x2c0>)
 8001312:	2200      	movs	r2, #0
 8001314:	0018      	movs	r0, r3
 8001316:	f003 fb2b 	bl	8004970 <HAL_RTC_SetDate>
		HAL_RTC_SetTime(&hrtc, &timeBuffer, RTC_FORMAT_BIN);
 800131a:	490e      	ldr	r1, [pc, #56]	; (8001354 <adjustTime+0x2a0>)
 800131c:	4b15      	ldr	r3, [pc, #84]	; (8001374 <adjustTime+0x2c0>)
 800131e:	2200      	movs	r2, #0
 8001320:	0018      	movs	r0, r3
 8001322:	f003 fa21 	bl	8004768 <HAL_RTC_SetTime>
		checkTime();
 8001326:	f7ff fe21 	bl	8000f6c <checkTime>
		ssd1306_SetCursor(1*symbolHorizontalShift, 1+2*symbolVerticalShift);
 800132a:	4b13      	ldr	r3, [pc, #76]	; (8001378 <adjustTime+0x2c4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	b2da      	uxtb	r2, r3
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <adjustTime+0x2c8>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	18db      	adds	r3, r3, r3
 8001338:	b2db      	uxtb	r3, r3
 800133a:	3301      	adds	r3, #1
 800133c:	b2db      	uxtb	r3, r3
 800133e:	0019      	movs	r1, r3
 8001340:	0010      	movs	r0, r2
 8001342:	f000 fe51 	bl	8001fe8 <ssd1306_SetCursor>
		displayTime();
 8001346:	f7ff fe51 	bl	8000fec <displayTime>
	}
}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	46bd      	mov	sp, r7
 800134e:	bdb0      	pop	{r4, r5, r7, pc}
 8001350:	200005a4 	.word	0x200005a4
 8001354:	20000580 	.word	0x20000580
 8001358:	20000748 	.word	0x20000748
 800135c:	2000057c 	.word	0x2000057c
 8001360:	2000075c 	.word	0x2000075c
 8001364:	200002cc 	.word	0x200002cc
 8001368:	200004c8 	.word	0x200004c8
 800136c:	20000004 	.word	0x20000004
 8001370:	08006480 	.word	0x08006480
 8001374:	200005ec 	.word	0x200005ec
 8001378:	200004c0 	.word	0x200004c0
 800137c:	200004c4 	.word	0x200004c4

08001380 <event>:
char * buf128="10000001100000011000000110000001100000011000000110000001100000011000000110000001100000011000000110000001100000011000000110000001";
char * frameToSend;

void transmitFrame();

void event(){
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
	switch (currentPage->numberOfPage){
 8001384:	4b4a      	ldr	r3, [pc, #296]	; (80014b0 <event+0x130>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b03      	cmp	r3, #3
 800138c:	d100      	bne.n	8001390 <event+0x10>
 800138e:	e083      	b.n	8001498 <event+0x118>
 8001390:	d900      	bls.n	8001394 <event+0x14>
 8001392:	e089      	b.n	80014a8 <event+0x128>
 8001394:	2b02      	cmp	r3, #2
 8001396:	d036      	beq.n	8001406 <event+0x86>
 8001398:	d900      	bls.n	800139c <event+0x1c>
 800139a:	e085      	b.n	80014a8 <event+0x128>
 800139c:	2b00      	cmp	r3, #0
 800139e:	d002      	beq.n	80013a6 <event+0x26>
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d009      	beq.n	80013b8 <event+0x38>
		}
	break;}
////////////////////////////////////////////////////////////////////////////////////////
	default:{}
	}
}
 80013a4:	e080      	b.n	80014a8 <event+0x128>
		 checkTime();					//DISPLAY TIME AT THE BOTTOM OF THE SCREEN
 80013a6:	f7ff fde1 	bl	8000f6c <checkTime>
		 ssd1306_SetCursor(0, 55);
 80013aa:	2137      	movs	r1, #55	; 0x37
 80013ac:	2000      	movs	r0, #0
 80013ae:	f000 fe1b 	bl	8001fe8 <ssd1306_SetCursor>
		 displayTime();
 80013b2:	f7ff fe1b 	bl	8000fec <displayTime>
	break;}
 80013b6:	e077      	b.n	80014a8 <event+0x128>
				if (currentPage->currentButton==0){			//TEST 32
 80013b8:	4b3d      	ldr	r3, [pc, #244]	; (80014b0 <event+0x130>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	22e8      	movs	r2, #232	; 0xe8
 80013be:	589b      	ldr	r3, [r3, r2]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d106      	bne.n	80013d2 <event+0x52>
					frameToSend=buf32;
 80013c4:	4b3b      	ldr	r3, [pc, #236]	; (80014b4 <event+0x134>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b3b      	ldr	r3, [pc, #236]	; (80014b8 <event+0x138>)
 80013ca:	601a      	str	r2, [r3, #0]
					transmitFrame();
 80013cc:	f000 f88e 	bl	80014ec <transmitFrame>
	break;}
 80013d0:	e067      	b.n	80014a2 <event+0x122>
		else 	if(currentPage->currentButton==1){			//TEST 64
 80013d2:	4b37      	ldr	r3, [pc, #220]	; (80014b0 <event+0x130>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	22e8      	movs	r2, #232	; 0xe8
 80013d8:	589b      	ldr	r3, [r3, r2]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d106      	bne.n	80013ec <event+0x6c>
					frameToSend=buf64;
 80013de:	4b37      	ldr	r3, [pc, #220]	; (80014bc <event+0x13c>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	4b35      	ldr	r3, [pc, #212]	; (80014b8 <event+0x138>)
 80013e4:	601a      	str	r2, [r3, #0]
					transmitFrame();
 80013e6:	f000 f881 	bl	80014ec <transmitFrame>
	break;}
 80013ea:	e05a      	b.n	80014a2 <event+0x122>
		else 	if(currentPage->currentButton==2){			//TEST 128
 80013ec:	4b30      	ldr	r3, [pc, #192]	; (80014b0 <event+0x130>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	22e8      	movs	r2, #232	; 0xe8
 80013f2:	589b      	ldr	r3, [r3, r2]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d154      	bne.n	80014a2 <event+0x122>
					frameToSend=buf128;
 80013f8:	4b31      	ldr	r3, [pc, #196]	; (80014c0 <event+0x140>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b2e      	ldr	r3, [pc, #184]	; (80014b8 <event+0x138>)
 80013fe:	601a      	str	r2, [r3, #0]
					transmitFrame();
 8001400:	f000 f874 	bl	80014ec <transmitFrame>
	break;}
 8001404:	e04d      	b.n	80014a2 <event+0x122>
		if(allowSelectSPButton==1)		//MARK THE BUTTON TO ADJUST
 8001406:	4b2f      	ldr	r3, [pc, #188]	; (80014c4 <event+0x144>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d10a      	bne.n	8001424 <event+0xa4>
			markSetSPButton();
 800140e:	f7ff fcc5 	bl	8000d9c <markSetSPButton>
			allowMove=0;
 8001412:	4b2d      	ldr	r3, [pc, #180]	; (80014c8 <event+0x148>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
			allowCursorCalibTime=0;
 8001418:	4b2c      	ldr	r3, [pc, #176]	; (80014cc <event+0x14c>)
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
			allowAdjust=1;
 800141e:	4b2c      	ldr	r3, [pc, #176]	; (80014d0 <event+0x150>)
 8001420:	2201      	movs	r2, #1
 8001422:	601a      	str	r2, [r3, #0]
		if(allowCursorCalibTime==1)
 8001424:	4b29      	ldr	r3, [pc, #164]	; (80014cc <event+0x14c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d10d      	bne.n	8001448 <event+0xc8>
			nextOrPrev=CURRENT;
 800142c:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <event+0x154>)
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
			allowMove=1;
 8001432:	4b25      	ldr	r3, [pc, #148]	; (80014c8 <event+0x148>)
 8001434:	2201      	movs	r2, #1
 8001436:	601a      	str	r2, [r3, #0]
			moveSPCursor();				//CURSOR APPEARS AND CAN BE MOVED
 8001438:	f7ff f942 	bl	80006c0 <moveSPCursor>
			allowSelectSPButton=1;
 800143c:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <event+0x144>)
 800143e:	2201      	movs	r2, #1
 8001440:	601a      	str	r2, [r3, #0]
			allowSelectCalibTime=0;
 8001442:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <event+0x158>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
		if((allowSelectCalibTime==1))
 8001448:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <event+0x158>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d111      	bne.n	8001474 <event+0xf4>
			allowCalibTime=0;
 8001450:	4b22      	ldr	r3, [pc, #136]	; (80014dc <event+0x15c>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
			nextSubPage();
 8001456:	f7ff f859 	bl	800050c <nextSubPage>
			allowNextSubPage=0;
 800145a:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <event+0x160>)
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
			selectSubPage();
 8001460:	f7ff fa90 	bl	8000984 <selectSubPage>
			if(currentSubPage->selected==1)
 8001464:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <event+0x164>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d102      	bne.n	8001474 <event+0xf4>
				allowCursorCalibTime=1;
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <event+0x14c>)
 8001470:	2201      	movs	r2, #1
 8001472:	601a      	str	r2, [r3, #0]
			(allowCalibTime==1))			//ENTER THE SUBPAGE
 8001474:	4b19      	ldr	r3, [pc, #100]	; (80014dc <event+0x15c>)
 8001476:	681b      	ldr	r3, [r3, #0]
		if (
 8001478:	2b01      	cmp	r3, #1
 800147a:	d114      	bne.n	80014a6 <event+0x126>
			unselectPage();
 800147c:	f7ff faf0 	bl	8000a60 <unselectPage>
			allowNextPage=0;
 8001480:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <event+0x168>)
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
			allowNextSubPage=1;
 8001486:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <event+0x160>)
 8001488:	2201      	movs	r2, #1
 800148a:	601a      	str	r2, [r3, #0]
			nextSubPage();
 800148c:	f7ff f83e 	bl	800050c <nextSubPage>
			allowSelectCalibTime=1;
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <event+0x158>)
 8001492:	2201      	movs	r2, #1
 8001494:	601a      	str	r2, [r3, #0]
	break;}
 8001496:	e006      	b.n	80014a6 <event+0x126>
		if((currentPage->selected=0)&&(currentSubPage->selected==1)){
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <event+0x130>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2200      	movs	r2, #0
 800149e:	605a      	str	r2, [r3, #4]
	break;}
 80014a0:	e002      	b.n	80014a8 <event+0x128>
	break;}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	e000      	b.n	80014a8 <event+0x128>
	break;}
 80014a6:	46c0      	nop			; (mov r8, r8)
}
 80014a8:	46c0      	nop			; (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	200004b8 	.word	0x200004b8
 80014b4:	200004d0 	.word	0x200004d0
 80014b8:	200005a8 	.word	0x200005a8
 80014bc:	200004d4 	.word	0x200004d4
 80014c0:	200004d8 	.word	0x200004d8
 80014c4:	200005a0 	.word	0x200005a0
 80014c8:	200004cc 	.word	0x200004cc
 80014cc:	2000059c 	.word	0x2000059c
 80014d0:	200005a4 	.word	0x200005a4
 80014d4:	20000004 	.word	0x20000004
 80014d8:	20000598 	.word	0x20000598
 80014dc:	20000594 	.word	0x20000594
 80014e0:	20000574 	.word	0x20000574
 80014e4:	200004bc 	.word	0x200004bc
 80014e8:	20000000 	.word	0x20000000

080014ec <transmitFrame>:

void transmitFrame(){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0

		for (int i=0; i<256; i++){
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	e036      	b.n	8001566 <transmitFrame+0x7a>
			htim14.Instance->CNT=0;
 80014f8:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <transmitFrame+0x8c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2200      	movs	r2, #0
 80014fe:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start(&htim14);
 8001500:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <transmitFrame+0x8c>)
 8001502:	0018      	movs	r0, r3
 8001504:	f003 ffc6 	bl	8005494 <HAL_TIM_Base_Start>
			HAL_TIM_Base_Stop(&htim14);
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <transmitFrame+0x8c>)
 800150a:	0018      	movs	r0, r3
 800150c:	f004 f806 	bl	800551c <HAL_TIM_Base_Stop>

			if (frameToSend[i]=='1'){
 8001510:	4b1a      	ldr	r3, [pc, #104]	; (800157c <transmitFrame+0x90>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	18d3      	adds	r3, r2, r3
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b31      	cmp	r3, #49	; 0x31
 800151c:	d110      	bne.n	8001540 <transmitFrame+0x54>
				HAL_GPIO_WritePin(GPIOA, SYN115_DATA_Pin, GPIO_PIN_SET);
 800151e:	2390      	movs	r3, #144	; 0x90
 8001520:	05db      	lsls	r3, r3, #23
 8001522:	2201      	movs	r2, #1
 8001524:	2104      	movs	r1, #4
 8001526:	0018      	movs	r0, r3
 8001528:	f002 fb12 	bl	8003b50 <HAL_GPIO_WritePin>
				for(int i=0; i<150; i++){};}
 800152c:	2300      	movs	r3, #0
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	e002      	b.n	8001538 <transmitFrame+0x4c>
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	3301      	adds	r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	2b95      	cmp	r3, #149	; 0x95
 800153c:	ddf9      	ble.n	8001532 <transmitFrame+0x46>
 800153e:	e00f      	b.n	8001560 <transmitFrame+0x74>
			else{
				HAL_GPIO_WritePin(GPIOA, SYN115_DATA_Pin, GPIO_PIN_RESET);
 8001540:	2390      	movs	r3, #144	; 0x90
 8001542:	05db      	lsls	r3, r3, #23
 8001544:	2200      	movs	r2, #0
 8001546:	2104      	movs	r1, #4
 8001548:	0018      	movs	r0, r3
 800154a:	f002 fb01 	bl	8003b50 <HAL_GPIO_WritePin>
				for(int i=0; i<150; i++){};}
 800154e:	2300      	movs	r3, #0
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	e002      	b.n	800155a <transmitFrame+0x6e>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3301      	adds	r3, #1
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b95      	cmp	r3, #149	; 0x95
 800155e:	ddf9      	ble.n	8001554 <transmitFrame+0x68>
		for (int i=0; i<256; i++){
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	3301      	adds	r3, #1
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2bff      	cmp	r3, #255	; 0xff
 800156a:	ddc5      	ble.n	80014f8 <transmitFrame+0xc>
		}

}
 800156c:	46c0      	nop			; (mov r8, r8)
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	46bd      	mov	sp, r7
 8001572:	b004      	add	sp, #16
 8001574:	bd80      	pop	{r7, pc}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	200006b8 	.word	0x200006b8
 800157c:	200005a8 	.word	0x200005a8

08001580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001584:	f001 fa2c 	bl	80029e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001588:	f000 f834 	bl	80015f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800158c:	f000 f9f2 	bl	8001974 <MX_GPIO_Init>
  MX_ADC_Init();
 8001590:	f000 f8bc 	bl	800170c <MX_ADC_Init>
  MX_RTC_Init();
 8001594:	f000 f916 	bl	80017c4 <MX_RTC_Init>
  MX_SPI1_Init();
 8001598:	f000 f93c 	bl	8001814 <MX_SPI1_Init>
  MX_TIM7_Init();
 800159c:	f000 f978 	bl	8001890 <MX_TIM7_Init>
  MX_TIM14_Init();
 80015a0:	f000 f99a 	bl	80018d8 <MX_TIM14_Init>
  MX_TIM16_Init();
 80015a4:	f000 f9bc 	bl	8001920 <MX_TIM16_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80015a8:	f000 f892 	bl	80016d0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
		ssd1306_Init();
 80015ac:	f000 fb42 	bl	8001c34 <ssd1306_Init>
		HAL_TIM_Base_Stop_IT(&htim7);
 80015b0:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <main+0x68>)
 80015b2:	0018      	movs	r0, r3
 80015b4:	f004 f824 	bl	8005600 <HAL_TIM_Base_Stop_IT>
		htim7.Instance->CNT=0;
 80015b8:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <main+0x68>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2200      	movs	r2, #0
 80015be:	625a      	str	r2, [r3, #36]	; 0x24
		TIM7->SR=0;
 80015c0:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <main+0x6c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
		extern int nextOrPrev;
		nextOrPrev=CURRENT;
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <main+0x70>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, SYN115_DATA_Pin , GPIO_PIN_RESET);
 80015cc:	2390      	movs	r3, #144	; 0x90
 80015ce:	05db      	lsls	r3, r3, #23
 80015d0:	2200      	movs	r2, #0
 80015d2:	2104      	movs	r1, #4
 80015d4:	0018      	movs	r0, r3
 80015d6:	f002 fabb 	bl	8003b50 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		 HAL_SuspendTick();
 80015da:	f001 fa89 	bl	8002af0 <HAL_SuspendTick>
		 HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80015de:	2101      	movs	r1, #1
 80015e0:	2001      	movs	r0, #1
 80015e2:	f002 faf9 	bl	8003bd8 <HAL_PWR_EnterSLEEPMode>
		 HAL_SuspendTick();
 80015e6:	e7f8      	b.n	80015da <main+0x5a>
 80015e8:	20000670 	.word	0x20000670
 80015ec:	40001400 	.word	0x40001400
 80015f0:	20000004 	.word	0x20000004

080015f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b095      	sub	sp, #84	; 0x54
 80015f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fa:	2420      	movs	r4, #32
 80015fc:	193b      	adds	r3, r7, r4
 80015fe:	0018      	movs	r0, r3
 8001600:	2330      	movs	r3, #48	; 0x30
 8001602:	001a      	movs	r2, r3
 8001604:	2100      	movs	r1, #0
 8001606:	f004 fa20 	bl	8005a4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800160a:	2310      	movs	r3, #16
 800160c:	18fb      	adds	r3, r7, r3
 800160e:	0018      	movs	r0, r3
 8001610:	2310      	movs	r3, #16
 8001612:	001a      	movs	r2, r3
 8001614:	2100      	movs	r1, #0
 8001616:	f004 fa18 	bl	8005a4a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800161a:	003b      	movs	r3, r7
 800161c:	0018      	movs	r0, r3
 800161e:	2310      	movs	r3, #16
 8001620:	001a      	movs	r2, r3
 8001622:	2100      	movs	r1, #0
 8001624:	f004 fa11 	bl	8005a4a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8001628:	0021      	movs	r1, r4
 800162a:	187b      	adds	r3, r7, r1
 800162c:	221a      	movs	r2, #26
 800162e:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001630:	187b      	adds	r3, r7, r1
 8001632:	2201      	movs	r2, #1
 8001634:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001636:	187b      	adds	r3, r7, r1
 8001638:	2201      	movs	r2, #1
 800163a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800163c:	187b      	adds	r3, r7, r1
 800163e:	2210      	movs	r2, #16
 8001640:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001642:	187b      	adds	r3, r7, r1
 8001644:	2210      	movs	r2, #16
 8001646:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001648:	187b      	adds	r3, r7, r1
 800164a:	2201      	movs	r2, #1
 800164c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800164e:	187b      	adds	r3, r7, r1
 8001650:	2202      	movs	r2, #2
 8001652:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001654:	187b      	adds	r3, r7, r1
 8001656:	2280      	movs	r2, #128	; 0x80
 8001658:	0212      	lsls	r2, r2, #8
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800165c:	187b      	adds	r3, r7, r1
 800165e:	2280      	movs	r2, #128	; 0x80
 8001660:	0352      	lsls	r2, r2, #13
 8001662:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001664:	187b      	adds	r3, r7, r1
 8001666:	2200      	movs	r2, #0
 8001668:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800166a:	187b      	adds	r3, r7, r1
 800166c:	0018      	movs	r0, r3
 800166e:	f002 facf 	bl	8003c10 <HAL_RCC_OscConfig>
 8001672:	1e03      	subs	r3, r0, #0
 8001674:	d001      	beq.n	800167a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001676:	f000 fa67 	bl	8001b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800167a:	2110      	movs	r1, #16
 800167c:	187b      	adds	r3, r7, r1
 800167e:	2207      	movs	r2, #7
 8001680:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001682:	187b      	adds	r3, r7, r1
 8001684:	2202      	movs	r2, #2
 8001686:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001688:	187b      	adds	r3, r7, r1
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 800168e:	187b      	adds	r3, r7, r1
 8001690:	22e0      	movs	r2, #224	; 0xe0
 8001692:	00d2      	lsls	r2, r2, #3
 8001694:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001696:	187b      	adds	r3, r7, r1
 8001698:	2101      	movs	r1, #1
 800169a:	0018      	movs	r0, r3
 800169c:	f002 fdd6 	bl	800424c <HAL_RCC_ClockConfig>
 80016a0:	1e03      	subs	r3, r0, #0
 80016a2:	d001      	beq.n	80016a8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80016a4:	f000 fa50 	bl	8001b48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016a8:	003b      	movs	r3, r7
 80016aa:	2280      	movs	r2, #128	; 0x80
 80016ac:	0252      	lsls	r2, r2, #9
 80016ae:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80016b0:	003b      	movs	r3, r7
 80016b2:	2280      	movs	r2, #128	; 0x80
 80016b4:	0092      	lsls	r2, r2, #2
 80016b6:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b8:	003b      	movs	r3, r7
 80016ba:	0018      	movs	r0, r3
 80016bc:	f002 feee 	bl	800449c <HAL_RCCEx_PeriphCLKConfig>
 80016c0:	1e03      	subs	r3, r0, #0
 80016c2:	d001      	beq.n	80016c8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80016c4:	f000 fa40 	bl	8001b48 <Error_Handler>
  }
}
 80016c8:	46c0      	nop			; (mov r8, r8)
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b015      	add	sp, #84	; 0x54
 80016ce:	bd90      	pop	{r4, r7, pc}

080016d0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* EXTI4_15_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2101      	movs	r1, #1
 80016d8:	2007      	movs	r0, #7
 80016da:	f002 f887 	bl	80037ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80016de:	2007      	movs	r0, #7
 80016e0:	f002 f899 	bl	8003816 <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2102      	movs	r1, #2
 80016e8:	2012      	movs	r0, #18
 80016ea:	f002 f87f 	bl	80037ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80016ee:	2012      	movs	r0, #18
 80016f0:	f002 f891 	bl	8003816 <HAL_NVIC_EnableIRQ>
  /* ADC1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC1_IRQn, 3, 0);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2103      	movs	r1, #3
 80016f8:	200c      	movs	r0, #12
 80016fa:	f002 f877 	bl	80037ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80016fe:	200c      	movs	r0, #12
 8001700:	f002 f889 	bl	8003816 <HAL_NVIC_EnableIRQ>
}
 8001704:	46c0      	nop			; (mov r8, r8)
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	0018      	movs	r0, r3
 8001716:	230c      	movs	r3, #12
 8001718:	001a      	movs	r2, r3
 800171a:	2100      	movs	r1, #0
 800171c:	f004 f995 	bl	8005a4a <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001720:	4b26      	ldr	r3, [pc, #152]	; (80017bc <MX_ADC_Init+0xb0>)
 8001722:	4a27      	ldr	r2, [pc, #156]	; (80017c0 <MX_ADC_Init+0xb4>)
 8001724:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001726:	4b25      	ldr	r3, [pc, #148]	; (80017bc <MX_ADC_Init+0xb0>)
 8001728:	2200      	movs	r2, #0
 800172a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_6B;
 800172c:	4b23      	ldr	r3, [pc, #140]	; (80017bc <MX_ADC_Init+0xb0>)
 800172e:	2218      	movs	r2, #24
 8001730:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001732:	4b22      	ldr	r3, [pc, #136]	; (80017bc <MX_ADC_Init+0xb0>)
 8001734:	2200      	movs	r2, #0
 8001736:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001738:	4b20      	ldr	r3, [pc, #128]	; (80017bc <MX_ADC_Init+0xb0>)
 800173a:	2201      	movs	r2, #1
 800173c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800173e:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <MX_ADC_Init+0xb0>)
 8001740:	2204      	movs	r2, #4
 8001742:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001744:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <MX_ADC_Init+0xb0>)
 8001746:	2200      	movs	r2, #0
 8001748:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800174a:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <MX_ADC_Init+0xb0>)
 800174c:	2200      	movs	r2, #0
 800174e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <MX_ADC_Init+0xb0>)
 8001752:	2201      	movs	r2, #1
 8001754:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <MX_ADC_Init+0xb0>)
 8001758:	2200      	movs	r2, #0
 800175a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800175c:	4b17      	ldr	r3, [pc, #92]	; (80017bc <MX_ADC_Init+0xb0>)
 800175e:	22c2      	movs	r2, #194	; 0xc2
 8001760:	32ff      	adds	r2, #255	; 0xff
 8001762:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001764:	4b15      	ldr	r3, [pc, #84]	; (80017bc <MX_ADC_Init+0xb0>)
 8001766:	2200      	movs	r2, #0
 8001768:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800176a:	4b14      	ldr	r3, [pc, #80]	; (80017bc <MX_ADC_Init+0xb0>)
 800176c:	2224      	movs	r2, #36	; 0x24
 800176e:	2100      	movs	r1, #0
 8001770:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001772:	4b12      	ldr	r3, [pc, #72]	; (80017bc <MX_ADC_Init+0xb0>)
 8001774:	2201      	movs	r2, #1
 8001776:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001778:	4b10      	ldr	r3, [pc, #64]	; (80017bc <MX_ADC_Init+0xb0>)
 800177a:	0018      	movs	r0, r3
 800177c:	f001 f9d4 	bl	8002b28 <HAL_ADC_Init>
 8001780:	1e03      	subs	r3, r0, #0
 8001782:	d001      	beq.n	8001788 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001784:	f000 f9e0 	bl	8001b48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	2209      	movs	r2, #9
 800178c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	2280      	movs	r2, #128	; 0x80
 8001792:	0152      	lsls	r2, r2, #5
 8001794:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	2280      	movs	r2, #128	; 0x80
 800179a:	0552      	lsls	r2, r2, #21
 800179c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800179e:	1d3a      	adds	r2, r7, #4
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <MX_ADC_Init+0xb0>)
 80017a2:	0011      	movs	r1, r2
 80017a4:	0018      	movs	r0, r3
 80017a6:	f001 fd1b 	bl	80031e0 <HAL_ADC_ConfigChannel>
 80017aa:	1e03      	subs	r3, r0, #0
 80017ac:	d001      	beq.n	80017b2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80017ae:	f000 f9cb 	bl	8001b48 <Error_Handler>
  /* USER CODE BEGIN ADC_Init 2 */
 // HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 // HAL_NVIC_EnableIRQ(ADC1_IRQn);
  /* USER CODE END ADC_Init 2 */

}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	46bd      	mov	sp, r7
 80017b6:	b004      	add	sp, #16
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	200005ac 	.word	0x200005ac
 80017c0:	40012400 	.word	0x40012400

080017c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
#endif
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80017c8:	4b10      	ldr	r3, [pc, #64]	; (800180c <MX_RTC_Init+0x48>)
 80017ca:	4a11      	ldr	r2, [pc, #68]	; (8001810 <MX_RTC_Init+0x4c>)
 80017cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80017ce:	4b0f      	ldr	r3, [pc, #60]	; (800180c <MX_RTC_Init+0x48>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80017d4:	4b0d      	ldr	r3, [pc, #52]	; (800180c <MX_RTC_Init+0x48>)
 80017d6:	227f      	movs	r2, #127	; 0x7f
 80017d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 299;
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <MX_RTC_Init+0x48>)
 80017dc:	222c      	movs	r2, #44	; 0x2c
 80017de:	32ff      	adds	r2, #255	; 0xff
 80017e0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <MX_RTC_Init+0x48>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <MX_RTC_Init+0x48>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017ee:	4b07      	ldr	r3, [pc, #28]	; (800180c <MX_RTC_Init+0x48>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <MX_RTC_Init+0x48>)
 80017f6:	0018      	movs	r0, r3
 80017f8:	f002 ff1e 	bl	8004638 <HAL_RTC_Init>
 80017fc:	1e03      	subs	r3, r0, #0
 80017fe:	d001      	beq.n	8001804 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8001800:	f000 f9a2 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
#endif
  /* USER CODE END RTC_Init 2 */

}
 8001804:	46c0      	nop			; (mov r8, r8)
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	200005ec 	.word	0x200005ec
 8001810:	40002800 	.word	0x40002800

08001814 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001818:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <MX_SPI1_Init+0x74>)
 800181a:	4a1c      	ldr	r2, [pc, #112]	; (800188c <MX_SPI1_Init+0x78>)
 800181c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800181e:	4b1a      	ldr	r3, [pc, #104]	; (8001888 <MX_SPI1_Init+0x74>)
 8001820:	2282      	movs	r2, #130	; 0x82
 8001822:	0052      	lsls	r2, r2, #1
 8001824:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001826:	4b18      	ldr	r3, [pc, #96]	; (8001888 <MX_SPI1_Init+0x74>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800182c:	4b16      	ldr	r3, [pc, #88]	; (8001888 <MX_SPI1_Init+0x74>)
 800182e:	22e0      	movs	r2, #224	; 0xe0
 8001830:	00d2      	lsls	r2, r2, #3
 8001832:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001834:	4b14      	ldr	r3, [pc, #80]	; (8001888 <MX_SPI1_Init+0x74>)
 8001836:	2200      	movs	r2, #0
 8001838:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800183a:	4b13      	ldr	r3, [pc, #76]	; (8001888 <MX_SPI1_Init+0x74>)
 800183c:	2200      	movs	r2, #0
 800183e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <MX_SPI1_Init+0x74>)
 8001842:	2280      	movs	r2, #128	; 0x80
 8001844:	0092      	lsls	r2, r2, #2
 8001846:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001848:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <MX_SPI1_Init+0x74>)
 800184a:	2210      	movs	r2, #16
 800184c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <MX_SPI1_Init+0x74>)
 8001850:	2200      	movs	r2, #0
 8001852:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <MX_SPI1_Init+0x74>)
 8001856:	2200      	movs	r2, #0
 8001858:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <MX_SPI1_Init+0x74>)
 800185c:	2200      	movs	r2, #0
 800185e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001860:	4b09      	ldr	r3, [pc, #36]	; (8001888 <MX_SPI1_Init+0x74>)
 8001862:	2207      	movs	r2, #7
 8001864:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <MX_SPI1_Init+0x74>)
 8001868:	2200      	movs	r2, #0
 800186a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <MX_SPI1_Init+0x74>)
 800186e:	2208      	movs	r2, #8
 8001870:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001872:	4b05      	ldr	r3, [pc, #20]	; (8001888 <MX_SPI1_Init+0x74>)
 8001874:	0018      	movs	r0, r3
 8001876:	f003 fa2f 	bl	8004cd8 <HAL_SPI_Init>
 800187a:	1e03      	subs	r3, r0, #0
 800187c:	d001      	beq.n	8001882 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800187e:	f000 f963 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	2000060c 	.word	0x2000060c
 800188c:	40013000 	.word	0x40013000

08001890 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE END TIM7_Init 0 */

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <MX_TIM7_Init+0x38>)
 8001896:	4a0d      	ldr	r2, [pc, #52]	; (80018cc <MX_TIM7_Init+0x3c>)
 8001898:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 6000;
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <MX_TIM7_Init+0x38>)
 800189c:	4a0c      	ldr	r2, [pc, #48]	; (80018d0 <MX_TIM7_Init+0x40>)
 800189e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <MX_TIM7_Init+0x38>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000;
 80018a6:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <MX_TIM7_Init+0x38>)
 80018a8:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <MX_TIM7_Init+0x44>)
 80018aa:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <MX_TIM7_Init+0x38>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80018b2:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <MX_TIM7_Init+0x38>)
 80018b4:	0018      	movs	r0, r3
 80018b6:	f003 fd9d 	bl	80053f4 <HAL_TIM_Base_Init>
 80018ba:	1e03      	subs	r3, r0, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM7_Init+0x32>
  {
    Error_Handler();
 80018be:	f000 f943 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000670 	.word	0x20000670
 80018cc:	40001400 	.word	0x40001400
 80018d0:	00001770 	.word	0x00001770
 80018d4:	00001388 	.word	0x00001388

080018d8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80018dc:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <MX_TIM14_Init+0x40>)
 80018de:	4a0f      	ldr	r2, [pc, #60]	; (800191c <MX_TIM14_Init+0x44>)
 80018e0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 600;
 80018e2:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <MX_TIM14_Init+0x40>)
 80018e4:	2296      	movs	r2, #150	; 0x96
 80018e6:	0092      	lsls	r2, r2, #2
 80018e8:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <MX_TIM14_Init+0x40>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1;
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <MX_TIM14_Init+0x40>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <MX_TIM14_Init+0x40>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <MX_TIM14_Init+0x40>)
 80018fe:	2280      	movs	r2, #128	; 0x80
 8001900:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001902:	4b05      	ldr	r3, [pc, #20]	; (8001918 <MX_TIM14_Init+0x40>)
 8001904:	0018      	movs	r0, r3
 8001906:	f003 fd75 	bl	80053f4 <HAL_TIM_Base_Init>
 800190a:	1e03      	subs	r3, r0, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800190e:	f000 f91b 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	200006b8 	.word	0x200006b8
 800191c:	40002000 	.word	0x40002000

08001920 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001924:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <MX_TIM16_Init+0x44>)
 8001926:	4a10      	ldr	r2, [pc, #64]	; (8001968 <MX_TIM16_Init+0x48>)
 8001928:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48000;
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <MX_TIM16_Init+0x44>)
 800192c:	4a0f      	ldr	r2, [pc, #60]	; (800196c <MX_TIM16_Init+0x4c>)
 800192e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <MX_TIM16_Init+0x44>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <MX_TIM16_Init+0x44>)
 8001938:	4a0d      	ldr	r2, [pc, #52]	; (8001970 <MX_TIM16_Init+0x50>)
 800193a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193c:	4b09      	ldr	r3, [pc, #36]	; (8001964 <MX_TIM16_Init+0x44>)
 800193e:	2200      	movs	r2, #0
 8001940:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001942:	4b08      	ldr	r3, [pc, #32]	; (8001964 <MX_TIM16_Init+0x44>)
 8001944:	2200      	movs	r2, #0
 8001946:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <MX_TIM16_Init+0x44>)
 800194a:	2200      	movs	r2, #0
 800194c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800194e:	4b05      	ldr	r3, [pc, #20]	; (8001964 <MX_TIM16_Init+0x44>)
 8001950:	0018      	movs	r0, r3
 8001952:	f003 fd4f 	bl	80053f4 <HAL_TIM_Base_Init>
 8001956:	1e03      	subs	r3, r0, #0
 8001958:	d001      	beq.n	800195e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800195a:	f000 f8f5 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000700 	.word	0x20000700
 8001968:	40014400 	.word	0x40014400
 800196c:	0000bb80 	.word	0x0000bb80
 8001970:	0000ffff 	.word	0x0000ffff

08001974 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b08b      	sub	sp, #44	; 0x2c
 8001978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197a:	2414      	movs	r4, #20
 800197c:	193b      	adds	r3, r7, r4
 800197e:	0018      	movs	r0, r3
 8001980:	2314      	movs	r3, #20
 8001982:	001a      	movs	r2, r3
 8001984:	2100      	movs	r1, #0
 8001986:	f004 f860 	bl	8005a4a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800198a:	4b69      	ldr	r3, [pc, #420]	; (8001b30 <MX_GPIO_Init+0x1bc>)
 800198c:	695a      	ldr	r2, [r3, #20]
 800198e:	4b68      	ldr	r3, [pc, #416]	; (8001b30 <MX_GPIO_Init+0x1bc>)
 8001990:	2180      	movs	r1, #128	; 0x80
 8001992:	0309      	lsls	r1, r1, #12
 8001994:	430a      	orrs	r2, r1
 8001996:	615a      	str	r2, [r3, #20]
 8001998:	4b65      	ldr	r3, [pc, #404]	; (8001b30 <MX_GPIO_Init+0x1bc>)
 800199a:	695a      	ldr	r2, [r3, #20]
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	031b      	lsls	r3, r3, #12
 80019a0:	4013      	ands	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019a6:	4b62      	ldr	r3, [pc, #392]	; (8001b30 <MX_GPIO_Init+0x1bc>)
 80019a8:	695a      	ldr	r2, [r3, #20]
 80019aa:	4b61      	ldr	r3, [pc, #388]	; (8001b30 <MX_GPIO_Init+0x1bc>)
 80019ac:	2180      	movs	r1, #128	; 0x80
 80019ae:	03c9      	lsls	r1, r1, #15
 80019b0:	430a      	orrs	r2, r1
 80019b2:	615a      	str	r2, [r3, #20]
 80019b4:	4b5e      	ldr	r3, [pc, #376]	; (8001b30 <MX_GPIO_Init+0x1bc>)
 80019b6:	695a      	ldr	r2, [r3, #20]
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	03db      	lsls	r3, r3, #15
 80019bc:	4013      	ands	r3, r2
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	4b5b      	ldr	r3, [pc, #364]	; (8001b30 <MX_GPIO_Init+0x1bc>)
 80019c4:	695a      	ldr	r2, [r3, #20]
 80019c6:	4b5a      	ldr	r3, [pc, #360]	; (8001b30 <MX_GPIO_Init+0x1bc>)
 80019c8:	2180      	movs	r1, #128	; 0x80
 80019ca:	0289      	lsls	r1, r1, #10
 80019cc:	430a      	orrs	r2, r1
 80019ce:	615a      	str	r2, [r3, #20]
 80019d0:	4b57      	ldr	r3, [pc, #348]	; (8001b30 <MX_GPIO_Init+0x1bc>)
 80019d2:	695a      	ldr	r2, [r3, #20]
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	029b      	lsls	r3, r3, #10
 80019d8:	4013      	ands	r3, r2
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019de:	4b54      	ldr	r3, [pc, #336]	; (8001b30 <MX_GPIO_Init+0x1bc>)
 80019e0:	695a      	ldr	r2, [r3, #20]
 80019e2:	4b53      	ldr	r3, [pc, #332]	; (8001b30 <MX_GPIO_Init+0x1bc>)
 80019e4:	2180      	movs	r1, #128	; 0x80
 80019e6:	02c9      	lsls	r1, r1, #11
 80019e8:	430a      	orrs	r2, r1
 80019ea:	615a      	str	r2, [r3, #20]
 80019ec:	4b50      	ldr	r3, [pc, #320]	; (8001b30 <MX_GPIO_Init+0x1bc>)
 80019ee:	695a      	ldr	r2, [r3, #20]
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	02db      	lsls	r3, r3, #11
 80019f4:	4013      	ands	r3, r2
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SYN115_DATA_Pin|SPI_RST_Pin|SPI_CS_Pin|SPI_DC_Pin, GPIO_PIN_RESET);
 80019fa:	2390      	movs	r3, #144	; 0x90
 80019fc:	05db      	lsls	r3, r3, #23
 80019fe:	2200      	movs	r2, #0
 8001a00:	215c      	movs	r1, #92	; 0x5c
 8001a02:	0018      	movs	r0, r3
 8001a04:	f002 f8a4 	bl	8003b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001a08:	4b4a      	ldr	r3, [pc, #296]	; (8001b34 <MX_GPIO_Init+0x1c0>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f002 f89e 	bl	8003b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001a14:	193b      	adds	r3, r7, r4
 8001a16:	22c0      	movs	r2, #192	; 0xc0
 8001a18:	0212      	lsls	r2, r2, #8
 8001a1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a1c:	193b      	adds	r3, r7, r4
 8001a1e:	2203      	movs	r2, #3
 8001a20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	193b      	adds	r3, r7, r4
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a28:	193b      	adds	r3, r7, r4
 8001a2a:	4a43      	ldr	r2, [pc, #268]	; (8001b38 <MX_GPIO_Init+0x1c4>)
 8001a2c:	0019      	movs	r1, r3
 8001a2e:	0010      	movs	r0, r2
 8001a30:	f001 ff1e 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a34:	193b      	adds	r3, r7, r4
 8001a36:	2203      	movs	r2, #3
 8001a38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a3a:	193b      	adds	r3, r7, r4
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	193b      	adds	r3, r7, r4
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a46:	193b      	adds	r3, r7, r4
 8001a48:	4a3c      	ldr	r2, [pc, #240]	; (8001b3c <MX_GPIO_Init+0x1c8>)
 8001a4a:	0019      	movs	r1, r3
 8001a4c:	0010      	movs	r0, r2
 8001a4e:	f001 ff0f 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_10
 8001a52:	193b      	adds	r3, r7, r4
 8001a54:	4a3a      	ldr	r2, [pc, #232]	; (8001b40 <MX_GPIO_Init+0x1cc>)
 8001a56:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a58:	193b      	adds	r3, r7, r4
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	193b      	adds	r3, r7, r4
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a64:	193a      	adds	r2, r7, r4
 8001a66:	2390      	movs	r3, #144	; 0x90
 8001a68:	05db      	lsls	r3, r3, #23
 8001a6a:	0011      	movs	r1, r2
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f001 feff 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pin : SYN115_DATA_Pin */
  GPIO_InitStruct.Pin = SYN115_DATA_Pin;
 8001a72:	193b      	adds	r3, r7, r4
 8001a74:	2204      	movs	r2, #4
 8001a76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a78:	193b      	adds	r3, r7, r4
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	193b      	adds	r3, r7, r4
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a84:	193b      	adds	r3, r7, r4
 8001a86:	2203      	movs	r2, #3
 8001a88:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SYN115_DATA_GPIO_Port, &GPIO_InitStruct);
 8001a8a:	193a      	adds	r2, r7, r4
 8001a8c:	2390      	movs	r3, #144	; 0x90
 8001a8e:	05db      	lsls	r3, r3, #23
 8001a90:	0011      	movs	r1, r2
 8001a92:	0018      	movs	r0, r3
 8001a94:	f001 feec 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_RST_Pin SPI_CS_Pin SPI_DC_Pin */
  GPIO_InitStruct.Pin = SPI_RST_Pin|SPI_CS_Pin|SPI_DC_Pin;
 8001a98:	193b      	adds	r3, r7, r4
 8001a9a:	2258      	movs	r2, #88	; 0x58
 8001a9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9e:	193b      	adds	r3, r7, r4
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	193b      	adds	r3, r7, r4
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aaa:	193b      	adds	r3, r7, r4
 8001aac:	2200      	movs	r2, #0
 8001aae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab0:	193a      	adds	r2, r7, r4
 8001ab2:	2390      	movs	r3, #144	; 0x90
 8001ab4:	05db      	lsls	r3, r3, #23
 8001ab6:	0011      	movs	r1, r2
 8001ab8:	0018      	movs	r0, r3
 8001aba:	f001 fed9 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8001abe:	193b      	adds	r3, r7, r4
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac4:	193b      	adds	r3, r7, r4
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	193b      	adds	r3, r7, r4
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	193b      	adds	r3, r7, r4
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001ad6:	193b      	adds	r3, r7, r4
 8001ad8:	4a16      	ldr	r2, [pc, #88]	; (8001b34 <MX_GPIO_Init+0x1c0>)
 8001ada:	0019      	movs	r1, r3
 8001adc:	0010      	movs	r0, r2
 8001ade:	f001 fec7 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB12
                           PB13 PB14 PB15 PB3
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001ae2:	193b      	adds	r3, r7, r4
 8001ae4:	4a17      	ldr	r2, [pc, #92]	; (8001b44 <MX_GPIO_Init+0x1d0>)
 8001ae6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ae8:	193b      	adds	r3, r7, r4
 8001aea:	2203      	movs	r2, #3
 8001aec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	193b      	adds	r3, r7, r4
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af4:	193b      	adds	r3, r7, r4
 8001af6:	4a0f      	ldr	r2, [pc, #60]	; (8001b34 <MX_GPIO_Init+0x1c0>)
 8001af8:	0019      	movs	r1, r3
 8001afa:	0010      	movs	r0, r2
 8001afc:	f001 feb8 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b00:	0021      	movs	r1, r4
 8001b02:	187b      	adds	r3, r7, r1
 8001b04:	2280      	movs	r2, #128	; 0x80
 8001b06:	0092      	lsls	r2, r2, #2
 8001b08:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b0a:	187b      	adds	r3, r7, r1
 8001b0c:	2284      	movs	r2, #132	; 0x84
 8001b0e:	0392      	lsls	r2, r2, #14
 8001b10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b12:	187b      	adds	r3, r7, r1
 8001b14:	2201      	movs	r2, #1
 8001b16:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b18:	187a      	adds	r2, r7, r1
 8001b1a:	2390      	movs	r3, #144	; 0x90
 8001b1c:	05db      	lsls	r3, r3, #23
 8001b1e:	0011      	movs	r1, r2
 8001b20:	0018      	movs	r0, r3
 8001b22:	f001 fea5 	bl	8003870 <HAL_GPIO_Init>

}
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b00b      	add	sp, #44	; 0x2c
 8001b2c:	bd90      	pop	{r4, r7, pc}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	40021000 	.word	0x40021000
 8001b34:	48000400 	.word	0x48000400
 8001b38:	48000800 	.word	0x48000800
 8001b3c:	48001400 	.word	0x48001400
 8001b40:	00009d03 	.word	0x00009d03
 8001b44:	0000fffc 	.word	0x0000fffc

08001b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b4c:	b672      	cpsid	i
}
 8001b4e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <Error_Handler+0x8>

08001b52 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8001b52:	b580      	push	{r7, lr}
 8001b54:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8001b56:	2390      	movs	r3, #144	; 0x90
 8001b58:	05db      	lsls	r3, r3, #23
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	2110      	movs	r1, #16
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f001 fff6 	bl	8003b50 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8001b64:	2390      	movs	r3, #144	; 0x90
 8001b66:	05db      	lsls	r3, r3, #23
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2108      	movs	r1, #8
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f001 ffef 	bl	8003b50 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001b72:	200a      	movs	r0, #10
 8001b74:	f000 ff98 	bl	8002aa8 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8001b78:	2390      	movs	r3, #144	; 0x90
 8001b7a:	05db      	lsls	r3, r3, #23
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	2108      	movs	r1, #8
 8001b80:	0018      	movs	r0, r3
 8001b82:	f001 ffe5 	bl	8003b50 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001b86:	200a      	movs	r0, #10
 8001b88:	f000 ff8e 	bl	8002aa8 <HAL_Delay>
}
 8001b8c:	46c0      	nop			; (mov r8, r8)
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	0002      	movs	r2, r0
 8001b9c:	1dfb      	adds	r3, r7, #7
 8001b9e:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8001ba0:	2390      	movs	r3, #144	; 0x90
 8001ba2:	05db      	lsls	r3, r3, #23
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2110      	movs	r1, #16
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f001 ffd1 	bl	8003b50 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8001bae:	2390      	movs	r3, #144	; 0x90
 8001bb0:	05db      	lsls	r3, r3, #23
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2140      	movs	r1, #64	; 0x40
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f001 ffca 	bl	8003b50 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	425b      	negs	r3, r3
 8001bc0:	1df9      	adds	r1, r7, #7
 8001bc2:	4807      	ldr	r0, [pc, #28]	; (8001be0 <ssd1306_WriteCommand+0x4c>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f003 f93f 	bl	8004e48 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8001bca:	2390      	movs	r3, #144	; 0x90
 8001bcc:	05db      	lsls	r3, r3, #23
 8001bce:	2201      	movs	r2, #1
 8001bd0:	2110      	movs	r1, #16
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	f001 ffbc 	bl	8003b50 <HAL_GPIO_WritePin>
}
 8001bd8:	46c0      	nop			; (mov r8, r8)
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	b002      	add	sp, #8
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	2000060c 	.word	0x2000060c

08001be4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8001bee:	2390      	movs	r3, #144	; 0x90
 8001bf0:	05db      	lsls	r3, r3, #23
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2110      	movs	r1, #16
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f001 ffaa 	bl	8003b50 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8001bfc:	2390      	movs	r3, #144	; 0x90
 8001bfe:	05db      	lsls	r3, r3, #23
 8001c00:	2201      	movs	r2, #1
 8001c02:	2140      	movs	r1, #64	; 0x40
 8001c04:	0018      	movs	r0, r3
 8001c06:	f001 ffa3 	bl	8003b50 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	2301      	movs	r3, #1
 8001c10:	425b      	negs	r3, r3
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	4806      	ldr	r0, [pc, #24]	; (8001c30 <ssd1306_WriteData+0x4c>)
 8001c16:	f003 f917 	bl	8004e48 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8001c1a:	2390      	movs	r3, #144	; 0x90
 8001c1c:	05db      	lsls	r3, r3, #23
 8001c1e:	2201      	movs	r2, #1
 8001c20:	2110      	movs	r1, #16
 8001c22:	0018      	movs	r0, r3
 8001c24:	f001 ff94 	bl	8003b50 <HAL_GPIO_WritePin>
}
 8001c28:	46c0      	nop			; (mov r8, r8)
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	b002      	add	sp, #8
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	2000060c 	.word	0x2000060c

08001c34 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001c38:	f7ff ff8b 	bl	8001b52 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001c3c:	2064      	movs	r0, #100	; 0x64
 8001c3e:	f000 ff33 	bl	8002aa8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001c42:	2000      	movs	r0, #0
 8001c44:	f000 fb64 	bl	8002310 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001c48:	2020      	movs	r0, #32
 8001c4a:	f7ff ffa3 	bl	8001b94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f7ff ffa0 	bl	8001b94 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001c54:	20b0      	movs	r0, #176	; 0xb0
 8001c56:	f7ff ff9d 	bl	8001b94 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001c5a:	20c8      	movs	r0, #200	; 0xc8
 8001c5c:	f7ff ff9a 	bl	8001b94 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001c60:	2000      	movs	r0, #0
 8001c62:	f7ff ff97 	bl	8001b94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001c66:	2010      	movs	r0, #16
 8001c68:	f7ff ff94 	bl	8001b94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001c6c:	2040      	movs	r0, #64	; 0x40
 8001c6e:	f7ff ff91 	bl	8001b94 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001c72:	20ff      	movs	r0, #255	; 0xff
 8001c74:	f000 fb33 	bl	80022de <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001c78:	20a1      	movs	r0, #161	; 0xa1
 8001c7a:	f7ff ff8b 	bl	8001b94 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001c7e:	20a6      	movs	r0, #166	; 0xa6
 8001c80:	f7ff ff88 	bl	8001b94 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001c84:	20a8      	movs	r0, #168	; 0xa8
 8001c86:	f7ff ff85 	bl	8001b94 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001c8a:	203f      	movs	r0, #63	; 0x3f
 8001c8c:	f7ff ff82 	bl	8001b94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001c90:	20a4      	movs	r0, #164	; 0xa4
 8001c92:	f7ff ff7f 	bl	8001b94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001c96:	20d3      	movs	r0, #211	; 0xd3
 8001c98:	f7ff ff7c 	bl	8001b94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f7ff ff79 	bl	8001b94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001ca2:	20d5      	movs	r0, #213	; 0xd5
 8001ca4:	f7ff ff76 	bl	8001b94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001ca8:	20f0      	movs	r0, #240	; 0xf0
 8001caa:	f7ff ff73 	bl	8001b94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001cae:	20d9      	movs	r0, #217	; 0xd9
 8001cb0:	f7ff ff70 	bl	8001b94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001cb4:	2022      	movs	r0, #34	; 0x22
 8001cb6:	f7ff ff6d 	bl	8001b94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001cba:	20da      	movs	r0, #218	; 0xda
 8001cbc:	f7ff ff6a 	bl	8001b94 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001cc0:	2012      	movs	r0, #18
 8001cc2:	f7ff ff67 	bl	8001b94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001cc6:	20db      	movs	r0, #219	; 0xdb
 8001cc8:	f7ff ff64 	bl	8001b94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001ccc:	2020      	movs	r0, #32
 8001cce:	f7ff ff61 	bl	8001b94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001cd2:	208d      	movs	r0, #141	; 0x8d
 8001cd4:	f7ff ff5e 	bl	8001b94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001cd8:	2014      	movs	r0, #20
 8001cda:	f7ff ff5b 	bl	8001b94 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f000 f814 	bl	8001d0c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001ce4:	f000 f82c 	bl	8001d40 <ssd1306_UpdateScreen>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f000 fb11 	bl	8002310 <ssd1306_SetDisplayOn>


    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <ssd1306_Init+0xd4>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001cf4:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <ssd1306_Init+0xd4>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001cfa:	4b03      	ldr	r3, [pc, #12]	; (8001d08 <ssd1306_Init+0xd4>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	711a      	strb	r2, [r3, #4]
}
 8001d00:	46c0      	nop			; (mov r8, r8)
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	20000b60 	.word	0x20000b60

08001d0c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	0002      	movs	r2, r0
 8001d14:	1dfb      	adds	r3, r7, #7
 8001d16:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001d18:	1dfb      	adds	r3, r7, #7
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <ssd1306_Fill+0x18>
 8001d20:	2300      	movs	r3, #0
 8001d22:	e000      	b.n	8001d26 <ssd1306_Fill+0x1a>
 8001d24:	23ff      	movs	r3, #255	; 0xff
 8001d26:	2280      	movs	r2, #128	; 0x80
 8001d28:	00d2      	lsls	r2, r2, #3
 8001d2a:	4804      	ldr	r0, [pc, #16]	; (8001d3c <ssd1306_Fill+0x30>)
 8001d2c:	0019      	movs	r1, r3
 8001d2e:	f003 fe8c 	bl	8005a4a <memset>
}
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b002      	add	sp, #8
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	20000760 	.word	0x20000760

08001d40 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001d46:	1dfb      	adds	r3, r7, #7
 8001d48:	2200      	movs	r2, #0
 8001d4a:	701a      	strb	r2, [r3, #0]
 8001d4c:	e01a      	b.n	8001d84 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001d4e:	1dfb      	adds	r3, r7, #7
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	3b50      	subs	r3, #80	; 0x50
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	0018      	movs	r0, r3
 8001d58:	f7ff ff1c 	bl	8001b94 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f7ff ff19 	bl	8001b94 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001d62:	2010      	movs	r0, #16
 8001d64:	f7ff ff16 	bl	8001b94 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001d68:	1dfb      	adds	r3, r7, #7
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	01da      	lsls	r2, r3, #7
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <ssd1306_UpdateScreen+0x58>)
 8001d70:	18d3      	adds	r3, r2, r3
 8001d72:	2180      	movs	r1, #128	; 0x80
 8001d74:	0018      	movs	r0, r3
 8001d76:	f7ff ff35 	bl	8001be4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001d7a:	1dfb      	adds	r3, r7, #7
 8001d7c:	781a      	ldrb	r2, [r3, #0]
 8001d7e:	1dfb      	adds	r3, r7, #7
 8001d80:	3201      	adds	r2, #1
 8001d82:	701a      	strb	r2, [r3, #0]
 8001d84:	1dfb      	adds	r3, r7, #7
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b07      	cmp	r3, #7
 8001d8a:	d9e0      	bls.n	8001d4e <ssd1306_UpdateScreen+0xe>
    }
}
 8001d8c:	46c0      	nop			; (mov r8, r8)
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	46bd      	mov	sp, r7
 8001d92:	b002      	add	sp, #8
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	46c0      	nop			; (mov r8, r8)
 8001d98:	20000760 	.word	0x20000760

08001d9c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	0004      	movs	r4, r0
 8001da4:	0008      	movs	r0, r1
 8001da6:	0011      	movs	r1, r2
 8001da8:	1dfb      	adds	r3, r7, #7
 8001daa:	1c22      	adds	r2, r4, #0
 8001dac:	701a      	strb	r2, [r3, #0]
 8001dae:	1dbb      	adds	r3, r7, #6
 8001db0:	1c02      	adds	r2, r0, #0
 8001db2:	701a      	strb	r2, [r3, #0]
 8001db4:	1d7b      	adds	r3, r7, #5
 8001db6:	1c0a      	adds	r2, r1, #0
 8001db8:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001dba:	1dfb      	adds	r3, r7, #7
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	b25b      	sxtb	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	db47      	blt.n	8001e54 <ssd1306_DrawPixel+0xb8>
 8001dc4:	1dbb      	adds	r3, r7, #6
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b3f      	cmp	r3, #63	; 0x3f
 8001dca:	d843      	bhi.n	8001e54 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001dcc:	1d7b      	adds	r3, r7, #5
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d11e      	bne.n	8001e12 <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001dd4:	1dfb      	adds	r3, r7, #7
 8001dd6:	781a      	ldrb	r2, [r3, #0]
 8001dd8:	1dbb      	adds	r3, r7, #6
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	08db      	lsrs	r3, r3, #3
 8001dde:	b2d8      	uxtb	r0, r3
 8001de0:	0003      	movs	r3, r0
 8001de2:	01db      	lsls	r3, r3, #7
 8001de4:	18d3      	adds	r3, r2, r3
 8001de6:	4a1d      	ldr	r2, [pc, #116]	; (8001e5c <ssd1306_DrawPixel+0xc0>)
 8001de8:	5cd3      	ldrb	r3, [r2, r3]
 8001dea:	b25a      	sxtb	r2, r3
 8001dec:	1dbb      	adds	r3, r7, #6
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2107      	movs	r1, #7
 8001df2:	400b      	ands	r3, r1
 8001df4:	2101      	movs	r1, #1
 8001df6:	4099      	lsls	r1, r3
 8001df8:	000b      	movs	r3, r1
 8001dfa:	b25b      	sxtb	r3, r3
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	b259      	sxtb	r1, r3
 8001e00:	1dfb      	adds	r3, r7, #7
 8001e02:	781a      	ldrb	r2, [r3, #0]
 8001e04:	0003      	movs	r3, r0
 8001e06:	01db      	lsls	r3, r3, #7
 8001e08:	18d3      	adds	r3, r2, r3
 8001e0a:	b2c9      	uxtb	r1, r1
 8001e0c:	4a13      	ldr	r2, [pc, #76]	; (8001e5c <ssd1306_DrawPixel+0xc0>)
 8001e0e:	54d1      	strb	r1, [r2, r3]
 8001e10:	e021      	b.n	8001e56 <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001e12:	1dfb      	adds	r3, r7, #7
 8001e14:	781a      	ldrb	r2, [r3, #0]
 8001e16:	1dbb      	adds	r3, r7, #6
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	08db      	lsrs	r3, r3, #3
 8001e1c:	b2d8      	uxtb	r0, r3
 8001e1e:	0003      	movs	r3, r0
 8001e20:	01db      	lsls	r3, r3, #7
 8001e22:	18d3      	adds	r3, r2, r3
 8001e24:	4a0d      	ldr	r2, [pc, #52]	; (8001e5c <ssd1306_DrawPixel+0xc0>)
 8001e26:	5cd3      	ldrb	r3, [r2, r3]
 8001e28:	b25b      	sxtb	r3, r3
 8001e2a:	1dba      	adds	r2, r7, #6
 8001e2c:	7812      	ldrb	r2, [r2, #0]
 8001e2e:	2107      	movs	r1, #7
 8001e30:	400a      	ands	r2, r1
 8001e32:	2101      	movs	r1, #1
 8001e34:	4091      	lsls	r1, r2
 8001e36:	000a      	movs	r2, r1
 8001e38:	b252      	sxtb	r2, r2
 8001e3a:	43d2      	mvns	r2, r2
 8001e3c:	b252      	sxtb	r2, r2
 8001e3e:	4013      	ands	r3, r2
 8001e40:	b259      	sxtb	r1, r3
 8001e42:	1dfb      	adds	r3, r7, #7
 8001e44:	781a      	ldrb	r2, [r3, #0]
 8001e46:	0003      	movs	r3, r0
 8001e48:	01db      	lsls	r3, r3, #7
 8001e4a:	18d3      	adds	r3, r2, r3
 8001e4c:	b2c9      	uxtb	r1, r1
 8001e4e:	4a03      	ldr	r2, [pc, #12]	; (8001e5c <ssd1306_DrawPixel+0xc0>)
 8001e50:	54d1      	strb	r1, [r2, r3]
 8001e52:	e000      	b.n	8001e56 <ssd1306_DrawPixel+0xba>
        return;
 8001e54:	46c0      	nop			; (mov r8, r8)
    }
}
 8001e56:	46bd      	mov	sp, r7
 8001e58:	b003      	add	sp, #12
 8001e5a:	bd90      	pop	{r4, r7, pc}
 8001e5c:	20000760 	.word	0x20000760

08001e60 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001e60:	b590      	push	{r4, r7, lr}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	0004      	movs	r4, r0
 8001e68:	1d38      	adds	r0, r7, #4
 8001e6a:	6001      	str	r1, [r0, #0]
 8001e6c:	6042      	str	r2, [r0, #4]
 8001e6e:	0019      	movs	r1, r3
 8001e70:	200f      	movs	r0, #15
 8001e72:	183b      	adds	r3, r7, r0
 8001e74:	1c22      	adds	r2, r4, #0
 8001e76:	701a      	strb	r2, [r3, #0]
 8001e78:	230e      	movs	r3, #14
 8001e7a:	18fb      	adds	r3, r7, r3
 8001e7c:	1c0a      	adds	r2, r1, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001e80:	183b      	adds	r3, r7, r0
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b1f      	cmp	r3, #31
 8001e86:	d903      	bls.n	8001e90 <ssd1306_WriteChar+0x30>
 8001e88:	183b      	adds	r3, r7, r0
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b7e      	cmp	r3, #126	; 0x7e
 8001e8e:	d901      	bls.n	8001e94 <ssd1306_WriteChar+0x34>
        return 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	e078      	b.n	8001f86 <ssd1306_WriteChar+0x126>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001e94:	4b3e      	ldr	r3, [pc, #248]	; (8001f90 <ssd1306_WriteChar+0x130>)
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	001a      	movs	r2, r3
 8001e9a:	1d3b      	adds	r3, r7, #4
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	18d3      	adds	r3, r2, r3
 8001ea0:	2b80      	cmp	r3, #128	; 0x80
 8001ea2:	dc07      	bgt.n	8001eb4 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001ea4:	4b3a      	ldr	r3, [pc, #232]	; (8001f90 <ssd1306_WriteChar+0x130>)
 8001ea6:	885b      	ldrh	r3, [r3, #2]
 8001ea8:	001a      	movs	r2, r3
 8001eaa:	1d3b      	adds	r3, r7, #4
 8001eac:	785b      	ldrb	r3, [r3, #1]
 8001eae:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001eb0:	2b40      	cmp	r3, #64	; 0x40
 8001eb2:	dd01      	ble.n	8001eb8 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	e066      	b.n	8001f86 <ssd1306_WriteChar+0x126>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61fb      	str	r3, [r7, #28]
 8001ebc:	e051      	b.n	8001f62 <ssd1306_WriteChar+0x102>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	230f      	movs	r3, #15
 8001ec4:	18fb      	adds	r3, r7, r3
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	3b20      	subs	r3, #32
 8001eca:	1d39      	adds	r1, r7, #4
 8001ecc:	7849      	ldrb	r1, [r1, #1]
 8001ece:	434b      	muls	r3, r1
 8001ed0:	0019      	movs	r1, r3
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	18cb      	adds	r3, r1, r3
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	18d3      	adds	r3, r2, r3
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
 8001ee2:	e035      	b.n	8001f50 <ssd1306_WriteChar+0xf0>
            if((b << j) & 0x8000)  {
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	409a      	lsls	r2, r3
 8001eea:	2380      	movs	r3, #128	; 0x80
 8001eec:	021b      	lsls	r3, r3, #8
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d014      	beq.n	8001f1c <ssd1306_WriteChar+0xbc>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001ef2:	4b27      	ldr	r3, [pc, #156]	; (8001f90 <ssd1306_WriteChar+0x130>)
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	18d3      	adds	r3, r2, r3
 8001efe:	b2d8      	uxtb	r0, r3
 8001f00:	4b23      	ldr	r3, [pc, #140]	; (8001f90 <ssd1306_WriteChar+0x130>)
 8001f02:	885b      	ldrh	r3, [r3, #2]
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	18d3      	adds	r3, r2, r3
 8001f0c:	b2d9      	uxtb	r1, r3
 8001f0e:	230e      	movs	r3, #14
 8001f10:	18fb      	adds	r3, r7, r3
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	001a      	movs	r2, r3
 8001f16:	f7ff ff41 	bl	8001d9c <ssd1306_DrawPixel>
 8001f1a:	e016      	b.n	8001f4a <ssd1306_WriteChar+0xea>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001f1c:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <ssd1306_WriteChar+0x130>)
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	18d3      	adds	r3, r2, r3
 8001f28:	b2d8      	uxtb	r0, r3
 8001f2a:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <ssd1306_WriteChar+0x130>)
 8001f2c:	885b      	ldrh	r3, [r3, #2]
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	18d3      	adds	r3, r2, r3
 8001f36:	b2d9      	uxtb	r1, r3
 8001f38:	230e      	movs	r3, #14
 8001f3a:	18fb      	adds	r3, r7, r3
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	425a      	negs	r2, r3
 8001f40:	4153      	adcs	r3, r2
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	001a      	movs	r2, r3
 8001f46:	f7ff ff29 	bl	8001d9c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	61bb      	str	r3, [r7, #24]
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	001a      	movs	r2, r3
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d3c3      	bcc.n	8001ee4 <ssd1306_WriteChar+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	785b      	ldrb	r3, [r3, #1]
 8001f66:	001a      	movs	r2, r3
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d3a7      	bcc.n	8001ebe <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001f6e:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <ssd1306_WriteChar+0x130>)
 8001f70:	881a      	ldrh	r2, [r3, #0]
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	18d3      	adds	r3, r2, r3
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <ssd1306_WriteChar+0x130>)
 8001f7e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001f80:	230f      	movs	r3, #15
 8001f82:	18fb      	adds	r3, r7, r3
 8001f84:	781b      	ldrb	r3, [r3, #0]
}
 8001f86:	0018      	movs	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	b009      	add	sp, #36	; 0x24
 8001f8c:	bd90      	pop	{r4, r7, pc}
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	20000b60 	.word	0x20000b60

08001f94 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	1d38      	adds	r0, r7, #4
 8001f9e:	6001      	str	r1, [r0, #0]
 8001fa0:	6042      	str	r2, [r0, #4]
 8001fa2:	001a      	movs	r2, r3
 8001fa4:	1cfb      	adds	r3, r7, #3
 8001fa6:	701a      	strb	r2, [r3, #0]
    while (*str) {
 8001fa8:	e014      	b.n	8001fd4 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	7818      	ldrb	r0, [r3, #0]
 8001fae:	1cfb      	adds	r3, r7, #3
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	1d3a      	adds	r2, r7, #4
 8001fb4:	6811      	ldr	r1, [r2, #0]
 8001fb6:	6852      	ldr	r2, [r2, #4]
 8001fb8:	f7ff ff52 	bl	8001e60 <ssd1306_WriteChar>
 8001fbc:	0003      	movs	r3, r0
 8001fbe:	001a      	movs	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d002      	beq.n	8001fce <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	e008      	b.n	8001fe0 <ssd1306_WriteString+0x4c>
        }
        str++;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1e6      	bne.n	8001faa <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	781b      	ldrb	r3, [r3, #0]
}
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	b004      	add	sp, #16
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	0002      	movs	r2, r0
 8001ff0:	1dfb      	adds	r3, r7, #7
 8001ff2:	701a      	strb	r2, [r3, #0]
 8001ff4:	1dbb      	adds	r3, r7, #6
 8001ff6:	1c0a      	adds	r2, r1, #0
 8001ff8:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8001ffa:	1dfb      	adds	r3, r7, #7
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	4b05      	ldr	r3, [pc, #20]	; (8002018 <ssd1306_SetCursor+0x30>)
 8002002:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002004:	1dbb      	adds	r3, r7, #6
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	b29a      	uxth	r2, r3
 800200a:	4b03      	ldr	r3, [pc, #12]	; (8002018 <ssd1306_SetCursor+0x30>)
 800200c:	805a      	strh	r2, [r3, #2]
}
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	46bd      	mov	sp, r7
 8002012:	b002      	add	sp, #8
 8002014:	bd80      	pop	{r7, pc}
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	20000b60 	.word	0x20000b60

0800201c <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800201c:	b5b0      	push	{r4, r5, r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af00      	add	r7, sp, #0
 8002022:	0005      	movs	r5, r0
 8002024:	000c      	movs	r4, r1
 8002026:	0010      	movs	r0, r2
 8002028:	0019      	movs	r1, r3
 800202a:	1dfb      	adds	r3, r7, #7
 800202c:	1c2a      	adds	r2, r5, #0
 800202e:	701a      	strb	r2, [r3, #0]
 8002030:	1dbb      	adds	r3, r7, #6
 8002032:	1c22      	adds	r2, r4, #0
 8002034:	701a      	strb	r2, [r3, #0]
 8002036:	1d7b      	adds	r3, r7, #5
 8002038:	1c02      	adds	r2, r0, #0
 800203a:	701a      	strb	r2, [r3, #0]
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	1c0a      	adds	r2, r1, #0
 8002040:	701a      	strb	r2, [r3, #0]
    int32_t deltaX = abs(x2 - x1);
 8002042:	1d7b      	adds	r3, r7, #5
 8002044:	781a      	ldrb	r2, [r3, #0]
 8002046:	1dfb      	adds	r3, r7, #7
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	17da      	asrs	r2, r3, #31
 800204e:	189b      	adds	r3, r3, r2
 8002050:	4053      	eors	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8002054:	1d3b      	adds	r3, r7, #4
 8002056:	781a      	ldrb	r2, [r3, #0]
 8002058:	1dbb      	adds	r3, r7, #6
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	17da      	asrs	r2, r3, #31
 8002060:	189b      	adds	r3, r3, r2
 8002062:	4053      	eors	r3, r2
 8002064:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8002066:	1dfa      	adds	r2, r7, #7
 8002068:	1d7b      	adds	r3, r7, #5
 800206a:	7812      	ldrb	r2, [r2, #0]
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d201      	bcs.n	8002076 <ssd1306_Line+0x5a>
 8002072:	2301      	movs	r3, #1
 8002074:	e001      	b.n	800207a <ssd1306_Line+0x5e>
 8002076:	2301      	movs	r3, #1
 8002078:	425b      	negs	r3, r3
 800207a:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 800207c:	1dba      	adds	r2, r7, #6
 800207e:	1d3b      	adds	r3, r7, #4
 8002080:	7812      	ldrb	r2, [r2, #0]
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d201      	bcs.n	800208c <ssd1306_Line+0x70>
 8002088:	2301      	movs	r3, #1
 800208a:	e001      	b.n	8002090 <ssd1306_Line+0x74>
 800208c:	2301      	movs	r3, #1
 800208e:	425b      	negs	r3, r3
 8002090:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 800209a:	2330      	movs	r3, #48	; 0x30
 800209c:	18fb      	adds	r3, r7, r3
 800209e:	781a      	ldrb	r2, [r3, #0]
 80020a0:	1d3b      	adds	r3, r7, #4
 80020a2:	7819      	ldrb	r1, [r3, #0]
 80020a4:	1d7b      	adds	r3, r7, #5
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	0018      	movs	r0, r3
 80020aa:	f7ff fe77 	bl	8001d9c <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 80020ae:	e02f      	b.n	8002110 <ssd1306_Line+0xf4>
        ssd1306_DrawPixel(x1, y1, color);
 80020b0:	2330      	movs	r3, #48	; 0x30
 80020b2:	18fb      	adds	r3, r7, r3
 80020b4:	781a      	ldrb	r2, [r3, #0]
 80020b6:	1dbb      	adds	r3, r7, #6
 80020b8:	7819      	ldrb	r1, [r3, #0]
 80020ba:	1dfb      	adds	r3, r7, #7
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	0018      	movs	r0, r3
 80020c0:	f7ff fe6c 	bl	8001d9c <ssd1306_DrawPixel>
        error2 = error * 2;
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	425b      	negs	r3, r3
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	dd0a      	ble.n	80020ea <ssd1306_Line+0xce>
            error -= deltaY;
 80020d4:	69fa      	ldr	r2, [r7, #28]
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	b2d9      	uxtb	r1, r3
 80020e0:	1dfb      	adds	r3, r7, #7
 80020e2:	1dfa      	adds	r2, r7, #7
 80020e4:	7812      	ldrb	r2, [r2, #0]
 80020e6:	188a      	adds	r2, r1, r2
 80020e8:	701a      	strb	r2, [r3, #0]
 80020ea:	1dbb      	adds	r3, r7, #6
 80020ec:	1dba      	adds	r2, r7, #6
 80020ee:	7812      	ldrb	r2, [r2, #0]
 80020f0:	701a      	strb	r2, [r3, #0]
        }
        
        if(error2 < deltaX) {
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	da0a      	bge.n	8002110 <ssd1306_Line+0xf4>
            error += deltaX;
 80020fa:	69fa      	ldr	r2, [r7, #28]
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	18d3      	adds	r3, r2, r3
 8002100:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	b2d9      	uxtb	r1, r3
 8002106:	1dbb      	adds	r3, r7, #6
 8002108:	1dba      	adds	r2, r7, #6
 800210a:	7812      	ldrb	r2, [r2, #0]
 800210c:	188a      	adds	r2, r1, r2
 800210e:	701a      	strb	r2, [r3, #0]
    while((x1 != x2) || (y1 != y2)) {
 8002110:	1dfa      	adds	r2, r7, #7
 8002112:	1d7b      	adds	r3, r7, #5
 8002114:	7812      	ldrb	r2, [r2, #0]
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d1c9      	bne.n	80020b0 <ssd1306_Line+0x94>
 800211c:	1dba      	adds	r2, r7, #6
 800211e:	1d3b      	adds	r3, r7, #4
 8002120:	7812      	ldrb	r2, [r2, #0]
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d1c3      	bne.n	80020b0 <ssd1306_Line+0x94>
        }
    }
    return;
 8002128:	46c0      	nop			; (mov r8, r8)
}
 800212a:	46bd      	mov	sp, r7
 800212c:	b008      	add	sp, #32
 800212e:	bdb0      	pop	{r4, r5, r7, pc}

08002130 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002130:	b5b0      	push	{r4, r5, r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af02      	add	r7, sp, #8
 8002136:	0005      	movs	r5, r0
 8002138:	000c      	movs	r4, r1
 800213a:	0010      	movs	r0, r2
 800213c:	0019      	movs	r1, r3
 800213e:	1dfb      	adds	r3, r7, #7
 8002140:	1c2a      	adds	r2, r5, #0
 8002142:	701a      	strb	r2, [r3, #0]
 8002144:	1dbb      	adds	r3, r7, #6
 8002146:	1c22      	adds	r2, r4, #0
 8002148:	701a      	strb	r2, [r3, #0]
 800214a:	1d7b      	adds	r3, r7, #5
 800214c:	1c02      	adds	r2, r0, #0
 800214e:	701a      	strb	r2, [r3, #0]
 8002150:	1d3b      	adds	r3, r7, #4
 8002152:	1c0a      	adds	r2, r1, #0
 8002154:	701a      	strb	r2, [r3, #0]
    ssd1306_Line(x1,y1,x2,y1,color);
 8002156:	1dbb      	adds	r3, r7, #6
 8002158:	781c      	ldrb	r4, [r3, #0]
 800215a:	1d7b      	adds	r3, r7, #5
 800215c:	781a      	ldrb	r2, [r3, #0]
 800215e:	1dbb      	adds	r3, r7, #6
 8002160:	7819      	ldrb	r1, [r3, #0]
 8002162:	1dfb      	adds	r3, r7, #7
 8002164:	7818      	ldrb	r0, [r3, #0]
 8002166:	2518      	movs	r5, #24
 8002168:	197b      	adds	r3, r7, r5
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	0023      	movs	r3, r4
 8002170:	f7ff ff54 	bl	800201c <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8002174:	1d3b      	adds	r3, r7, #4
 8002176:	781c      	ldrb	r4, [r3, #0]
 8002178:	1d7b      	adds	r3, r7, #5
 800217a:	781a      	ldrb	r2, [r3, #0]
 800217c:	1dbb      	adds	r3, r7, #6
 800217e:	7819      	ldrb	r1, [r3, #0]
 8002180:	1d7b      	adds	r3, r7, #5
 8002182:	7818      	ldrb	r0, [r3, #0]
 8002184:	197b      	adds	r3, r7, r5
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	0023      	movs	r3, r4
 800218c:	f7ff ff46 	bl	800201c <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8002190:	1d3b      	adds	r3, r7, #4
 8002192:	781c      	ldrb	r4, [r3, #0]
 8002194:	1dfb      	adds	r3, r7, #7
 8002196:	781a      	ldrb	r2, [r3, #0]
 8002198:	1d3b      	adds	r3, r7, #4
 800219a:	7819      	ldrb	r1, [r3, #0]
 800219c:	1d7b      	adds	r3, r7, #5
 800219e:	7818      	ldrb	r0, [r3, #0]
 80021a0:	197b      	adds	r3, r7, r5
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	0023      	movs	r3, r4
 80021a8:	f7ff ff38 	bl	800201c <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 80021ac:	1dbb      	adds	r3, r7, #6
 80021ae:	781c      	ldrb	r4, [r3, #0]
 80021b0:	1dfb      	adds	r3, r7, #7
 80021b2:	781a      	ldrb	r2, [r3, #0]
 80021b4:	1d3b      	adds	r3, r7, #4
 80021b6:	7819      	ldrb	r1, [r3, #0]
 80021b8:	1dfb      	adds	r3, r7, #7
 80021ba:	7818      	ldrb	r0, [r3, #0]
 80021bc:	197b      	adds	r3, r7, r5
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	0023      	movs	r3, r4
 80021c4:	f7ff ff2a 	bl	800201c <ssd1306_Line>

    return;
 80021c8:	46c0      	nop			; (mov r8, r8)
}
 80021ca:	46bd      	mov	sp, r7
 80021cc:	b002      	add	sp, #8
 80021ce:	bdb0      	pop	{r4, r5, r7, pc}

080021d0 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80021d0:	b5b0      	push	{r4, r5, r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	0005      	movs	r5, r0
 80021d8:	000c      	movs	r4, r1
 80021da:	0010      	movs	r0, r2
 80021dc:	0019      	movs	r1, r3
 80021de:	1dfb      	adds	r3, r7, #7
 80021e0:	1c2a      	adds	r2, r5, #0
 80021e2:	701a      	strb	r2, [r3, #0]
 80021e4:	1dbb      	adds	r3, r7, #6
 80021e6:	1c22      	adds	r2, r4, #0
 80021e8:	701a      	strb	r2, [r3, #0]
 80021ea:	1d7b      	adds	r3, r7, #5
 80021ec:	1c02      	adds	r2, r0, #0
 80021ee:	701a      	strb	r2, [r3, #0]
 80021f0:	1d3b      	adds	r3, r7, #4
 80021f2:	1c0a      	adds	r2, r1, #0
 80021f4:	701a      	strb	r2, [r3, #0]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 80021f6:	230d      	movs	r3, #13
 80021f8:	18fa      	adds	r2, r7, r3
 80021fa:	1dfb      	adds	r3, r7, #7
 80021fc:	1d79      	adds	r1, r7, #5
 80021fe:	780c      	ldrb	r4, [r1, #0]
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	b2d8      	uxtb	r0, r3
 8002204:	b2e1      	uxtb	r1, r4
 8002206:	4288      	cmp	r0, r1
 8002208:	d900      	bls.n	800220c <ssd1306_FillRectangle+0x3c>
 800220a:	1c23      	adds	r3, r4, #0
 800220c:	7013      	strb	r3, [r2, #0]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 800220e:	230c      	movs	r3, #12
 8002210:	18fa      	adds	r2, r7, r3
 8002212:	1d7b      	adds	r3, r7, #5
 8002214:	1df9      	adds	r1, r7, #7
 8002216:	780c      	ldrb	r4, [r1, #0]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	b2d8      	uxtb	r0, r3
 800221c:	b2e1      	uxtb	r1, r4
 800221e:	4288      	cmp	r0, r1
 8002220:	d200      	bcs.n	8002224 <ssd1306_FillRectangle+0x54>
 8002222:	1c23      	adds	r3, r4, #0
 8002224:	7013      	strb	r3, [r2, #0]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8002226:	230b      	movs	r3, #11
 8002228:	18fa      	adds	r2, r7, r3
 800222a:	1dbb      	adds	r3, r7, #6
 800222c:	1d39      	adds	r1, r7, #4
 800222e:	780c      	ldrb	r4, [r1, #0]
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	b2d8      	uxtb	r0, r3
 8002234:	b2e1      	uxtb	r1, r4
 8002236:	4288      	cmp	r0, r1
 8002238:	d900      	bls.n	800223c <ssd1306_FillRectangle+0x6c>
 800223a:	1c23      	adds	r3, r4, #0
 800223c:	7013      	strb	r3, [r2, #0]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 800223e:	230a      	movs	r3, #10
 8002240:	18fa      	adds	r2, r7, r3
 8002242:	1d3b      	adds	r3, r7, #4
 8002244:	1db9      	adds	r1, r7, #6
 8002246:	780c      	ldrb	r4, [r1, #0]
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	b2d8      	uxtb	r0, r3
 800224c:	b2e1      	uxtb	r1, r4
 800224e:	4288      	cmp	r0, r1
 8002250:	d200      	bcs.n	8002254 <ssd1306_FillRectangle+0x84>
 8002252:	1c23      	adds	r3, r4, #0
 8002254:	7013      	strb	r3, [r2, #0]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002256:	230f      	movs	r3, #15
 8002258:	18fb      	adds	r3, r7, r3
 800225a:	220b      	movs	r2, #11
 800225c:	18ba      	adds	r2, r7, r2
 800225e:	7812      	ldrb	r2, [r2, #0]
 8002260:	701a      	strb	r2, [r3, #0]
 8002262:	e02b      	b.n	80022bc <ssd1306_FillRectangle+0xec>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002264:	230e      	movs	r3, #14
 8002266:	18fb      	adds	r3, r7, r3
 8002268:	220d      	movs	r2, #13
 800226a:	18ba      	adds	r2, r7, r2
 800226c:	7812      	ldrb	r2, [r2, #0]
 800226e:	701a      	strb	r2, [r3, #0]
 8002270:	e011      	b.n	8002296 <ssd1306_FillRectangle+0xc6>
            ssd1306_DrawPixel(x, y, color);
 8002272:	2320      	movs	r3, #32
 8002274:	18fb      	adds	r3, r7, r3
 8002276:	781a      	ldrb	r2, [r3, #0]
 8002278:	230f      	movs	r3, #15
 800227a:	18fb      	adds	r3, r7, r3
 800227c:	7819      	ldrb	r1, [r3, #0]
 800227e:	240e      	movs	r4, #14
 8002280:	193b      	adds	r3, r7, r4
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	0018      	movs	r0, r3
 8002286:	f7ff fd89 	bl	8001d9c <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800228a:	0021      	movs	r1, r4
 800228c:	187b      	adds	r3, r7, r1
 800228e:	781a      	ldrb	r2, [r3, #0]
 8002290:	187b      	adds	r3, r7, r1
 8002292:	3201      	adds	r2, #1
 8002294:	701a      	strb	r2, [r3, #0]
 8002296:	210e      	movs	r1, #14
 8002298:	187a      	adds	r2, r7, r1
 800229a:	230c      	movs	r3, #12
 800229c:	18fb      	adds	r3, r7, r3
 800229e:	7812      	ldrb	r2, [r2, #0]
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d804      	bhi.n	80022b0 <ssd1306_FillRectangle+0xe0>
 80022a6:	187b      	adds	r3, r7, r1
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	b25b      	sxtb	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	dae0      	bge.n	8002272 <ssd1306_FillRectangle+0xa2>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80022b0:	210f      	movs	r1, #15
 80022b2:	187b      	adds	r3, r7, r1
 80022b4:	781a      	ldrb	r2, [r3, #0]
 80022b6:	187b      	adds	r3, r7, r1
 80022b8:	3201      	adds	r2, #1
 80022ba:	701a      	strb	r2, [r3, #0]
 80022bc:	210f      	movs	r1, #15
 80022be:	187a      	adds	r2, r7, r1
 80022c0:	230a      	movs	r3, #10
 80022c2:	18fb      	adds	r3, r7, r3
 80022c4:	7812      	ldrb	r2, [r2, #0]
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d804      	bhi.n	80022d6 <ssd1306_FillRectangle+0x106>
 80022cc:	187b      	adds	r3, r7, r1
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b3f      	cmp	r3, #63	; 0x3f
 80022d2:	d9c7      	bls.n	8002264 <ssd1306_FillRectangle+0x94>
        }
    }
    return;
 80022d4:	46c0      	nop			; (mov r8, r8)
 80022d6:	46c0      	nop			; (mov r8, r8)
}
 80022d8:	46bd      	mov	sp, r7
 80022da:	b004      	add	sp, #16
 80022dc:	bdb0      	pop	{r4, r5, r7, pc}

080022de <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80022de:	b580      	push	{r7, lr}
 80022e0:	b084      	sub	sp, #16
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	0002      	movs	r2, r0
 80022e6:	1dfb      	adds	r3, r7, #7
 80022e8:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 80022ea:	210f      	movs	r1, #15
 80022ec:	187b      	adds	r3, r7, r1
 80022ee:	2281      	movs	r2, #129	; 0x81
 80022f0:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80022f2:	187b      	adds	r3, r7, r1
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	0018      	movs	r0, r3
 80022f8:	f7ff fc4c 	bl	8001b94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80022fc:	1dfb      	adds	r3, r7, #7
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	0018      	movs	r0, r3
 8002302:	f7ff fc47 	bl	8001b94 <ssd1306_WriteCommand>
}
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	46bd      	mov	sp, r7
 800230a:	b004      	add	sp, #16
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	0002      	movs	r2, r0
 8002318:	1dfb      	adds	r3, r7, #7
 800231a:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 800231c:	1dfb      	adds	r3, r7, #7
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d007      	beq.n	8002334 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8002324:	230f      	movs	r3, #15
 8002326:	18fb      	adds	r3, r7, r3
 8002328:	22af      	movs	r2, #175	; 0xaf
 800232a:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 800232c:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <ssd1306_SetDisplayOn+0x48>)
 800232e:	2201      	movs	r2, #1
 8002330:	715a      	strb	r2, [r3, #5]
 8002332:	e006      	b.n	8002342 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8002334:	230f      	movs	r3, #15
 8002336:	18fb      	adds	r3, r7, r3
 8002338:	22ae      	movs	r2, #174	; 0xae
 800233a:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 800233c:	4b06      	ldr	r3, [pc, #24]	; (8002358 <ssd1306_SetDisplayOn+0x48>)
 800233e:	2200      	movs	r2, #0
 8002340:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002342:	230f      	movs	r3, #15
 8002344:	18fb      	adds	r3, r7, r3
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	0018      	movs	r0, r3
 800234a:	f7ff fc23 	bl	8001b94 <ssd1306_WriteCommand>
}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	46bd      	mov	sp, r7
 8002352:	b004      	add	sp, #16
 8002354:	bd80      	pop	{r7, pc}
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	20000b60 	.word	0x20000b60

0800235c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002362:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <HAL_MspInit+0x44>)
 8002364:	699a      	ldr	r2, [r3, #24]
 8002366:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <HAL_MspInit+0x44>)
 8002368:	2101      	movs	r1, #1
 800236a:	430a      	orrs	r2, r1
 800236c:	619a      	str	r2, [r3, #24]
 800236e:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <HAL_MspInit+0x44>)
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	2201      	movs	r2, #1
 8002374:	4013      	ands	r3, r2
 8002376:	607b      	str	r3, [r7, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800237a:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <HAL_MspInit+0x44>)
 800237c:	69da      	ldr	r2, [r3, #28]
 800237e:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <HAL_MspInit+0x44>)
 8002380:	2180      	movs	r1, #128	; 0x80
 8002382:	0549      	lsls	r1, r1, #21
 8002384:	430a      	orrs	r2, r1
 8002386:	61da      	str	r2, [r3, #28]
 8002388:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <HAL_MspInit+0x44>)
 800238a:	69da      	ldr	r2, [r3, #28]
 800238c:	2380      	movs	r3, #128	; 0x80
 800238e:	055b      	lsls	r3, r3, #21
 8002390:	4013      	ands	r3, r2
 8002392:	603b      	str	r3, [r7, #0]
 8002394:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	46bd      	mov	sp, r7
 800239a:	b002      	add	sp, #8
 800239c:	bd80      	pop	{r7, pc}
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	40021000 	.word	0x40021000

080023a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023a4:	b590      	push	{r4, r7, lr}
 80023a6:	b08b      	sub	sp, #44	; 0x2c
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ac:	2414      	movs	r4, #20
 80023ae:	193b      	adds	r3, r7, r4
 80023b0:	0018      	movs	r0, r3
 80023b2:	2314      	movs	r3, #20
 80023b4:	001a      	movs	r2, r3
 80023b6:	2100      	movs	r1, #0
 80023b8:	f003 fb47 	bl	8005a4a <memset>
  if(hadc->Instance==ADC1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a18      	ldr	r2, [pc, #96]	; (8002424 <HAL_ADC_MspInit+0x80>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d12a      	bne.n	800241c <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023c6:	4b18      	ldr	r3, [pc, #96]	; (8002428 <HAL_ADC_MspInit+0x84>)
 80023c8:	699a      	ldr	r2, [r3, #24]
 80023ca:	4b17      	ldr	r3, [pc, #92]	; (8002428 <HAL_ADC_MspInit+0x84>)
 80023cc:	2180      	movs	r1, #128	; 0x80
 80023ce:	0089      	lsls	r1, r1, #2
 80023d0:	430a      	orrs	r2, r1
 80023d2:	619a      	str	r2, [r3, #24]
 80023d4:	4b14      	ldr	r3, [pc, #80]	; (8002428 <HAL_ADC_MspInit+0x84>)
 80023d6:	699a      	ldr	r2, [r3, #24]
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e2:	4b11      	ldr	r3, [pc, #68]	; (8002428 <HAL_ADC_MspInit+0x84>)
 80023e4:	695a      	ldr	r2, [r3, #20]
 80023e6:	4b10      	ldr	r3, [pc, #64]	; (8002428 <HAL_ADC_MspInit+0x84>)
 80023e8:	2180      	movs	r1, #128	; 0x80
 80023ea:	02c9      	lsls	r1, r1, #11
 80023ec:	430a      	orrs	r2, r1
 80023ee:	615a      	str	r2, [r3, #20]
 80023f0:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <HAL_ADC_MspInit+0x84>)
 80023f2:	695a      	ldr	r2, [r3, #20]
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	02db      	lsls	r3, r3, #11
 80023f8:	4013      	ands	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = INPUT_FLUID_Pin;
 80023fe:	193b      	adds	r3, r7, r4
 8002400:	2202      	movs	r2, #2
 8002402:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002404:	193b      	adds	r3, r7, r4
 8002406:	2203      	movs	r2, #3
 8002408:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240a:	193b      	adds	r3, r7, r4
 800240c:	2200      	movs	r2, #0
 800240e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(INPUT_FLUID_GPIO_Port, &GPIO_InitStruct);
 8002410:	193b      	adds	r3, r7, r4
 8002412:	4a06      	ldr	r2, [pc, #24]	; (800242c <HAL_ADC_MspInit+0x88>)
 8002414:	0019      	movs	r1, r3
 8002416:	0010      	movs	r0, r2
 8002418:	f001 fa2a 	bl	8003870 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800241c:	46c0      	nop			; (mov r8, r8)
 800241e:	46bd      	mov	sp, r7
 8002420:	b00b      	add	sp, #44	; 0x2c
 8002422:	bd90      	pop	{r4, r7, pc}
 8002424:	40012400 	.word	0x40012400
 8002428:	40021000 	.word	0x40021000
 800242c:	48000400 	.word	0x48000400

08002430 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002430:	b590      	push	{r4, r7, lr}
 8002432:	b089      	sub	sp, #36	; 0x24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002438:	240c      	movs	r4, #12
 800243a:	193b      	adds	r3, r7, r4
 800243c:	0018      	movs	r0, r3
 800243e:	2314      	movs	r3, #20
 8002440:	001a      	movs	r2, r3
 8002442:	2100      	movs	r1, #0
 8002444:	f003 fb01 	bl	8005a4a <memset>
  if(hrtc->Instance==RTC)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a10      	ldr	r2, [pc, #64]	; (8002490 <HAL_RTC_MspInit+0x60>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d11a      	bne.n	8002488 <HAL_RTC_MspInit+0x58>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002452:	4b10      	ldr	r3, [pc, #64]	; (8002494 <HAL_RTC_MspInit+0x64>)
 8002454:	6a1a      	ldr	r2, [r3, #32]
 8002456:	4b0f      	ldr	r3, [pc, #60]	; (8002494 <HAL_RTC_MspInit+0x64>)
 8002458:	2180      	movs	r1, #128	; 0x80
 800245a:	0209      	lsls	r1, r1, #8
 800245c:	430a      	orrs	r2, r1
 800245e:	621a      	str	r2, [r3, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002460:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <HAL_RTC_MspInit+0x64>)
 8002462:	695a      	ldr	r2, [r3, #20]
 8002464:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <HAL_RTC_MspInit+0x64>)
 8002466:	2180      	movs	r1, #128	; 0x80
 8002468:	0309      	lsls	r1, r1, #12
 800246a:	430a      	orrs	r2, r1
 800246c:	615a      	str	r2, [r3, #20]
 800246e:	4b09      	ldr	r3, [pc, #36]	; (8002494 <HAL_RTC_MspInit+0x64>)
 8002470:	695a      	ldr	r2, [r3, #20]
 8002472:	2380      	movs	r3, #128	; 0x80
 8002474:	031b      	lsls	r3, r3, #12
 8002476:	4013      	ands	r3, r2
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration
    PC13     ------> RTC_OUT_CALIB
    */
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800247c:	193b      	adds	r3, r7, r4
 800247e:	4a06      	ldr	r2, [pc, #24]	; (8002498 <HAL_RTC_MspInit+0x68>)
 8002480:	0019      	movs	r1, r3
 8002482:	0010      	movs	r0, r2
 8002484:	f001 f9f4 	bl	8003870 <HAL_GPIO_Init>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002488:	46c0      	nop			; (mov r8, r8)
 800248a:	46bd      	mov	sp, r7
 800248c:	b009      	add	sp, #36	; 0x24
 800248e:	bd90      	pop	{r4, r7, pc}
 8002490:	40002800 	.word	0x40002800
 8002494:	40021000 	.word	0x40021000
 8002498:	48000800 	.word	0x48000800

0800249c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800249c:	b590      	push	{r4, r7, lr}
 800249e:	b08b      	sub	sp, #44	; 0x2c
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	2414      	movs	r4, #20
 80024a6:	193b      	adds	r3, r7, r4
 80024a8:	0018      	movs	r0, r3
 80024aa:	2314      	movs	r3, #20
 80024ac:	001a      	movs	r2, r3
 80024ae:	2100      	movs	r1, #0
 80024b0:	f003 facb 	bl	8005a4a <memset>
  if(hspi->Instance==SPI1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a1c      	ldr	r2, [pc, #112]	; (800252c <HAL_SPI_MspInit+0x90>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d132      	bne.n	8002524 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024be:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <HAL_SPI_MspInit+0x94>)
 80024c0:	699a      	ldr	r2, [r3, #24]
 80024c2:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <HAL_SPI_MspInit+0x94>)
 80024c4:	2180      	movs	r1, #128	; 0x80
 80024c6:	0149      	lsls	r1, r1, #5
 80024c8:	430a      	orrs	r2, r1
 80024ca:	619a      	str	r2, [r3, #24]
 80024cc:	4b18      	ldr	r3, [pc, #96]	; (8002530 <HAL_SPI_MspInit+0x94>)
 80024ce:	699a      	ldr	r2, [r3, #24]
 80024d0:	2380      	movs	r3, #128	; 0x80
 80024d2:	015b      	lsls	r3, r3, #5
 80024d4:	4013      	ands	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024da:	4b15      	ldr	r3, [pc, #84]	; (8002530 <HAL_SPI_MspInit+0x94>)
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	4b14      	ldr	r3, [pc, #80]	; (8002530 <HAL_SPI_MspInit+0x94>)
 80024e0:	2180      	movs	r1, #128	; 0x80
 80024e2:	0289      	lsls	r1, r1, #10
 80024e4:	430a      	orrs	r2, r1
 80024e6:	615a      	str	r2, [r3, #20]
 80024e8:	4b11      	ldr	r3, [pc, #68]	; (8002530 <HAL_SPI_MspInit+0x94>)
 80024ea:	695a      	ldr	r2, [r3, #20]
 80024ec:	2380      	movs	r3, #128	; 0x80
 80024ee:	029b      	lsls	r3, r3, #10
 80024f0:	4013      	ands	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80024f6:	0021      	movs	r1, r4
 80024f8:	187b      	adds	r3, r7, r1
 80024fa:	22a0      	movs	r2, #160	; 0xa0
 80024fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	187b      	adds	r3, r7, r1
 8002500:	2202      	movs	r2, #2
 8002502:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002504:	187b      	adds	r3, r7, r1
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800250a:	187b      	adds	r3, r7, r1
 800250c:	2203      	movs	r2, #3
 800250e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002510:	187b      	adds	r3, r7, r1
 8002512:	2200      	movs	r2, #0
 8002514:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002516:	187a      	adds	r2, r7, r1
 8002518:	2390      	movs	r3, #144	; 0x90
 800251a:	05db      	lsls	r3, r3, #23
 800251c:	0011      	movs	r1, r2
 800251e:	0018      	movs	r0, r3
 8002520:	f001 f9a6 	bl	8003870 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002524:	46c0      	nop			; (mov r8, r8)
 8002526:	46bd      	mov	sp, r7
 8002528:	b00b      	add	sp, #44	; 0x2c
 800252a:	bd90      	pop	{r4, r7, pc}
 800252c:	40013000 	.word	0x40013000
 8002530:	40021000 	.word	0x40021000

08002534 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a25      	ldr	r2, [pc, #148]	; (80025d8 <HAL_TIM_Base_MspInit+0xa4>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d10c      	bne.n	8002560 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002546:	4b25      	ldr	r3, [pc, #148]	; (80025dc <HAL_TIM_Base_MspInit+0xa8>)
 8002548:	69da      	ldr	r2, [r3, #28]
 800254a:	4b24      	ldr	r3, [pc, #144]	; (80025dc <HAL_TIM_Base_MspInit+0xa8>)
 800254c:	2120      	movs	r1, #32
 800254e:	430a      	orrs	r2, r1
 8002550:	61da      	str	r2, [r3, #28]
 8002552:	4b22      	ldr	r3, [pc, #136]	; (80025dc <HAL_TIM_Base_MspInit+0xa8>)
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	2220      	movs	r2, #32
 8002558:	4013      	ands	r3, r2
 800255a:	617b      	str	r3, [r7, #20]
 800255c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800255e:	e036      	b.n	80025ce <HAL_TIM_Base_MspInit+0x9a>
  else if(htim_base->Instance==TIM14)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a1e      	ldr	r2, [pc, #120]	; (80025e0 <HAL_TIM_Base_MspInit+0xac>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d116      	bne.n	8002598 <HAL_TIM_Base_MspInit+0x64>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800256a:	4b1c      	ldr	r3, [pc, #112]	; (80025dc <HAL_TIM_Base_MspInit+0xa8>)
 800256c:	69da      	ldr	r2, [r3, #28]
 800256e:	4b1b      	ldr	r3, [pc, #108]	; (80025dc <HAL_TIM_Base_MspInit+0xa8>)
 8002570:	2180      	movs	r1, #128	; 0x80
 8002572:	0049      	lsls	r1, r1, #1
 8002574:	430a      	orrs	r2, r1
 8002576:	61da      	str	r2, [r3, #28]
 8002578:	4b18      	ldr	r3, [pc, #96]	; (80025dc <HAL_TIM_Base_MspInit+0xa8>)
 800257a:	69da      	ldr	r2, [r3, #28]
 800257c:	2380      	movs	r3, #128	; 0x80
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 3, 0);
 8002586:	2200      	movs	r2, #0
 8002588:	2103      	movs	r1, #3
 800258a:	2013      	movs	r0, #19
 800258c:	f001 f92e 	bl	80037ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002590:	2013      	movs	r0, #19
 8002592:	f001 f940 	bl	8003816 <HAL_NVIC_EnableIRQ>
}
 8002596:	e01a      	b.n	80025ce <HAL_TIM_Base_MspInit+0x9a>
  else if(htim_base->Instance==TIM16)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a11      	ldr	r2, [pc, #68]	; (80025e4 <HAL_TIM_Base_MspInit+0xb0>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d115      	bne.n	80025ce <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80025a2:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <HAL_TIM_Base_MspInit+0xa8>)
 80025a4:	699a      	ldr	r2, [r3, #24]
 80025a6:	4b0d      	ldr	r3, [pc, #52]	; (80025dc <HAL_TIM_Base_MspInit+0xa8>)
 80025a8:	2180      	movs	r1, #128	; 0x80
 80025aa:	0289      	lsls	r1, r1, #10
 80025ac:	430a      	orrs	r2, r1
 80025ae:	619a      	str	r2, [r3, #24]
 80025b0:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <HAL_TIM_Base_MspInit+0xa8>)
 80025b2:	699a      	ldr	r2, [r3, #24]
 80025b4:	2380      	movs	r3, #128	; 0x80
 80025b6:	029b      	lsls	r3, r3, #10
 80025b8:	4013      	ands	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 3, 0);
 80025be:	2200      	movs	r2, #0
 80025c0:	2103      	movs	r1, #3
 80025c2:	2015      	movs	r0, #21
 80025c4:	f001 f912 	bl	80037ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80025c8:	2015      	movs	r0, #21
 80025ca:	f001 f924 	bl	8003816 <HAL_NVIC_EnableIRQ>
}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	46bd      	mov	sp, r7
 80025d2:	b006      	add	sp, #24
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	40001400 	.word	0x40001400
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40002000 	.word	0x40002000
 80025e4:	40014400 	.word	0x40014400

080025e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025ec:	e7fe      	b.n	80025ec <NMI_Handler+0x4>

080025ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025f2:	e7fe      	b.n	80025f2 <HardFault_Handler+0x4>

080025f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80025f8:	46c0      	nop			; (mov r8, r8)
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800260c:	f000 fa30 	bl	8002a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002610:	46c0      	nop			; (mov r8, r8)
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800261e:	2380      	movs	r3, #128	; 0x80
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	0018      	movs	r0, r3
 8002624:	f001 fab2 	bl	8003b8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */
	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn); //FOR BUTTON DEBOUNCE
 8002628:	2007      	movs	r0, #7
 800262a:	f001 f904 	bl	8003836 <HAL_NVIC_DisableIRQ>

	HAL_TIM_Base_Start_IT(&htim7);		//STARTING 5 SECS CONTDOWN
 800262e:	4b15      	ldr	r3, [pc, #84]	; (8002684 <EXTI4_15_IRQHandler+0x6c>)
 8002630:	0018      	movs	r0, r3
 8002632:	f002 ff99 	bl	8005568 <HAL_TIM_Base_Start_IT>
	htim7.Instance->CNT=0;				//NULLIFY THE COUNTER
 8002636:	4b13      	ldr	r3, [pc, #76]	; (8002684 <EXTI4_15_IRQHandler+0x6c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2200      	movs	r2, #0
 800263c:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_ResumeTick();					//WAKE THE CPU UP
 800263e:	f000 fa65 	bl	8002b0c <HAL_ResumeTick>

	HAL_ADC_Start_IT(&hadc);			//STARTING ADC CONVERSIONS WITH IT
 8002642:	4b11      	ldr	r3, [pc, #68]	; (8002688 <EXTI4_15_IRQHandler+0x70>)
 8002644:	0018      	movs	r0, r3
 8002646:	f000 fc47 	bl	8002ed8 <HAL_ADC_Start_IT>

	nextOrPrev=CURRENT;					//STARTING PAGE IS CURRENT
 800264a:	4b10      	ldr	r3, [pc, #64]	; (800268c <EXTI4_15_IRQHandler+0x74>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
	nextPage();
 8002650:	f7fd fdee 	bl	8000230 <nextPage>

	ssd1306_SetDisplayOn(1);			//DISPLAY SET ON
 8002654:	2001      	movs	r0, #1
 8002656:	f7ff fe5b 	bl	8002310 <ssd1306_SetDisplayOn>
	//allowNextSubPage=0;

	pressButton();
 800265a:	f7fe fbe5 	bl	8000e28 <pressButton>
	selectPage();						//SELECT THE CURRENT PAGE
 800265e:	f7fe f8fd 	bl	800085c <selectPage>


	for(int i=0; i<350000; i++){};	//BUTTON DEBOUNCE DELAY
 8002662:	2300      	movs	r3, #0
 8002664:	607b      	str	r3, [r7, #4]
 8002666:	e002      	b.n	800266e <EXTI4_15_IRQHandler+0x56>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3301      	adds	r3, #1
 800266c:	607b      	str	r3, [r7, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a07      	ldr	r2, [pc, #28]	; (8002690 <EXTI4_15_IRQHandler+0x78>)
 8002672:	4293      	cmp	r3, r2
 8002674:	ddf8      	ble.n	8002668 <EXTI4_15_IRQHandler+0x50>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);	//DEBOUNCE DISABLED
 8002676:	2007      	movs	r0, #7
 8002678:	f001 f8cd 	bl	8003816 <HAL_NVIC_EnableIRQ>
  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800267c:	46c0      	nop			; (mov r8, r8)
 800267e:	46bd      	mov	sp, r7
 8002680:	b002      	add	sp, #8
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20000670 	.word	0x20000670
 8002688:	200005ac 	.word	0x200005ac
 800268c:	20000004 	.word	0x20000004
 8002690:	0005572f 	.word	0x0005572f

08002694 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
	HAL_ADC_IRQHandler(&hadc);
 800269a:	4b40      	ldr	r3, [pc, #256]	; (800279c <ADC1_IRQHandler+0x108>)
 800269c:	0018      	movs	r0, r3
 800269e:	f000 fce3 	bl	8003068 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */
  	  adcConverted=63;
 80026a2:	4b3f      	ldr	r3, [pc, #252]	; (80027a0 <ADC1_IRQHandler+0x10c>)
 80026a4:	223f      	movs	r2, #63	; 0x3f
 80026a6:	601a      	str	r2, [r3, #0]
	  HAL_ADC_PollForConversion(&hadc, 50);
 80026a8:	4b3c      	ldr	r3, [pc, #240]	; (800279c <ADC1_IRQHandler+0x108>)
 80026aa:	2132      	movs	r1, #50	; 0x32
 80026ac:	0018      	movs	r0, r3
 80026ae:	f000 fb7b 	bl	8002da8 <HAL_ADC_PollForConversion>
	  adcConverted=HAL_ADC_GetValue(&hadc);
 80026b2:	4b3a      	ldr	r3, [pc, #232]	; (800279c <ADC1_IRQHandler+0x108>)
 80026b4:	0018      	movs	r0, r3
 80026b6:	f000 fccb 	bl	8003050 <HAL_ADC_GetValue>
 80026ba:	0002      	movs	r2, r0
 80026bc:	4b38      	ldr	r3, [pc, #224]	; (80027a0 <ADC1_IRQHandler+0x10c>)
 80026be:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop_IT(&hadc);
 80026c0:	4b36      	ldr	r3, [pc, #216]	; (800279c <ADC1_IRQHandler+0x108>)
 80026c2:	0018      	movs	r0, r3
 80026c4:	f000 fc7a 	bl	8002fbc <HAL_ADC_Stop_IT>

	  if(adcConverted>13){}
 80026c8:	4b35      	ldr	r3, [pc, #212]	; (80027a0 <ADC1_IRQHandler+0x10c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b0d      	cmp	r3, #13
 80026ce:	d852      	bhi.n	8002776 <ADC1_IRQHandler+0xe2>

	  else if (adcConverted<2){			//BUTTON 3	(BACK)3
 80026d0:	4b33      	ldr	r3, [pc, #204]	; (80027a0 <ADC1_IRQHandler+0x10c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d823      	bhi.n	8002720 <ADC1_IRQHandler+0x8c>
		htim7.Instance->CNT=0;
 80026d8:	4b32      	ldr	r3, [pc, #200]	; (80027a4 <ADC1_IRQHandler+0x110>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2200      	movs	r2, #0
 80026de:	625a      	str	r2, [r3, #36]	; 0x24
		htim7.Instance->ARR=20000;
 80026e0:	4b30      	ldr	r3, [pc, #192]	; (80027a4 <ADC1_IRQHandler+0x110>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a30      	ldr	r2, [pc, #192]	; (80027a8 <ADC1_IRQHandler+0x114>)
 80026e6:	62da      	str	r2, [r3, #44]	; 0x2c
		nextPage();
 80026e8:	f7fd fda2 	bl	8000230 <nextPage>
		canChooseButton=0;
 80026ec:	4b2f      	ldr	r3, [pc, #188]	; (80027ac <ADC1_IRQHandler+0x118>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
		unselectPage();
 80026f2:	f7fe f9b5 	bl	8000a60 <unselectPage>
		unselectSubPage();
 80026f6:	f7fe fa05 	bl	8000b04 <unselectSubPage>
		allowCalibTime=0;
 80026fa:	4b2d      	ldr	r3, [pc, #180]	; (80027b0 <ADC1_IRQHandler+0x11c>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
		allowSelectCalibTime=0;
 8002700:	4b2c      	ldr	r3, [pc, #176]	; (80027b4 <ADC1_IRQHandler+0x120>)
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
		allowCursorCalibTime=0;
 8002706:	4b2c      	ldr	r3, [pc, #176]	; (80027b8 <ADC1_IRQHandler+0x124>)
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
		allowSelectSPButton=0;
 800270c:	4b2b      	ldr	r3, [pc, #172]	; (80027bc <ADC1_IRQHandler+0x128>)
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
		allowAdjust=0;
 8002712:	4b2b      	ldr	r3, [pc, #172]	; (80027c0 <ADC1_IRQHandler+0x12c>)
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
		allowMove=1;
 8002718:	4b2a      	ldr	r3, [pc, #168]	; (80027c4 <ADC1_IRQHandler+0x130>)
 800271a:	2201      	movs	r2, #1
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	e02a      	b.n	8002776 <ADC1_IRQHandler+0xe2>
	  }
	  else if (adcConverted<7){		//BUTTON 2	(RIGHT/DOWN) 12
 8002720:	4b1f      	ldr	r3, [pc, #124]	; (80027a0 <ADC1_IRQHandler+0x10c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b06      	cmp	r3, #6
 8002726:	d813      	bhi.n	8002750 <ADC1_IRQHandler+0xbc>
		nextOrPrev=PREV;
 8002728:	4b27      	ldr	r3, [pc, #156]	; (80027c8 <ADC1_IRQHandler+0x134>)
 800272a:	2201      	movs	r2, #1
 800272c:	601a      	str	r2, [r3, #0]
		nextPage();
 800272e:	f7fd fd7f 	bl	8000230 <nextPage>
		moveCursor();
 8002732:	f7fd ff4b 	bl	80005cc <moveCursor>

		moveSPCursor();
 8002736:	f7fd ffc3 	bl	80006c0 <moveSPCursor>
		adjustTime();
 800273a:	f7fe fcbb 	bl	80010b4 <adjustTime>

		htim7.Instance->CNT=0;
 800273e:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <ADC1_IRQHandler+0x110>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2200      	movs	r2, #0
 8002744:	625a      	str	r2, [r3, #36]	; 0x24
		htim7.Instance->ARR=20000;
 8002746:	4b17      	ldr	r3, [pc, #92]	; (80027a4 <ADC1_IRQHandler+0x110>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a17      	ldr	r2, [pc, #92]	; (80027a8 <ADC1_IRQHandler+0x114>)
 800274c:	62da      	str	r2, [r3, #44]	; 0x2c
 800274e:	e012      	b.n	8002776 <ADC1_IRQHandler+0xe2>
	  }
	  else {							//BUTTON 1	(LEFT/UP)[if (adcConverted<24||adcConverted>11)]
		nextOrPrev=NEXT;
 8002750:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <ADC1_IRQHandler+0x134>)
 8002752:	2202      	movs	r2, #2
 8002754:	601a      	str	r2, [r3, #0]
		moveCursor();
 8002756:	f7fd ff39 	bl	80005cc <moveCursor>
		nextPage();
 800275a:	f7fd fd69 	bl	8000230 <nextPage>

		moveSPCursor();
 800275e:	f7fd ffaf 	bl	80006c0 <moveSPCursor>
		adjustTime();
 8002762:	f7fe fca7 	bl	80010b4 <adjustTime>

		htim7.Instance->CNT=0;
 8002766:	4b0f      	ldr	r3, [pc, #60]	; (80027a4 <ADC1_IRQHandler+0x110>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2200      	movs	r2, #0
 800276c:	625a      	str	r2, [r3, #36]	; 0x24
		htim7.Instance->ARR=20000;
 800276e:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <ADC1_IRQHandler+0x110>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a0d      	ldr	r2, [pc, #52]	; (80027a8 <ADC1_IRQHandler+0x114>)
 8002774:	62da      	str	r2, [r3, #44]	; 0x2c
	  }
for(int i=0; i<350000; i++){};
 8002776:	2300      	movs	r3, #0
 8002778:	607b      	str	r3, [r7, #4]
 800277a:	e002      	b.n	8002782 <ADC1_IRQHandler+0xee>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3301      	adds	r3, #1
 8002780:	607b      	str	r3, [r7, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a11      	ldr	r2, [pc, #68]	; (80027cc <ADC1_IRQHandler+0x138>)
 8002786:	4293      	cmp	r3, r2
 8002788:	ddf8      	ble.n	800277c <ADC1_IRQHandler+0xe8>


		HAL_ADC_Start_IT(&hadc);
 800278a:	4b04      	ldr	r3, [pc, #16]	; (800279c <ADC1_IRQHandler+0x108>)
 800278c:	0018      	movs	r0, r3
 800278e:	f000 fba3 	bl	8002ed8 <HAL_ADC_Start_IT>
	 //checkTime();
	 //ssd1306_SetCursor(2, 52);
	 //displayTime();
	 //ssd1306_UpdateScreen();
  /* USER CODE END ADC1_IRQn 1 */
}
 8002792:	46c0      	nop			; (mov r8, r8)
 8002794:	46bd      	mov	sp, r7
 8002796:	b002      	add	sp, #8
 8002798:	bd80      	pop	{r7, pc}
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	200005ac 	.word	0x200005ac
 80027a0:	200004e4 	.word	0x200004e4
 80027a4:	20000670 	.word	0x20000670
 80027a8:	00004e20 	.word	0x00004e20
 80027ac:	20000578 	.word	0x20000578
 80027b0:	20000594 	.word	0x20000594
 80027b4:	20000598 	.word	0x20000598
 80027b8:	2000059c 	.word	0x2000059c
 80027bc:	200005a0 	.word	0x200005a0
 80027c0:	200005a4 	.word	0x200005a4
 80027c4:	200004cc 	.word	0x200004cc
 80027c8:	20000004 	.word	0x20000004
 80027cc:	0005572f 	.word	0x0005572f

080027d0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80027d6:	4b33      	ldr	r3, [pc, #204]	; (80028a4 <TIM7_IRQHandler+0xd4>)
 80027d8:	0018      	movs	r0, r3
 80027da:	f002 ff3f 	bl	800565c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
		HAL_TIM_Base_Stop_IT(&htim7);
 80027de:	4b31      	ldr	r3, [pc, #196]	; (80028a4 <TIM7_IRQHandler+0xd4>)
 80027e0:	0018      	movs	r0, r3
 80027e2:	f002 ff0d 	bl	8005600 <HAL_TIM_Base_Stop_IT>
		HAL_ADC_Stop_IT(&hadc);
 80027e6:	4b30      	ldr	r3, [pc, #192]	; (80028a8 <TIM7_IRQHandler+0xd8>)
 80027e8:	0018      	movs	r0, r3
 80027ea:	f000 fbe7 	bl	8002fbc <HAL_ADC_Stop_IT>
		ssd1306_SetDisplayOn(0);
 80027ee:	2000      	movs	r0, #0
 80027f0:	f7ff fd8e 	bl	8002310 <ssd1306_SetDisplayOn>

		htim7.Instance->ARR=5000;
 80027f4:	4b2b      	ldr	r3, [pc, #172]	; (80028a4 <TIM7_IRQHandler+0xd4>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a2c      	ldr	r2, [pc, #176]	; (80028ac <TIM7_IRQHandler+0xdc>)
 80027fa:	62da      	str	r2, [r3, #44]	; 0x2c
		htim7.Instance->CNT=0;
 80027fc:	4b29      	ldr	r3, [pc, #164]	; (80028a4 <TIM7_IRQHandler+0xd4>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2200      	movs	r2, #0
 8002802:	625a      	str	r2, [r3, #36]	; 0x24

		nextOrPrev=CURRENT;
 8002804:	4b2a      	ldr	r3, [pc, #168]	; (80028b0 <TIM7_IRQHandler+0xe0>)
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
		allowNextPage=1;
 800280a:	4b2a      	ldr	r3, [pc, #168]	; (80028b4 <TIM7_IRQHandler+0xe4>)
 800280c:	2201      	movs	r2, #1
 800280e:	601a      	str	r2, [r3, #0]
		page1.selected=0;
 8002810:	4b29      	ldr	r3, [pc, #164]	; (80028b8 <TIM7_IRQHandler+0xe8>)
 8002812:	2200      	movs	r2, #0
 8002814:	605a      	str	r2, [r3, #4]
		page2.selected=0;
 8002816:	4b29      	ldr	r3, [pc, #164]	; (80028bc <TIM7_IRQHandler+0xec>)
 8002818:	2200      	movs	r2, #0
 800281a:	605a      	str	r2, [r3, #4]
		page3.selected=0;
 800281c:	4b28      	ldr	r3, [pc, #160]	; (80028c0 <TIM7_IRQHandler+0xf0>)
 800281e:	2200      	movs	r2, #0
 8002820:	605a      	str	r2, [r3, #4]
		currentPage= &page1;
 8002822:	4b28      	ldr	r3, [pc, #160]	; (80028c4 <TIM7_IRQHandler+0xf4>)
 8002824:	4a24      	ldr	r2, [pc, #144]	; (80028b8 <TIM7_IRQHandler+0xe8>)
 8002826:	601a      	str	r2, [r3, #0]
		currentPage->buttonMenu[0].selected=0;
 8002828:	4b26      	ldr	r3, [pc, #152]	; (80028c4 <TIM7_IRQHandler+0xf4>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2200      	movs	r2, #0
 800282e:	669a      	str	r2, [r3, #104]	; 0x68
		currentPage->buttonMenu[1].selected=0;
 8002830:	4b24      	ldr	r3, [pc, #144]	; (80028c4 <TIM7_IRQHandler+0xf4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	22a0      	movs	r2, #160	; 0xa0
 8002836:	2100      	movs	r1, #0
 8002838:	5099      	str	r1, [r3, r2]
		currentPage->buttonMenu[2].selected=0;
 800283a:	4b22      	ldr	r3, [pc, #136]	; (80028c4 <TIM7_IRQHandler+0xf4>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	22d8      	movs	r2, #216	; 0xd8
 8002840:	2100      	movs	r1, #0
 8002842:	5099      	str	r1, [r3, r2]
		currentPage->currentButton=0;
 8002844:	4b1f      	ldr	r3, [pc, #124]	; (80028c4 <TIM7_IRQHandler+0xf4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	22e8      	movs	r2, #232	; 0xe8
 800284a:	2100      	movs	r1, #0
 800284c:	5099      	str	r1, [r3, r2]
		currentSubPage->selected=0;
 800284e:	4b1e      	ldr	r3, [pc, #120]	; (80028c8 <TIM7_IRQHandler+0xf8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2200      	movs	r2, #0
 8002854:	605a      	str	r2, [r3, #4]
		allowCalibTime=0;
 8002856:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <TIM7_IRQHandler+0xfc>)
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
		allowSelectCalibTime=0;
 800285c:	4b1c      	ldr	r3, [pc, #112]	; (80028d0 <TIM7_IRQHandler+0x100>)
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
		allowCursorCalibTime=0;
 8002862:	4b1c      	ldr	r3, [pc, #112]	; (80028d4 <TIM7_IRQHandler+0x104>)
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
		allowSelectSPButton=0;
 8002868:	4b1b      	ldr	r3, [pc, #108]	; (80028d8 <TIM7_IRQHandler+0x108>)
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
		allowMove=1;
 800286e:	4b1b      	ldr	r3, [pc, #108]	; (80028dc <TIM7_IRQHandler+0x10c>)
 8002870:	2201      	movs	r2, #1
 8002872:	601a      	str	r2, [r3, #0]
		allowAdjust=0;
 8002874:	4b1a      	ldr	r3, [pc, #104]	; (80028e0 <TIM7_IRQHandler+0x110>)
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, SYN115_DATA_Pin , GPIO_PIN_RESET);
 800287a:	2390      	movs	r3, #144	; 0x90
 800287c:	05db      	lsls	r3, r3, #23
 800287e:	2200      	movs	r2, #0
 8002880:	2104      	movs	r1, #4
 8002882:	0018      	movs	r0, r3
 8002884:	f001 f964 	bl	8003b50 <HAL_GPIO_WritePin>
		ssd1306_FillRectangle(0, 10, 5, 54, 0x00);
 8002888:	2300      	movs	r3, #0
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	2336      	movs	r3, #54	; 0x36
 800288e:	2205      	movs	r2, #5
 8002890:	210a      	movs	r1, #10
 8002892:	2000      	movs	r0, #0
 8002894:	f7ff fc9c 	bl	80021d0 <ssd1306_FillRectangle>

		HAL_SuspendTick();
 8002898:	f000 f92a 	bl	8002af0 <HAL_SuspendTick>
   // HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
  /* USER CODE END TIM7_IRQn 1 */
}
 800289c:	46c0      	nop			; (mov r8, r8)
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	20000670 	.word	0x20000670
 80028a8:	200005ac 	.word	0x200005ac
 80028ac:	00001388 	.word	0x00001388
 80028b0:	20000004 	.word	0x20000004
 80028b4:	20000000 	.word	0x20000000
 80028b8:	20000008 	.word	0x20000008
 80028bc:	200000f4 	.word	0x200000f4
 80028c0:	200001e0 	.word	0x200001e0
 80028c4:	200004b8 	.word	0x200004b8
 80028c8:	200004bc 	.word	0x200004bc
 80028cc:	20000594 	.word	0x20000594
 80028d0:	20000598 	.word	0x20000598
 80028d4:	2000059c 	.word	0x2000059c
 80028d8:	200005a0 	.word	0x200005a0
 80028dc:	200004cc 	.word	0x200004cc
 80028e0:	200005a4 	.word	0x200005a4

080028e4 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80028e8:	4b03      	ldr	r3, [pc, #12]	; (80028f8 <TIM14_IRQHandler+0x14>)
 80028ea:	0018      	movs	r0, r3
 80028ec:	f002 feb6 	bl	800565c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80028f0:	46c0      	nop			; (mov r8, r8)
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	200006b8 	.word	0x200006b8

080028fc <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002900:	4b03      	ldr	r3, [pc, #12]	; (8002910 <TIM16_IRQHandler+0x14>)
 8002902:	0018      	movs	r0, r3
 8002904:	f002 feaa 	bl	800565c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002908:	46c0      	nop			; (mov r8, r8)
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	20000700 	.word	0x20000700

08002914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800291c:	4a14      	ldr	r2, [pc, #80]	; (8002970 <_sbrk+0x5c>)
 800291e:	4b15      	ldr	r3, [pc, #84]	; (8002974 <_sbrk+0x60>)
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002928:	4b13      	ldr	r3, [pc, #76]	; (8002978 <_sbrk+0x64>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d102      	bne.n	8002936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002930:	4b11      	ldr	r3, [pc, #68]	; (8002978 <_sbrk+0x64>)
 8002932:	4a12      	ldr	r2, [pc, #72]	; (800297c <_sbrk+0x68>)
 8002934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002936:	4b10      	ldr	r3, [pc, #64]	; (8002978 <_sbrk+0x64>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	18d3      	adds	r3, r2, r3
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	429a      	cmp	r2, r3
 8002942:	d207      	bcs.n	8002954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002944:	f003 f84e 	bl	80059e4 <__errno>
 8002948:	0003      	movs	r3, r0
 800294a:	220c      	movs	r2, #12
 800294c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800294e:	2301      	movs	r3, #1
 8002950:	425b      	negs	r3, r3
 8002952:	e009      	b.n	8002968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002954:	4b08      	ldr	r3, [pc, #32]	; (8002978 <_sbrk+0x64>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800295a:	4b07      	ldr	r3, [pc, #28]	; (8002978 <_sbrk+0x64>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	18d2      	adds	r2, r2, r3
 8002962:	4b05      	ldr	r3, [pc, #20]	; (8002978 <_sbrk+0x64>)
 8002964:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002966:	68fb      	ldr	r3, [r7, #12]
}
 8002968:	0018      	movs	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	b006      	add	sp, #24
 800296e:	bd80      	pop	{r7, pc}
 8002970:	20008000 	.word	0x20008000
 8002974:	00000600 	.word	0x00000600
 8002978:	20000b68 	.word	0x20000b68
 800297c:	20000b80 	.word	0x20000b80

08002980 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002984:	46c0      	nop			; (mov r8, r8)
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800298c:	480d      	ldr	r0, [pc, #52]	; (80029c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800298e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002990:	f7ff fff6 	bl	8002980 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002994:	480c      	ldr	r0, [pc, #48]	; (80029c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002996:	490d      	ldr	r1, [pc, #52]	; (80029cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002998:	4a0d      	ldr	r2, [pc, #52]	; (80029d0 <LoopForever+0xe>)
  movs r3, #0
 800299a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800299c:	e002      	b.n	80029a4 <LoopCopyDataInit>

0800299e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800299e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029a2:	3304      	adds	r3, #4

080029a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029a8:	d3f9      	bcc.n	800299e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029aa:	4a0a      	ldr	r2, [pc, #40]	; (80029d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029ac:	4c0a      	ldr	r4, [pc, #40]	; (80029d8 <LoopForever+0x16>)
  movs r3, #0
 80029ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029b0:	e001      	b.n	80029b6 <LoopFillZerobss>

080029b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029b4:	3204      	adds	r2, #4

080029b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029b8:	d3fb      	bcc.n	80029b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80029ba:	f003 f819 	bl	80059f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029be:	f7fe fddf 	bl	8001580 <main>

080029c2 <LoopForever>:

LoopForever:
    b LoopForever
 80029c2:	e7fe      	b.n	80029c2 <LoopForever>
  ldr   r0, =_estack
 80029c4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80029c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029cc:	20000558 	.word	0x20000558
  ldr r2, =_sidata
 80029d0:	08006af8 	.word	0x08006af8
  ldr r2, =_sbss
 80029d4:	20000558 	.word	0x20000558
  ldr r4, =_ebss
 80029d8:	20000b80 	.word	0x20000b80

080029dc <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029dc:	e7fe      	b.n	80029dc <DMA1_Channel1_IRQHandler>
	...

080029e0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029e4:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <HAL_Init+0x24>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <HAL_Init+0x24>)
 80029ea:	2110      	movs	r1, #16
 80029ec:	430a      	orrs	r2, r1
 80029ee:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80029f0:	2003      	movs	r0, #3
 80029f2:	f000 f809 	bl	8002a08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029f6:	f7ff fcb1 	bl	800235c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	0018      	movs	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	40022000 	.word	0x40022000

08002a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a08:	b590      	push	{r4, r7, lr}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a10:	4b14      	ldr	r3, [pc, #80]	; (8002a64 <HAL_InitTick+0x5c>)
 8002a12:	681c      	ldr	r4, [r3, #0]
 8002a14:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <HAL_InitTick+0x60>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	0019      	movs	r1, r3
 8002a1a:	23fa      	movs	r3, #250	; 0xfa
 8002a1c:	0098      	lsls	r0, r3, #2
 8002a1e:	f7fd fb7b 	bl	8000118 <__udivsi3>
 8002a22:	0003      	movs	r3, r0
 8002a24:	0019      	movs	r1, r3
 8002a26:	0020      	movs	r0, r4
 8002a28:	f7fd fb76 	bl	8000118 <__udivsi3>
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f000 ff11 	bl	8003856 <HAL_SYSTICK_Config>
 8002a34:	1e03      	subs	r3, r0, #0
 8002a36:	d001      	beq.n	8002a3c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e00f      	b.n	8002a5c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d80b      	bhi.n	8002a5a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	2301      	movs	r3, #1
 8002a46:	425b      	negs	r3, r3
 8002a48:	2200      	movs	r2, #0
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f000 fece 	bl	80037ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a50:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <HAL_InitTick+0x64>)
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	e000      	b.n	8002a5c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
}
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b003      	add	sp, #12
 8002a62:	bd90      	pop	{r4, r7, pc}
 8002a64:	200004e8 	.word	0x200004e8
 8002a68:	200004f0 	.word	0x200004f0
 8002a6c:	200004ec 	.word	0x200004ec

08002a70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a74:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <HAL_IncTick+0x1c>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	001a      	movs	r2, r3
 8002a7a:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <HAL_IncTick+0x20>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	18d2      	adds	r2, r2, r3
 8002a80:	4b03      	ldr	r3, [pc, #12]	; (8002a90 <HAL_IncTick+0x20>)
 8002a82:	601a      	str	r2, [r3, #0]
}
 8002a84:	46c0      	nop			; (mov r8, r8)
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	200004f0 	.word	0x200004f0
 8002a90:	20000b6c 	.word	0x20000b6c

08002a94 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  return uwTick;
 8002a98:	4b02      	ldr	r3, [pc, #8]	; (8002aa4 <HAL_GetTick+0x10>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
}
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	20000b6c 	.word	0x20000b6c

08002aa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ab0:	f7ff fff0 	bl	8002a94 <HAL_GetTick>
 8002ab4:	0003      	movs	r3, r0
 8002ab6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	d005      	beq.n	8002ace <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <HAL_Delay+0x44>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	001a      	movs	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	189b      	adds	r3, r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	f7ff ffe0 	bl	8002a94 <HAL_GetTick>
 8002ad4:	0002      	movs	r2, r0
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d8f7      	bhi.n	8002ad0 <HAL_Delay+0x28>
  {
  }
}
 8002ae0:	46c0      	nop			; (mov r8, r8)
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	b004      	add	sp, #16
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	200004f0 	.word	0x200004f0

08002af0 <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8002af4:	4b04      	ldr	r3, [pc, #16]	; (8002b08 <HAL_SuspendTick+0x18>)
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	4b03      	ldr	r3, [pc, #12]	; (8002b08 <HAL_SuspendTick+0x18>)
 8002afa:	2102      	movs	r1, #2
 8002afc:	438a      	bics	r2, r1
 8002afe:	601a      	str	r2, [r3, #0]
}
 8002b00:	46c0      	nop			; (mov r8, r8)
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	e000e010 	.word	0xe000e010

08002b0c <HAL_ResumeTick>:
  * @note This function is declared as __weak  to be overwritten  in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8002b10:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <HAL_ResumeTick+0x18>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4b03      	ldr	r3, [pc, #12]	; (8002b24 <HAL_ResumeTick+0x18>)
 8002b16:	2102      	movs	r1, #2
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	601a      	str	r2, [r3, #0]
}
 8002b1c:	46c0      	nop			; (mov r8, r8)
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	e000e010 	.word	0xe000e010

08002b28 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b30:	230f      	movs	r3, #15
 8002b32:	18fb      	adds	r3, r7, r3
 8002b34:	2200      	movs	r2, #0
 8002b36:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e125      	b.n	8002d92 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10a      	bne.n	8002b64 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2234      	movs	r2, #52	; 0x34
 8002b58:	2100      	movs	r1, #0
 8002b5a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f7ff fc20 	bl	80023a4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b68:	2210      	movs	r2, #16
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d000      	beq.n	8002b70 <HAL_ADC_Init+0x48>
 8002b6e:	e103      	b.n	8002d78 <HAL_ADC_Init+0x250>
 8002b70:	230f      	movs	r3, #15
 8002b72:	18fb      	adds	r3, r7, r3
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d000      	beq.n	8002b7c <HAL_ADC_Init+0x54>
 8002b7a:	e0fd      	b.n	8002d78 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2204      	movs	r2, #4
 8002b84:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002b86:	d000      	beq.n	8002b8a <HAL_ADC_Init+0x62>
 8002b88:	e0f6      	b.n	8002d78 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8e:	4a83      	ldr	r2, [pc, #524]	; (8002d9c <HAL_ADC_Init+0x274>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	2202      	movs	r2, #2
 8002b94:	431a      	orrs	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2203      	movs	r2, #3
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d112      	bne.n	8002bce <HAL_ADC_Init+0xa6>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d009      	beq.n	8002bca <HAL_ADC_Init+0xa2>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	2380      	movs	r3, #128	; 0x80
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	401a      	ands	r2, r3
 8002bc2:	2380      	movs	r3, #128	; 0x80
 8002bc4:	021b      	lsls	r3, r3, #8
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d101      	bne.n	8002bce <HAL_ADC_Init+0xa6>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <HAL_ADC_Init+0xa8>
 8002bce:	2300      	movs	r3, #0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d116      	bne.n	8002c02 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	2218      	movs	r2, #24
 8002bdc:	4393      	bics	r3, r2
 8002bde:	0019      	movs	r1, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	0899      	lsrs	r1, r3, #2
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4964      	ldr	r1, [pc, #400]	; (8002da0 <HAL_ADC_Init+0x278>)
 8002c0e:	400a      	ands	r2, r1
 8002c10:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	7e1b      	ldrb	r3, [r3, #24]
 8002c16:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	7e5b      	ldrb	r3, [r3, #25]
 8002c1c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c1e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	7e9b      	ldrb	r3, [r3, #26]
 8002c24:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002c26:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d002      	beq.n	8002c36 <HAL_ADC_Init+0x10e>
 8002c30:	2380      	movs	r3, #128	; 0x80
 8002c32:	015b      	lsls	r3, r3, #5
 8002c34:	e000      	b.n	8002c38 <HAL_ADC_Init+0x110>
 8002c36:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002c38:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002c3e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d101      	bne.n	8002c4c <HAL_ADC_Init+0x124>
 8002c48:	2304      	movs	r3, #4
 8002c4a:	e000      	b.n	8002c4e <HAL_ADC_Init+0x126>
 8002c4c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002c4e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2124      	movs	r1, #36	; 0x24
 8002c54:	5c5b      	ldrb	r3, [r3, r1]
 8002c56:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002c58:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	7edb      	ldrb	r3, [r3, #27]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d115      	bne.n	8002c94 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	7e9b      	ldrb	r3, [r3, #26]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d105      	bne.n	8002c7c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2280      	movs	r2, #128	; 0x80
 8002c74:	0252      	lsls	r2, r2, #9
 8002c76:	4313      	orrs	r3, r2
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	e00b      	b.n	8002c94 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c80:	2220      	movs	r2, #32
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	69da      	ldr	r2, [r3, #28]
 8002c98:	23c2      	movs	r3, #194	; 0xc2
 8002c9a:	33ff      	adds	r3, #255	; 0xff
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d007      	beq.n	8002cb0 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68d9      	ldr	r1, [r3, #12]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	055b      	lsls	r3, r3, #21
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d01b      	beq.n	8002d04 <HAL_ADC_Init+0x1dc>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d017      	beq.n	8002d04 <HAL_ADC_Init+0x1dc>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d013      	beq.n	8002d04 <HAL_ADC_Init+0x1dc>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d00f      	beq.n	8002d04 <HAL_ADC_Init+0x1dc>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d00b      	beq.n	8002d04 <HAL_ADC_Init+0x1dc>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	2b05      	cmp	r3, #5
 8002cf2:	d007      	beq.n	8002d04 <HAL_ADC_Init+0x1dc>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	2b06      	cmp	r3, #6
 8002cfa:	d003      	beq.n	8002d04 <HAL_ADC_Init+0x1dc>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d00:	2b07      	cmp	r3, #7
 8002d02:	d112      	bne.n	8002d2a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695a      	ldr	r2, [r3, #20]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2107      	movs	r1, #7
 8002d10:	438a      	bics	r2, r1
 8002d12:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6959      	ldr	r1, [r3, #20]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1e:	2207      	movs	r2, #7
 8002d20:	401a      	ands	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	4a1c      	ldr	r2, [pc, #112]	; (8002da4 <HAL_ADC_Init+0x27c>)
 8002d32:	4013      	ands	r3, r2
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d10b      	bne.n	8002d52 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d44:	2203      	movs	r2, #3
 8002d46:	4393      	bics	r3, r2
 8002d48:	2201      	movs	r2, #1
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d50:	e01c      	b.n	8002d8c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d56:	2212      	movs	r2, #18
 8002d58:	4393      	bics	r3, r2
 8002d5a:	2210      	movs	r2, #16
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d66:	2201      	movs	r2, #1
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002d6e:	230f      	movs	r3, #15
 8002d70:	18fb      	adds	r3, r7, r3
 8002d72:	2201      	movs	r2, #1
 8002d74:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d76:	e009      	b.n	8002d8c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7c:	2210      	movs	r2, #16
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002d84:	230f      	movs	r3, #15
 8002d86:	18fb      	adds	r3, r7, r3
 8002d88:	2201      	movs	r2, #1
 8002d8a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d8c:	230f      	movs	r3, #15
 8002d8e:	18fb      	adds	r3, r7, r3
 8002d90:	781b      	ldrb	r3, [r3, #0]
}
 8002d92:	0018      	movs	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	b004      	add	sp, #16
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	fffffefd 	.word	0xfffffefd
 8002da0:	fffe0219 	.word	0xfffe0219
 8002da4:	833fffe7 	.word	0x833fffe7

08002da8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d102      	bne.n	8002dc0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002dba:	2308      	movs	r3, #8
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	e014      	b.n	8002dea <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d10b      	bne.n	8002de6 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2234      	movs	r2, #52	; 0x34
 8002dde:	2100      	movs	r1, #0
 8002de0:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e071      	b.n	8002eca <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002de6:	230c      	movs	r3, #12
 8002de8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002dea:	f7ff fe53 	bl	8002a94 <HAL_GetTick>
 8002dee:	0003      	movs	r3, r0
 8002df0:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002df2:	e01f      	b.n	8002e34 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	3301      	adds	r3, #1
 8002df8:	d01c      	beq.n	8002e34 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d007      	beq.n	8002e10 <HAL_ADC_PollForConversion+0x68>
 8002e00:	f7ff fe48 	bl	8002a94 <HAL_GetTick>
 8002e04:	0002      	movs	r2, r0
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d211      	bcs.n	8002e34 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d10b      	bne.n	8002e34 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	2204      	movs	r2, #4
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2234      	movs	r2, #52	; 0x34
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e04a      	b.n	8002eca <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d0d9      	beq.n	8002df4 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e44:	2280      	movs	r2, #128	; 0x80
 8002e46:	0092      	lsls	r2, r2, #2
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68da      	ldr	r2, [r3, #12]
 8002e54:	23c0      	movs	r3, #192	; 0xc0
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d12d      	bne.n	8002eb8 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d129      	bne.n	8002eb8 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2208      	movs	r2, #8
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d122      	bne.n	8002eb8 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	2204      	movs	r2, #4
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d110      	bne.n	8002ea0 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	210c      	movs	r1, #12
 8002e8a:	438a      	bics	r2, r1
 8002e8c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e92:	4a10      	ldr	r2, [pc, #64]	; (8002ed4 <HAL_ADC_PollForConversion+0x12c>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	2201      	movs	r2, #1
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	639a      	str	r2, [r3, #56]	; 0x38
 8002e9e:	e00b      	b.n	8002eb8 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	7e1b      	ldrb	r3, [r3, #24]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d103      	bne.n	8002ec8 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	220c      	movs	r2, #12
 8002ec6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	0018      	movs	r0, r3
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	b004      	add	sp, #16
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	fffffefe 	.word	0xfffffefe

08002ed8 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002ed8:	b590      	push	{r4, r7, lr}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ee0:	230f      	movs	r3, #15
 8002ee2:	18fb      	adds	r3, r7, r3
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	2204      	movs	r2, #4
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	d156      	bne.n	8002fa2 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2234      	movs	r2, #52	; 0x34
 8002ef8:	5c9b      	ldrb	r3, [r3, r2]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_ADC_Start_IT+0x2a>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e056      	b.n	8002fb0 <HAL_ADC_Start_IT+0xd8>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2234      	movs	r2, #52	; 0x34
 8002f06:	2101      	movs	r1, #1
 8002f08:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	7e5b      	ldrb	r3, [r3, #25]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d007      	beq.n	8002f22 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002f12:	230f      	movs	r3, #15
 8002f14:	18fc      	adds	r4, r7, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f000 fa57 	bl	80033cc <ADC_Enable>
 8002f1e:	0003      	movs	r3, r0
 8002f20:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f22:	230f      	movs	r3, #15
 8002f24:	18fb      	adds	r3, r7, r3
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d13e      	bne.n	8002faa <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f30:	4a21      	ldr	r2, [pc, #132]	; (8002fb8 <HAL_ADC_Start_IT+0xe0>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	2280      	movs	r2, #128	; 0x80
 8002f36:	0052      	lsls	r2, r2, #1
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2234      	movs	r2, #52	; 0x34
 8002f48:	2100      	movs	r1, #0
 8002f4a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	221c      	movs	r2, #28
 8002f52:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d110      	bne.n	8002f7e <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2104      	movs	r1, #4
 8002f68:	438a      	bics	r2, r1
 8002f6a:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2118      	movs	r1, #24
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	605a      	str	r2, [r3, #4]
          break;
 8002f7c:	e008      	b.n	8002f90 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	211c      	movs	r1, #28
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	605a      	str	r2, [r3, #4]
          break;
 8002f8e:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2104      	movs	r1, #4
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	609a      	str	r2, [r3, #8]
 8002fa0:	e003      	b.n	8002faa <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002fa2:	230f      	movs	r3, #15
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 8002faa:	230f      	movs	r3, #15
 8002fac:	18fb      	adds	r3, r7, r3
 8002fae:	781b      	ldrb	r3, [r3, #0]
}
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	b005      	add	sp, #20
 8002fb6:	bd90      	pop	{r4, r7, pc}
 8002fb8:	fffff0fe 	.word	0xfffff0fe

08002fbc <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8002fbc:	b5b0      	push	{r4, r5, r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fc4:	230f      	movs	r3, #15
 8002fc6:	18fb      	adds	r3, r7, r3
 8002fc8:	2200      	movs	r2, #0
 8002fca:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2234      	movs	r2, #52	; 0x34
 8002fd0:	5c9b      	ldrb	r3, [r3, r2]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d101      	bne.n	8002fda <HAL_ADC_Stop_IT+0x1e>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	e033      	b.n	8003042 <HAL_ADC_Stop_IT+0x86>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2234      	movs	r2, #52	; 0x34
 8002fde:	2101      	movs	r1, #1
 8002fe0:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002fe2:	250f      	movs	r5, #15
 8002fe4:	197c      	adds	r4, r7, r5
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f000 fae4 	bl	80035b6 <ADC_ConversionStop>
 8002fee:	0003      	movs	r3, r0
 8002ff0:	7023      	strb	r3, [r4, #0]
   
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002ff2:	0028      	movs	r0, r5
 8002ff4:	183b      	adds	r3, r7, r0
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d11b      	bne.n	8003034 <HAL_ADC_Stop_IT+0x78>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	211c      	movs	r1, #28
 8003008:	438a      	bics	r2, r1
 800300a:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800300c:	0005      	movs	r5, r0
 800300e:	183c      	adds	r4, r7, r0
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	0018      	movs	r0, r3
 8003014:	f000 fa5e 	bl	80034d4 <ADC_Disable>
 8003018:	0003      	movs	r3, r0
 800301a:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800301c:	197b      	adds	r3, r7, r5
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d107      	bne.n	8003034 <HAL_ADC_Stop_IT+0x78>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003028:	4a08      	ldr	r2, [pc, #32]	; (800304c <HAL_ADC_Stop_IT+0x90>)
 800302a:	4013      	ands	r3, r2
 800302c:	2201      	movs	r2, #1
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2234      	movs	r2, #52	; 0x34
 8003038:	2100      	movs	r1, #0
 800303a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800303c:	230f      	movs	r3, #15
 800303e:	18fb      	adds	r3, r7, r3
 8003040:	781b      	ldrb	r3, [r3, #0]
}
 8003042:	0018      	movs	r0, r3
 8003044:	46bd      	mov	sp, r7
 8003046:	b004      	add	sp, #16
 8003048:	bdb0      	pop	{r4, r5, r7, pc}
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	fffffefe 	.word	0xfffffefe

08003050 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800305e:	0018      	movs	r0, r3
 8003060:	46bd      	mov	sp, r7
 8003062:	b002      	add	sp, #8
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2204      	movs	r2, #4
 8003084:	4013      	ands	r3, r2
 8003086:	d003      	beq.n	8003090 <HAL_ADC_IRQHandler+0x28>
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2204      	movs	r2, #4
 800308c:	4013      	ands	r3, r2
 800308e:	d107      	bne.n	80030a0 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2208      	movs	r2, #8
 8003094:	4013      	ands	r3, r2
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003096:	d049      	beq.n	800312c <HAL_ADC_IRQHandler+0xc4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2208      	movs	r2, #8
 800309c:	4013      	ands	r3, r2
 800309e:	d045      	beq.n	800312c <HAL_ADC_IRQHandler+0xc4>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a4:	2210      	movs	r2, #16
 80030a6:	4013      	ands	r3, r2
 80030a8:	d106      	bne.n	80030b8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ae:	2280      	movs	r2, #128	; 0x80
 80030b0:	0092      	lsls	r2, r2, #2
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	23c0      	movs	r3, #192	; 0xc0
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	4013      	ands	r3, r2
 80030c4:	d12a      	bne.n	800311c <HAL_ADC_IRQHandler+0xb4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d126      	bne.n	800311c <HAL_ADC_IRQHandler+0xb4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2208      	movs	r2, #8
 80030d2:	4013      	ands	r3, r2
 80030d4:	d022      	beq.n	800311c <HAL_ADC_IRQHandler+0xb4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	2204      	movs	r2, #4
 80030de:	4013      	ands	r3, r2
 80030e0:	d110      	bne.n	8003104 <HAL_ADC_IRQHandler+0x9c>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	210c      	movs	r1, #12
 80030ee:	438a      	bics	r2, r1
 80030f0:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f6:	4a2d      	ldr	r2, [pc, #180]	; (80031ac <HAL_ADC_IRQHandler+0x144>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	2201      	movs	r2, #1
 80030fc:	431a      	orrs	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	639a      	str	r2, [r3, #56]	; 0x38
 8003102:	e00b      	b.n	800311c <HAL_ADC_IRQHandler+0xb4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003108:	2220      	movs	r2, #32
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003114:	2201      	movs	r2, #1
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	0018      	movs	r0, r3
 8003120:	f000 f846 	bl	80031b0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	220c      	movs	r2, #12
 800312a:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2280      	movs	r2, #128	; 0x80
 8003130:	4013      	ands	r3, r2
 8003132:	d012      	beq.n	800315a <HAL_ADC_IRQHandler+0xf2>
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2280      	movs	r2, #128	; 0x80
 8003138:	4013      	ands	r3, r2
 800313a:	d00e      	beq.n	800315a <HAL_ADC_IRQHandler+0xf2>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003140:	2280      	movs	r2, #128	; 0x80
 8003142:	0252      	lsls	r2, r2, #9
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	0018      	movs	r0, r3
 800314e:	f000 f837 	bl	80031c0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2280      	movs	r2, #128	; 0x80
 8003158:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2210      	movs	r2, #16
 800315e:	4013      	ands	r3, r2
 8003160:	d020      	beq.n	80031a4 <HAL_ADC_IRQHandler+0x13c>
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2210      	movs	r2, #16
 8003166:	4013      	ands	r3, r2
 8003168:	d01c      	beq.n	80031a4 <HAL_ADC_IRQHandler+0x13c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316e:	2b01      	cmp	r3, #1
 8003170:	d006      	beq.n	8003180 <HAL_ADC_IRQHandler+0x118>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2201      	movs	r2, #1
 800317a:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800317c:	2b01      	cmp	r3, #1
 800317e:	d10d      	bne.n	800319c <HAL_ADC_IRQHandler+0x134>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003184:	2202      	movs	r2, #2
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2210      	movs	r2, #16
 8003192:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	0018      	movs	r0, r3
 8003198:	f000 f81a 	bl	80031d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2210      	movs	r2, #16
 80031a2:	601a      	str	r2, [r3, #0]
  }

}
 80031a4:	46c0      	nop			; (mov r8, r8)
 80031a6:	46bd      	mov	sp, r7
 80031a8:	b004      	add	sp, #16
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	fffffefe 	.word	0xfffffefe

080031b0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80031b8:	46c0      	nop			; (mov r8, r8)
 80031ba:	46bd      	mov	sp, r7
 80031bc:	b002      	add	sp, #8
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80031c8:	46c0      	nop			; (mov r8, r8)
 80031ca:	46bd      	mov	sp, r7
 80031cc:	b002      	add	sp, #8
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80031d8:	46c0      	nop			; (mov r8, r8)
 80031da:	46bd      	mov	sp, r7
 80031dc:	b002      	add	sp, #8
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ea:	230f      	movs	r3, #15
 80031ec:	18fb      	adds	r3, r7, r3
 80031ee:	2200      	movs	r2, #0
 80031f0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031fa:	2380      	movs	r3, #128	; 0x80
 80031fc:	055b      	lsls	r3, r3, #21
 80031fe:	429a      	cmp	r2, r3
 8003200:	d011      	beq.n	8003226 <HAL_ADC_ConfigChannel+0x46>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003206:	2b01      	cmp	r3, #1
 8003208:	d00d      	beq.n	8003226 <HAL_ADC_ConfigChannel+0x46>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320e:	2b02      	cmp	r3, #2
 8003210:	d009      	beq.n	8003226 <HAL_ADC_ConfigChannel+0x46>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003216:	2b03      	cmp	r3, #3
 8003218:	d005      	beq.n	8003226 <HAL_ADC_ConfigChannel+0x46>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321e:	2b04      	cmp	r3, #4
 8003220:	d001      	beq.n	8003226 <HAL_ADC_ConfigChannel+0x46>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2234      	movs	r2, #52	; 0x34
 800322a:	5c9b      	ldrb	r3, [r3, r2]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_ADC_ConfigChannel+0x54>
 8003230:	2302      	movs	r3, #2
 8003232:	e0bb      	b.n	80033ac <HAL_ADC_ConfigChannel+0x1cc>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2234      	movs	r2, #52	; 0x34
 8003238:	2101      	movs	r1, #1
 800323a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	2204      	movs	r2, #4
 8003244:	4013      	ands	r3, r2
 8003246:	d000      	beq.n	800324a <HAL_ADC_ConfigChannel+0x6a>
 8003248:	e09f      	b.n	800338a <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	4a59      	ldr	r2, [pc, #356]	; (80033b4 <HAL_ADC_ConfigChannel+0x1d4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d100      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x76>
 8003254:	e077      	b.n	8003346 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2201      	movs	r2, #1
 8003262:	409a      	lsls	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003270:	2380      	movs	r3, #128	; 0x80
 8003272:	055b      	lsls	r3, r3, #21
 8003274:	429a      	cmp	r2, r3
 8003276:	d037      	beq.n	80032e8 <HAL_ADC_ConfigChannel+0x108>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327c:	2b01      	cmp	r3, #1
 800327e:	d033      	beq.n	80032e8 <HAL_ADC_ConfigChannel+0x108>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003284:	2b02      	cmp	r3, #2
 8003286:	d02f      	beq.n	80032e8 <HAL_ADC_ConfigChannel+0x108>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	2b03      	cmp	r3, #3
 800328e:	d02b      	beq.n	80032e8 <HAL_ADC_ConfigChannel+0x108>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003294:	2b04      	cmp	r3, #4
 8003296:	d027      	beq.n	80032e8 <HAL_ADC_ConfigChannel+0x108>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329c:	2b05      	cmp	r3, #5
 800329e:	d023      	beq.n	80032e8 <HAL_ADC_ConfigChannel+0x108>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	2b06      	cmp	r3, #6
 80032a6:	d01f      	beq.n	80032e8 <HAL_ADC_ConfigChannel+0x108>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ac:	2b07      	cmp	r3, #7
 80032ae:	d01b      	beq.n	80032e8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	2107      	movs	r1, #7
 80032bc:	400b      	ands	r3, r1
 80032be:	429a      	cmp	r2, r3
 80032c0:	d012      	beq.n	80032e8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695a      	ldr	r2, [r3, #20]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2107      	movs	r1, #7
 80032ce:	438a      	bics	r2, r1
 80032d0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6959      	ldr	r1, [r3, #20]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2207      	movs	r2, #7
 80032de:	401a      	ands	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b10      	cmp	r3, #16
 80032ee:	d003      	beq.n	80032f8 <HAL_ADC_ConfigChannel+0x118>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b11      	cmp	r3, #17
 80032f6:	d152      	bne.n	800339e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80032f8:	4b2f      	ldr	r3, [pc, #188]	; (80033b8 <HAL_ADC_ConfigChannel+0x1d8>)
 80032fa:	6819      	ldr	r1, [r3, #0]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b10      	cmp	r3, #16
 8003302:	d102      	bne.n	800330a <HAL_ADC_ConfigChannel+0x12a>
 8003304:	2380      	movs	r3, #128	; 0x80
 8003306:	041b      	lsls	r3, r3, #16
 8003308:	e001      	b.n	800330e <HAL_ADC_ConfigChannel+0x12e>
 800330a:	2380      	movs	r3, #128	; 0x80
 800330c:	03db      	lsls	r3, r3, #15
 800330e:	4a2a      	ldr	r2, [pc, #168]	; (80033b8 <HAL_ADC_ConfigChannel+0x1d8>)
 8003310:	430b      	orrs	r3, r1
 8003312:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b10      	cmp	r3, #16
 800331a:	d140      	bne.n	800339e <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800331c:	4b27      	ldr	r3, [pc, #156]	; (80033bc <HAL_ADC_ConfigChannel+0x1dc>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4927      	ldr	r1, [pc, #156]	; (80033c0 <HAL_ADC_ConfigChannel+0x1e0>)
 8003322:	0018      	movs	r0, r3
 8003324:	f7fc fef8 	bl	8000118 <__udivsi3>
 8003328:	0003      	movs	r3, r0
 800332a:	001a      	movs	r2, r3
 800332c:	0013      	movs	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	189b      	adds	r3, r3, r2
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003336:	e002      	b.n	800333e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	3b01      	subs	r3, #1
 800333c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1f9      	bne.n	8003338 <HAL_ADC_ConfigChannel+0x158>
 8003344:	e02b      	b.n	800339e <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2101      	movs	r1, #1
 8003352:	4099      	lsls	r1, r3
 8003354:	000b      	movs	r3, r1
 8003356:	43d9      	mvns	r1, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	400a      	ands	r2, r1
 800335e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b10      	cmp	r3, #16
 8003366:	d003      	beq.n	8003370 <HAL_ADC_ConfigChannel+0x190>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b11      	cmp	r3, #17
 800336e:	d116      	bne.n	800339e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003370:	4b11      	ldr	r3, [pc, #68]	; (80033b8 <HAL_ADC_ConfigChannel+0x1d8>)
 8003372:	6819      	ldr	r1, [r3, #0]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b10      	cmp	r3, #16
 800337a:	d101      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x1a0>
 800337c:	4a11      	ldr	r2, [pc, #68]	; (80033c4 <HAL_ADC_ConfigChannel+0x1e4>)
 800337e:	e000      	b.n	8003382 <HAL_ADC_ConfigChannel+0x1a2>
 8003380:	4a11      	ldr	r2, [pc, #68]	; (80033c8 <HAL_ADC_ConfigChannel+0x1e8>)
 8003382:	4b0d      	ldr	r3, [pc, #52]	; (80033b8 <HAL_ADC_ConfigChannel+0x1d8>)
 8003384:	400a      	ands	r2, r1
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	e009      	b.n	800339e <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338e:	2220      	movs	r2, #32
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003396:	230f      	movs	r3, #15
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	2201      	movs	r2, #1
 800339c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2234      	movs	r2, #52	; 0x34
 80033a2:	2100      	movs	r1, #0
 80033a4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80033a6:	230f      	movs	r3, #15
 80033a8:	18fb      	adds	r3, r7, r3
 80033aa:	781b      	ldrb	r3, [r3, #0]
}
 80033ac:	0018      	movs	r0, r3
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b004      	add	sp, #16
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	00001001 	.word	0x00001001
 80033b8:	40012708 	.word	0x40012708
 80033bc:	200004e8 	.word	0x200004e8
 80033c0:	000f4240 	.word	0x000f4240
 80033c4:	ff7fffff 	.word	0xff7fffff
 80033c8:	ffbfffff 	.word	0xffbfffff

080033cc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	2203      	movs	r2, #3
 80033e4:	4013      	ands	r3, r2
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d112      	bne.n	8003410 <ADC_Enable+0x44>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2201      	movs	r2, #1
 80033f2:	4013      	ands	r3, r2
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d009      	beq.n	800340c <ADC_Enable+0x40>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	2380      	movs	r3, #128	; 0x80
 8003400:	021b      	lsls	r3, r3, #8
 8003402:	401a      	ands	r2, r3
 8003404:	2380      	movs	r3, #128	; 0x80
 8003406:	021b      	lsls	r3, r3, #8
 8003408:	429a      	cmp	r2, r3
 800340a:	d101      	bne.n	8003410 <ADC_Enable+0x44>
 800340c:	2301      	movs	r3, #1
 800340e:	e000      	b.n	8003412 <ADC_Enable+0x46>
 8003410:	2300      	movs	r3, #0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d152      	bne.n	80034bc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	4a2a      	ldr	r2, [pc, #168]	; (80034c8 <ADC_Enable+0xfc>)
 800341e:	4013      	ands	r3, r2
 8003420:	d00d      	beq.n	800343e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003426:	2210      	movs	r2, #16
 8003428:	431a      	orrs	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003432:	2201      	movs	r2, #1
 8003434:	431a      	orrs	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e03f      	b.n	80034be <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2101      	movs	r1, #1
 800344a:	430a      	orrs	r2, r1
 800344c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800344e:	4b1f      	ldr	r3, [pc, #124]	; (80034cc <ADC_Enable+0x100>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	491f      	ldr	r1, [pc, #124]	; (80034d0 <ADC_Enable+0x104>)
 8003454:	0018      	movs	r0, r3
 8003456:	f7fc fe5f 	bl	8000118 <__udivsi3>
 800345a:	0003      	movs	r3, r0
 800345c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800345e:	e002      	b.n	8003466 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	3b01      	subs	r3, #1
 8003464:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1f9      	bne.n	8003460 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800346c:	f7ff fb12 	bl	8002a94 <HAL_GetTick>
 8003470:	0003      	movs	r3, r0
 8003472:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003474:	e01b      	b.n	80034ae <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003476:	f7ff fb0d 	bl	8002a94 <HAL_GetTick>
 800347a:	0002      	movs	r2, r0
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d914      	bls.n	80034ae <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2201      	movs	r2, #1
 800348c:	4013      	ands	r3, r2
 800348e:	2b01      	cmp	r3, #1
 8003490:	d00d      	beq.n	80034ae <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003496:	2210      	movs	r2, #16
 8003498:	431a      	orrs	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a2:	2201      	movs	r2, #1
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e007      	b.n	80034be <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2201      	movs	r2, #1
 80034b6:	4013      	ands	r3, r2
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d1dc      	bne.n	8003476 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	0018      	movs	r0, r3
 80034c0:	46bd      	mov	sp, r7
 80034c2:	b004      	add	sp, #16
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	80000017 	.word	0x80000017
 80034cc:	200004e8 	.word	0x200004e8
 80034d0:	000f4240 	.word	0x000f4240

080034d4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	2203      	movs	r2, #3
 80034e8:	4013      	ands	r3, r2
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d112      	bne.n	8003514 <ADC_Disable+0x40>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2201      	movs	r2, #1
 80034f6:	4013      	ands	r3, r2
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d009      	beq.n	8003510 <ADC_Disable+0x3c>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	2380      	movs	r3, #128	; 0x80
 8003504:	021b      	lsls	r3, r3, #8
 8003506:	401a      	ands	r2, r3
 8003508:	2380      	movs	r3, #128	; 0x80
 800350a:	021b      	lsls	r3, r3, #8
 800350c:	429a      	cmp	r2, r3
 800350e:	d101      	bne.n	8003514 <ADC_Disable+0x40>
 8003510:	2301      	movs	r3, #1
 8003512:	e000      	b.n	8003516 <ADC_Disable+0x42>
 8003514:	2300      	movs	r3, #0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d048      	beq.n	80035ac <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	2205      	movs	r2, #5
 8003522:	4013      	ands	r3, r2
 8003524:	2b01      	cmp	r3, #1
 8003526:	d110      	bne.n	800354a <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2102      	movs	r1, #2
 8003534:	430a      	orrs	r2, r1
 8003536:	609a      	str	r2, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2203      	movs	r2, #3
 800353e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003540:	f7ff faa8 	bl	8002a94 <HAL_GetTick>
 8003544:	0003      	movs	r3, r0
 8003546:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003548:	e029      	b.n	800359e <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354e:	2210      	movs	r2, #16
 8003550:	431a      	orrs	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355a:	2201      	movs	r2, #1
 800355c:	431a      	orrs	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e023      	b.n	80035ae <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003566:	f7ff fa95 	bl	8002a94 <HAL_GetTick>
 800356a:	0002      	movs	r2, r0
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d914      	bls.n	800359e <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2201      	movs	r2, #1
 800357c:	4013      	ands	r3, r2
 800357e:	2b01      	cmp	r3, #1
 8003580:	d10d      	bne.n	800359e <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003586:	2210      	movs	r2, #16
 8003588:	431a      	orrs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003592:	2201      	movs	r2, #1
 8003594:	431a      	orrs	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e007      	b.n	80035ae <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2201      	movs	r2, #1
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d0dc      	beq.n	8003566 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	0018      	movs	r0, r3
 80035b0:	46bd      	mov	sp, r7
 80035b2:	b004      	add	sp, #16
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b084      	sub	sp, #16
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035be:	2300      	movs	r3, #0
 80035c0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	2204      	movs	r2, #4
 80035ca:	4013      	ands	r3, r2
 80035cc:	d03a      	beq.n	8003644 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2204      	movs	r2, #4
 80035d6:	4013      	ands	r3, r2
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d10d      	bne.n	80035f8 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	2202      	movs	r2, #2
 80035e4:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80035e6:	d107      	bne.n	80035f8 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2110      	movs	r1, #16
 80035f4:	430a      	orrs	r2, r1
 80035f6:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035f8:	f7ff fa4c 	bl	8002a94 <HAL_GetTick>
 80035fc:	0003      	movs	r3, r0
 80035fe:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003600:	e01a      	b.n	8003638 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003602:	f7ff fa47 	bl	8002a94 <HAL_GetTick>
 8003606:	0002      	movs	r2, r0
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d913      	bls.n	8003638 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	2204      	movs	r2, #4
 8003618:	4013      	ands	r3, r2
 800361a:	d00d      	beq.n	8003638 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003620:	2210      	movs	r2, #16
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362c:	2201      	movs	r2, #1
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e006      	b.n	8003646 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2204      	movs	r2, #4
 8003640:	4013      	ands	r3, r2
 8003642:	d1de      	bne.n	8003602 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	0018      	movs	r0, r3
 8003648:	46bd      	mov	sp, r7
 800364a:	b004      	add	sp, #16
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	0002      	movs	r2, r0
 8003658:	1dfb      	adds	r3, r7, #7
 800365a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800365c:	1dfb      	adds	r3, r7, #7
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b7f      	cmp	r3, #127	; 0x7f
 8003662:	d809      	bhi.n	8003678 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003664:	1dfb      	adds	r3, r7, #7
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	001a      	movs	r2, r3
 800366a:	231f      	movs	r3, #31
 800366c:	401a      	ands	r2, r3
 800366e:	4b04      	ldr	r3, [pc, #16]	; (8003680 <__NVIC_EnableIRQ+0x30>)
 8003670:	2101      	movs	r1, #1
 8003672:	4091      	lsls	r1, r2
 8003674:	000a      	movs	r2, r1
 8003676:	601a      	str	r2, [r3, #0]
  }
}
 8003678:	46c0      	nop			; (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	b002      	add	sp, #8
 800367e:	bd80      	pop	{r7, pc}
 8003680:	e000e100 	.word	0xe000e100

08003684 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	0002      	movs	r2, r0
 800368c:	1dfb      	adds	r3, r7, #7
 800368e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003690:	1dfb      	adds	r3, r7, #7
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	2b7f      	cmp	r3, #127	; 0x7f
 8003696:	d810      	bhi.n	80036ba <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003698:	1dfb      	adds	r3, r7, #7
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	001a      	movs	r2, r3
 800369e:	231f      	movs	r3, #31
 80036a0:	4013      	ands	r3, r2
 80036a2:	4908      	ldr	r1, [pc, #32]	; (80036c4 <__NVIC_DisableIRQ+0x40>)
 80036a4:	2201      	movs	r2, #1
 80036a6:	409a      	lsls	r2, r3
 80036a8:	0013      	movs	r3, r2
 80036aa:	2280      	movs	r2, #128	; 0x80
 80036ac:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80036ae:	f3bf 8f4f 	dsb	sy
}
 80036b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80036b4:	f3bf 8f6f 	isb	sy
}
 80036b8:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	46bd      	mov	sp, r7
 80036be:	b002      	add	sp, #8
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	e000e100 	.word	0xe000e100

080036c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036c8:	b590      	push	{r4, r7, lr}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	0002      	movs	r2, r0
 80036d0:	6039      	str	r1, [r7, #0]
 80036d2:	1dfb      	adds	r3, r7, #7
 80036d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80036d6:	1dfb      	adds	r3, r7, #7
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b7f      	cmp	r3, #127	; 0x7f
 80036dc:	d828      	bhi.n	8003730 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036de:	4a2f      	ldr	r2, [pc, #188]	; (800379c <__NVIC_SetPriority+0xd4>)
 80036e0:	1dfb      	adds	r3, r7, #7
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	b25b      	sxtb	r3, r3
 80036e6:	089b      	lsrs	r3, r3, #2
 80036e8:	33c0      	adds	r3, #192	; 0xc0
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	589b      	ldr	r3, [r3, r2]
 80036ee:	1dfa      	adds	r2, r7, #7
 80036f0:	7812      	ldrb	r2, [r2, #0]
 80036f2:	0011      	movs	r1, r2
 80036f4:	2203      	movs	r2, #3
 80036f6:	400a      	ands	r2, r1
 80036f8:	00d2      	lsls	r2, r2, #3
 80036fa:	21ff      	movs	r1, #255	; 0xff
 80036fc:	4091      	lsls	r1, r2
 80036fe:	000a      	movs	r2, r1
 8003700:	43d2      	mvns	r2, r2
 8003702:	401a      	ands	r2, r3
 8003704:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	019b      	lsls	r3, r3, #6
 800370a:	22ff      	movs	r2, #255	; 0xff
 800370c:	401a      	ands	r2, r3
 800370e:	1dfb      	adds	r3, r7, #7
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	0018      	movs	r0, r3
 8003714:	2303      	movs	r3, #3
 8003716:	4003      	ands	r3, r0
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800371c:	481f      	ldr	r0, [pc, #124]	; (800379c <__NVIC_SetPriority+0xd4>)
 800371e:	1dfb      	adds	r3, r7, #7
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	b25b      	sxtb	r3, r3
 8003724:	089b      	lsrs	r3, r3, #2
 8003726:	430a      	orrs	r2, r1
 8003728:	33c0      	adds	r3, #192	; 0xc0
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800372e:	e031      	b.n	8003794 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003730:	4a1b      	ldr	r2, [pc, #108]	; (80037a0 <__NVIC_SetPriority+0xd8>)
 8003732:	1dfb      	adds	r3, r7, #7
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	0019      	movs	r1, r3
 8003738:	230f      	movs	r3, #15
 800373a:	400b      	ands	r3, r1
 800373c:	3b08      	subs	r3, #8
 800373e:	089b      	lsrs	r3, r3, #2
 8003740:	3306      	adds	r3, #6
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	18d3      	adds	r3, r2, r3
 8003746:	3304      	adds	r3, #4
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	1dfa      	adds	r2, r7, #7
 800374c:	7812      	ldrb	r2, [r2, #0]
 800374e:	0011      	movs	r1, r2
 8003750:	2203      	movs	r2, #3
 8003752:	400a      	ands	r2, r1
 8003754:	00d2      	lsls	r2, r2, #3
 8003756:	21ff      	movs	r1, #255	; 0xff
 8003758:	4091      	lsls	r1, r2
 800375a:	000a      	movs	r2, r1
 800375c:	43d2      	mvns	r2, r2
 800375e:	401a      	ands	r2, r3
 8003760:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	019b      	lsls	r3, r3, #6
 8003766:	22ff      	movs	r2, #255	; 0xff
 8003768:	401a      	ands	r2, r3
 800376a:	1dfb      	adds	r3, r7, #7
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	0018      	movs	r0, r3
 8003770:	2303      	movs	r3, #3
 8003772:	4003      	ands	r3, r0
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003778:	4809      	ldr	r0, [pc, #36]	; (80037a0 <__NVIC_SetPriority+0xd8>)
 800377a:	1dfb      	adds	r3, r7, #7
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	001c      	movs	r4, r3
 8003780:	230f      	movs	r3, #15
 8003782:	4023      	ands	r3, r4
 8003784:	3b08      	subs	r3, #8
 8003786:	089b      	lsrs	r3, r3, #2
 8003788:	430a      	orrs	r2, r1
 800378a:	3306      	adds	r3, #6
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	18c3      	adds	r3, r0, r3
 8003790:	3304      	adds	r3, #4
 8003792:	601a      	str	r2, [r3, #0]
}
 8003794:	46c0      	nop			; (mov r8, r8)
 8003796:	46bd      	mov	sp, r7
 8003798:	b003      	add	sp, #12
 800379a:	bd90      	pop	{r4, r7, pc}
 800379c:	e000e100 	.word	0xe000e100
 80037a0:	e000ed00 	.word	0xe000ed00

080037a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	1e5a      	subs	r2, r3, #1
 80037b0:	2380      	movs	r3, #128	; 0x80
 80037b2:	045b      	lsls	r3, r3, #17
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d301      	bcc.n	80037bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037b8:	2301      	movs	r3, #1
 80037ba:	e010      	b.n	80037de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037bc:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <SysTick_Config+0x44>)
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	3a01      	subs	r2, #1
 80037c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037c4:	2301      	movs	r3, #1
 80037c6:	425b      	negs	r3, r3
 80037c8:	2103      	movs	r1, #3
 80037ca:	0018      	movs	r0, r3
 80037cc:	f7ff ff7c 	bl	80036c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037d0:	4b05      	ldr	r3, [pc, #20]	; (80037e8 <SysTick_Config+0x44>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037d6:	4b04      	ldr	r3, [pc, #16]	; (80037e8 <SysTick_Config+0x44>)
 80037d8:	2207      	movs	r2, #7
 80037da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037dc:	2300      	movs	r3, #0
}
 80037de:	0018      	movs	r0, r3
 80037e0:	46bd      	mov	sp, r7
 80037e2:	b002      	add	sp, #8
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	e000e010 	.word	0xe000e010

080037ec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	607a      	str	r2, [r7, #4]
 80037f6:	210f      	movs	r1, #15
 80037f8:	187b      	adds	r3, r7, r1
 80037fa:	1c02      	adds	r2, r0, #0
 80037fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	187b      	adds	r3, r7, r1
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	b25b      	sxtb	r3, r3
 8003806:	0011      	movs	r1, r2
 8003808:	0018      	movs	r0, r3
 800380a:	f7ff ff5d 	bl	80036c8 <__NVIC_SetPriority>
}
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	46bd      	mov	sp, r7
 8003812:	b004      	add	sp, #16
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b082      	sub	sp, #8
 800381a:	af00      	add	r7, sp, #0
 800381c:	0002      	movs	r2, r0
 800381e:	1dfb      	adds	r3, r7, #7
 8003820:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003822:	1dfb      	adds	r3, r7, #7
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	b25b      	sxtb	r3, r3
 8003828:	0018      	movs	r0, r3
 800382a:	f7ff ff11 	bl	8003650 <__NVIC_EnableIRQ>
}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	46bd      	mov	sp, r7
 8003832:	b002      	add	sp, #8
 8003834:	bd80      	pop	{r7, pc}

08003836 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b082      	sub	sp, #8
 800383a:	af00      	add	r7, sp, #0
 800383c:	0002      	movs	r2, r0
 800383e:	1dfb      	adds	r3, r7, #7
 8003840:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003842:	1dfb      	adds	r3, r7, #7
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	b25b      	sxtb	r3, r3
 8003848:	0018      	movs	r0, r3
 800384a:	f7ff ff1b 	bl	8003684 <__NVIC_DisableIRQ>
}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	46bd      	mov	sp, r7
 8003852:	b002      	add	sp, #8
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	0018      	movs	r0, r3
 8003862:	f7ff ff9f 	bl	80037a4 <SysTick_Config>
 8003866:	0003      	movs	r3, r0
}
 8003868:	0018      	movs	r0, r3
 800386a:	46bd      	mov	sp, r7
 800386c:	b002      	add	sp, #8
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800387a:	2300      	movs	r3, #0
 800387c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800387e:	e14f      	b.n	8003b20 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2101      	movs	r1, #1
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	4091      	lsls	r1, r2
 800388a:	000a      	movs	r2, r1
 800388c:	4013      	ands	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d100      	bne.n	8003898 <HAL_GPIO_Init+0x28>
 8003896:	e140      	b.n	8003b1a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2203      	movs	r2, #3
 800389e:	4013      	ands	r3, r2
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d005      	beq.n	80038b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2203      	movs	r2, #3
 80038aa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d130      	bne.n	8003912 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	2203      	movs	r2, #3
 80038bc:	409a      	lsls	r2, r3
 80038be:	0013      	movs	r3, r2
 80038c0:	43da      	mvns	r2, r3
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	4013      	ands	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	68da      	ldr	r2, [r3, #12]
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	409a      	lsls	r2, r3
 80038d2:	0013      	movs	r3, r2
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038e6:	2201      	movs	r2, #1
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	409a      	lsls	r2, r3
 80038ec:	0013      	movs	r3, r2
 80038ee:	43da      	mvns	r2, r3
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	4013      	ands	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	091b      	lsrs	r3, r3, #4
 80038fc:	2201      	movs	r2, #1
 80038fe:	401a      	ands	r2, r3
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	409a      	lsls	r2, r3
 8003904:	0013      	movs	r3, r2
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2203      	movs	r2, #3
 8003918:	4013      	ands	r3, r2
 800391a:	2b03      	cmp	r3, #3
 800391c:	d017      	beq.n	800394e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	2203      	movs	r2, #3
 800392a:	409a      	lsls	r2, r3
 800392c:	0013      	movs	r3, r2
 800392e:	43da      	mvns	r2, r3
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	4013      	ands	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	409a      	lsls	r2, r3
 8003940:	0013      	movs	r3, r2
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	4313      	orrs	r3, r2
 8003946:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2203      	movs	r2, #3
 8003954:	4013      	ands	r3, r2
 8003956:	2b02      	cmp	r3, #2
 8003958:	d123      	bne.n	80039a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	08da      	lsrs	r2, r3, #3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3208      	adds	r2, #8
 8003962:	0092      	lsls	r2, r2, #2
 8003964:	58d3      	ldr	r3, [r2, r3]
 8003966:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	2207      	movs	r2, #7
 800396c:	4013      	ands	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	220f      	movs	r2, #15
 8003972:	409a      	lsls	r2, r3
 8003974:	0013      	movs	r3, r2
 8003976:	43da      	mvns	r2, r3
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	4013      	ands	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	691a      	ldr	r2, [r3, #16]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2107      	movs	r1, #7
 8003986:	400b      	ands	r3, r1
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	409a      	lsls	r2, r3
 800398c:	0013      	movs	r3, r2
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4313      	orrs	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	08da      	lsrs	r2, r3, #3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3208      	adds	r2, #8
 800399c:	0092      	lsls	r2, r2, #2
 800399e:	6939      	ldr	r1, [r7, #16]
 80039a0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	2203      	movs	r2, #3
 80039ae:	409a      	lsls	r2, r3
 80039b0:	0013      	movs	r3, r2
 80039b2:	43da      	mvns	r2, r3
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	4013      	ands	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2203      	movs	r2, #3
 80039c0:	401a      	ands	r2, r3
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	409a      	lsls	r2, r3
 80039c8:	0013      	movs	r3, r2
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	23c0      	movs	r3, #192	; 0xc0
 80039dc:	029b      	lsls	r3, r3, #10
 80039de:	4013      	ands	r3, r2
 80039e0:	d100      	bne.n	80039e4 <HAL_GPIO_Init+0x174>
 80039e2:	e09a      	b.n	8003b1a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039e4:	4b54      	ldr	r3, [pc, #336]	; (8003b38 <HAL_GPIO_Init+0x2c8>)
 80039e6:	699a      	ldr	r2, [r3, #24]
 80039e8:	4b53      	ldr	r3, [pc, #332]	; (8003b38 <HAL_GPIO_Init+0x2c8>)
 80039ea:	2101      	movs	r1, #1
 80039ec:	430a      	orrs	r2, r1
 80039ee:	619a      	str	r2, [r3, #24]
 80039f0:	4b51      	ldr	r3, [pc, #324]	; (8003b38 <HAL_GPIO_Init+0x2c8>)
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	2201      	movs	r2, #1
 80039f6:	4013      	ands	r3, r2
 80039f8:	60bb      	str	r3, [r7, #8]
 80039fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80039fc:	4a4f      	ldr	r2, [pc, #316]	; (8003b3c <HAL_GPIO_Init+0x2cc>)
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	089b      	lsrs	r3, r3, #2
 8003a02:	3302      	adds	r3, #2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	589b      	ldr	r3, [r3, r2]
 8003a08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2203      	movs	r2, #3
 8003a0e:	4013      	ands	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	220f      	movs	r2, #15
 8003a14:	409a      	lsls	r2, r3
 8003a16:	0013      	movs	r3, r2
 8003a18:	43da      	mvns	r2, r3
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	2390      	movs	r3, #144	; 0x90
 8003a24:	05db      	lsls	r3, r3, #23
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d013      	beq.n	8003a52 <HAL_GPIO_Init+0x1e2>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a44      	ldr	r2, [pc, #272]	; (8003b40 <HAL_GPIO_Init+0x2d0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d00d      	beq.n	8003a4e <HAL_GPIO_Init+0x1de>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a43      	ldr	r2, [pc, #268]	; (8003b44 <HAL_GPIO_Init+0x2d4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d007      	beq.n	8003a4a <HAL_GPIO_Init+0x1da>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a42      	ldr	r2, [pc, #264]	; (8003b48 <HAL_GPIO_Init+0x2d8>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d101      	bne.n	8003a46 <HAL_GPIO_Init+0x1d6>
 8003a42:	2303      	movs	r3, #3
 8003a44:	e006      	b.n	8003a54 <HAL_GPIO_Init+0x1e4>
 8003a46:	2305      	movs	r3, #5
 8003a48:	e004      	b.n	8003a54 <HAL_GPIO_Init+0x1e4>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	e002      	b.n	8003a54 <HAL_GPIO_Init+0x1e4>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <HAL_GPIO_Init+0x1e4>
 8003a52:	2300      	movs	r3, #0
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	2103      	movs	r1, #3
 8003a58:	400a      	ands	r2, r1
 8003a5a:	0092      	lsls	r2, r2, #2
 8003a5c:	4093      	lsls	r3, r2
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a64:	4935      	ldr	r1, [pc, #212]	; (8003b3c <HAL_GPIO_Init+0x2cc>)
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	089b      	lsrs	r3, r3, #2
 8003a6a:	3302      	adds	r3, #2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a72:	4b36      	ldr	r3, [pc, #216]	; (8003b4c <HAL_GPIO_Init+0x2dc>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	43da      	mvns	r2, r3
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	2380      	movs	r3, #128	; 0x80
 8003a88:	035b      	lsls	r3, r3, #13
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	d003      	beq.n	8003a96 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a96:	4b2d      	ldr	r3, [pc, #180]	; (8003b4c <HAL_GPIO_Init+0x2dc>)
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003a9c:	4b2b      	ldr	r3, [pc, #172]	; (8003b4c <HAL_GPIO_Init+0x2dc>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	43da      	mvns	r2, r3
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	2380      	movs	r3, #128	; 0x80
 8003ab2:	039b      	lsls	r3, r3, #14
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d003      	beq.n	8003ac0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003ac0:	4b22      	ldr	r3, [pc, #136]	; (8003b4c <HAL_GPIO_Init+0x2dc>)
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003ac6:	4b21      	ldr	r3, [pc, #132]	; (8003b4c <HAL_GPIO_Init+0x2dc>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	43da      	mvns	r2, r3
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	2380      	movs	r3, #128	; 0x80
 8003adc:	029b      	lsls	r3, r3, #10
 8003ade:	4013      	ands	r3, r2
 8003ae0:	d003      	beq.n	8003aea <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003aea:	4b18      	ldr	r3, [pc, #96]	; (8003b4c <HAL_GPIO_Init+0x2dc>)
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003af0:	4b16      	ldr	r3, [pc, #88]	; (8003b4c <HAL_GPIO_Init+0x2dc>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	43da      	mvns	r2, r3
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	4013      	ands	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	2380      	movs	r3, #128	; 0x80
 8003b06:	025b      	lsls	r3, r3, #9
 8003b08:	4013      	ands	r3, r2
 8003b0a:	d003      	beq.n	8003b14 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003b14:	4b0d      	ldr	r3, [pc, #52]	; (8003b4c <HAL_GPIO_Init+0x2dc>)
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	40da      	lsrs	r2, r3
 8003b28:	1e13      	subs	r3, r2, #0
 8003b2a:	d000      	beq.n	8003b2e <HAL_GPIO_Init+0x2be>
 8003b2c:	e6a8      	b.n	8003880 <HAL_GPIO_Init+0x10>
  } 
}
 8003b2e:	46c0      	nop			; (mov r8, r8)
 8003b30:	46c0      	nop			; (mov r8, r8)
 8003b32:	46bd      	mov	sp, r7
 8003b34:	b006      	add	sp, #24
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	40010000 	.word	0x40010000
 8003b40:	48000400 	.word	0x48000400
 8003b44:	48000800 	.word	0x48000800
 8003b48:	48000c00 	.word	0x48000c00
 8003b4c:	40010400 	.word	0x40010400

08003b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	0008      	movs	r0, r1
 8003b5a:	0011      	movs	r1, r2
 8003b5c:	1cbb      	adds	r3, r7, #2
 8003b5e:	1c02      	adds	r2, r0, #0
 8003b60:	801a      	strh	r2, [r3, #0]
 8003b62:	1c7b      	adds	r3, r7, #1
 8003b64:	1c0a      	adds	r2, r1, #0
 8003b66:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b68:	1c7b      	adds	r3, r7, #1
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d004      	beq.n	8003b7a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b70:	1cbb      	adds	r3, r7, #2
 8003b72:	881a      	ldrh	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b78:	e003      	b.n	8003b82 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b7a:	1cbb      	adds	r3, r7, #2
 8003b7c:	881a      	ldrh	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	46bd      	mov	sp, r7
 8003b86:	b002      	add	sp, #8
 8003b88:	bd80      	pop	{r7, pc}
	...

08003b8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	0002      	movs	r2, r0
 8003b94:	1dbb      	adds	r3, r7, #6
 8003b96:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b98:	4b09      	ldr	r3, [pc, #36]	; (8003bc0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	1dba      	adds	r2, r7, #6
 8003b9e:	8812      	ldrh	r2, [r2, #0]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	d008      	beq.n	8003bb6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ba4:	4b06      	ldr	r3, [pc, #24]	; (8003bc0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003ba6:	1dba      	adds	r2, r7, #6
 8003ba8:	8812      	ldrh	r2, [r2, #0]
 8003baa:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bac:	1dbb      	adds	r3, r7, #6
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f000 f807 	bl	8003bc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003bb6:	46c0      	nop			; (mov r8, r8)
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	b002      	add	sp, #8
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	46c0      	nop			; (mov r8, r8)
 8003bc0:	40010400 	.word	0x40010400

08003bc4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	0002      	movs	r2, r0
 8003bcc:	1dbb      	adds	r3, r7, #6
 8003bce:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8003bd0:	46c0      	nop			; (mov r8, r8)
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b002      	add	sp, #8
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	000a      	movs	r2, r1
 8003be2:	1cfb      	adds	r3, r7, #3
 8003be4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8003be6:	4b09      	ldr	r3, [pc, #36]	; (8003c0c <HAL_PWR_EnterSLEEPMode+0x34>)
 8003be8:	691a      	ldr	r2, [r3, #16]
 8003bea:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <HAL_PWR_EnterSLEEPMode+0x34>)
 8003bec:	2104      	movs	r1, #4
 8003bee:	438a      	bics	r2, r1
 8003bf0:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003bf2:	1cfb      	adds	r3, r7, #3
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d101      	bne.n	8003bfe <HAL_PWR_EnterSLEEPMode+0x26>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003bfa:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8003bfc:	e002      	b.n	8003c04 <HAL_PWR_EnterSLEEPMode+0x2c>
    __SEV();
 8003bfe:	bf40      	sev
    __WFE();
 8003c00:	bf20      	wfe
    __WFE();
 8003c02:	bf20      	wfe
}
 8003c04:	46c0      	nop			; (mov r8, r8)
 8003c06:	46bd      	mov	sp, r7
 8003c08:	b002      	add	sp, #8
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	e000ed00 	.word	0xe000ed00

08003c10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b088      	sub	sp, #32
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e305      	b.n	800422e <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2201      	movs	r2, #1
 8003c28:	4013      	ands	r3, r2
 8003c2a:	d100      	bne.n	8003c2e <HAL_RCC_OscConfig+0x1e>
 8003c2c:	e08d      	b.n	8003d4a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003c2e:	4bc5      	ldr	r3, [pc, #788]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	220c      	movs	r2, #12
 8003c34:	4013      	ands	r3, r2
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d00e      	beq.n	8003c58 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c3a:	4bc2      	ldr	r3, [pc, #776]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	220c      	movs	r2, #12
 8003c40:	4013      	ands	r3, r2
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d116      	bne.n	8003c74 <HAL_RCC_OscConfig+0x64>
 8003c46:	4bbf      	ldr	r3, [pc, #764]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	23c0      	movs	r3, #192	; 0xc0
 8003c4c:	025b      	lsls	r3, r3, #9
 8003c4e:	401a      	ands	r2, r3
 8003c50:	2380      	movs	r3, #128	; 0x80
 8003c52:	025b      	lsls	r3, r3, #9
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d10d      	bne.n	8003c74 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c58:	4bba      	ldr	r3, [pc, #744]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	2380      	movs	r3, #128	; 0x80
 8003c5e:	029b      	lsls	r3, r3, #10
 8003c60:	4013      	ands	r3, r2
 8003c62:	d100      	bne.n	8003c66 <HAL_RCC_OscConfig+0x56>
 8003c64:	e070      	b.n	8003d48 <HAL_RCC_OscConfig+0x138>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d000      	beq.n	8003c70 <HAL_RCC_OscConfig+0x60>
 8003c6e:	e06b      	b.n	8003d48 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e2dc      	b.n	800422e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d107      	bne.n	8003c8c <HAL_RCC_OscConfig+0x7c>
 8003c7c:	4bb1      	ldr	r3, [pc, #708]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	4bb0      	ldr	r3, [pc, #704]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003c82:	2180      	movs	r1, #128	; 0x80
 8003c84:	0249      	lsls	r1, r1, #9
 8003c86:	430a      	orrs	r2, r1
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	e02f      	b.n	8003cec <HAL_RCC_OscConfig+0xdc>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10c      	bne.n	8003cae <HAL_RCC_OscConfig+0x9e>
 8003c94:	4bab      	ldr	r3, [pc, #684]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	4baa      	ldr	r3, [pc, #680]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003c9a:	49ab      	ldr	r1, [pc, #684]	; (8003f48 <HAL_RCC_OscConfig+0x338>)
 8003c9c:	400a      	ands	r2, r1
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	4ba8      	ldr	r3, [pc, #672]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	4ba7      	ldr	r3, [pc, #668]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003ca6:	49a9      	ldr	r1, [pc, #676]	; (8003f4c <HAL_RCC_OscConfig+0x33c>)
 8003ca8:	400a      	ands	r2, r1
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	e01e      	b.n	8003cec <HAL_RCC_OscConfig+0xdc>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b05      	cmp	r3, #5
 8003cb4:	d10e      	bne.n	8003cd4 <HAL_RCC_OscConfig+0xc4>
 8003cb6:	4ba3      	ldr	r3, [pc, #652]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	4ba2      	ldr	r3, [pc, #648]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003cbc:	2180      	movs	r1, #128	; 0x80
 8003cbe:	02c9      	lsls	r1, r1, #11
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	4b9f      	ldr	r3, [pc, #636]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	4b9e      	ldr	r3, [pc, #632]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003cca:	2180      	movs	r1, #128	; 0x80
 8003ccc:	0249      	lsls	r1, r1, #9
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	e00b      	b.n	8003cec <HAL_RCC_OscConfig+0xdc>
 8003cd4:	4b9b      	ldr	r3, [pc, #620]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	4b9a      	ldr	r3, [pc, #616]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003cda:	499b      	ldr	r1, [pc, #620]	; (8003f48 <HAL_RCC_OscConfig+0x338>)
 8003cdc:	400a      	ands	r2, r1
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	4b98      	ldr	r3, [pc, #608]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	4b97      	ldr	r3, [pc, #604]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003ce6:	4999      	ldr	r1, [pc, #612]	; (8003f4c <HAL_RCC_OscConfig+0x33c>)
 8003ce8:	400a      	ands	r2, r1
 8003cea:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d014      	beq.n	8003d1e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf4:	f7fe fece 	bl	8002a94 <HAL_GetTick>
 8003cf8:	0003      	movs	r3, r0
 8003cfa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cfe:	f7fe fec9 	bl	8002a94 <HAL_GetTick>
 8003d02:	0002      	movs	r2, r0
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b64      	cmp	r3, #100	; 0x64
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e28e      	b.n	800422e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d10:	4b8c      	ldr	r3, [pc, #560]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	2380      	movs	r3, #128	; 0x80
 8003d16:	029b      	lsls	r3, r3, #10
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d0f0      	beq.n	8003cfe <HAL_RCC_OscConfig+0xee>
 8003d1c:	e015      	b.n	8003d4a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1e:	f7fe feb9 	bl	8002a94 <HAL_GetTick>
 8003d22:	0003      	movs	r3, r0
 8003d24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d28:	f7fe feb4 	bl	8002a94 <HAL_GetTick>
 8003d2c:	0002      	movs	r2, r0
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b64      	cmp	r3, #100	; 0x64
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e279      	b.n	800422e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d3a:	4b82      	ldr	r3, [pc, #520]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	2380      	movs	r3, #128	; 0x80
 8003d40:	029b      	lsls	r3, r3, #10
 8003d42:	4013      	ands	r3, r2
 8003d44:	d1f0      	bne.n	8003d28 <HAL_RCC_OscConfig+0x118>
 8003d46:	e000      	b.n	8003d4a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d48:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	4013      	ands	r3, r2
 8003d52:	d100      	bne.n	8003d56 <HAL_RCC_OscConfig+0x146>
 8003d54:	e06c      	b.n	8003e30 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003d56:	4b7b      	ldr	r3, [pc, #492]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	220c      	movs	r2, #12
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d00e      	beq.n	8003d7e <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003d60:	4b78      	ldr	r3, [pc, #480]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	220c      	movs	r2, #12
 8003d66:	4013      	ands	r3, r2
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	d11f      	bne.n	8003dac <HAL_RCC_OscConfig+0x19c>
 8003d6c:	4b75      	ldr	r3, [pc, #468]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	23c0      	movs	r3, #192	; 0xc0
 8003d72:	025b      	lsls	r3, r3, #9
 8003d74:	401a      	ands	r2, r3
 8003d76:	2380      	movs	r3, #128	; 0x80
 8003d78:	021b      	lsls	r3, r3, #8
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d116      	bne.n	8003dac <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d7e:	4b71      	ldr	r3, [pc, #452]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2202      	movs	r2, #2
 8003d84:	4013      	ands	r3, r2
 8003d86:	d005      	beq.n	8003d94 <HAL_RCC_OscConfig+0x184>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d001      	beq.n	8003d94 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e24c      	b.n	800422e <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d94:	4b6b      	ldr	r3, [pc, #428]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	22f8      	movs	r2, #248	; 0xf8
 8003d9a:	4393      	bics	r3, r2
 8003d9c:	0019      	movs	r1, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	00da      	lsls	r2, r3, #3
 8003da4:	4b67      	ldr	r3, [pc, #412]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003da6:	430a      	orrs	r2, r1
 8003da8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003daa:	e041      	b.n	8003e30 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d024      	beq.n	8003dfe <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003db4:	4b63      	ldr	r3, [pc, #396]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	4b62      	ldr	r3, [pc, #392]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003dba:	2101      	movs	r1, #1
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc0:	f7fe fe68 	bl	8002a94 <HAL_GetTick>
 8003dc4:	0003      	movs	r3, r0
 8003dc6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc8:	e008      	b.n	8003ddc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dca:	f7fe fe63 	bl	8002a94 <HAL_GetTick>
 8003dce:	0002      	movs	r2, r0
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e228      	b.n	800422e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ddc:	4b59      	ldr	r3, [pc, #356]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2202      	movs	r2, #2
 8003de2:	4013      	ands	r3, r2
 8003de4:	d0f1      	beq.n	8003dca <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de6:	4b57      	ldr	r3, [pc, #348]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	22f8      	movs	r2, #248	; 0xf8
 8003dec:	4393      	bics	r3, r2
 8003dee:	0019      	movs	r1, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	00da      	lsls	r2, r3, #3
 8003df6:	4b53      	ldr	r3, [pc, #332]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	e018      	b.n	8003e30 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dfe:	4b51      	ldr	r3, [pc, #324]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	4b50      	ldr	r3, [pc, #320]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003e04:	2101      	movs	r1, #1
 8003e06:	438a      	bics	r2, r1
 8003e08:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0a:	f7fe fe43 	bl	8002a94 <HAL_GetTick>
 8003e0e:	0003      	movs	r3, r0
 8003e10:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e14:	f7fe fe3e 	bl	8002a94 <HAL_GetTick>
 8003e18:	0002      	movs	r2, r0
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e203      	b.n	800422e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e26:	4b47      	ldr	r3, [pc, #284]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	d1f1      	bne.n	8003e14 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2208      	movs	r2, #8
 8003e36:	4013      	ands	r3, r2
 8003e38:	d036      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d019      	beq.n	8003e76 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e42:	4b40      	ldr	r3, [pc, #256]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003e44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e46:	4b3f      	ldr	r3, [pc, #252]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003e48:	2101      	movs	r1, #1
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e4e:	f7fe fe21 	bl	8002a94 <HAL_GetTick>
 8003e52:	0003      	movs	r3, r0
 8003e54:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e58:	f7fe fe1c 	bl	8002a94 <HAL_GetTick>
 8003e5c:	0002      	movs	r2, r0
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e1e1      	b.n	800422e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e6a:	4b36      	ldr	r3, [pc, #216]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	2202      	movs	r2, #2
 8003e70:	4013      	ands	r3, r2
 8003e72:	d0f1      	beq.n	8003e58 <HAL_RCC_OscConfig+0x248>
 8003e74:	e018      	b.n	8003ea8 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e76:	4b33      	ldr	r3, [pc, #204]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003e78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e7a:	4b32      	ldr	r3, [pc, #200]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	438a      	bics	r2, r1
 8003e80:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e82:	f7fe fe07 	bl	8002a94 <HAL_GetTick>
 8003e86:	0003      	movs	r3, r0
 8003e88:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e8c:	f7fe fe02 	bl	8002a94 <HAL_GetTick>
 8003e90:	0002      	movs	r2, r0
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e1c7      	b.n	800422e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e9e:	4b29      	ldr	r3, [pc, #164]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	d1f1      	bne.n	8003e8c <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2204      	movs	r2, #4
 8003eae:	4013      	ands	r3, r2
 8003eb0:	d100      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x2a4>
 8003eb2:	e0b5      	b.n	8004020 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eb4:	201f      	movs	r0, #31
 8003eb6:	183b      	adds	r3, r7, r0
 8003eb8:	2200      	movs	r2, #0
 8003eba:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ebc:	4b21      	ldr	r3, [pc, #132]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003ebe:	69da      	ldr	r2, [r3, #28]
 8003ec0:	2380      	movs	r3, #128	; 0x80
 8003ec2:	055b      	lsls	r3, r3, #21
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	d110      	bne.n	8003eea <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec8:	4b1e      	ldr	r3, [pc, #120]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003eca:	69da      	ldr	r2, [r3, #28]
 8003ecc:	4b1d      	ldr	r3, [pc, #116]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003ece:	2180      	movs	r1, #128	; 0x80
 8003ed0:	0549      	lsls	r1, r1, #21
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	61da      	str	r2, [r3, #28]
 8003ed6:	4b1b      	ldr	r3, [pc, #108]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003ed8:	69da      	ldr	r2, [r3, #28]
 8003eda:	2380      	movs	r3, #128	; 0x80
 8003edc:	055b      	lsls	r3, r3, #21
 8003ede:	4013      	ands	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ee4:	183b      	adds	r3, r7, r0
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eea:	4b19      	ldr	r3, [pc, #100]	; (8003f50 <HAL_RCC_OscConfig+0x340>)
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	2380      	movs	r3, #128	; 0x80
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	d11a      	bne.n	8003f2c <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ef6:	4b16      	ldr	r3, [pc, #88]	; (8003f50 <HAL_RCC_OscConfig+0x340>)
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	4b15      	ldr	r3, [pc, #84]	; (8003f50 <HAL_RCC_OscConfig+0x340>)
 8003efc:	2180      	movs	r1, #128	; 0x80
 8003efe:	0049      	lsls	r1, r1, #1
 8003f00:	430a      	orrs	r2, r1
 8003f02:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f04:	f7fe fdc6 	bl	8002a94 <HAL_GetTick>
 8003f08:	0003      	movs	r3, r0
 8003f0a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f0e:	f7fe fdc1 	bl	8002a94 <HAL_GetTick>
 8003f12:	0002      	movs	r2, r0
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b64      	cmp	r3, #100	; 0x64
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e186      	b.n	800422e <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f20:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <HAL_RCC_OscConfig+0x340>)
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	2380      	movs	r3, #128	; 0x80
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	4013      	ands	r3, r2
 8003f2a:	d0f0      	beq.n	8003f0e <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d10f      	bne.n	8003f54 <HAL_RCC_OscConfig+0x344>
 8003f34:	4b03      	ldr	r3, [pc, #12]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003f36:	6a1a      	ldr	r2, [r3, #32]
 8003f38:	4b02      	ldr	r3, [pc, #8]	; (8003f44 <HAL_RCC_OscConfig+0x334>)
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	621a      	str	r2, [r3, #32]
 8003f40:	e036      	b.n	8003fb0 <HAL_RCC_OscConfig+0x3a0>
 8003f42:	46c0      	nop			; (mov r8, r8)
 8003f44:	40021000 	.word	0x40021000
 8003f48:	fffeffff 	.word	0xfffeffff
 8003f4c:	fffbffff 	.word	0xfffbffff
 8003f50:	40007000 	.word	0x40007000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10c      	bne.n	8003f76 <HAL_RCC_OscConfig+0x366>
 8003f5c:	4bb6      	ldr	r3, [pc, #728]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 8003f5e:	6a1a      	ldr	r2, [r3, #32]
 8003f60:	4bb5      	ldr	r3, [pc, #724]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 8003f62:	2101      	movs	r1, #1
 8003f64:	438a      	bics	r2, r1
 8003f66:	621a      	str	r2, [r3, #32]
 8003f68:	4bb3      	ldr	r3, [pc, #716]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 8003f6a:	6a1a      	ldr	r2, [r3, #32]
 8003f6c:	4bb2      	ldr	r3, [pc, #712]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 8003f6e:	2104      	movs	r1, #4
 8003f70:	438a      	bics	r2, r1
 8003f72:	621a      	str	r2, [r3, #32]
 8003f74:	e01c      	b.n	8003fb0 <HAL_RCC_OscConfig+0x3a0>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	2b05      	cmp	r3, #5
 8003f7c:	d10c      	bne.n	8003f98 <HAL_RCC_OscConfig+0x388>
 8003f7e:	4bae      	ldr	r3, [pc, #696]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 8003f80:	6a1a      	ldr	r2, [r3, #32]
 8003f82:	4bad      	ldr	r3, [pc, #692]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 8003f84:	2104      	movs	r1, #4
 8003f86:	430a      	orrs	r2, r1
 8003f88:	621a      	str	r2, [r3, #32]
 8003f8a:	4bab      	ldr	r3, [pc, #684]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 8003f8c:	6a1a      	ldr	r2, [r3, #32]
 8003f8e:	4baa      	ldr	r3, [pc, #680]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 8003f90:	2101      	movs	r1, #1
 8003f92:	430a      	orrs	r2, r1
 8003f94:	621a      	str	r2, [r3, #32]
 8003f96:	e00b      	b.n	8003fb0 <HAL_RCC_OscConfig+0x3a0>
 8003f98:	4ba7      	ldr	r3, [pc, #668]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 8003f9a:	6a1a      	ldr	r2, [r3, #32]
 8003f9c:	4ba6      	ldr	r3, [pc, #664]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	438a      	bics	r2, r1
 8003fa2:	621a      	str	r2, [r3, #32]
 8003fa4:	4ba4      	ldr	r3, [pc, #656]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 8003fa6:	6a1a      	ldr	r2, [r3, #32]
 8003fa8:	4ba3      	ldr	r3, [pc, #652]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 8003faa:	2104      	movs	r1, #4
 8003fac:	438a      	bics	r2, r1
 8003fae:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d014      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fb8:	f7fe fd6c 	bl	8002a94 <HAL_GetTick>
 8003fbc:	0003      	movs	r3, r0
 8003fbe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc0:	e009      	b.n	8003fd6 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fc2:	f7fe fd67 	bl	8002a94 <HAL_GetTick>
 8003fc6:	0002      	movs	r2, r0
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	4a9b      	ldr	r2, [pc, #620]	; (800423c <HAL_RCC_OscConfig+0x62c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e12b      	b.n	800422e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd6:	4b98      	ldr	r3, [pc, #608]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	4013      	ands	r3, r2
 8003fde:	d0f0      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x3b2>
 8003fe0:	e013      	b.n	800400a <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fe2:	f7fe fd57 	bl	8002a94 <HAL_GetTick>
 8003fe6:	0003      	movs	r3, r0
 8003fe8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fea:	e009      	b.n	8004000 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fec:	f7fe fd52 	bl	8002a94 <HAL_GetTick>
 8003ff0:	0002      	movs	r2, r0
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	4a91      	ldr	r2, [pc, #580]	; (800423c <HAL_RCC_OscConfig+0x62c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e116      	b.n	800422e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004000:	4b8d      	ldr	r3, [pc, #564]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	2202      	movs	r2, #2
 8004006:	4013      	ands	r3, r2
 8004008:	d1f0      	bne.n	8003fec <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800400a:	231f      	movs	r3, #31
 800400c:	18fb      	adds	r3, r7, r3
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d105      	bne.n	8004020 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004014:	4b88      	ldr	r3, [pc, #544]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 8004016:	69da      	ldr	r2, [r3, #28]
 8004018:	4b87      	ldr	r3, [pc, #540]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 800401a:	4989      	ldr	r1, [pc, #548]	; (8004240 <HAL_RCC_OscConfig+0x630>)
 800401c:	400a      	ands	r2, r1
 800401e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2210      	movs	r2, #16
 8004026:	4013      	ands	r3, r2
 8004028:	d063      	beq.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d12a      	bne.n	8004088 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004032:	4b81      	ldr	r3, [pc, #516]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 8004034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004036:	4b80      	ldr	r3, [pc, #512]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 8004038:	2104      	movs	r1, #4
 800403a:	430a      	orrs	r2, r1
 800403c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800403e:	4b7e      	ldr	r3, [pc, #504]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 8004040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004042:	4b7d      	ldr	r3, [pc, #500]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 8004044:	2101      	movs	r1, #1
 8004046:	430a      	orrs	r2, r1
 8004048:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800404a:	f7fe fd23 	bl	8002a94 <HAL_GetTick>
 800404e:	0003      	movs	r3, r0
 8004050:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004054:	f7fe fd1e 	bl	8002a94 <HAL_GetTick>
 8004058:	0002      	movs	r2, r0
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e0e3      	b.n	800422e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004066:	4b74      	ldr	r3, [pc, #464]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 8004068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406a:	2202      	movs	r2, #2
 800406c:	4013      	ands	r3, r2
 800406e:	d0f1      	beq.n	8004054 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004070:	4b71      	ldr	r3, [pc, #452]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 8004072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004074:	22f8      	movs	r2, #248	; 0xf8
 8004076:	4393      	bics	r3, r2
 8004078:	0019      	movs	r1, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	00da      	lsls	r2, r3, #3
 8004080:	4b6d      	ldr	r3, [pc, #436]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 8004082:	430a      	orrs	r2, r1
 8004084:	635a      	str	r2, [r3, #52]	; 0x34
 8004086:	e034      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	3305      	adds	r3, #5
 800408e:	d111      	bne.n	80040b4 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004090:	4b69      	ldr	r3, [pc, #420]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 8004092:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004094:	4b68      	ldr	r3, [pc, #416]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 8004096:	2104      	movs	r1, #4
 8004098:	438a      	bics	r2, r1
 800409a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800409c:	4b66      	ldr	r3, [pc, #408]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 800409e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a0:	22f8      	movs	r2, #248	; 0xf8
 80040a2:	4393      	bics	r3, r2
 80040a4:	0019      	movs	r1, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	00da      	lsls	r2, r3, #3
 80040ac:	4b62      	ldr	r3, [pc, #392]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 80040ae:	430a      	orrs	r2, r1
 80040b0:	635a      	str	r2, [r3, #52]	; 0x34
 80040b2:	e01e      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80040b4:	4b60      	ldr	r3, [pc, #384]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 80040b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040b8:	4b5f      	ldr	r3, [pc, #380]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 80040ba:	2104      	movs	r1, #4
 80040bc:	430a      	orrs	r2, r1
 80040be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80040c0:	4b5d      	ldr	r3, [pc, #372]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 80040c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040c4:	4b5c      	ldr	r3, [pc, #368]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 80040c6:	2101      	movs	r1, #1
 80040c8:	438a      	bics	r2, r1
 80040ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040cc:	f7fe fce2 	bl	8002a94 <HAL_GetTick>
 80040d0:	0003      	movs	r3, r0
 80040d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80040d6:	f7fe fcdd 	bl	8002a94 <HAL_GetTick>
 80040da:	0002      	movs	r2, r0
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e0a2      	b.n	800422e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80040e8:	4b53      	ldr	r3, [pc, #332]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 80040ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ec:	2202      	movs	r2, #2
 80040ee:	4013      	ands	r3, r2
 80040f0:	d1f1      	bne.n	80040d6 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d100      	bne.n	80040fc <HAL_RCC_OscConfig+0x4ec>
 80040fa:	e097      	b.n	800422c <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040fc:	4b4e      	ldr	r3, [pc, #312]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	220c      	movs	r2, #12
 8004102:	4013      	ands	r3, r2
 8004104:	2b08      	cmp	r3, #8
 8004106:	d100      	bne.n	800410a <HAL_RCC_OscConfig+0x4fa>
 8004108:	e06b      	b.n	80041e2 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	2b02      	cmp	r3, #2
 8004110:	d14c      	bne.n	80041ac <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004112:	4b49      	ldr	r3, [pc, #292]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	4b48      	ldr	r3, [pc, #288]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 8004118:	494a      	ldr	r1, [pc, #296]	; (8004244 <HAL_RCC_OscConfig+0x634>)
 800411a:	400a      	ands	r2, r1
 800411c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411e:	f7fe fcb9 	bl	8002a94 <HAL_GetTick>
 8004122:	0003      	movs	r3, r0
 8004124:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004128:	f7fe fcb4 	bl	8002a94 <HAL_GetTick>
 800412c:	0002      	movs	r2, r0
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e079      	b.n	800422e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800413a:	4b3f      	ldr	r3, [pc, #252]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	2380      	movs	r3, #128	; 0x80
 8004140:	049b      	lsls	r3, r3, #18
 8004142:	4013      	ands	r3, r2
 8004144:	d1f0      	bne.n	8004128 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004146:	4b3c      	ldr	r3, [pc, #240]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 8004148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414a:	220f      	movs	r2, #15
 800414c:	4393      	bics	r3, r2
 800414e:	0019      	movs	r1, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004154:	4b38      	ldr	r3, [pc, #224]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 8004156:	430a      	orrs	r2, r1
 8004158:	62da      	str	r2, [r3, #44]	; 0x2c
 800415a:	4b37      	ldr	r3, [pc, #220]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	4a3a      	ldr	r2, [pc, #232]	; (8004248 <HAL_RCC_OscConfig+0x638>)
 8004160:	4013      	ands	r3, r2
 8004162:	0019      	movs	r1, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	431a      	orrs	r2, r3
 800416e:	4b32      	ldr	r3, [pc, #200]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 8004170:	430a      	orrs	r2, r1
 8004172:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004174:	4b30      	ldr	r3, [pc, #192]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	4b2f      	ldr	r3, [pc, #188]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 800417a:	2180      	movs	r1, #128	; 0x80
 800417c:	0449      	lsls	r1, r1, #17
 800417e:	430a      	orrs	r2, r1
 8004180:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004182:	f7fe fc87 	bl	8002a94 <HAL_GetTick>
 8004186:	0003      	movs	r3, r0
 8004188:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800418c:	f7fe fc82 	bl	8002a94 <HAL_GetTick>
 8004190:	0002      	movs	r2, r0
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e047      	b.n	800422e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800419e:	4b26      	ldr	r3, [pc, #152]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	2380      	movs	r3, #128	; 0x80
 80041a4:	049b      	lsls	r3, r3, #18
 80041a6:	4013      	ands	r3, r2
 80041a8:	d0f0      	beq.n	800418c <HAL_RCC_OscConfig+0x57c>
 80041aa:	e03f      	b.n	800422c <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ac:	4b22      	ldr	r3, [pc, #136]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	4b21      	ldr	r3, [pc, #132]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 80041b2:	4924      	ldr	r1, [pc, #144]	; (8004244 <HAL_RCC_OscConfig+0x634>)
 80041b4:	400a      	ands	r2, r1
 80041b6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b8:	f7fe fc6c 	bl	8002a94 <HAL_GetTick>
 80041bc:	0003      	movs	r3, r0
 80041be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041c0:	e008      	b.n	80041d4 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041c2:	f7fe fc67 	bl	8002a94 <HAL_GetTick>
 80041c6:	0002      	movs	r2, r0
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e02c      	b.n	800422e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041d4:	4b18      	ldr	r3, [pc, #96]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	2380      	movs	r3, #128	; 0x80
 80041da:	049b      	lsls	r3, r3, #18
 80041dc:	4013      	ands	r3, r2
 80041de:	d1f0      	bne.n	80041c2 <HAL_RCC_OscConfig+0x5b2>
 80041e0:	e024      	b.n	800422c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d101      	bne.n	80041ee <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e01f      	b.n	800422e <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80041ee:	4b12      	ldr	r3, [pc, #72]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80041f4:	4b10      	ldr	r3, [pc, #64]	; (8004238 <HAL_RCC_OscConfig+0x628>)
 80041f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	23c0      	movs	r3, #192	; 0xc0
 80041fe:	025b      	lsls	r3, r3, #9
 8004200:	401a      	ands	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	429a      	cmp	r2, r3
 8004208:	d10e      	bne.n	8004228 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	220f      	movs	r2, #15
 800420e:	401a      	ands	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004214:	429a      	cmp	r2, r3
 8004216:	d107      	bne.n	8004228 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	23f0      	movs	r3, #240	; 0xf0
 800421c:	039b      	lsls	r3, r3, #14
 800421e:	401a      	ands	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004224:	429a      	cmp	r2, r3
 8004226:	d001      	beq.n	800422c <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e000      	b.n	800422e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	0018      	movs	r0, r3
 8004230:	46bd      	mov	sp, r7
 8004232:	b008      	add	sp, #32
 8004234:	bd80      	pop	{r7, pc}
 8004236:	46c0      	nop			; (mov r8, r8)
 8004238:	40021000 	.word	0x40021000
 800423c:	00001388 	.word	0x00001388
 8004240:	efffffff 	.word	0xefffffff
 8004244:	feffffff 	.word	0xfeffffff
 8004248:	ffc27fff 	.word	0xffc27fff

0800424c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e0b3      	b.n	80043c8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004260:	4b5b      	ldr	r3, [pc, #364]	; (80043d0 <HAL_RCC_ClockConfig+0x184>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2201      	movs	r2, #1
 8004266:	4013      	ands	r3, r2
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d911      	bls.n	8004292 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800426e:	4b58      	ldr	r3, [pc, #352]	; (80043d0 <HAL_RCC_ClockConfig+0x184>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2201      	movs	r2, #1
 8004274:	4393      	bics	r3, r2
 8004276:	0019      	movs	r1, r3
 8004278:	4b55      	ldr	r3, [pc, #340]	; (80043d0 <HAL_RCC_ClockConfig+0x184>)
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004280:	4b53      	ldr	r3, [pc, #332]	; (80043d0 <HAL_RCC_ClockConfig+0x184>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2201      	movs	r2, #1
 8004286:	4013      	ands	r3, r2
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d001      	beq.n	8004292 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e09a      	b.n	80043c8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2202      	movs	r2, #2
 8004298:	4013      	ands	r3, r2
 800429a:	d015      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2204      	movs	r2, #4
 80042a2:	4013      	ands	r3, r2
 80042a4:	d006      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80042a6:	4b4b      	ldr	r3, [pc, #300]	; (80043d4 <HAL_RCC_ClockConfig+0x188>)
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	4b4a      	ldr	r3, [pc, #296]	; (80043d4 <HAL_RCC_ClockConfig+0x188>)
 80042ac:	21e0      	movs	r1, #224	; 0xe0
 80042ae:	00c9      	lsls	r1, r1, #3
 80042b0:	430a      	orrs	r2, r1
 80042b2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042b4:	4b47      	ldr	r3, [pc, #284]	; (80043d4 <HAL_RCC_ClockConfig+0x188>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	22f0      	movs	r2, #240	; 0xf0
 80042ba:	4393      	bics	r3, r2
 80042bc:	0019      	movs	r1, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689a      	ldr	r2, [r3, #8]
 80042c2:	4b44      	ldr	r3, [pc, #272]	; (80043d4 <HAL_RCC_ClockConfig+0x188>)
 80042c4:	430a      	orrs	r2, r1
 80042c6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2201      	movs	r2, #1
 80042ce:	4013      	ands	r3, r2
 80042d0:	d040      	beq.n	8004354 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d107      	bne.n	80042ea <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042da:	4b3e      	ldr	r3, [pc, #248]	; (80043d4 <HAL_RCC_ClockConfig+0x188>)
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	2380      	movs	r3, #128	; 0x80
 80042e0:	029b      	lsls	r3, r3, #10
 80042e2:	4013      	ands	r3, r2
 80042e4:	d114      	bne.n	8004310 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e06e      	b.n	80043c8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d107      	bne.n	8004302 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f2:	4b38      	ldr	r3, [pc, #224]	; (80043d4 <HAL_RCC_ClockConfig+0x188>)
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	2380      	movs	r3, #128	; 0x80
 80042f8:	049b      	lsls	r3, r3, #18
 80042fa:	4013      	ands	r3, r2
 80042fc:	d108      	bne.n	8004310 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e062      	b.n	80043c8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004302:	4b34      	ldr	r3, [pc, #208]	; (80043d4 <HAL_RCC_ClockConfig+0x188>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2202      	movs	r2, #2
 8004308:	4013      	ands	r3, r2
 800430a:	d101      	bne.n	8004310 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e05b      	b.n	80043c8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004310:	4b30      	ldr	r3, [pc, #192]	; (80043d4 <HAL_RCC_ClockConfig+0x188>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2203      	movs	r2, #3
 8004316:	4393      	bics	r3, r2
 8004318:	0019      	movs	r1, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	4b2d      	ldr	r3, [pc, #180]	; (80043d4 <HAL_RCC_ClockConfig+0x188>)
 8004320:	430a      	orrs	r2, r1
 8004322:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004324:	f7fe fbb6 	bl	8002a94 <HAL_GetTick>
 8004328:	0003      	movs	r3, r0
 800432a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432c:	e009      	b.n	8004342 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800432e:	f7fe fbb1 	bl	8002a94 <HAL_GetTick>
 8004332:	0002      	movs	r2, r0
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	4a27      	ldr	r2, [pc, #156]	; (80043d8 <HAL_RCC_ClockConfig+0x18c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e042      	b.n	80043c8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004342:	4b24      	ldr	r3, [pc, #144]	; (80043d4 <HAL_RCC_ClockConfig+0x188>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	220c      	movs	r2, #12
 8004348:	401a      	ands	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	429a      	cmp	r2, r3
 8004352:	d1ec      	bne.n	800432e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004354:	4b1e      	ldr	r3, [pc, #120]	; (80043d0 <HAL_RCC_ClockConfig+0x184>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2201      	movs	r2, #1
 800435a:	4013      	ands	r3, r2
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d211      	bcs.n	8004386 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004362:	4b1b      	ldr	r3, [pc, #108]	; (80043d0 <HAL_RCC_ClockConfig+0x184>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2201      	movs	r2, #1
 8004368:	4393      	bics	r3, r2
 800436a:	0019      	movs	r1, r3
 800436c:	4b18      	ldr	r3, [pc, #96]	; (80043d0 <HAL_RCC_ClockConfig+0x184>)
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004374:	4b16      	ldr	r3, [pc, #88]	; (80043d0 <HAL_RCC_ClockConfig+0x184>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2201      	movs	r2, #1
 800437a:	4013      	ands	r3, r2
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d001      	beq.n	8004386 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e020      	b.n	80043c8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2204      	movs	r2, #4
 800438c:	4013      	ands	r3, r2
 800438e:	d009      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004390:	4b10      	ldr	r3, [pc, #64]	; (80043d4 <HAL_RCC_ClockConfig+0x188>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	4a11      	ldr	r2, [pc, #68]	; (80043dc <HAL_RCC_ClockConfig+0x190>)
 8004396:	4013      	ands	r3, r2
 8004398:	0019      	movs	r1, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	4b0d      	ldr	r3, [pc, #52]	; (80043d4 <HAL_RCC_ClockConfig+0x188>)
 80043a0:	430a      	orrs	r2, r1
 80043a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80043a4:	f000 f820 	bl	80043e8 <HAL_RCC_GetSysClockFreq>
 80043a8:	0001      	movs	r1, r0
 80043aa:	4b0a      	ldr	r3, [pc, #40]	; (80043d4 <HAL_RCC_ClockConfig+0x188>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	091b      	lsrs	r3, r3, #4
 80043b0:	220f      	movs	r2, #15
 80043b2:	4013      	ands	r3, r2
 80043b4:	4a0a      	ldr	r2, [pc, #40]	; (80043e0 <HAL_RCC_ClockConfig+0x194>)
 80043b6:	5cd3      	ldrb	r3, [r2, r3]
 80043b8:	000a      	movs	r2, r1
 80043ba:	40da      	lsrs	r2, r3
 80043bc:	4b09      	ldr	r3, [pc, #36]	; (80043e4 <HAL_RCC_ClockConfig+0x198>)
 80043be:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80043c0:	2003      	movs	r0, #3
 80043c2:	f7fe fb21 	bl	8002a08 <HAL_InitTick>
  
  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	0018      	movs	r0, r3
 80043ca:	46bd      	mov	sp, r7
 80043cc:	b004      	add	sp, #16
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40022000 	.word	0x40022000
 80043d4:	40021000 	.word	0x40021000
 80043d8:	00001388 	.word	0x00001388
 80043dc:	fffff8ff 	.word	0xfffff8ff
 80043e0:	08006a8c 	.word	0x08006a8c
 80043e4:	200004e8 	.word	0x200004e8

080043e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	2300      	movs	r3, #0
 80043f4:	60bb      	str	r3, [r7, #8]
 80043f6:	2300      	movs	r3, #0
 80043f8:	617b      	str	r3, [r7, #20]
 80043fa:	2300      	movs	r3, #0
 80043fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80043fe:	2300      	movs	r3, #0
 8004400:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004402:	4b21      	ldr	r3, [pc, #132]	; (8004488 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	220c      	movs	r2, #12
 800440c:	4013      	ands	r3, r2
 800440e:	2b04      	cmp	r3, #4
 8004410:	d002      	beq.n	8004418 <HAL_RCC_GetSysClockFreq+0x30>
 8004412:	2b08      	cmp	r3, #8
 8004414:	d003      	beq.n	800441e <HAL_RCC_GetSysClockFreq+0x36>
 8004416:	e02e      	b.n	8004476 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004418:	4b1c      	ldr	r3, [pc, #112]	; (800448c <HAL_RCC_GetSysClockFreq+0xa4>)
 800441a:	613b      	str	r3, [r7, #16]
      break;
 800441c:	e02e      	b.n	800447c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	0c9b      	lsrs	r3, r3, #18
 8004422:	220f      	movs	r2, #15
 8004424:	4013      	ands	r3, r2
 8004426:	4a1a      	ldr	r2, [pc, #104]	; (8004490 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004428:	5cd3      	ldrb	r3, [r2, r3]
 800442a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800442c:	4b16      	ldr	r3, [pc, #88]	; (8004488 <HAL_RCC_GetSysClockFreq+0xa0>)
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	220f      	movs	r2, #15
 8004432:	4013      	ands	r3, r2
 8004434:	4a17      	ldr	r2, [pc, #92]	; (8004494 <HAL_RCC_GetSysClockFreq+0xac>)
 8004436:	5cd3      	ldrb	r3, [r2, r3]
 8004438:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	23c0      	movs	r3, #192	; 0xc0
 800443e:	025b      	lsls	r3, r3, #9
 8004440:	401a      	ands	r2, r3
 8004442:	2380      	movs	r3, #128	; 0x80
 8004444:	025b      	lsls	r3, r3, #9
 8004446:	429a      	cmp	r2, r3
 8004448:	d109      	bne.n	800445e <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800444a:	68b9      	ldr	r1, [r7, #8]
 800444c:	480f      	ldr	r0, [pc, #60]	; (800448c <HAL_RCC_GetSysClockFreq+0xa4>)
 800444e:	f7fb fe63 	bl	8000118 <__udivsi3>
 8004452:	0003      	movs	r3, r0
 8004454:	001a      	movs	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4353      	muls	r3, r2
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	e008      	b.n	8004470 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800445e:	68b9      	ldr	r1, [r7, #8]
 8004460:	480d      	ldr	r0, [pc, #52]	; (8004498 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004462:	f7fb fe59 	bl	8000118 <__udivsi3>
 8004466:	0003      	movs	r3, r0
 8004468:	001a      	movs	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4353      	muls	r3, r2
 800446e:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	613b      	str	r3, [r7, #16]
      break;
 8004474:	e002      	b.n	800447c <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004476:	4b08      	ldr	r3, [pc, #32]	; (8004498 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004478:	613b      	str	r3, [r7, #16]
      break;
 800447a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800447c:	693b      	ldr	r3, [r7, #16]
}
 800447e:	0018      	movs	r0, r3
 8004480:	46bd      	mov	sp, r7
 8004482:	b006      	add	sp, #24
 8004484:	bd80      	pop	{r7, pc}
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	40021000 	.word	0x40021000
 800448c:	01e84800 	.word	0x01e84800
 8004490:	08006a9c 	.word	0x08006a9c
 8004494:	08006aac 	.word	0x08006aac
 8004498:	007a1200 	.word	0x007a1200

0800449c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	2380      	movs	r3, #128	; 0x80
 80044b2:	025b      	lsls	r3, r3, #9
 80044b4:	4013      	ands	r3, r2
 80044b6:	d100      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80044b8:	e08e      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80044ba:	2017      	movs	r0, #23
 80044bc:	183b      	adds	r3, r7, r0
 80044be:	2200      	movs	r2, #0
 80044c0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044c2:	4b57      	ldr	r3, [pc, #348]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80044c4:	69da      	ldr	r2, [r3, #28]
 80044c6:	2380      	movs	r3, #128	; 0x80
 80044c8:	055b      	lsls	r3, r3, #21
 80044ca:	4013      	ands	r3, r2
 80044cc:	d110      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044ce:	4b54      	ldr	r3, [pc, #336]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80044d0:	69da      	ldr	r2, [r3, #28]
 80044d2:	4b53      	ldr	r3, [pc, #332]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80044d4:	2180      	movs	r1, #128	; 0x80
 80044d6:	0549      	lsls	r1, r1, #21
 80044d8:	430a      	orrs	r2, r1
 80044da:	61da      	str	r2, [r3, #28]
 80044dc:	4b50      	ldr	r3, [pc, #320]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80044de:	69da      	ldr	r2, [r3, #28]
 80044e0:	2380      	movs	r3, #128	; 0x80
 80044e2:	055b      	lsls	r3, r3, #21
 80044e4:	4013      	ands	r3, r2
 80044e6:	60bb      	str	r3, [r7, #8]
 80044e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ea:	183b      	adds	r3, r7, r0
 80044ec:	2201      	movs	r2, #1
 80044ee:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f0:	4b4c      	ldr	r3, [pc, #304]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	2380      	movs	r3, #128	; 0x80
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	4013      	ands	r3, r2
 80044fa:	d11a      	bne.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044fc:	4b49      	ldr	r3, [pc, #292]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	4b48      	ldr	r3, [pc, #288]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004502:	2180      	movs	r1, #128	; 0x80
 8004504:	0049      	lsls	r1, r1, #1
 8004506:	430a      	orrs	r2, r1
 8004508:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800450a:	f7fe fac3 	bl	8002a94 <HAL_GetTick>
 800450e:	0003      	movs	r3, r0
 8004510:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004512:	e008      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004514:	f7fe fabe 	bl	8002a94 <HAL_GetTick>
 8004518:	0002      	movs	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b64      	cmp	r3, #100	; 0x64
 8004520:	d901      	bls.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e077      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004526:	4b3f      	ldr	r3, [pc, #252]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	2380      	movs	r3, #128	; 0x80
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	4013      	ands	r3, r2
 8004530:	d0f0      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004532:	4b3b      	ldr	r3, [pc, #236]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004534:	6a1a      	ldr	r2, [r3, #32]
 8004536:	23c0      	movs	r3, #192	; 0xc0
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4013      	ands	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d034      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	23c0      	movs	r3, #192	; 0xc0
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4013      	ands	r3, r2
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	429a      	cmp	r2, r3
 8004552:	d02c      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004554:	4b32      	ldr	r3, [pc, #200]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	4a33      	ldr	r2, [pc, #204]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800455a:	4013      	ands	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800455e:	4b30      	ldr	r3, [pc, #192]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004560:	6a1a      	ldr	r2, [r3, #32]
 8004562:	4b2f      	ldr	r3, [pc, #188]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004564:	2180      	movs	r1, #128	; 0x80
 8004566:	0249      	lsls	r1, r1, #9
 8004568:	430a      	orrs	r2, r1
 800456a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800456c:	4b2c      	ldr	r3, [pc, #176]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800456e:	6a1a      	ldr	r2, [r3, #32]
 8004570:	4b2b      	ldr	r3, [pc, #172]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004572:	492e      	ldr	r1, [pc, #184]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004574:	400a      	ands	r2, r1
 8004576:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004578:	4b29      	ldr	r3, [pc, #164]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2201      	movs	r2, #1
 8004582:	4013      	ands	r3, r2
 8004584:	d013      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004586:	f7fe fa85 	bl	8002a94 <HAL_GetTick>
 800458a:	0003      	movs	r3, r0
 800458c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800458e:	e009      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004590:	f7fe fa80 	bl	8002a94 <HAL_GetTick>
 8004594:	0002      	movs	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	4a25      	ldr	r2, [pc, #148]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d901      	bls.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e038      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a4:	4b1e      	ldr	r3, [pc, #120]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	2202      	movs	r2, #2
 80045aa:	4013      	ands	r3, r2
 80045ac:	d0f0      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045ae:	4b1c      	ldr	r3, [pc, #112]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	4a1d      	ldr	r2, [pc, #116]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80045b4:	4013      	ands	r3, r2
 80045b6:	0019      	movs	r1, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	4b18      	ldr	r3, [pc, #96]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045be:	430a      	orrs	r2, r1
 80045c0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80045c2:	2317      	movs	r3, #23
 80045c4:	18fb      	adds	r3, r7, r3
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d105      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045cc:	4b14      	ldr	r3, [pc, #80]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045ce:	69da      	ldr	r2, [r3, #28]
 80045d0:	4b13      	ldr	r3, [pc, #76]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045d2:	4918      	ldr	r1, [pc, #96]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80045d4:	400a      	ands	r2, r1
 80045d6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2201      	movs	r2, #1
 80045de:	4013      	ands	r3, r2
 80045e0:	d009      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045e2:	4b0f      	ldr	r3, [pc, #60]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e6:	2203      	movs	r2, #3
 80045e8:	4393      	bics	r3, r2
 80045ea:	0019      	movs	r1, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	4b0b      	ldr	r3, [pc, #44]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045f2:	430a      	orrs	r2, r1
 80045f4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2220      	movs	r2, #32
 80045fc:	4013      	ands	r3, r2
 80045fe:	d009      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004600:	4b07      	ldr	r3, [pc, #28]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004604:	2210      	movs	r2, #16
 8004606:	4393      	bics	r3, r2
 8004608:	0019      	movs	r1, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	4b04      	ldr	r3, [pc, #16]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004610:	430a      	orrs	r2, r1
 8004612:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	0018      	movs	r0, r3
 8004618:	46bd      	mov	sp, r7
 800461a:	b006      	add	sp, #24
 800461c:	bd80      	pop	{r7, pc}
 800461e:	46c0      	nop			; (mov r8, r8)
 8004620:	40021000 	.word	0x40021000
 8004624:	40007000 	.word	0x40007000
 8004628:	fffffcff 	.word	0xfffffcff
 800462c:	fffeffff 	.word	0xfffeffff
 8004630:	00001388 	.word	0x00001388
 8004634:	efffffff 	.word	0xefffffff

08004638 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004638:	b5b0      	push	{r4, r5, r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004640:	230f      	movs	r3, #15
 8004642:	18fb      	adds	r3, r7, r3
 8004644:	2201      	movs	r2, #1
 8004646:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e081      	b.n	8004756 <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	7f5b      	ldrb	r3, [r3, #29]
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	d106      	bne.n	800466a <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	0018      	movs	r0, r3
 8004666:	f7fd fee3 	bl	8002430 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2202      	movs	r2, #2
 800466e:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	2210      	movs	r2, #16
 8004678:	4013      	ands	r3, r2
 800467a:	2b10      	cmp	r3, #16
 800467c:	d05c      	beq.n	8004738 <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	22ca      	movs	r2, #202	; 0xca
 8004684:	625a      	str	r2, [r3, #36]	; 0x24
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2253      	movs	r2, #83	; 0x53
 800468c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800468e:	250f      	movs	r5, #15
 8004690:	197c      	adds	r4, r7, r5
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	0018      	movs	r0, r3
 8004696:	f000 fa73 	bl	8004b80 <RTC_EnterInitMode>
 800469a:	0003      	movs	r3, r0
 800469c:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 800469e:	0028      	movs	r0, r5
 80046a0:	183b      	adds	r3, r7, r0
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d12c      	bne.n	8004702 <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689a      	ldr	r2, [r3, #8]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	492b      	ldr	r1, [pc, #172]	; (8004760 <HAL_RTC_Init+0x128>)
 80046b4:	400a      	ands	r2, r1
 80046b6:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6899      	ldr	r1, [r3, #8]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	431a      	orrs	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	68d2      	ldr	r2, [r2, #12]
 80046de:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6919      	ldr	r1, [r3, #16]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	041a      	lsls	r2, r3, #16
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80046f4:	183c      	adds	r4, r7, r0
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	0018      	movs	r0, r3
 80046fa:	f000 fa84 	bl	8004c06 <RTC_ExitInitMode>
 80046fe:	0003      	movs	r3, r0
 8004700:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8004702:	230f      	movs	r3, #15
 8004704:	18fb      	adds	r3, r7, r3
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d110      	bne.n	800472e <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4913      	ldr	r1, [pc, #76]	; (8004764 <HAL_RTC_Init+0x12c>)
 8004718:	400a      	ands	r2, r1
 800471a:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699a      	ldr	r2, [r3, #24]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	22ff      	movs	r2, #255	; 0xff
 8004734:	625a      	str	r2, [r3, #36]	; 0x24
 8004736:	e003      	b.n	8004740 <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004738:	230f      	movs	r3, #15
 800473a:	18fb      	adds	r3, r7, r3
 800473c:	2200      	movs	r2, #0
 800473e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8004740:	230f      	movs	r3, #15
 8004742:	18fb      	adds	r3, r7, r3
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d102      	bne.n	8004750 <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004750:	230f      	movs	r3, #15
 8004752:	18fb      	adds	r3, r7, r3
 8004754:	781b      	ldrb	r3, [r3, #0]
}
 8004756:	0018      	movs	r0, r3
 8004758:	46bd      	mov	sp, r7
 800475a:	b004      	add	sp, #16
 800475c:	bdb0      	pop	{r4, r5, r7, pc}
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	ff8fffbf 	.word	0xff8fffbf
 8004764:	fffbffff 	.word	0xfffbffff

08004768 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004768:	b5b0      	push	{r4, r5, r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	7f1b      	ldrb	r3, [r3, #28]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_RTC_SetTime+0x1c>
 8004780:	2302      	movs	r3, #2
 8004782:	e08e      	b.n	80048a2 <HAL_RTC_SetTime+0x13a>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2201      	movs	r2, #1
 8004788:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2202      	movs	r2, #2
 800478e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d125      	bne.n	80047e2 <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	2240      	movs	r2, #64	; 0x40
 800479e:	4013      	ands	r3, r2
 80047a0:	d102      	bne.n	80047a8 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	2200      	movs	r2, #0
 80047a6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	0018      	movs	r0, r3
 80047ae:	f000 fa53 	bl	8004c58 <RTC_ByteToBcd2>
 80047b2:	0003      	movs	r3, r0
 80047b4:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	785b      	ldrb	r3, [r3, #1]
 80047ba:	0018      	movs	r0, r3
 80047bc:	f000 fa4c 	bl	8004c58 <RTC_ByteToBcd2>
 80047c0:	0003      	movs	r3, r0
 80047c2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80047c4:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	789b      	ldrb	r3, [r3, #2]
 80047ca:	0018      	movs	r0, r3
 80047cc:	f000 fa44 	bl	8004c58 <RTC_ByteToBcd2>
 80047d0:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80047d2:	0022      	movs	r2, r4
 80047d4:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	78db      	ldrb	r3, [r3, #3]
 80047da:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80047dc:	4313      	orrs	r3, r2
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	e017      	b.n	8004812 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	2240      	movs	r2, #64	; 0x40
 80047ea:	4013      	ands	r3, r2
 80047ec:	d102      	bne.n	80047f4 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	2200      	movs	r2, #0
 80047f2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	785b      	ldrb	r3, [r3, #1]
 80047fe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004800:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004806:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	78db      	ldrb	r3, [r3, #3]
 800480c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800480e:	4313      	orrs	r3, r2
 8004810:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	22ca      	movs	r2, #202	; 0xca
 8004818:	625a      	str	r2, [r3, #36]	; 0x24
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2253      	movs	r2, #83	; 0x53
 8004820:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004822:	2513      	movs	r5, #19
 8004824:	197c      	adds	r4, r7, r5
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	0018      	movs	r0, r3
 800482a:	f000 f9a9 	bl	8004b80 <RTC_EnterInitMode>
 800482e:	0003      	movs	r3, r0
 8004830:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8004832:	0028      	movs	r0, r5
 8004834:	183b      	adds	r3, r7, r0
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d120      	bne.n	800487e <HAL_RTC_SetTime+0x116>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	491a      	ldr	r1, [pc, #104]	; (80048ac <HAL_RTC_SetTime+0x144>)
 8004844:	400a      	ands	r2, r1
 8004846:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689a      	ldr	r2, [r3, #8]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4917      	ldr	r1, [pc, #92]	; (80048b0 <HAL_RTC_SetTime+0x148>)
 8004854:	400a      	ands	r2, r1
 8004856:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6899      	ldr	r1, [r3, #8]
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	431a      	orrs	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004870:	183c      	adds	r4, r7, r0
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	0018      	movs	r0, r3
 8004876:	f000 f9c6 	bl	8004c06 <RTC_ExitInitMode>
 800487a:	0003      	movs	r3, r0
 800487c:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 800487e:	2313      	movs	r3, #19
 8004880:	18fb      	adds	r3, r7, r3
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d102      	bne.n	800488e <HAL_RTC_SetTime+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2201      	movs	r2, #1
 800488c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	22ff      	movs	r2, #255	; 0xff
 8004894:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	771a      	strb	r2, [r3, #28]

  return status;
 800489c:	2313      	movs	r3, #19
 800489e:	18fb      	adds	r3, r7, r3
 80048a0:	781b      	ldrb	r3, [r3, #0]
}
 80048a2:	0018      	movs	r0, r3
 80048a4:	46bd      	mov	sp, r7
 80048a6:	b006      	add	sp, #24
 80048a8:	bdb0      	pop	{r4, r5, r7, pc}
 80048aa:	46c0      	nop			; (mov r8, r8)
 80048ac:	007f7f7f 	.word	0x007f7f7f
 80048b0:	fffbffff 	.word	0xfffbffff

080048b4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	045b      	lsls	r3, r3, #17
 80048d6:	0c5a      	lsrs	r2, r3, #17
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a22      	ldr	r2, [pc, #136]	; (800496c <HAL_RTC_GetTime+0xb8>)
 80048e4:	4013      	ands	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	0c1b      	lsrs	r3, r3, #16
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	223f      	movs	r2, #63	; 0x3f
 80048f0:	4013      	ands	r3, r2
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	0a1b      	lsrs	r3, r3, #8
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	227f      	movs	r2, #127	; 0x7f
 8004900:	4013      	ands	r3, r2
 8004902:	b2da      	uxtb	r2, r3
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	b2db      	uxtb	r3, r3
 800490c:	227f      	movs	r2, #127	; 0x7f
 800490e:	4013      	ands	r3, r2
 8004910:	b2da      	uxtb	r2, r3
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	0d9b      	lsrs	r3, r3, #22
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2201      	movs	r2, #1
 800491e:	4013      	ands	r3, r2
 8004920:	b2da      	uxtb	r2, r3
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d11a      	bne.n	8004962 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	0018      	movs	r0, r3
 8004932:	f000 f9b2 	bl	8004c9a <RTC_Bcd2ToByte>
 8004936:	0003      	movs	r3, r0
 8004938:	001a      	movs	r2, r3
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	785b      	ldrb	r3, [r3, #1]
 8004942:	0018      	movs	r0, r3
 8004944:	f000 f9a9 	bl	8004c9a <RTC_Bcd2ToByte>
 8004948:	0003      	movs	r3, r0
 800494a:	001a      	movs	r2, r3
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	789b      	ldrb	r3, [r3, #2]
 8004954:	0018      	movs	r0, r3
 8004956:	f000 f9a0 	bl	8004c9a <RTC_Bcd2ToByte>
 800495a:	0003      	movs	r3, r0
 800495c:	001a      	movs	r2, r3
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	0018      	movs	r0, r3
 8004966:	46bd      	mov	sp, r7
 8004968:	b006      	add	sp, #24
 800496a:	bd80      	pop	{r7, pc}
 800496c:	007f7f7f 	.word	0x007f7f7f

08004970 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004970:	b5b0      	push	{r4, r5, r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800497c:	2300      	movs	r3, #0
 800497e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	7f1b      	ldrb	r3, [r3, #28]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d101      	bne.n	800498c <HAL_RTC_SetDate+0x1c>
 8004988:	2302      	movs	r3, #2
 800498a:	e07a      	b.n	8004a82 <HAL_RTC_SetDate+0x112>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2201      	movs	r2, #1
 8004990:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2202      	movs	r2, #2
 8004996:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10e      	bne.n	80049bc <HAL_RTC_SetDate+0x4c>
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	785b      	ldrb	r3, [r3, #1]
 80049a2:	001a      	movs	r2, r3
 80049a4:	2310      	movs	r3, #16
 80049a6:	4013      	ands	r3, r2
 80049a8:	d008      	beq.n	80049bc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	785b      	ldrb	r3, [r3, #1]
 80049ae:	2210      	movs	r2, #16
 80049b0:	4393      	bics	r3, r2
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	330a      	adds	r3, #10
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d11c      	bne.n	80049fc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	78db      	ldrb	r3, [r3, #3]
 80049c6:	0018      	movs	r0, r3
 80049c8:	f000 f946 	bl	8004c58 <RTC_ByteToBcd2>
 80049cc:	0003      	movs	r3, r0
 80049ce:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	785b      	ldrb	r3, [r3, #1]
 80049d4:	0018      	movs	r0, r3
 80049d6:	f000 f93f 	bl	8004c58 <RTC_ByteToBcd2>
 80049da:	0003      	movs	r3, r0
 80049dc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80049de:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	789b      	ldrb	r3, [r3, #2]
 80049e4:	0018      	movs	r0, r3
 80049e6:	f000 f937 	bl	8004c58 <RTC_ByteToBcd2>
 80049ea:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80049ec:	0022      	movs	r2, r4
 80049ee:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80049f6:	4313      	orrs	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]
 80049fa:	e00e      	b.n	8004a1a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	78db      	ldrb	r3, [r3, #3]
 8004a00:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	785b      	ldrb	r3, [r3, #1]
 8004a06:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004a08:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004a0e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004a16:	4313      	orrs	r3, r2
 8004a18:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	22ca      	movs	r2, #202	; 0xca
 8004a20:	625a      	str	r2, [r3, #36]	; 0x24
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2253      	movs	r2, #83	; 0x53
 8004a28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004a2a:	2513      	movs	r5, #19
 8004a2c:	197c      	adds	r4, r7, r5
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	0018      	movs	r0, r3
 8004a32:	f000 f8a5 	bl	8004b80 <RTC_EnterInitMode>
 8004a36:	0003      	movs	r3, r0
 8004a38:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8004a3a:	0028      	movs	r0, r5
 8004a3c:	183b      	adds	r3, r7, r0
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10c      	bne.n	8004a5e <HAL_RTC_SetDate+0xee>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	4910      	ldr	r1, [pc, #64]	; (8004a8c <HAL_RTC_SetDate+0x11c>)
 8004a4c:	400a      	ands	r2, r1
 8004a4e:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004a50:	183c      	adds	r4, r7, r0
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	0018      	movs	r0, r3
 8004a56:	f000 f8d6 	bl	8004c06 <RTC_ExitInitMode>
 8004a5a:	0003      	movs	r3, r0
 8004a5c:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8004a5e:	2313      	movs	r3, #19
 8004a60:	18fb      	adds	r3, r7, r3
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d102      	bne.n	8004a6e <HAL_RTC_SetDate+0xfe>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	22ff      	movs	r2, #255	; 0xff
 8004a74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	771a      	strb	r2, [r3, #28]

  return status;
 8004a7c:	2313      	movs	r3, #19
 8004a7e:	18fb      	adds	r3, r7, r3
 8004a80:	781b      	ldrb	r3, [r3, #0]
}
 8004a82:	0018      	movs	r0, r3
 8004a84:	46bd      	mov	sp, r7
 8004a86:	b006      	add	sp, #24
 8004a88:	bdb0      	pop	{r4, r5, r7, pc}
 8004a8a:	46c0      	nop			; (mov r8, r8)
 8004a8c:	00ffff3f 	.word	0x00ffff3f

08004a90 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	4a21      	ldr	r2, [pc, #132]	; (8004b2c <HAL_RTC_GetDate+0x9c>)
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	0c1b      	lsrs	r3, r3, #16
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	0a1b      	lsrs	r3, r3, #8
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	221f      	movs	r2, #31
 8004abe:	4013      	ands	r3, r2
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	223f      	movs	r2, #63	; 0x3f
 8004acc:	4013      	ands	r3, r2
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	0b5b      	lsrs	r3, r3, #13
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2207      	movs	r2, #7
 8004adc:	4013      	ands	r3, r2
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d11a      	bne.n	8004b20 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	78db      	ldrb	r3, [r3, #3]
 8004aee:	0018      	movs	r0, r3
 8004af0:	f000 f8d3 	bl	8004c9a <RTC_Bcd2ToByte>
 8004af4:	0003      	movs	r3, r0
 8004af6:	001a      	movs	r2, r3
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	785b      	ldrb	r3, [r3, #1]
 8004b00:	0018      	movs	r0, r3
 8004b02:	f000 f8ca 	bl	8004c9a <RTC_Bcd2ToByte>
 8004b06:	0003      	movs	r3, r0
 8004b08:	001a      	movs	r2, r3
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	789b      	ldrb	r3, [r3, #2]
 8004b12:	0018      	movs	r0, r3
 8004b14:	f000 f8c1 	bl	8004c9a <RTC_Bcd2ToByte>
 8004b18:	0003      	movs	r3, r0
 8004b1a:	001a      	movs	r2, r3
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	0018      	movs	r0, r3
 8004b24:	46bd      	mov	sp, r7
 8004b26:	b006      	add	sp, #24
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	46c0      	nop			; (mov r8, r8)
 8004b2c:	00ffff3f 	.word	0x00ffff3f

08004b30 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a0e      	ldr	r2, [pc, #56]	; (8004b7c <HAL_RTC_WaitForSynchro+0x4c>)
 8004b42:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b44:	f7fd ffa6 	bl	8002a94 <HAL_GetTick>
 8004b48:	0003      	movs	r3, r0
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004b4c:	e00a      	b.n	8004b64 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b4e:	f7fd ffa1 	bl	8002a94 <HAL_GetTick>
 8004b52:	0002      	movs	r2, r0
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	1ad2      	subs	r2, r2, r3
 8004b58:	23fa      	movs	r3, #250	; 0xfa
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d901      	bls.n	8004b64 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e006      	b.n	8004b72 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	d0ee      	beq.n	8004b4e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	0018      	movs	r0, r3
 8004b74:	46bd      	mov	sp, r7
 8004b76:	b004      	add	sp, #16
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	46c0      	nop			; (mov r8, r8)
 8004b7c:	00017d5d 	.word	0x00017d5d

08004b80 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004b8c:	230f      	movs	r3, #15
 8004b8e:	18fb      	adds	r3, r7, r3
 8004b90:	2200      	movs	r2, #0
 8004b92:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	2240      	movs	r2, #64	; 0x40
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	d12b      	bne.n	8004bf8 <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68da      	ldr	r2, [r3, #12]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2180      	movs	r1, #128	; 0x80
 8004bac:	430a      	orrs	r2, r1
 8004bae:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004bb0:	f7fd ff70 	bl	8002a94 <HAL_GetTick>
 8004bb4:	0003      	movs	r3, r0
 8004bb6:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004bb8:	e013      	b.n	8004be2 <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004bba:	f7fd ff6b 	bl	8002a94 <HAL_GetTick>
 8004bbe:	0002      	movs	r2, r0
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	1ad2      	subs	r2, r2, r3
 8004bc4:	200f      	movs	r0, #15
 8004bc6:	183b      	adds	r3, r7, r0
 8004bc8:	1839      	adds	r1, r7, r0
 8004bca:	7809      	ldrb	r1, [r1, #0]
 8004bcc:	7019      	strb	r1, [r3, #0]
 8004bce:	23fa      	movs	r3, #250	; 0xfa
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d905      	bls.n	8004be2 <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2204      	movs	r2, #4
 8004bda:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004bdc:	183b      	adds	r3, r7, r0
 8004bde:	2201      	movs	r2, #1
 8004be0:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	2240      	movs	r2, #64	; 0x40
 8004bea:	4013      	ands	r3, r2
 8004bec:	d104      	bne.n	8004bf8 <RTC_EnterInitMode+0x78>
 8004bee:	230f      	movs	r3, #15
 8004bf0:	18fb      	adds	r3, r7, r3
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d1e0      	bne.n	8004bba <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8004bf8:	230f      	movs	r3, #15
 8004bfa:	18fb      	adds	r3, r7, r3
 8004bfc:	781b      	ldrb	r3, [r3, #0]
}
 8004bfe:	0018      	movs	r0, r3
 8004c00:	46bd      	mov	sp, r7
 8004c02:	b004      	add	sp, #16
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c06:	b590      	push	{r4, r7, lr}
 8004c08:	b085      	sub	sp, #20
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c0e:	240f      	movs	r4, #15
 8004c10:	193b      	adds	r3, r7, r4
 8004c12:	2200      	movs	r2, #0
 8004c14:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2180      	movs	r1, #128	; 0x80
 8004c22:	438a      	bics	r2, r1
 8004c24:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	4013      	ands	r3, r2
 8004c30:	d10b      	bne.n	8004c4a <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	0018      	movs	r0, r3
 8004c36:	f7ff ff7b 	bl	8004b30 <HAL_RTC_WaitForSynchro>
 8004c3a:	1e03      	subs	r3, r0, #0
 8004c3c:	d005      	beq.n	8004c4a <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2204      	movs	r2, #4
 8004c42:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004c44:	193b      	adds	r3, r7, r4
 8004c46:	2201      	movs	r2, #1
 8004c48:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8004c4a:	230f      	movs	r3, #15
 8004c4c:	18fb      	adds	r3, r7, r3
 8004c4e:	781b      	ldrb	r3, [r3, #0]
}
 8004c50:	0018      	movs	r0, r3
 8004c52:	46bd      	mov	sp, r7
 8004c54:	b005      	add	sp, #20
 8004c56:	bd90      	pop	{r4, r7, pc}

08004c58 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	0002      	movs	r2, r0
 8004c60:	1dfb      	adds	r3, r7, #7
 8004c62:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004c68:	e007      	b.n	8004c7a <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004c70:	1dfb      	adds	r3, r7, #7
 8004c72:	1dfa      	adds	r2, r7, #7
 8004c74:	7812      	ldrb	r2, [r2, #0]
 8004c76:	3a0a      	subs	r2, #10
 8004c78:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8004c7a:	1dfb      	adds	r3, r7, #7
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b09      	cmp	r3, #9
 8004c80:	d8f3      	bhi.n	8004c6a <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	011b      	lsls	r3, r3, #4
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	1dfb      	adds	r3, r7, #7
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	b2db      	uxtb	r3, r3
}
 8004c92:	0018      	movs	r0, r3
 8004c94:	46bd      	mov	sp, r7
 8004c96:	b004      	add	sp, #16
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b084      	sub	sp, #16
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	0002      	movs	r2, r0
 8004ca2:	1dfb      	adds	r3, r7, #7
 8004ca4:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004caa:	1dfb      	adds	r3, r7, #7
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	091b      	lsrs	r3, r3, #4
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	001a      	movs	r2, r3
 8004cb4:	0013      	movs	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	189b      	adds	r3, r3, r2
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	1dfb      	adds	r3, r7, #7
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	210f      	movs	r1, #15
 8004cc8:	400b      	ands	r3, r1
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	18d3      	adds	r3, r2, r3
 8004cce:	b2db      	uxtb	r3, r3
}
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	b004      	add	sp, #16
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e0a8      	b.n	8004e3c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d109      	bne.n	8004d06 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	2382      	movs	r3, #130	; 0x82
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d009      	beq.n	8004d12 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	61da      	str	r2, [r3, #28]
 8004d04:	e005      	b.n	8004d12 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	225d      	movs	r2, #93	; 0x5d
 8004d1c:	5c9b      	ldrb	r3, [r3, r2]
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d107      	bne.n	8004d34 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	225c      	movs	r2, #92	; 0x5c
 8004d28:	2100      	movs	r1, #0
 8004d2a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	0018      	movs	r0, r3
 8004d30:	f7fd fbb4 	bl	800249c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	225d      	movs	r2, #93	; 0x5d
 8004d38:	2102      	movs	r1, #2
 8004d3a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2140      	movs	r1, #64	; 0x40
 8004d48:	438a      	bics	r2, r1
 8004d4a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68da      	ldr	r2, [r3, #12]
 8004d50:	23e0      	movs	r3, #224	; 0xe0
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d902      	bls.n	8004d5e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	e002      	b.n	8004d64 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d5e:	2380      	movs	r3, #128	; 0x80
 8004d60:	015b      	lsls	r3, r3, #5
 8004d62:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68da      	ldr	r2, [r3, #12]
 8004d68:	23f0      	movs	r3, #240	; 0xf0
 8004d6a:	011b      	lsls	r3, r3, #4
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d008      	beq.n	8004d82 <HAL_SPI_Init+0xaa>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68da      	ldr	r2, [r3, #12]
 8004d74:	23e0      	movs	r3, #224	; 0xe0
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d002      	beq.n	8004d82 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	2382      	movs	r3, #130	; 0x82
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	401a      	ands	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6899      	ldr	r1, [r3, #8]
 8004d90:	2384      	movs	r3, #132	; 0x84
 8004d92:	021b      	lsls	r3, r3, #8
 8004d94:	400b      	ands	r3, r1
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	2102      	movs	r1, #2
 8004d9e:	400b      	ands	r3, r1
 8004da0:	431a      	orrs	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	2101      	movs	r1, #1
 8004da8:	400b      	ands	r3, r1
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6999      	ldr	r1, [r3, #24]
 8004db0:	2380      	movs	r3, #128	; 0x80
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	400b      	ands	r3, r1
 8004db6:	431a      	orrs	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	69db      	ldr	r3, [r3, #28]
 8004dbc:	2138      	movs	r1, #56	; 0x38
 8004dbe:	400b      	ands	r3, r1
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	2180      	movs	r1, #128	; 0x80
 8004dc8:	400b      	ands	r3, r1
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	0011      	movs	r1, r2
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dd2:	2380      	movs	r3, #128	; 0x80
 8004dd4:	019b      	lsls	r3, r3, #6
 8004dd6:	401a      	ands	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	0c1b      	lsrs	r3, r3, #16
 8004de6:	2204      	movs	r2, #4
 8004de8:	401a      	ands	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	2110      	movs	r1, #16
 8004df0:	400b      	ands	r3, r1
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df8:	2108      	movs	r1, #8
 8004dfa:	400b      	ands	r3, r1
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68d9      	ldr	r1, [r3, #12]
 8004e02:	23f0      	movs	r3, #240	; 0xf0
 8004e04:	011b      	lsls	r3, r3, #4
 8004e06:	400b      	ands	r3, r1
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	0011      	movs	r1, r2
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	2380      	movs	r3, #128	; 0x80
 8004e10:	015b      	lsls	r3, r3, #5
 8004e12:	401a      	ands	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	69da      	ldr	r2, [r3, #28]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4907      	ldr	r1, [pc, #28]	; (8004e44 <HAL_SPI_Init+0x16c>)
 8004e28:	400a      	ands	r2, r1
 8004e2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	225d      	movs	r2, #93	; 0x5d
 8004e36:	2101      	movs	r1, #1
 8004e38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	0018      	movs	r0, r3
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	b004      	add	sp, #16
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	fffff7ff 	.word	0xfffff7ff

08004e48 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b088      	sub	sp, #32
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	603b      	str	r3, [r7, #0]
 8004e54:	1dbb      	adds	r3, r7, #6
 8004e56:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e58:	231f      	movs	r3, #31
 8004e5a:	18fb      	adds	r3, r7, r3
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	225c      	movs	r2, #92	; 0x5c
 8004e64:	5c9b      	ldrb	r3, [r3, r2]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d101      	bne.n	8004e6e <HAL_SPI_Transmit+0x26>
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	e147      	b.n	80050fe <HAL_SPI_Transmit+0x2b6>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	225c      	movs	r2, #92	; 0x5c
 8004e72:	2101      	movs	r1, #1
 8004e74:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e76:	f7fd fe0d 	bl	8002a94 <HAL_GetTick>
 8004e7a:	0003      	movs	r3, r0
 8004e7c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004e7e:	2316      	movs	r3, #22
 8004e80:	18fb      	adds	r3, r7, r3
 8004e82:	1dba      	adds	r2, r7, #6
 8004e84:	8812      	ldrh	r2, [r2, #0]
 8004e86:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	225d      	movs	r2, #93	; 0x5d
 8004e8c:	5c9b      	ldrb	r3, [r3, r2]
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d004      	beq.n	8004e9e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004e94:	231f      	movs	r3, #31
 8004e96:	18fb      	adds	r3, r7, r3
 8004e98:	2202      	movs	r2, #2
 8004e9a:	701a      	strb	r2, [r3, #0]
    goto error;
 8004e9c:	e128      	b.n	80050f0 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d003      	beq.n	8004eac <HAL_SPI_Transmit+0x64>
 8004ea4:	1dbb      	adds	r3, r7, #6
 8004ea6:	881b      	ldrh	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d104      	bne.n	8004eb6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004eac:	231f      	movs	r3, #31
 8004eae:	18fb      	adds	r3, r7, r3
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	701a      	strb	r2, [r3, #0]
    goto error;
 8004eb4:	e11c      	b.n	80050f0 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	225d      	movs	r2, #93	; 0x5d
 8004eba:	2103      	movs	r1, #3
 8004ebc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	68ba      	ldr	r2, [r7, #8]
 8004ec8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	1dba      	adds	r2, r7, #6
 8004ece:	8812      	ldrh	r2, [r2, #0]
 8004ed0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	1dba      	adds	r2, r7, #6
 8004ed6:	8812      	ldrh	r2, [r2, #0]
 8004ed8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2244      	movs	r2, #68	; 0x44
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2246      	movs	r2, #70	; 0x46
 8004eec:	2100      	movs	r1, #0
 8004eee:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	2380      	movs	r3, #128	; 0x80
 8004f02:	021b      	lsls	r3, r3, #8
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d110      	bne.n	8004f2a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2140      	movs	r1, #64	; 0x40
 8004f14:	438a      	bics	r2, r1
 8004f16:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2180      	movs	r1, #128	; 0x80
 8004f24:	01c9      	lsls	r1, r1, #7
 8004f26:	430a      	orrs	r2, r1
 8004f28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2240      	movs	r2, #64	; 0x40
 8004f32:	4013      	ands	r3, r2
 8004f34:	2b40      	cmp	r3, #64	; 0x40
 8004f36:	d007      	beq.n	8004f48 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2140      	movs	r1, #64	; 0x40
 8004f44:	430a      	orrs	r2, r1
 8004f46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	68da      	ldr	r2, [r3, #12]
 8004f4c:	23e0      	movs	r3, #224	; 0xe0
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d952      	bls.n	8004ffa <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d004      	beq.n	8004f66 <HAL_SPI_Transmit+0x11e>
 8004f5c:	2316      	movs	r3, #22
 8004f5e:	18fb      	adds	r3, r7, r3
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d143      	bne.n	8004fee <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6a:	881a      	ldrh	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f76:	1c9a      	adds	r2, r3, #2
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	3b01      	subs	r3, #1
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f8a:	e030      	b.n	8004fee <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	2202      	movs	r2, #2
 8004f94:	4013      	ands	r3, r2
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d112      	bne.n	8004fc0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9e:	881a      	ldrh	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004faa:	1c9a      	adds	r2, r3, #2
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fbe:	e016      	b.n	8004fee <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fc0:	f7fd fd68 	bl	8002a94 <HAL_GetTick>
 8004fc4:	0002      	movs	r2, r0
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d802      	bhi.n	8004fd6 <HAL_SPI_Transmit+0x18e>
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	d102      	bne.n	8004fdc <HAL_SPI_Transmit+0x194>
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d108      	bne.n	8004fee <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8004fdc:	231f      	movs	r3, #31
 8004fde:	18fb      	adds	r3, r7, r3
 8004fe0:	2203      	movs	r2, #3
 8004fe2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	225d      	movs	r2, #93	; 0x5d
 8004fe8:	2101      	movs	r1, #1
 8004fea:	5499      	strb	r1, [r3, r2]
          goto error;
 8004fec:	e080      	b.n	80050f0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1c9      	bne.n	8004f8c <HAL_SPI_Transmit+0x144>
 8004ff8:	e053      	b.n	80050a2 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d004      	beq.n	800500c <HAL_SPI_Transmit+0x1c4>
 8005002:	2316      	movs	r3, #22
 8005004:	18fb      	adds	r3, r7, r3
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d145      	bne.n	8005098 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	330c      	adds	r3, #12
 8005016:	7812      	ldrb	r2, [r2, #0]
 8005018:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501e:	1c5a      	adds	r2, r3, #1
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005028:	b29b      	uxth	r3, r3
 800502a:	3b01      	subs	r3, #1
 800502c:	b29a      	uxth	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005032:	e031      	b.n	8005098 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	2202      	movs	r2, #2
 800503c:	4013      	ands	r3, r2
 800503e:	2b02      	cmp	r3, #2
 8005040:	d113      	bne.n	800506a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	330c      	adds	r3, #12
 800504c:	7812      	ldrb	r2, [r2, #0]
 800504e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005054:	1c5a      	adds	r2, r3, #1
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800505e:	b29b      	uxth	r3, r3
 8005060:	3b01      	subs	r3, #1
 8005062:	b29a      	uxth	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005068:	e016      	b.n	8005098 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800506a:	f7fd fd13 	bl	8002a94 <HAL_GetTick>
 800506e:	0002      	movs	r2, r0
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	429a      	cmp	r2, r3
 8005078:	d802      	bhi.n	8005080 <HAL_SPI_Transmit+0x238>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	3301      	adds	r3, #1
 800507e:	d102      	bne.n	8005086 <HAL_SPI_Transmit+0x23e>
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d108      	bne.n	8005098 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8005086:	231f      	movs	r3, #31
 8005088:	18fb      	adds	r3, r7, r3
 800508a:	2203      	movs	r2, #3
 800508c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	225d      	movs	r2, #93	; 0x5d
 8005092:	2101      	movs	r1, #1
 8005094:	5499      	strb	r1, [r3, r2]
          goto error;
 8005096:	e02b      	b.n	80050f0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800509c:	b29b      	uxth	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1c8      	bne.n	8005034 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	6839      	ldr	r1, [r7, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	0018      	movs	r0, r3
 80050aa:	f000 f95d 	bl	8005368 <SPI_EndRxTxTransaction>
 80050ae:	1e03      	subs	r3, r0, #0
 80050b0:	d002      	beq.n	80050b8 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2220      	movs	r2, #32
 80050b6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10a      	bne.n	80050d6 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050c0:	2300      	movs	r3, #0
 80050c2:	613b      	str	r3, [r7, #16]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	613b      	str	r3, [r7, #16]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	613b      	str	r3, [r7, #16]
 80050d4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d004      	beq.n	80050e8 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80050de:	231f      	movs	r3, #31
 80050e0:	18fb      	adds	r3, r7, r3
 80050e2:	2201      	movs	r2, #1
 80050e4:	701a      	strb	r2, [r3, #0]
 80050e6:	e003      	b.n	80050f0 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	225d      	movs	r2, #93	; 0x5d
 80050ec:	2101      	movs	r1, #1
 80050ee:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	225c      	movs	r2, #92	; 0x5c
 80050f4:	2100      	movs	r1, #0
 80050f6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80050f8:	231f      	movs	r3, #31
 80050fa:	18fb      	adds	r3, r7, r3
 80050fc:	781b      	ldrb	r3, [r3, #0]
}
 80050fe:	0018      	movs	r0, r3
 8005100:	46bd      	mov	sp, r7
 8005102:	b008      	add	sp, #32
 8005104:	bd80      	pop	{r7, pc}
	...

08005108 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	603b      	str	r3, [r7, #0]
 8005114:	1dfb      	adds	r3, r7, #7
 8005116:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005118:	f7fd fcbc 	bl	8002a94 <HAL_GetTick>
 800511c:	0002      	movs	r2, r0
 800511e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005120:	1a9b      	subs	r3, r3, r2
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	18d3      	adds	r3, r2, r3
 8005126:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005128:	f7fd fcb4 	bl	8002a94 <HAL_GetTick>
 800512c:	0003      	movs	r3, r0
 800512e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005130:	4b3a      	ldr	r3, [pc, #232]	; (800521c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	015b      	lsls	r3, r3, #5
 8005136:	0d1b      	lsrs	r3, r3, #20
 8005138:	69fa      	ldr	r2, [r7, #28]
 800513a:	4353      	muls	r3, r2
 800513c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800513e:	e058      	b.n	80051f2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	3301      	adds	r3, #1
 8005144:	d055      	beq.n	80051f2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005146:	f7fd fca5 	bl	8002a94 <HAL_GetTick>
 800514a:	0002      	movs	r2, r0
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	69fa      	ldr	r2, [r7, #28]
 8005152:	429a      	cmp	r2, r3
 8005154:	d902      	bls.n	800515c <SPI_WaitFlagStateUntilTimeout+0x54>
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d142      	bne.n	80051e2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	21e0      	movs	r1, #224	; 0xe0
 8005168:	438a      	bics	r2, r1
 800516a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	2382      	movs	r3, #130	; 0x82
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	429a      	cmp	r2, r3
 8005176:	d113      	bne.n	80051a0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	2380      	movs	r3, #128	; 0x80
 800517e:	021b      	lsls	r3, r3, #8
 8005180:	429a      	cmp	r2, r3
 8005182:	d005      	beq.n	8005190 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	2380      	movs	r3, #128	; 0x80
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	429a      	cmp	r2, r3
 800518e:	d107      	bne.n	80051a0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2140      	movs	r1, #64	; 0x40
 800519c:	438a      	bics	r2, r1
 800519e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051a4:	2380      	movs	r3, #128	; 0x80
 80051a6:	019b      	lsls	r3, r3, #6
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d110      	bne.n	80051ce <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	491a      	ldr	r1, [pc, #104]	; (8005220 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80051b8:	400a      	ands	r2, r1
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2180      	movs	r1, #128	; 0x80
 80051c8:	0189      	lsls	r1, r1, #6
 80051ca:	430a      	orrs	r2, r1
 80051cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	225d      	movs	r2, #93	; 0x5d
 80051d2:	2101      	movs	r1, #1
 80051d4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	225c      	movs	r2, #92	; 0x5c
 80051da:	2100      	movs	r1, #0
 80051dc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e017      	b.n	8005212 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	3b01      	subs	r3, #1
 80051f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	4013      	ands	r3, r2
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	425a      	negs	r2, r3
 8005202:	4153      	adcs	r3, r2
 8005204:	b2db      	uxtb	r3, r3
 8005206:	001a      	movs	r2, r3
 8005208:	1dfb      	adds	r3, r7, #7
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	429a      	cmp	r2, r3
 800520e:	d197      	bne.n	8005140 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	0018      	movs	r0, r3
 8005214:	46bd      	mov	sp, r7
 8005216:	b008      	add	sp, #32
 8005218:	bd80      	pop	{r7, pc}
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	200004e8 	.word	0x200004e8
 8005220:	ffffdfff 	.word	0xffffdfff

08005224 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b08a      	sub	sp, #40	; 0x28
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
 8005230:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005232:	2317      	movs	r3, #23
 8005234:	18fb      	adds	r3, r7, r3
 8005236:	2200      	movs	r2, #0
 8005238:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800523a:	f7fd fc2b 	bl	8002a94 <HAL_GetTick>
 800523e:	0002      	movs	r2, r0
 8005240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005242:	1a9b      	subs	r3, r3, r2
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	18d3      	adds	r3, r2, r3
 8005248:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800524a:	f7fd fc23 	bl	8002a94 <HAL_GetTick>
 800524e:	0003      	movs	r3, r0
 8005250:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	330c      	adds	r3, #12
 8005258:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800525a:	4b41      	ldr	r3, [pc, #260]	; (8005360 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	0013      	movs	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	189b      	adds	r3, r3, r2
 8005264:	00da      	lsls	r2, r3, #3
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	0d1b      	lsrs	r3, r3, #20
 800526a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800526c:	4353      	muls	r3, r2
 800526e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005270:	e068      	b.n	8005344 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	23c0      	movs	r3, #192	; 0xc0
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	429a      	cmp	r2, r3
 800527a:	d10a      	bne.n	8005292 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d107      	bne.n	8005292 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	b2da      	uxtb	r2, r3
 8005288:	2117      	movs	r1, #23
 800528a:	187b      	adds	r3, r7, r1
 800528c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800528e:	187b      	adds	r3, r7, r1
 8005290:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	3301      	adds	r3, #1
 8005296:	d055      	beq.n	8005344 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005298:	f7fd fbfc 	bl	8002a94 <HAL_GetTick>
 800529c:	0002      	movs	r2, r0
 800529e:	6a3b      	ldr	r3, [r7, #32]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d902      	bls.n	80052ae <SPI_WaitFifoStateUntilTimeout+0x8a>
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d142      	bne.n	8005334 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	21e0      	movs	r1, #224	; 0xe0
 80052ba:	438a      	bics	r2, r1
 80052bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	2382      	movs	r3, #130	; 0x82
 80052c4:	005b      	lsls	r3, r3, #1
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d113      	bne.n	80052f2 <SPI_WaitFifoStateUntilTimeout+0xce>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	2380      	movs	r3, #128	; 0x80
 80052d0:	021b      	lsls	r3, r3, #8
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d005      	beq.n	80052e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	689a      	ldr	r2, [r3, #8]
 80052da:	2380      	movs	r3, #128	; 0x80
 80052dc:	00db      	lsls	r3, r3, #3
 80052de:	429a      	cmp	r2, r3
 80052e0:	d107      	bne.n	80052f2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2140      	movs	r1, #64	; 0x40
 80052ee:	438a      	bics	r2, r1
 80052f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052f6:	2380      	movs	r3, #128	; 0x80
 80052f8:	019b      	lsls	r3, r3, #6
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d110      	bne.n	8005320 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4916      	ldr	r1, [pc, #88]	; (8005364 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800530a:	400a      	ands	r2, r1
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2180      	movs	r1, #128	; 0x80
 800531a:	0189      	lsls	r1, r1, #6
 800531c:	430a      	orrs	r2, r1
 800531e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	225d      	movs	r2, #93	; 0x5d
 8005324:	2101      	movs	r1, #1
 8005326:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	225c      	movs	r2, #92	; 0x5c
 800532c:	2100      	movs	r1, #0
 800532e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e010      	b.n	8005356 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800533a:	2300      	movs	r3, #0
 800533c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	3b01      	subs	r3, #1
 8005342:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	4013      	ands	r3, r2
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	429a      	cmp	r2, r3
 8005352:	d18e      	bne.n	8005272 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	0018      	movs	r0, r3
 8005358:	46bd      	mov	sp, r7
 800535a:	b00a      	add	sp, #40	; 0x28
 800535c:	bd80      	pop	{r7, pc}
 800535e:	46c0      	nop			; (mov r8, r8)
 8005360:	200004e8 	.word	0x200004e8
 8005364:	ffffdfff 	.word	0xffffdfff

08005368 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af02      	add	r7, sp, #8
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	23c0      	movs	r3, #192	; 0xc0
 8005378:	0159      	lsls	r1, r3, #5
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	0013      	movs	r3, r2
 8005382:	2200      	movs	r2, #0
 8005384:	f7ff ff4e 	bl	8005224 <SPI_WaitFifoStateUntilTimeout>
 8005388:	1e03      	subs	r3, r0, #0
 800538a:	d007      	beq.n	800539c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005390:	2220      	movs	r2, #32
 8005392:	431a      	orrs	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e027      	b.n	80053ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	0013      	movs	r3, r2
 80053a6:	2200      	movs	r2, #0
 80053a8:	2180      	movs	r1, #128	; 0x80
 80053aa:	f7ff fead 	bl	8005108 <SPI_WaitFlagStateUntilTimeout>
 80053ae:	1e03      	subs	r3, r0, #0
 80053b0:	d007      	beq.n	80053c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053b6:	2220      	movs	r2, #32
 80053b8:	431a      	orrs	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e014      	b.n	80053ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	23c0      	movs	r3, #192	; 0xc0
 80053c6:	00d9      	lsls	r1, r3, #3
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	0013      	movs	r3, r2
 80053d0:	2200      	movs	r2, #0
 80053d2:	f7ff ff27 	bl	8005224 <SPI_WaitFifoStateUntilTimeout>
 80053d6:	1e03      	subs	r3, r0, #0
 80053d8:	d007      	beq.n	80053ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053de:	2220      	movs	r2, #32
 80053e0:	431a      	orrs	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e000      	b.n	80053ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	0018      	movs	r0, r3
 80053ee:	46bd      	mov	sp, r7
 80053f0:	b004      	add	sp, #16
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e042      	b.n	800548c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	223d      	movs	r2, #61	; 0x3d
 800540a:	5c9b      	ldrb	r3, [r3, r2]
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d107      	bne.n	8005422 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	223c      	movs	r2, #60	; 0x3c
 8005416:	2100      	movs	r1, #0
 8005418:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	0018      	movs	r0, r3
 800541e:	f7fd f889 	bl	8002534 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	223d      	movs	r2, #61	; 0x3d
 8005426:	2102      	movs	r1, #2
 8005428:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	3304      	adds	r3, #4
 8005432:	0019      	movs	r1, r3
 8005434:	0010      	movs	r0, r2
 8005436:	f000 fa4f 	bl	80058d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2246      	movs	r2, #70	; 0x46
 800543e:	2101      	movs	r1, #1
 8005440:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	223e      	movs	r2, #62	; 0x3e
 8005446:	2101      	movs	r1, #1
 8005448:	5499      	strb	r1, [r3, r2]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	223f      	movs	r2, #63	; 0x3f
 800544e:	2101      	movs	r1, #1
 8005450:	5499      	strb	r1, [r3, r2]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2240      	movs	r2, #64	; 0x40
 8005456:	2101      	movs	r1, #1
 8005458:	5499      	strb	r1, [r3, r2]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2241      	movs	r2, #65	; 0x41
 800545e:	2101      	movs	r1, #1
 8005460:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2242      	movs	r2, #66	; 0x42
 8005466:	2101      	movs	r1, #1
 8005468:	5499      	strb	r1, [r3, r2]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2243      	movs	r2, #67	; 0x43
 800546e:	2101      	movs	r1, #1
 8005470:	5499      	strb	r1, [r3, r2]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2244      	movs	r2, #68	; 0x44
 8005476:	2101      	movs	r1, #1
 8005478:	5499      	strb	r1, [r3, r2]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2245      	movs	r2, #69	; 0x45
 800547e:	2101      	movs	r1, #1
 8005480:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	223d      	movs	r2, #61	; 0x3d
 8005486:	2101      	movs	r1, #1
 8005488:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	0018      	movs	r0, r3
 800548e:	46bd      	mov	sp, r7
 8005490:	b002      	add	sp, #8
 8005492:	bd80      	pop	{r7, pc}

08005494 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	223d      	movs	r2, #61	; 0x3d
 80054a0:	5c9b      	ldrb	r3, [r3, r2]
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d001      	beq.n	80054ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e02d      	b.n	8005508 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	223d      	movs	r2, #61	; 0x3d
 80054b0:	2102      	movs	r1, #2
 80054b2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a15      	ldr	r2, [pc, #84]	; (8005510 <HAL_TIM_Base_Start+0x7c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d009      	beq.n	80054d2 <HAL_TIM_Base_Start+0x3e>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a14      	ldr	r2, [pc, #80]	; (8005514 <HAL_TIM_Base_Start+0x80>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d004      	beq.n	80054d2 <HAL_TIM_Base_Start+0x3e>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a12      	ldr	r2, [pc, #72]	; (8005518 <HAL_TIM_Base_Start+0x84>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d111      	bne.n	80054f6 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	2207      	movs	r2, #7
 80054da:	4013      	ands	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2b06      	cmp	r3, #6
 80054e2:	d010      	beq.n	8005506 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2101      	movs	r1, #1
 80054f0:	430a      	orrs	r2, r1
 80054f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f4:	e007      	b.n	8005506 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2101      	movs	r1, #1
 8005502:	430a      	orrs	r2, r1
 8005504:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	0018      	movs	r0, r3
 800550a:	46bd      	mov	sp, r7
 800550c:	b004      	add	sp, #16
 800550e:	bd80      	pop	{r7, pc}
 8005510:	40012c00 	.word	0x40012c00
 8005514:	40000400 	.word	0x40000400
 8005518:	40014000 	.word	0x40014000

0800551c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	4a0d      	ldr	r2, [pc, #52]	; (8005560 <HAL_TIM_Base_Stop+0x44>)
 800552c:	4013      	ands	r3, r2
 800552e:	d10d      	bne.n	800554c <HAL_TIM_Base_Stop+0x30>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	4a0b      	ldr	r2, [pc, #44]	; (8005564 <HAL_TIM_Base_Stop+0x48>)
 8005538:	4013      	ands	r3, r2
 800553a:	d107      	bne.n	800554c <HAL_TIM_Base_Stop+0x30>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2101      	movs	r1, #1
 8005548:	438a      	bics	r2, r1
 800554a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	223d      	movs	r2, #61	; 0x3d
 8005550:	2101      	movs	r1, #1
 8005552:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	0018      	movs	r0, r3
 8005558:	46bd      	mov	sp, r7
 800555a:	b002      	add	sp, #8
 800555c:	bd80      	pop	{r7, pc}
 800555e:	46c0      	nop			; (mov r8, r8)
 8005560:	00001111 	.word	0x00001111
 8005564:	00000444 	.word	0x00000444

08005568 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	223d      	movs	r2, #61	; 0x3d
 8005574:	5c9b      	ldrb	r3, [r3, r2]
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b01      	cmp	r3, #1
 800557a:	d001      	beq.n	8005580 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e035      	b.n	80055ec <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	223d      	movs	r2, #61	; 0x3d
 8005584:	2102      	movs	r1, #2
 8005586:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68da      	ldr	r2, [r3, #12]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2101      	movs	r1, #1
 8005594:	430a      	orrs	r2, r1
 8005596:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a15      	ldr	r2, [pc, #84]	; (80055f4 <HAL_TIM_Base_Start_IT+0x8c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d009      	beq.n	80055b6 <HAL_TIM_Base_Start_IT+0x4e>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a14      	ldr	r2, [pc, #80]	; (80055f8 <HAL_TIM_Base_Start_IT+0x90>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d004      	beq.n	80055b6 <HAL_TIM_Base_Start_IT+0x4e>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a12      	ldr	r2, [pc, #72]	; (80055fc <HAL_TIM_Base_Start_IT+0x94>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d111      	bne.n	80055da <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	2207      	movs	r2, #7
 80055be:	4013      	ands	r3, r2
 80055c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2b06      	cmp	r3, #6
 80055c6:	d010      	beq.n	80055ea <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2101      	movs	r1, #1
 80055d4:	430a      	orrs	r2, r1
 80055d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d8:	e007      	b.n	80055ea <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2101      	movs	r1, #1
 80055e6:	430a      	orrs	r2, r1
 80055e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	0018      	movs	r0, r3
 80055ee:	46bd      	mov	sp, r7
 80055f0:	b004      	add	sp, #16
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	40012c00 	.word	0x40012c00
 80055f8:	40000400 	.word	0x40000400
 80055fc:	40014000 	.word	0x40014000

08005600 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2101      	movs	r1, #1
 8005614:	438a      	bics	r2, r1
 8005616:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	4a0d      	ldr	r2, [pc, #52]	; (8005654 <HAL_TIM_Base_Stop_IT+0x54>)
 8005620:	4013      	ands	r3, r2
 8005622:	d10d      	bne.n	8005640 <HAL_TIM_Base_Stop_IT+0x40>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	4a0b      	ldr	r2, [pc, #44]	; (8005658 <HAL_TIM_Base_Stop_IT+0x58>)
 800562c:	4013      	ands	r3, r2
 800562e:	d107      	bne.n	8005640 <HAL_TIM_Base_Stop_IT+0x40>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2101      	movs	r1, #1
 800563c:	438a      	bics	r2, r1
 800563e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	223d      	movs	r2, #61	; 0x3d
 8005644:	2101      	movs	r1, #1
 8005646:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	0018      	movs	r0, r3
 800564c:	46bd      	mov	sp, r7
 800564e:	b002      	add	sp, #8
 8005650:	bd80      	pop	{r7, pc}
 8005652:	46c0      	nop			; (mov r8, r8)
 8005654:	00001111 	.word	0x00001111
 8005658:	00000444 	.word	0x00000444

0800565c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	2202      	movs	r2, #2
 800566c:	4013      	ands	r3, r2
 800566e:	2b02      	cmp	r3, #2
 8005670:	d124      	bne.n	80056bc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	2202      	movs	r2, #2
 800567a:	4013      	ands	r3, r2
 800567c:	2b02      	cmp	r3, #2
 800567e:	d11d      	bne.n	80056bc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2203      	movs	r2, #3
 8005686:	4252      	negs	r2, r2
 8005688:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	2203      	movs	r2, #3
 8005698:	4013      	ands	r3, r2
 800569a:	d004      	beq.n	80056a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	0018      	movs	r0, r3
 80056a0:	f000 f902 	bl	80058a8 <HAL_TIM_IC_CaptureCallback>
 80056a4:	e007      	b.n	80056b6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	0018      	movs	r0, r3
 80056aa:	f000 f8f5 	bl	8005898 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	0018      	movs	r0, r3
 80056b2:	f000 f901 	bl	80058b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	2204      	movs	r2, #4
 80056c4:	4013      	ands	r3, r2
 80056c6:	2b04      	cmp	r3, #4
 80056c8:	d125      	bne.n	8005716 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	2204      	movs	r2, #4
 80056d2:	4013      	ands	r3, r2
 80056d4:	2b04      	cmp	r3, #4
 80056d6:	d11e      	bne.n	8005716 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2205      	movs	r2, #5
 80056de:	4252      	negs	r2, r2
 80056e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2202      	movs	r2, #2
 80056e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	699a      	ldr	r2, [r3, #24]
 80056ee:	23c0      	movs	r3, #192	; 0xc0
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4013      	ands	r3, r2
 80056f4:	d004      	beq.n	8005700 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	0018      	movs	r0, r3
 80056fa:	f000 f8d5 	bl	80058a8 <HAL_TIM_IC_CaptureCallback>
 80056fe:	e007      	b.n	8005710 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	0018      	movs	r0, r3
 8005704:	f000 f8c8 	bl	8005898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	0018      	movs	r0, r3
 800570c:	f000 f8d4 	bl	80058b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	2208      	movs	r2, #8
 800571e:	4013      	ands	r3, r2
 8005720:	2b08      	cmp	r3, #8
 8005722:	d124      	bne.n	800576e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	2208      	movs	r2, #8
 800572c:	4013      	ands	r3, r2
 800572e:	2b08      	cmp	r3, #8
 8005730:	d11d      	bne.n	800576e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2209      	movs	r2, #9
 8005738:	4252      	negs	r2, r2
 800573a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2204      	movs	r2, #4
 8005740:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	69db      	ldr	r3, [r3, #28]
 8005748:	2203      	movs	r2, #3
 800574a:	4013      	ands	r3, r2
 800574c:	d004      	beq.n	8005758 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	0018      	movs	r0, r3
 8005752:	f000 f8a9 	bl	80058a8 <HAL_TIM_IC_CaptureCallback>
 8005756:	e007      	b.n	8005768 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	0018      	movs	r0, r3
 800575c:	f000 f89c 	bl	8005898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	0018      	movs	r0, r3
 8005764:	f000 f8a8 	bl	80058b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	2210      	movs	r2, #16
 8005776:	4013      	ands	r3, r2
 8005778:	2b10      	cmp	r3, #16
 800577a:	d125      	bne.n	80057c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	2210      	movs	r2, #16
 8005784:	4013      	ands	r3, r2
 8005786:	2b10      	cmp	r3, #16
 8005788:	d11e      	bne.n	80057c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2211      	movs	r2, #17
 8005790:	4252      	negs	r2, r2
 8005792:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2208      	movs	r2, #8
 8005798:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69da      	ldr	r2, [r3, #28]
 80057a0:	23c0      	movs	r3, #192	; 0xc0
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4013      	ands	r3, r2
 80057a6:	d004      	beq.n	80057b2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	0018      	movs	r0, r3
 80057ac:	f000 f87c 	bl	80058a8 <HAL_TIM_IC_CaptureCallback>
 80057b0:	e007      	b.n	80057c2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	0018      	movs	r0, r3
 80057b6:	f000 f86f 	bl	8005898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	0018      	movs	r0, r3
 80057be:	f000 f87b 	bl	80058b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	2201      	movs	r2, #1
 80057d0:	4013      	ands	r3, r2
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d10f      	bne.n	80057f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	2201      	movs	r2, #1
 80057de:	4013      	ands	r3, r2
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d108      	bne.n	80057f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2202      	movs	r2, #2
 80057ea:	4252      	negs	r2, r2
 80057ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	0018      	movs	r0, r3
 80057f2:	f000 f849 	bl	8005888 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	2280      	movs	r2, #128	; 0x80
 80057fe:	4013      	ands	r3, r2
 8005800:	2b80      	cmp	r3, #128	; 0x80
 8005802:	d10f      	bne.n	8005824 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	2280      	movs	r2, #128	; 0x80
 800580c:	4013      	ands	r3, r2
 800580e:	2b80      	cmp	r3, #128	; 0x80
 8005810:	d108      	bne.n	8005824 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2281      	movs	r2, #129	; 0x81
 8005818:	4252      	negs	r2, r2
 800581a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	0018      	movs	r0, r3
 8005820:	f000 f8d8 	bl	80059d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	2240      	movs	r2, #64	; 0x40
 800582c:	4013      	ands	r3, r2
 800582e:	2b40      	cmp	r3, #64	; 0x40
 8005830:	d10f      	bne.n	8005852 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	2240      	movs	r2, #64	; 0x40
 800583a:	4013      	ands	r3, r2
 800583c:	2b40      	cmp	r3, #64	; 0x40
 800583e:	d108      	bne.n	8005852 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2241      	movs	r2, #65	; 0x41
 8005846:	4252      	negs	r2, r2
 8005848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	0018      	movs	r0, r3
 800584e:	f000 f83b 	bl	80058c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	2220      	movs	r2, #32
 800585a:	4013      	ands	r3, r2
 800585c:	2b20      	cmp	r3, #32
 800585e:	d10f      	bne.n	8005880 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	2220      	movs	r2, #32
 8005868:	4013      	ands	r3, r2
 800586a:	2b20      	cmp	r3, #32
 800586c:	d108      	bne.n	8005880 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2221      	movs	r2, #33	; 0x21
 8005874:	4252      	negs	r2, r2
 8005876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	0018      	movs	r0, r3
 800587c:	f000 f8a2 	bl	80059c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005880:	46c0      	nop			; (mov r8, r8)
 8005882:	46bd      	mov	sp, r7
 8005884:	b002      	add	sp, #8
 8005886:	bd80      	pop	{r7, pc}

08005888 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005890:	46c0      	nop			; (mov r8, r8)
 8005892:	46bd      	mov	sp, r7
 8005894:	b002      	add	sp, #8
 8005896:	bd80      	pop	{r7, pc}

08005898 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058a0:	46c0      	nop			; (mov r8, r8)
 80058a2:	46bd      	mov	sp, r7
 80058a4:	b002      	add	sp, #8
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058b0:	46c0      	nop			; (mov r8, r8)
 80058b2:	46bd      	mov	sp, r7
 80058b4:	b002      	add	sp, #8
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058c0:	46c0      	nop			; (mov r8, r8)
 80058c2:	46bd      	mov	sp, r7
 80058c4:	b002      	add	sp, #8
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058d0:	46c0      	nop			; (mov r8, r8)
 80058d2:	46bd      	mov	sp, r7
 80058d4:	b002      	add	sp, #8
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a2f      	ldr	r2, [pc, #188]	; (80059a8 <TIM_Base_SetConfig+0xd0>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d003      	beq.n	80058f8 <TIM_Base_SetConfig+0x20>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a2e      	ldr	r2, [pc, #184]	; (80059ac <TIM_Base_SetConfig+0xd4>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d108      	bne.n	800590a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2270      	movs	r2, #112	; 0x70
 80058fc:	4393      	bics	r3, r2
 80058fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	4313      	orrs	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a26      	ldr	r2, [pc, #152]	; (80059a8 <TIM_Base_SetConfig+0xd0>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d013      	beq.n	800593a <TIM_Base_SetConfig+0x62>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a25      	ldr	r2, [pc, #148]	; (80059ac <TIM_Base_SetConfig+0xd4>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d00f      	beq.n	800593a <TIM_Base_SetConfig+0x62>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a24      	ldr	r2, [pc, #144]	; (80059b0 <TIM_Base_SetConfig+0xd8>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d00b      	beq.n	800593a <TIM_Base_SetConfig+0x62>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a23      	ldr	r2, [pc, #140]	; (80059b4 <TIM_Base_SetConfig+0xdc>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d007      	beq.n	800593a <TIM_Base_SetConfig+0x62>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a22      	ldr	r2, [pc, #136]	; (80059b8 <TIM_Base_SetConfig+0xe0>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d003      	beq.n	800593a <TIM_Base_SetConfig+0x62>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a21      	ldr	r2, [pc, #132]	; (80059bc <TIM_Base_SetConfig+0xe4>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d108      	bne.n	800594c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4a20      	ldr	r2, [pc, #128]	; (80059c0 <TIM_Base_SetConfig+0xe8>)
 800593e:	4013      	ands	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	4313      	orrs	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2280      	movs	r2, #128	; 0x80
 8005950:	4393      	bics	r3, r2
 8005952:	001a      	movs	r2, r3
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	4313      	orrs	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	689a      	ldr	r2, [r3, #8]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a0c      	ldr	r2, [pc, #48]	; (80059a8 <TIM_Base_SetConfig+0xd0>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d00b      	beq.n	8005992 <TIM_Base_SetConfig+0xba>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a0d      	ldr	r2, [pc, #52]	; (80059b4 <TIM_Base_SetConfig+0xdc>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d007      	beq.n	8005992 <TIM_Base_SetConfig+0xba>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a0c      	ldr	r2, [pc, #48]	; (80059b8 <TIM_Base_SetConfig+0xe0>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d003      	beq.n	8005992 <TIM_Base_SetConfig+0xba>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a0b      	ldr	r2, [pc, #44]	; (80059bc <TIM_Base_SetConfig+0xe4>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d103      	bne.n	800599a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	691a      	ldr	r2, [r3, #16]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	615a      	str	r2, [r3, #20]
}
 80059a0:	46c0      	nop			; (mov r8, r8)
 80059a2:	46bd      	mov	sp, r7
 80059a4:	b004      	add	sp, #16
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	40012c00 	.word	0x40012c00
 80059ac:	40000400 	.word	0x40000400
 80059b0:	40002000 	.word	0x40002000
 80059b4:	40014000 	.word	0x40014000
 80059b8:	40014400 	.word	0x40014400
 80059bc:	40014800 	.word	0x40014800
 80059c0:	fffffcff 	.word	0xfffffcff

080059c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059cc:	46c0      	nop			; (mov r8, r8)
 80059ce:	46bd      	mov	sp, r7
 80059d0:	b002      	add	sp, #8
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059dc:	46c0      	nop			; (mov r8, r8)
 80059de:	46bd      	mov	sp, r7
 80059e0:	b002      	add	sp, #8
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <__errno>:
 80059e4:	4b01      	ldr	r3, [pc, #4]	; (80059ec <__errno+0x8>)
 80059e6:	6818      	ldr	r0, [r3, #0]
 80059e8:	4770      	bx	lr
 80059ea:	46c0      	nop			; (mov r8, r8)
 80059ec:	200004f4 	.word	0x200004f4

080059f0 <__libc_init_array>:
 80059f0:	b570      	push	{r4, r5, r6, lr}
 80059f2:	2600      	movs	r6, #0
 80059f4:	4d0c      	ldr	r5, [pc, #48]	; (8005a28 <__libc_init_array+0x38>)
 80059f6:	4c0d      	ldr	r4, [pc, #52]	; (8005a2c <__libc_init_array+0x3c>)
 80059f8:	1b64      	subs	r4, r4, r5
 80059fa:	10a4      	asrs	r4, r4, #2
 80059fc:	42a6      	cmp	r6, r4
 80059fe:	d109      	bne.n	8005a14 <__libc_init_array+0x24>
 8005a00:	2600      	movs	r6, #0
 8005a02:	f000 fc8b 	bl	800631c <_init>
 8005a06:	4d0a      	ldr	r5, [pc, #40]	; (8005a30 <__libc_init_array+0x40>)
 8005a08:	4c0a      	ldr	r4, [pc, #40]	; (8005a34 <__libc_init_array+0x44>)
 8005a0a:	1b64      	subs	r4, r4, r5
 8005a0c:	10a4      	asrs	r4, r4, #2
 8005a0e:	42a6      	cmp	r6, r4
 8005a10:	d105      	bne.n	8005a1e <__libc_init_array+0x2e>
 8005a12:	bd70      	pop	{r4, r5, r6, pc}
 8005a14:	00b3      	lsls	r3, r6, #2
 8005a16:	58eb      	ldr	r3, [r5, r3]
 8005a18:	4798      	blx	r3
 8005a1a:	3601      	adds	r6, #1
 8005a1c:	e7ee      	b.n	80059fc <__libc_init_array+0xc>
 8005a1e:	00b3      	lsls	r3, r6, #2
 8005a20:	58eb      	ldr	r3, [r5, r3]
 8005a22:	4798      	blx	r3
 8005a24:	3601      	adds	r6, #1
 8005a26:	e7f2      	b.n	8005a0e <__libc_init_array+0x1e>
 8005a28:	08006af0 	.word	0x08006af0
 8005a2c:	08006af0 	.word	0x08006af0
 8005a30:	08006af0 	.word	0x08006af0
 8005a34:	08006af4 	.word	0x08006af4

08005a38 <memcpy>:
 8005a38:	2300      	movs	r3, #0
 8005a3a:	b510      	push	{r4, lr}
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d100      	bne.n	8005a42 <memcpy+0xa>
 8005a40:	bd10      	pop	{r4, pc}
 8005a42:	5ccc      	ldrb	r4, [r1, r3]
 8005a44:	54c4      	strb	r4, [r0, r3]
 8005a46:	3301      	adds	r3, #1
 8005a48:	e7f8      	b.n	8005a3c <memcpy+0x4>

08005a4a <memset>:
 8005a4a:	0003      	movs	r3, r0
 8005a4c:	1882      	adds	r2, r0, r2
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d100      	bne.n	8005a54 <memset+0xa>
 8005a52:	4770      	bx	lr
 8005a54:	7019      	strb	r1, [r3, #0]
 8005a56:	3301      	adds	r3, #1
 8005a58:	e7f9      	b.n	8005a4e <memset+0x4>
	...

08005a5c <siprintf>:
 8005a5c:	b40e      	push	{r1, r2, r3}
 8005a5e:	b500      	push	{lr}
 8005a60:	490b      	ldr	r1, [pc, #44]	; (8005a90 <siprintf+0x34>)
 8005a62:	b09c      	sub	sp, #112	; 0x70
 8005a64:	ab1d      	add	r3, sp, #116	; 0x74
 8005a66:	9002      	str	r0, [sp, #8]
 8005a68:	9006      	str	r0, [sp, #24]
 8005a6a:	9107      	str	r1, [sp, #28]
 8005a6c:	9104      	str	r1, [sp, #16]
 8005a6e:	4809      	ldr	r0, [pc, #36]	; (8005a94 <siprintf+0x38>)
 8005a70:	4909      	ldr	r1, [pc, #36]	; (8005a98 <siprintf+0x3c>)
 8005a72:	cb04      	ldmia	r3!, {r2}
 8005a74:	9105      	str	r1, [sp, #20]
 8005a76:	6800      	ldr	r0, [r0, #0]
 8005a78:	a902      	add	r1, sp, #8
 8005a7a:	9301      	str	r3, [sp, #4]
 8005a7c:	f000 f870 	bl	8005b60 <_svfiprintf_r>
 8005a80:	2300      	movs	r3, #0
 8005a82:	9a02      	ldr	r2, [sp, #8]
 8005a84:	7013      	strb	r3, [r2, #0]
 8005a86:	b01c      	add	sp, #112	; 0x70
 8005a88:	bc08      	pop	{r3}
 8005a8a:	b003      	add	sp, #12
 8005a8c:	4718      	bx	r3
 8005a8e:	46c0      	nop			; (mov r8, r8)
 8005a90:	7fffffff 	.word	0x7fffffff
 8005a94:	200004f4 	.word	0x200004f4
 8005a98:	ffff0208 	.word	0xffff0208

08005a9c <__ssputs_r>:
 8005a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a9e:	688e      	ldr	r6, [r1, #8]
 8005aa0:	b085      	sub	sp, #20
 8005aa2:	0007      	movs	r7, r0
 8005aa4:	000c      	movs	r4, r1
 8005aa6:	9203      	str	r2, [sp, #12]
 8005aa8:	9301      	str	r3, [sp, #4]
 8005aaa:	429e      	cmp	r6, r3
 8005aac:	d83c      	bhi.n	8005b28 <__ssputs_r+0x8c>
 8005aae:	2390      	movs	r3, #144	; 0x90
 8005ab0:	898a      	ldrh	r2, [r1, #12]
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	421a      	tst	r2, r3
 8005ab6:	d034      	beq.n	8005b22 <__ssputs_r+0x86>
 8005ab8:	6909      	ldr	r1, [r1, #16]
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	6960      	ldr	r0, [r4, #20]
 8005abe:	1a5b      	subs	r3, r3, r1
 8005ac0:	9302      	str	r3, [sp, #8]
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	4343      	muls	r3, r0
 8005ac6:	0fdd      	lsrs	r5, r3, #31
 8005ac8:	18ed      	adds	r5, r5, r3
 8005aca:	9b01      	ldr	r3, [sp, #4]
 8005acc:	9802      	ldr	r0, [sp, #8]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	181b      	adds	r3, r3, r0
 8005ad2:	106d      	asrs	r5, r5, #1
 8005ad4:	42ab      	cmp	r3, r5
 8005ad6:	d900      	bls.n	8005ada <__ssputs_r+0x3e>
 8005ad8:	001d      	movs	r5, r3
 8005ada:	0553      	lsls	r3, r2, #21
 8005adc:	d532      	bpl.n	8005b44 <__ssputs_r+0xa8>
 8005ade:	0029      	movs	r1, r5
 8005ae0:	0038      	movs	r0, r7
 8005ae2:	f000 fb49 	bl	8006178 <_malloc_r>
 8005ae6:	1e06      	subs	r6, r0, #0
 8005ae8:	d109      	bne.n	8005afe <__ssputs_r+0x62>
 8005aea:	230c      	movs	r3, #12
 8005aec:	603b      	str	r3, [r7, #0]
 8005aee:	2340      	movs	r3, #64	; 0x40
 8005af0:	2001      	movs	r0, #1
 8005af2:	89a2      	ldrh	r2, [r4, #12]
 8005af4:	4240      	negs	r0, r0
 8005af6:	4313      	orrs	r3, r2
 8005af8:	81a3      	strh	r3, [r4, #12]
 8005afa:	b005      	add	sp, #20
 8005afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005afe:	9a02      	ldr	r2, [sp, #8]
 8005b00:	6921      	ldr	r1, [r4, #16]
 8005b02:	f7ff ff99 	bl	8005a38 <memcpy>
 8005b06:	89a3      	ldrh	r3, [r4, #12]
 8005b08:	4a14      	ldr	r2, [pc, #80]	; (8005b5c <__ssputs_r+0xc0>)
 8005b0a:	401a      	ands	r2, r3
 8005b0c:	2380      	movs	r3, #128	; 0x80
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	81a3      	strh	r3, [r4, #12]
 8005b12:	9b02      	ldr	r3, [sp, #8]
 8005b14:	6126      	str	r6, [r4, #16]
 8005b16:	18f6      	adds	r6, r6, r3
 8005b18:	6026      	str	r6, [r4, #0]
 8005b1a:	6165      	str	r5, [r4, #20]
 8005b1c:	9e01      	ldr	r6, [sp, #4]
 8005b1e:	1aed      	subs	r5, r5, r3
 8005b20:	60a5      	str	r5, [r4, #8]
 8005b22:	9b01      	ldr	r3, [sp, #4]
 8005b24:	429e      	cmp	r6, r3
 8005b26:	d900      	bls.n	8005b2a <__ssputs_r+0x8e>
 8005b28:	9e01      	ldr	r6, [sp, #4]
 8005b2a:	0032      	movs	r2, r6
 8005b2c:	9903      	ldr	r1, [sp, #12]
 8005b2e:	6820      	ldr	r0, [r4, #0]
 8005b30:	f000 faa3 	bl	800607a <memmove>
 8005b34:	68a3      	ldr	r3, [r4, #8]
 8005b36:	2000      	movs	r0, #0
 8005b38:	1b9b      	subs	r3, r3, r6
 8005b3a:	60a3      	str	r3, [r4, #8]
 8005b3c:	6823      	ldr	r3, [r4, #0]
 8005b3e:	199e      	adds	r6, r3, r6
 8005b40:	6026      	str	r6, [r4, #0]
 8005b42:	e7da      	b.n	8005afa <__ssputs_r+0x5e>
 8005b44:	002a      	movs	r2, r5
 8005b46:	0038      	movs	r0, r7
 8005b48:	f000 fb8c 	bl	8006264 <_realloc_r>
 8005b4c:	1e06      	subs	r6, r0, #0
 8005b4e:	d1e0      	bne.n	8005b12 <__ssputs_r+0x76>
 8005b50:	0038      	movs	r0, r7
 8005b52:	6921      	ldr	r1, [r4, #16]
 8005b54:	f000 faa4 	bl	80060a0 <_free_r>
 8005b58:	e7c7      	b.n	8005aea <__ssputs_r+0x4e>
 8005b5a:	46c0      	nop			; (mov r8, r8)
 8005b5c:	fffffb7f 	.word	0xfffffb7f

08005b60 <_svfiprintf_r>:
 8005b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b62:	b0a1      	sub	sp, #132	; 0x84
 8005b64:	9003      	str	r0, [sp, #12]
 8005b66:	001d      	movs	r5, r3
 8005b68:	898b      	ldrh	r3, [r1, #12]
 8005b6a:	000f      	movs	r7, r1
 8005b6c:	0016      	movs	r6, r2
 8005b6e:	061b      	lsls	r3, r3, #24
 8005b70:	d511      	bpl.n	8005b96 <_svfiprintf_r+0x36>
 8005b72:	690b      	ldr	r3, [r1, #16]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10e      	bne.n	8005b96 <_svfiprintf_r+0x36>
 8005b78:	2140      	movs	r1, #64	; 0x40
 8005b7a:	f000 fafd 	bl	8006178 <_malloc_r>
 8005b7e:	6038      	str	r0, [r7, #0]
 8005b80:	6138      	str	r0, [r7, #16]
 8005b82:	2800      	cmp	r0, #0
 8005b84:	d105      	bne.n	8005b92 <_svfiprintf_r+0x32>
 8005b86:	230c      	movs	r3, #12
 8005b88:	9a03      	ldr	r2, [sp, #12]
 8005b8a:	3801      	subs	r0, #1
 8005b8c:	6013      	str	r3, [r2, #0]
 8005b8e:	b021      	add	sp, #132	; 0x84
 8005b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b92:	2340      	movs	r3, #64	; 0x40
 8005b94:	617b      	str	r3, [r7, #20]
 8005b96:	2300      	movs	r3, #0
 8005b98:	ac08      	add	r4, sp, #32
 8005b9a:	6163      	str	r3, [r4, #20]
 8005b9c:	3320      	adds	r3, #32
 8005b9e:	7663      	strb	r3, [r4, #25]
 8005ba0:	3310      	adds	r3, #16
 8005ba2:	76a3      	strb	r3, [r4, #26]
 8005ba4:	9507      	str	r5, [sp, #28]
 8005ba6:	0035      	movs	r5, r6
 8005ba8:	782b      	ldrb	r3, [r5, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <_svfiprintf_r+0x52>
 8005bae:	2b25      	cmp	r3, #37	; 0x25
 8005bb0:	d147      	bne.n	8005c42 <_svfiprintf_r+0xe2>
 8005bb2:	1bab      	subs	r3, r5, r6
 8005bb4:	9305      	str	r3, [sp, #20]
 8005bb6:	42b5      	cmp	r5, r6
 8005bb8:	d00c      	beq.n	8005bd4 <_svfiprintf_r+0x74>
 8005bba:	0032      	movs	r2, r6
 8005bbc:	0039      	movs	r1, r7
 8005bbe:	9803      	ldr	r0, [sp, #12]
 8005bc0:	f7ff ff6c 	bl	8005a9c <__ssputs_r>
 8005bc4:	1c43      	adds	r3, r0, #1
 8005bc6:	d100      	bne.n	8005bca <_svfiprintf_r+0x6a>
 8005bc8:	e0ae      	b.n	8005d28 <_svfiprintf_r+0x1c8>
 8005bca:	6962      	ldr	r2, [r4, #20]
 8005bcc:	9b05      	ldr	r3, [sp, #20]
 8005bce:	4694      	mov	ip, r2
 8005bd0:	4463      	add	r3, ip
 8005bd2:	6163      	str	r3, [r4, #20]
 8005bd4:	782b      	ldrb	r3, [r5, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d100      	bne.n	8005bdc <_svfiprintf_r+0x7c>
 8005bda:	e0a5      	b.n	8005d28 <_svfiprintf_r+0x1c8>
 8005bdc:	2201      	movs	r2, #1
 8005bde:	2300      	movs	r3, #0
 8005be0:	4252      	negs	r2, r2
 8005be2:	6062      	str	r2, [r4, #4]
 8005be4:	a904      	add	r1, sp, #16
 8005be6:	3254      	adds	r2, #84	; 0x54
 8005be8:	1852      	adds	r2, r2, r1
 8005bea:	1c6e      	adds	r6, r5, #1
 8005bec:	6023      	str	r3, [r4, #0]
 8005bee:	60e3      	str	r3, [r4, #12]
 8005bf0:	60a3      	str	r3, [r4, #8]
 8005bf2:	7013      	strb	r3, [r2, #0]
 8005bf4:	65a3      	str	r3, [r4, #88]	; 0x58
 8005bf6:	2205      	movs	r2, #5
 8005bf8:	7831      	ldrb	r1, [r6, #0]
 8005bfa:	4854      	ldr	r0, [pc, #336]	; (8005d4c <_svfiprintf_r+0x1ec>)
 8005bfc:	f000 fa32 	bl	8006064 <memchr>
 8005c00:	1c75      	adds	r5, r6, #1
 8005c02:	2800      	cmp	r0, #0
 8005c04:	d11f      	bne.n	8005c46 <_svfiprintf_r+0xe6>
 8005c06:	6822      	ldr	r2, [r4, #0]
 8005c08:	06d3      	lsls	r3, r2, #27
 8005c0a:	d504      	bpl.n	8005c16 <_svfiprintf_r+0xb6>
 8005c0c:	2353      	movs	r3, #83	; 0x53
 8005c0e:	a904      	add	r1, sp, #16
 8005c10:	185b      	adds	r3, r3, r1
 8005c12:	2120      	movs	r1, #32
 8005c14:	7019      	strb	r1, [r3, #0]
 8005c16:	0713      	lsls	r3, r2, #28
 8005c18:	d504      	bpl.n	8005c24 <_svfiprintf_r+0xc4>
 8005c1a:	2353      	movs	r3, #83	; 0x53
 8005c1c:	a904      	add	r1, sp, #16
 8005c1e:	185b      	adds	r3, r3, r1
 8005c20:	212b      	movs	r1, #43	; 0x2b
 8005c22:	7019      	strb	r1, [r3, #0]
 8005c24:	7833      	ldrb	r3, [r6, #0]
 8005c26:	2b2a      	cmp	r3, #42	; 0x2a
 8005c28:	d016      	beq.n	8005c58 <_svfiprintf_r+0xf8>
 8005c2a:	0035      	movs	r5, r6
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	200a      	movs	r0, #10
 8005c30:	68e3      	ldr	r3, [r4, #12]
 8005c32:	782a      	ldrb	r2, [r5, #0]
 8005c34:	1c6e      	adds	r6, r5, #1
 8005c36:	3a30      	subs	r2, #48	; 0x30
 8005c38:	2a09      	cmp	r2, #9
 8005c3a:	d94e      	bls.n	8005cda <_svfiprintf_r+0x17a>
 8005c3c:	2900      	cmp	r1, #0
 8005c3e:	d111      	bne.n	8005c64 <_svfiprintf_r+0x104>
 8005c40:	e017      	b.n	8005c72 <_svfiprintf_r+0x112>
 8005c42:	3501      	adds	r5, #1
 8005c44:	e7b0      	b.n	8005ba8 <_svfiprintf_r+0x48>
 8005c46:	4b41      	ldr	r3, [pc, #260]	; (8005d4c <_svfiprintf_r+0x1ec>)
 8005c48:	6822      	ldr	r2, [r4, #0]
 8005c4a:	1ac0      	subs	r0, r0, r3
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	4083      	lsls	r3, r0
 8005c50:	4313      	orrs	r3, r2
 8005c52:	002e      	movs	r6, r5
 8005c54:	6023      	str	r3, [r4, #0]
 8005c56:	e7ce      	b.n	8005bf6 <_svfiprintf_r+0x96>
 8005c58:	9b07      	ldr	r3, [sp, #28]
 8005c5a:	1d19      	adds	r1, r3, #4
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	9107      	str	r1, [sp, #28]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	db01      	blt.n	8005c68 <_svfiprintf_r+0x108>
 8005c64:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c66:	e004      	b.n	8005c72 <_svfiprintf_r+0x112>
 8005c68:	425b      	negs	r3, r3
 8005c6a:	60e3      	str	r3, [r4, #12]
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	6023      	str	r3, [r4, #0]
 8005c72:	782b      	ldrb	r3, [r5, #0]
 8005c74:	2b2e      	cmp	r3, #46	; 0x2e
 8005c76:	d10a      	bne.n	8005c8e <_svfiprintf_r+0x12e>
 8005c78:	786b      	ldrb	r3, [r5, #1]
 8005c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8005c7c:	d135      	bne.n	8005cea <_svfiprintf_r+0x18a>
 8005c7e:	9b07      	ldr	r3, [sp, #28]
 8005c80:	3502      	adds	r5, #2
 8005c82:	1d1a      	adds	r2, r3, #4
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	9207      	str	r2, [sp, #28]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	db2b      	blt.n	8005ce4 <_svfiprintf_r+0x184>
 8005c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c8e:	4e30      	ldr	r6, [pc, #192]	; (8005d50 <_svfiprintf_r+0x1f0>)
 8005c90:	2203      	movs	r2, #3
 8005c92:	0030      	movs	r0, r6
 8005c94:	7829      	ldrb	r1, [r5, #0]
 8005c96:	f000 f9e5 	bl	8006064 <memchr>
 8005c9a:	2800      	cmp	r0, #0
 8005c9c:	d006      	beq.n	8005cac <_svfiprintf_r+0x14c>
 8005c9e:	2340      	movs	r3, #64	; 0x40
 8005ca0:	1b80      	subs	r0, r0, r6
 8005ca2:	4083      	lsls	r3, r0
 8005ca4:	6822      	ldr	r2, [r4, #0]
 8005ca6:	3501      	adds	r5, #1
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	6023      	str	r3, [r4, #0]
 8005cac:	7829      	ldrb	r1, [r5, #0]
 8005cae:	2206      	movs	r2, #6
 8005cb0:	4828      	ldr	r0, [pc, #160]	; (8005d54 <_svfiprintf_r+0x1f4>)
 8005cb2:	1c6e      	adds	r6, r5, #1
 8005cb4:	7621      	strb	r1, [r4, #24]
 8005cb6:	f000 f9d5 	bl	8006064 <memchr>
 8005cba:	2800      	cmp	r0, #0
 8005cbc:	d03c      	beq.n	8005d38 <_svfiprintf_r+0x1d8>
 8005cbe:	4b26      	ldr	r3, [pc, #152]	; (8005d58 <_svfiprintf_r+0x1f8>)
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d125      	bne.n	8005d10 <_svfiprintf_r+0x1b0>
 8005cc4:	2207      	movs	r2, #7
 8005cc6:	9b07      	ldr	r3, [sp, #28]
 8005cc8:	3307      	adds	r3, #7
 8005cca:	4393      	bics	r3, r2
 8005ccc:	3308      	adds	r3, #8
 8005cce:	9307      	str	r3, [sp, #28]
 8005cd0:	6963      	ldr	r3, [r4, #20]
 8005cd2:	9a04      	ldr	r2, [sp, #16]
 8005cd4:	189b      	adds	r3, r3, r2
 8005cd6:	6163      	str	r3, [r4, #20]
 8005cd8:	e765      	b.n	8005ba6 <_svfiprintf_r+0x46>
 8005cda:	4343      	muls	r3, r0
 8005cdc:	0035      	movs	r5, r6
 8005cde:	2101      	movs	r1, #1
 8005ce0:	189b      	adds	r3, r3, r2
 8005ce2:	e7a6      	b.n	8005c32 <_svfiprintf_r+0xd2>
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	425b      	negs	r3, r3
 8005ce8:	e7d0      	b.n	8005c8c <_svfiprintf_r+0x12c>
 8005cea:	2300      	movs	r3, #0
 8005cec:	200a      	movs	r0, #10
 8005cee:	001a      	movs	r2, r3
 8005cf0:	3501      	adds	r5, #1
 8005cf2:	6063      	str	r3, [r4, #4]
 8005cf4:	7829      	ldrb	r1, [r5, #0]
 8005cf6:	1c6e      	adds	r6, r5, #1
 8005cf8:	3930      	subs	r1, #48	; 0x30
 8005cfa:	2909      	cmp	r1, #9
 8005cfc:	d903      	bls.n	8005d06 <_svfiprintf_r+0x1a6>
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d0c5      	beq.n	8005c8e <_svfiprintf_r+0x12e>
 8005d02:	9209      	str	r2, [sp, #36]	; 0x24
 8005d04:	e7c3      	b.n	8005c8e <_svfiprintf_r+0x12e>
 8005d06:	4342      	muls	r2, r0
 8005d08:	0035      	movs	r5, r6
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	1852      	adds	r2, r2, r1
 8005d0e:	e7f1      	b.n	8005cf4 <_svfiprintf_r+0x194>
 8005d10:	ab07      	add	r3, sp, #28
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	003a      	movs	r2, r7
 8005d16:	0021      	movs	r1, r4
 8005d18:	4b10      	ldr	r3, [pc, #64]	; (8005d5c <_svfiprintf_r+0x1fc>)
 8005d1a:	9803      	ldr	r0, [sp, #12]
 8005d1c:	e000      	b.n	8005d20 <_svfiprintf_r+0x1c0>
 8005d1e:	bf00      	nop
 8005d20:	9004      	str	r0, [sp, #16]
 8005d22:	9b04      	ldr	r3, [sp, #16]
 8005d24:	3301      	adds	r3, #1
 8005d26:	d1d3      	bne.n	8005cd0 <_svfiprintf_r+0x170>
 8005d28:	89bb      	ldrh	r3, [r7, #12]
 8005d2a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005d2c:	065b      	lsls	r3, r3, #25
 8005d2e:	d400      	bmi.n	8005d32 <_svfiprintf_r+0x1d2>
 8005d30:	e72d      	b.n	8005b8e <_svfiprintf_r+0x2e>
 8005d32:	2001      	movs	r0, #1
 8005d34:	4240      	negs	r0, r0
 8005d36:	e72a      	b.n	8005b8e <_svfiprintf_r+0x2e>
 8005d38:	ab07      	add	r3, sp, #28
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	003a      	movs	r2, r7
 8005d3e:	0021      	movs	r1, r4
 8005d40:	4b06      	ldr	r3, [pc, #24]	; (8005d5c <_svfiprintf_r+0x1fc>)
 8005d42:	9803      	ldr	r0, [sp, #12]
 8005d44:	f000 f87c 	bl	8005e40 <_printf_i>
 8005d48:	e7ea      	b.n	8005d20 <_svfiprintf_r+0x1c0>
 8005d4a:	46c0      	nop			; (mov r8, r8)
 8005d4c:	08006abc 	.word	0x08006abc
 8005d50:	08006ac2 	.word	0x08006ac2
 8005d54:	08006ac6 	.word	0x08006ac6
 8005d58:	00000000 	.word	0x00000000
 8005d5c:	08005a9d 	.word	0x08005a9d

08005d60 <_printf_common>:
 8005d60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d62:	0015      	movs	r5, r2
 8005d64:	9301      	str	r3, [sp, #4]
 8005d66:	688a      	ldr	r2, [r1, #8]
 8005d68:	690b      	ldr	r3, [r1, #16]
 8005d6a:	000c      	movs	r4, r1
 8005d6c:	9000      	str	r0, [sp, #0]
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	da00      	bge.n	8005d74 <_printf_common+0x14>
 8005d72:	0013      	movs	r3, r2
 8005d74:	0022      	movs	r2, r4
 8005d76:	602b      	str	r3, [r5, #0]
 8005d78:	3243      	adds	r2, #67	; 0x43
 8005d7a:	7812      	ldrb	r2, [r2, #0]
 8005d7c:	2a00      	cmp	r2, #0
 8005d7e:	d001      	beq.n	8005d84 <_printf_common+0x24>
 8005d80:	3301      	adds	r3, #1
 8005d82:	602b      	str	r3, [r5, #0]
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	069b      	lsls	r3, r3, #26
 8005d88:	d502      	bpl.n	8005d90 <_printf_common+0x30>
 8005d8a:	682b      	ldr	r3, [r5, #0]
 8005d8c:	3302      	adds	r3, #2
 8005d8e:	602b      	str	r3, [r5, #0]
 8005d90:	6822      	ldr	r2, [r4, #0]
 8005d92:	2306      	movs	r3, #6
 8005d94:	0017      	movs	r7, r2
 8005d96:	401f      	ands	r7, r3
 8005d98:	421a      	tst	r2, r3
 8005d9a:	d027      	beq.n	8005dec <_printf_common+0x8c>
 8005d9c:	0023      	movs	r3, r4
 8005d9e:	3343      	adds	r3, #67	; 0x43
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	1e5a      	subs	r2, r3, #1
 8005da4:	4193      	sbcs	r3, r2
 8005da6:	6822      	ldr	r2, [r4, #0]
 8005da8:	0692      	lsls	r2, r2, #26
 8005daa:	d430      	bmi.n	8005e0e <_printf_common+0xae>
 8005dac:	0022      	movs	r2, r4
 8005dae:	9901      	ldr	r1, [sp, #4]
 8005db0:	9800      	ldr	r0, [sp, #0]
 8005db2:	9e08      	ldr	r6, [sp, #32]
 8005db4:	3243      	adds	r2, #67	; 0x43
 8005db6:	47b0      	blx	r6
 8005db8:	1c43      	adds	r3, r0, #1
 8005dba:	d025      	beq.n	8005e08 <_printf_common+0xa8>
 8005dbc:	2306      	movs	r3, #6
 8005dbe:	6820      	ldr	r0, [r4, #0]
 8005dc0:	682a      	ldr	r2, [r5, #0]
 8005dc2:	68e1      	ldr	r1, [r4, #12]
 8005dc4:	2500      	movs	r5, #0
 8005dc6:	4003      	ands	r3, r0
 8005dc8:	2b04      	cmp	r3, #4
 8005dca:	d103      	bne.n	8005dd4 <_printf_common+0x74>
 8005dcc:	1a8d      	subs	r5, r1, r2
 8005dce:	43eb      	mvns	r3, r5
 8005dd0:	17db      	asrs	r3, r3, #31
 8005dd2:	401d      	ands	r5, r3
 8005dd4:	68a3      	ldr	r3, [r4, #8]
 8005dd6:	6922      	ldr	r2, [r4, #16]
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	dd01      	ble.n	8005de0 <_printf_common+0x80>
 8005ddc:	1a9b      	subs	r3, r3, r2
 8005dde:	18ed      	adds	r5, r5, r3
 8005de0:	2700      	movs	r7, #0
 8005de2:	42bd      	cmp	r5, r7
 8005de4:	d120      	bne.n	8005e28 <_printf_common+0xc8>
 8005de6:	2000      	movs	r0, #0
 8005de8:	e010      	b.n	8005e0c <_printf_common+0xac>
 8005dea:	3701      	adds	r7, #1
 8005dec:	68e3      	ldr	r3, [r4, #12]
 8005dee:	682a      	ldr	r2, [r5, #0]
 8005df0:	1a9b      	subs	r3, r3, r2
 8005df2:	42bb      	cmp	r3, r7
 8005df4:	ddd2      	ble.n	8005d9c <_printf_common+0x3c>
 8005df6:	0022      	movs	r2, r4
 8005df8:	2301      	movs	r3, #1
 8005dfa:	9901      	ldr	r1, [sp, #4]
 8005dfc:	9800      	ldr	r0, [sp, #0]
 8005dfe:	9e08      	ldr	r6, [sp, #32]
 8005e00:	3219      	adds	r2, #25
 8005e02:	47b0      	blx	r6
 8005e04:	1c43      	adds	r3, r0, #1
 8005e06:	d1f0      	bne.n	8005dea <_printf_common+0x8a>
 8005e08:	2001      	movs	r0, #1
 8005e0a:	4240      	negs	r0, r0
 8005e0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e0e:	2030      	movs	r0, #48	; 0x30
 8005e10:	18e1      	adds	r1, r4, r3
 8005e12:	3143      	adds	r1, #67	; 0x43
 8005e14:	7008      	strb	r0, [r1, #0]
 8005e16:	0021      	movs	r1, r4
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	3145      	adds	r1, #69	; 0x45
 8005e1c:	7809      	ldrb	r1, [r1, #0]
 8005e1e:	18a2      	adds	r2, r4, r2
 8005e20:	3243      	adds	r2, #67	; 0x43
 8005e22:	3302      	adds	r3, #2
 8005e24:	7011      	strb	r1, [r2, #0]
 8005e26:	e7c1      	b.n	8005dac <_printf_common+0x4c>
 8005e28:	0022      	movs	r2, r4
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	9901      	ldr	r1, [sp, #4]
 8005e2e:	9800      	ldr	r0, [sp, #0]
 8005e30:	9e08      	ldr	r6, [sp, #32]
 8005e32:	321a      	adds	r2, #26
 8005e34:	47b0      	blx	r6
 8005e36:	1c43      	adds	r3, r0, #1
 8005e38:	d0e6      	beq.n	8005e08 <_printf_common+0xa8>
 8005e3a:	3701      	adds	r7, #1
 8005e3c:	e7d1      	b.n	8005de2 <_printf_common+0x82>
	...

08005e40 <_printf_i>:
 8005e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e42:	b08b      	sub	sp, #44	; 0x2c
 8005e44:	9206      	str	r2, [sp, #24]
 8005e46:	000a      	movs	r2, r1
 8005e48:	3243      	adds	r2, #67	; 0x43
 8005e4a:	9307      	str	r3, [sp, #28]
 8005e4c:	9005      	str	r0, [sp, #20]
 8005e4e:	9204      	str	r2, [sp, #16]
 8005e50:	7e0a      	ldrb	r2, [r1, #24]
 8005e52:	000c      	movs	r4, r1
 8005e54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e56:	2a78      	cmp	r2, #120	; 0x78
 8005e58:	d807      	bhi.n	8005e6a <_printf_i+0x2a>
 8005e5a:	2a62      	cmp	r2, #98	; 0x62
 8005e5c:	d809      	bhi.n	8005e72 <_printf_i+0x32>
 8005e5e:	2a00      	cmp	r2, #0
 8005e60:	d100      	bne.n	8005e64 <_printf_i+0x24>
 8005e62:	e0c1      	b.n	8005fe8 <_printf_i+0x1a8>
 8005e64:	2a58      	cmp	r2, #88	; 0x58
 8005e66:	d100      	bne.n	8005e6a <_printf_i+0x2a>
 8005e68:	e08c      	b.n	8005f84 <_printf_i+0x144>
 8005e6a:	0026      	movs	r6, r4
 8005e6c:	3642      	adds	r6, #66	; 0x42
 8005e6e:	7032      	strb	r2, [r6, #0]
 8005e70:	e022      	b.n	8005eb8 <_printf_i+0x78>
 8005e72:	0010      	movs	r0, r2
 8005e74:	3863      	subs	r0, #99	; 0x63
 8005e76:	2815      	cmp	r0, #21
 8005e78:	d8f7      	bhi.n	8005e6a <_printf_i+0x2a>
 8005e7a:	f7fa f943 	bl	8000104 <__gnu_thumb1_case_shi>
 8005e7e:	0016      	.short	0x0016
 8005e80:	fff6001f 	.word	0xfff6001f
 8005e84:	fff6fff6 	.word	0xfff6fff6
 8005e88:	001ffff6 	.word	0x001ffff6
 8005e8c:	fff6fff6 	.word	0xfff6fff6
 8005e90:	fff6fff6 	.word	0xfff6fff6
 8005e94:	003600a8 	.word	0x003600a8
 8005e98:	fff6009a 	.word	0xfff6009a
 8005e9c:	00b9fff6 	.word	0x00b9fff6
 8005ea0:	0036fff6 	.word	0x0036fff6
 8005ea4:	fff6fff6 	.word	0xfff6fff6
 8005ea8:	009e      	.short	0x009e
 8005eaa:	0026      	movs	r6, r4
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	3642      	adds	r6, #66	; 0x42
 8005eb0:	1d11      	adds	r1, r2, #4
 8005eb2:	6019      	str	r1, [r3, #0]
 8005eb4:	6813      	ldr	r3, [r2, #0]
 8005eb6:	7033      	strb	r3, [r6, #0]
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e0a7      	b.n	800600c <_printf_i+0x1cc>
 8005ebc:	6808      	ldr	r0, [r1, #0]
 8005ebe:	6819      	ldr	r1, [r3, #0]
 8005ec0:	1d0a      	adds	r2, r1, #4
 8005ec2:	0605      	lsls	r5, r0, #24
 8005ec4:	d50b      	bpl.n	8005ede <_printf_i+0x9e>
 8005ec6:	680d      	ldr	r5, [r1, #0]
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	2d00      	cmp	r5, #0
 8005ecc:	da03      	bge.n	8005ed6 <_printf_i+0x96>
 8005ece:	232d      	movs	r3, #45	; 0x2d
 8005ed0:	9a04      	ldr	r2, [sp, #16]
 8005ed2:	426d      	negs	r5, r5
 8005ed4:	7013      	strb	r3, [r2, #0]
 8005ed6:	4b61      	ldr	r3, [pc, #388]	; (800605c <_printf_i+0x21c>)
 8005ed8:	270a      	movs	r7, #10
 8005eda:	9303      	str	r3, [sp, #12]
 8005edc:	e01b      	b.n	8005f16 <_printf_i+0xd6>
 8005ede:	680d      	ldr	r5, [r1, #0]
 8005ee0:	601a      	str	r2, [r3, #0]
 8005ee2:	0641      	lsls	r1, r0, #25
 8005ee4:	d5f1      	bpl.n	8005eca <_printf_i+0x8a>
 8005ee6:	b22d      	sxth	r5, r5
 8005ee8:	e7ef      	b.n	8005eca <_printf_i+0x8a>
 8005eea:	680d      	ldr	r5, [r1, #0]
 8005eec:	6819      	ldr	r1, [r3, #0]
 8005eee:	1d08      	adds	r0, r1, #4
 8005ef0:	6018      	str	r0, [r3, #0]
 8005ef2:	062e      	lsls	r6, r5, #24
 8005ef4:	d501      	bpl.n	8005efa <_printf_i+0xba>
 8005ef6:	680d      	ldr	r5, [r1, #0]
 8005ef8:	e003      	b.n	8005f02 <_printf_i+0xc2>
 8005efa:	066d      	lsls	r5, r5, #25
 8005efc:	d5fb      	bpl.n	8005ef6 <_printf_i+0xb6>
 8005efe:	680d      	ldr	r5, [r1, #0]
 8005f00:	b2ad      	uxth	r5, r5
 8005f02:	4b56      	ldr	r3, [pc, #344]	; (800605c <_printf_i+0x21c>)
 8005f04:	2708      	movs	r7, #8
 8005f06:	9303      	str	r3, [sp, #12]
 8005f08:	2a6f      	cmp	r2, #111	; 0x6f
 8005f0a:	d000      	beq.n	8005f0e <_printf_i+0xce>
 8005f0c:	3702      	adds	r7, #2
 8005f0e:	0023      	movs	r3, r4
 8005f10:	2200      	movs	r2, #0
 8005f12:	3343      	adds	r3, #67	; 0x43
 8005f14:	701a      	strb	r2, [r3, #0]
 8005f16:	6863      	ldr	r3, [r4, #4]
 8005f18:	60a3      	str	r3, [r4, #8]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	db03      	blt.n	8005f26 <_printf_i+0xe6>
 8005f1e:	2204      	movs	r2, #4
 8005f20:	6821      	ldr	r1, [r4, #0]
 8005f22:	4391      	bics	r1, r2
 8005f24:	6021      	str	r1, [r4, #0]
 8005f26:	2d00      	cmp	r5, #0
 8005f28:	d102      	bne.n	8005f30 <_printf_i+0xf0>
 8005f2a:	9e04      	ldr	r6, [sp, #16]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00c      	beq.n	8005f4a <_printf_i+0x10a>
 8005f30:	9e04      	ldr	r6, [sp, #16]
 8005f32:	0028      	movs	r0, r5
 8005f34:	0039      	movs	r1, r7
 8005f36:	f7fa f975 	bl	8000224 <__aeabi_uidivmod>
 8005f3a:	9b03      	ldr	r3, [sp, #12]
 8005f3c:	3e01      	subs	r6, #1
 8005f3e:	5c5b      	ldrb	r3, [r3, r1]
 8005f40:	7033      	strb	r3, [r6, #0]
 8005f42:	002b      	movs	r3, r5
 8005f44:	0005      	movs	r5, r0
 8005f46:	429f      	cmp	r7, r3
 8005f48:	d9f3      	bls.n	8005f32 <_printf_i+0xf2>
 8005f4a:	2f08      	cmp	r7, #8
 8005f4c:	d109      	bne.n	8005f62 <_printf_i+0x122>
 8005f4e:	6823      	ldr	r3, [r4, #0]
 8005f50:	07db      	lsls	r3, r3, #31
 8005f52:	d506      	bpl.n	8005f62 <_printf_i+0x122>
 8005f54:	6863      	ldr	r3, [r4, #4]
 8005f56:	6922      	ldr	r2, [r4, #16]
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	dc02      	bgt.n	8005f62 <_printf_i+0x122>
 8005f5c:	2330      	movs	r3, #48	; 0x30
 8005f5e:	3e01      	subs	r6, #1
 8005f60:	7033      	strb	r3, [r6, #0]
 8005f62:	9b04      	ldr	r3, [sp, #16]
 8005f64:	1b9b      	subs	r3, r3, r6
 8005f66:	6123      	str	r3, [r4, #16]
 8005f68:	9b07      	ldr	r3, [sp, #28]
 8005f6a:	0021      	movs	r1, r4
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	9805      	ldr	r0, [sp, #20]
 8005f70:	9b06      	ldr	r3, [sp, #24]
 8005f72:	aa09      	add	r2, sp, #36	; 0x24
 8005f74:	f7ff fef4 	bl	8005d60 <_printf_common>
 8005f78:	1c43      	adds	r3, r0, #1
 8005f7a:	d14c      	bne.n	8006016 <_printf_i+0x1d6>
 8005f7c:	2001      	movs	r0, #1
 8005f7e:	4240      	negs	r0, r0
 8005f80:	b00b      	add	sp, #44	; 0x2c
 8005f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f84:	3145      	adds	r1, #69	; 0x45
 8005f86:	700a      	strb	r2, [r1, #0]
 8005f88:	4a34      	ldr	r2, [pc, #208]	; (800605c <_printf_i+0x21c>)
 8005f8a:	9203      	str	r2, [sp, #12]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	6821      	ldr	r1, [r4, #0]
 8005f90:	ca20      	ldmia	r2!, {r5}
 8005f92:	601a      	str	r2, [r3, #0]
 8005f94:	0608      	lsls	r0, r1, #24
 8005f96:	d516      	bpl.n	8005fc6 <_printf_i+0x186>
 8005f98:	07cb      	lsls	r3, r1, #31
 8005f9a:	d502      	bpl.n	8005fa2 <_printf_i+0x162>
 8005f9c:	2320      	movs	r3, #32
 8005f9e:	4319      	orrs	r1, r3
 8005fa0:	6021      	str	r1, [r4, #0]
 8005fa2:	2710      	movs	r7, #16
 8005fa4:	2d00      	cmp	r5, #0
 8005fa6:	d1b2      	bne.n	8005f0e <_printf_i+0xce>
 8005fa8:	2320      	movs	r3, #32
 8005faa:	6822      	ldr	r2, [r4, #0]
 8005fac:	439a      	bics	r2, r3
 8005fae:	6022      	str	r2, [r4, #0]
 8005fb0:	e7ad      	b.n	8005f0e <_printf_i+0xce>
 8005fb2:	2220      	movs	r2, #32
 8005fb4:	6809      	ldr	r1, [r1, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	6022      	str	r2, [r4, #0]
 8005fba:	0022      	movs	r2, r4
 8005fbc:	2178      	movs	r1, #120	; 0x78
 8005fbe:	3245      	adds	r2, #69	; 0x45
 8005fc0:	7011      	strb	r1, [r2, #0]
 8005fc2:	4a27      	ldr	r2, [pc, #156]	; (8006060 <_printf_i+0x220>)
 8005fc4:	e7e1      	b.n	8005f8a <_printf_i+0x14a>
 8005fc6:	0648      	lsls	r0, r1, #25
 8005fc8:	d5e6      	bpl.n	8005f98 <_printf_i+0x158>
 8005fca:	b2ad      	uxth	r5, r5
 8005fcc:	e7e4      	b.n	8005f98 <_printf_i+0x158>
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	680d      	ldr	r5, [r1, #0]
 8005fd2:	1d10      	adds	r0, r2, #4
 8005fd4:	6949      	ldr	r1, [r1, #20]
 8005fd6:	6018      	str	r0, [r3, #0]
 8005fd8:	6813      	ldr	r3, [r2, #0]
 8005fda:	062e      	lsls	r6, r5, #24
 8005fdc:	d501      	bpl.n	8005fe2 <_printf_i+0x1a2>
 8005fde:	6019      	str	r1, [r3, #0]
 8005fe0:	e002      	b.n	8005fe8 <_printf_i+0x1a8>
 8005fe2:	066d      	lsls	r5, r5, #25
 8005fe4:	d5fb      	bpl.n	8005fde <_printf_i+0x19e>
 8005fe6:	8019      	strh	r1, [r3, #0]
 8005fe8:	2300      	movs	r3, #0
 8005fea:	9e04      	ldr	r6, [sp, #16]
 8005fec:	6123      	str	r3, [r4, #16]
 8005fee:	e7bb      	b.n	8005f68 <_printf_i+0x128>
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	1d11      	adds	r1, r2, #4
 8005ff4:	6019      	str	r1, [r3, #0]
 8005ff6:	6816      	ldr	r6, [r2, #0]
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	0030      	movs	r0, r6
 8005ffc:	6862      	ldr	r2, [r4, #4]
 8005ffe:	f000 f831 	bl	8006064 <memchr>
 8006002:	2800      	cmp	r0, #0
 8006004:	d001      	beq.n	800600a <_printf_i+0x1ca>
 8006006:	1b80      	subs	r0, r0, r6
 8006008:	6060      	str	r0, [r4, #4]
 800600a:	6863      	ldr	r3, [r4, #4]
 800600c:	6123      	str	r3, [r4, #16]
 800600e:	2300      	movs	r3, #0
 8006010:	9a04      	ldr	r2, [sp, #16]
 8006012:	7013      	strb	r3, [r2, #0]
 8006014:	e7a8      	b.n	8005f68 <_printf_i+0x128>
 8006016:	6923      	ldr	r3, [r4, #16]
 8006018:	0032      	movs	r2, r6
 800601a:	9906      	ldr	r1, [sp, #24]
 800601c:	9805      	ldr	r0, [sp, #20]
 800601e:	9d07      	ldr	r5, [sp, #28]
 8006020:	47a8      	blx	r5
 8006022:	1c43      	adds	r3, r0, #1
 8006024:	d0aa      	beq.n	8005f7c <_printf_i+0x13c>
 8006026:	6823      	ldr	r3, [r4, #0]
 8006028:	079b      	lsls	r3, r3, #30
 800602a:	d415      	bmi.n	8006058 <_printf_i+0x218>
 800602c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800602e:	68e0      	ldr	r0, [r4, #12]
 8006030:	4298      	cmp	r0, r3
 8006032:	daa5      	bge.n	8005f80 <_printf_i+0x140>
 8006034:	0018      	movs	r0, r3
 8006036:	e7a3      	b.n	8005f80 <_printf_i+0x140>
 8006038:	0022      	movs	r2, r4
 800603a:	2301      	movs	r3, #1
 800603c:	9906      	ldr	r1, [sp, #24]
 800603e:	9805      	ldr	r0, [sp, #20]
 8006040:	9e07      	ldr	r6, [sp, #28]
 8006042:	3219      	adds	r2, #25
 8006044:	47b0      	blx	r6
 8006046:	1c43      	adds	r3, r0, #1
 8006048:	d098      	beq.n	8005f7c <_printf_i+0x13c>
 800604a:	3501      	adds	r5, #1
 800604c:	68e3      	ldr	r3, [r4, #12]
 800604e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006050:	1a9b      	subs	r3, r3, r2
 8006052:	42ab      	cmp	r3, r5
 8006054:	dcf0      	bgt.n	8006038 <_printf_i+0x1f8>
 8006056:	e7e9      	b.n	800602c <_printf_i+0x1ec>
 8006058:	2500      	movs	r5, #0
 800605a:	e7f7      	b.n	800604c <_printf_i+0x20c>
 800605c:	08006acd 	.word	0x08006acd
 8006060:	08006ade 	.word	0x08006ade

08006064 <memchr>:
 8006064:	b2c9      	uxtb	r1, r1
 8006066:	1882      	adds	r2, r0, r2
 8006068:	4290      	cmp	r0, r2
 800606a:	d101      	bne.n	8006070 <memchr+0xc>
 800606c:	2000      	movs	r0, #0
 800606e:	4770      	bx	lr
 8006070:	7803      	ldrb	r3, [r0, #0]
 8006072:	428b      	cmp	r3, r1
 8006074:	d0fb      	beq.n	800606e <memchr+0xa>
 8006076:	3001      	adds	r0, #1
 8006078:	e7f6      	b.n	8006068 <memchr+0x4>

0800607a <memmove>:
 800607a:	b510      	push	{r4, lr}
 800607c:	4288      	cmp	r0, r1
 800607e:	d902      	bls.n	8006086 <memmove+0xc>
 8006080:	188b      	adds	r3, r1, r2
 8006082:	4298      	cmp	r0, r3
 8006084:	d303      	bcc.n	800608e <memmove+0x14>
 8006086:	2300      	movs	r3, #0
 8006088:	e007      	b.n	800609a <memmove+0x20>
 800608a:	5c8b      	ldrb	r3, [r1, r2]
 800608c:	5483      	strb	r3, [r0, r2]
 800608e:	3a01      	subs	r2, #1
 8006090:	d2fb      	bcs.n	800608a <memmove+0x10>
 8006092:	bd10      	pop	{r4, pc}
 8006094:	5ccc      	ldrb	r4, [r1, r3]
 8006096:	54c4      	strb	r4, [r0, r3]
 8006098:	3301      	adds	r3, #1
 800609a:	429a      	cmp	r2, r3
 800609c:	d1fa      	bne.n	8006094 <memmove+0x1a>
 800609e:	e7f8      	b.n	8006092 <memmove+0x18>

080060a0 <_free_r>:
 80060a0:	b570      	push	{r4, r5, r6, lr}
 80060a2:	0005      	movs	r5, r0
 80060a4:	2900      	cmp	r1, #0
 80060a6:	d010      	beq.n	80060ca <_free_r+0x2a>
 80060a8:	1f0c      	subs	r4, r1, #4
 80060aa:	6823      	ldr	r3, [r4, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	da00      	bge.n	80060b2 <_free_r+0x12>
 80060b0:	18e4      	adds	r4, r4, r3
 80060b2:	0028      	movs	r0, r5
 80060b4:	f000 f918 	bl	80062e8 <__malloc_lock>
 80060b8:	4a1d      	ldr	r2, [pc, #116]	; (8006130 <_free_r+0x90>)
 80060ba:	6813      	ldr	r3, [r2, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d105      	bne.n	80060cc <_free_r+0x2c>
 80060c0:	6063      	str	r3, [r4, #4]
 80060c2:	6014      	str	r4, [r2, #0]
 80060c4:	0028      	movs	r0, r5
 80060c6:	f000 f917 	bl	80062f8 <__malloc_unlock>
 80060ca:	bd70      	pop	{r4, r5, r6, pc}
 80060cc:	42a3      	cmp	r3, r4
 80060ce:	d908      	bls.n	80060e2 <_free_r+0x42>
 80060d0:	6821      	ldr	r1, [r4, #0]
 80060d2:	1860      	adds	r0, r4, r1
 80060d4:	4283      	cmp	r3, r0
 80060d6:	d1f3      	bne.n	80060c0 <_free_r+0x20>
 80060d8:	6818      	ldr	r0, [r3, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	1841      	adds	r1, r0, r1
 80060de:	6021      	str	r1, [r4, #0]
 80060e0:	e7ee      	b.n	80060c0 <_free_r+0x20>
 80060e2:	001a      	movs	r2, r3
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d001      	beq.n	80060ee <_free_r+0x4e>
 80060ea:	42a3      	cmp	r3, r4
 80060ec:	d9f9      	bls.n	80060e2 <_free_r+0x42>
 80060ee:	6811      	ldr	r1, [r2, #0]
 80060f0:	1850      	adds	r0, r2, r1
 80060f2:	42a0      	cmp	r0, r4
 80060f4:	d10b      	bne.n	800610e <_free_r+0x6e>
 80060f6:	6820      	ldr	r0, [r4, #0]
 80060f8:	1809      	adds	r1, r1, r0
 80060fa:	1850      	adds	r0, r2, r1
 80060fc:	6011      	str	r1, [r2, #0]
 80060fe:	4283      	cmp	r3, r0
 8006100:	d1e0      	bne.n	80060c4 <_free_r+0x24>
 8006102:	6818      	ldr	r0, [r3, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	1841      	adds	r1, r0, r1
 8006108:	6011      	str	r1, [r2, #0]
 800610a:	6053      	str	r3, [r2, #4]
 800610c:	e7da      	b.n	80060c4 <_free_r+0x24>
 800610e:	42a0      	cmp	r0, r4
 8006110:	d902      	bls.n	8006118 <_free_r+0x78>
 8006112:	230c      	movs	r3, #12
 8006114:	602b      	str	r3, [r5, #0]
 8006116:	e7d5      	b.n	80060c4 <_free_r+0x24>
 8006118:	6821      	ldr	r1, [r4, #0]
 800611a:	1860      	adds	r0, r4, r1
 800611c:	4283      	cmp	r3, r0
 800611e:	d103      	bne.n	8006128 <_free_r+0x88>
 8006120:	6818      	ldr	r0, [r3, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	1841      	adds	r1, r0, r1
 8006126:	6021      	str	r1, [r4, #0]
 8006128:	6063      	str	r3, [r4, #4]
 800612a:	6054      	str	r4, [r2, #4]
 800612c:	e7ca      	b.n	80060c4 <_free_r+0x24>
 800612e:	46c0      	nop			; (mov r8, r8)
 8006130:	20000b70 	.word	0x20000b70

08006134 <sbrk_aligned>:
 8006134:	b570      	push	{r4, r5, r6, lr}
 8006136:	4e0f      	ldr	r6, [pc, #60]	; (8006174 <sbrk_aligned+0x40>)
 8006138:	000d      	movs	r5, r1
 800613a:	6831      	ldr	r1, [r6, #0]
 800613c:	0004      	movs	r4, r0
 800613e:	2900      	cmp	r1, #0
 8006140:	d102      	bne.n	8006148 <sbrk_aligned+0x14>
 8006142:	f000 f8bf 	bl	80062c4 <_sbrk_r>
 8006146:	6030      	str	r0, [r6, #0]
 8006148:	0029      	movs	r1, r5
 800614a:	0020      	movs	r0, r4
 800614c:	f000 f8ba 	bl	80062c4 <_sbrk_r>
 8006150:	1c43      	adds	r3, r0, #1
 8006152:	d00a      	beq.n	800616a <sbrk_aligned+0x36>
 8006154:	2303      	movs	r3, #3
 8006156:	1cc5      	adds	r5, r0, #3
 8006158:	439d      	bics	r5, r3
 800615a:	42a8      	cmp	r0, r5
 800615c:	d007      	beq.n	800616e <sbrk_aligned+0x3a>
 800615e:	1a29      	subs	r1, r5, r0
 8006160:	0020      	movs	r0, r4
 8006162:	f000 f8af 	bl	80062c4 <_sbrk_r>
 8006166:	1c43      	adds	r3, r0, #1
 8006168:	d101      	bne.n	800616e <sbrk_aligned+0x3a>
 800616a:	2501      	movs	r5, #1
 800616c:	426d      	negs	r5, r5
 800616e:	0028      	movs	r0, r5
 8006170:	bd70      	pop	{r4, r5, r6, pc}
 8006172:	46c0      	nop			; (mov r8, r8)
 8006174:	20000b74 	.word	0x20000b74

08006178 <_malloc_r>:
 8006178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800617a:	2203      	movs	r2, #3
 800617c:	1ccb      	adds	r3, r1, #3
 800617e:	4393      	bics	r3, r2
 8006180:	3308      	adds	r3, #8
 8006182:	0006      	movs	r6, r0
 8006184:	001f      	movs	r7, r3
 8006186:	2b0c      	cmp	r3, #12
 8006188:	d232      	bcs.n	80061f0 <_malloc_r+0x78>
 800618a:	270c      	movs	r7, #12
 800618c:	42b9      	cmp	r1, r7
 800618e:	d831      	bhi.n	80061f4 <_malloc_r+0x7c>
 8006190:	0030      	movs	r0, r6
 8006192:	f000 f8a9 	bl	80062e8 <__malloc_lock>
 8006196:	4d32      	ldr	r5, [pc, #200]	; (8006260 <_malloc_r+0xe8>)
 8006198:	682b      	ldr	r3, [r5, #0]
 800619a:	001c      	movs	r4, r3
 800619c:	2c00      	cmp	r4, #0
 800619e:	d12e      	bne.n	80061fe <_malloc_r+0x86>
 80061a0:	0039      	movs	r1, r7
 80061a2:	0030      	movs	r0, r6
 80061a4:	f7ff ffc6 	bl	8006134 <sbrk_aligned>
 80061a8:	0004      	movs	r4, r0
 80061aa:	1c43      	adds	r3, r0, #1
 80061ac:	d11e      	bne.n	80061ec <_malloc_r+0x74>
 80061ae:	682c      	ldr	r4, [r5, #0]
 80061b0:	0025      	movs	r5, r4
 80061b2:	2d00      	cmp	r5, #0
 80061b4:	d14a      	bne.n	800624c <_malloc_r+0xd4>
 80061b6:	6823      	ldr	r3, [r4, #0]
 80061b8:	0029      	movs	r1, r5
 80061ba:	18e3      	adds	r3, r4, r3
 80061bc:	0030      	movs	r0, r6
 80061be:	9301      	str	r3, [sp, #4]
 80061c0:	f000 f880 	bl	80062c4 <_sbrk_r>
 80061c4:	9b01      	ldr	r3, [sp, #4]
 80061c6:	4283      	cmp	r3, r0
 80061c8:	d143      	bne.n	8006252 <_malloc_r+0xda>
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	3703      	adds	r7, #3
 80061ce:	1aff      	subs	r7, r7, r3
 80061d0:	2303      	movs	r3, #3
 80061d2:	439f      	bics	r7, r3
 80061d4:	3708      	adds	r7, #8
 80061d6:	2f0c      	cmp	r7, #12
 80061d8:	d200      	bcs.n	80061dc <_malloc_r+0x64>
 80061da:	270c      	movs	r7, #12
 80061dc:	0039      	movs	r1, r7
 80061de:	0030      	movs	r0, r6
 80061e0:	f7ff ffa8 	bl	8006134 <sbrk_aligned>
 80061e4:	1c43      	adds	r3, r0, #1
 80061e6:	d034      	beq.n	8006252 <_malloc_r+0xda>
 80061e8:	6823      	ldr	r3, [r4, #0]
 80061ea:	19df      	adds	r7, r3, r7
 80061ec:	6027      	str	r7, [r4, #0]
 80061ee:	e013      	b.n	8006218 <_malloc_r+0xa0>
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	dacb      	bge.n	800618c <_malloc_r+0x14>
 80061f4:	230c      	movs	r3, #12
 80061f6:	2500      	movs	r5, #0
 80061f8:	6033      	str	r3, [r6, #0]
 80061fa:	0028      	movs	r0, r5
 80061fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80061fe:	6822      	ldr	r2, [r4, #0]
 8006200:	1bd1      	subs	r1, r2, r7
 8006202:	d420      	bmi.n	8006246 <_malloc_r+0xce>
 8006204:	290b      	cmp	r1, #11
 8006206:	d917      	bls.n	8006238 <_malloc_r+0xc0>
 8006208:	19e2      	adds	r2, r4, r7
 800620a:	6027      	str	r7, [r4, #0]
 800620c:	42a3      	cmp	r3, r4
 800620e:	d111      	bne.n	8006234 <_malloc_r+0xbc>
 8006210:	602a      	str	r2, [r5, #0]
 8006212:	6863      	ldr	r3, [r4, #4]
 8006214:	6011      	str	r1, [r2, #0]
 8006216:	6053      	str	r3, [r2, #4]
 8006218:	0030      	movs	r0, r6
 800621a:	0025      	movs	r5, r4
 800621c:	f000 f86c 	bl	80062f8 <__malloc_unlock>
 8006220:	2207      	movs	r2, #7
 8006222:	350b      	adds	r5, #11
 8006224:	1d23      	adds	r3, r4, #4
 8006226:	4395      	bics	r5, r2
 8006228:	1aea      	subs	r2, r5, r3
 800622a:	429d      	cmp	r5, r3
 800622c:	d0e5      	beq.n	80061fa <_malloc_r+0x82>
 800622e:	1b5b      	subs	r3, r3, r5
 8006230:	50a3      	str	r3, [r4, r2]
 8006232:	e7e2      	b.n	80061fa <_malloc_r+0x82>
 8006234:	605a      	str	r2, [r3, #4]
 8006236:	e7ec      	b.n	8006212 <_malloc_r+0x9a>
 8006238:	6862      	ldr	r2, [r4, #4]
 800623a:	42a3      	cmp	r3, r4
 800623c:	d101      	bne.n	8006242 <_malloc_r+0xca>
 800623e:	602a      	str	r2, [r5, #0]
 8006240:	e7ea      	b.n	8006218 <_malloc_r+0xa0>
 8006242:	605a      	str	r2, [r3, #4]
 8006244:	e7e8      	b.n	8006218 <_malloc_r+0xa0>
 8006246:	0023      	movs	r3, r4
 8006248:	6864      	ldr	r4, [r4, #4]
 800624a:	e7a7      	b.n	800619c <_malloc_r+0x24>
 800624c:	002c      	movs	r4, r5
 800624e:	686d      	ldr	r5, [r5, #4]
 8006250:	e7af      	b.n	80061b2 <_malloc_r+0x3a>
 8006252:	230c      	movs	r3, #12
 8006254:	0030      	movs	r0, r6
 8006256:	6033      	str	r3, [r6, #0]
 8006258:	f000 f84e 	bl	80062f8 <__malloc_unlock>
 800625c:	e7cd      	b.n	80061fa <_malloc_r+0x82>
 800625e:	46c0      	nop			; (mov r8, r8)
 8006260:	20000b70 	.word	0x20000b70

08006264 <_realloc_r>:
 8006264:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006266:	0007      	movs	r7, r0
 8006268:	000e      	movs	r6, r1
 800626a:	0014      	movs	r4, r2
 800626c:	2900      	cmp	r1, #0
 800626e:	d105      	bne.n	800627c <_realloc_r+0x18>
 8006270:	0011      	movs	r1, r2
 8006272:	f7ff ff81 	bl	8006178 <_malloc_r>
 8006276:	0005      	movs	r5, r0
 8006278:	0028      	movs	r0, r5
 800627a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800627c:	2a00      	cmp	r2, #0
 800627e:	d103      	bne.n	8006288 <_realloc_r+0x24>
 8006280:	f7ff ff0e 	bl	80060a0 <_free_r>
 8006284:	0025      	movs	r5, r4
 8006286:	e7f7      	b.n	8006278 <_realloc_r+0x14>
 8006288:	f000 f83e 	bl	8006308 <_malloc_usable_size_r>
 800628c:	9001      	str	r0, [sp, #4]
 800628e:	4284      	cmp	r4, r0
 8006290:	d803      	bhi.n	800629a <_realloc_r+0x36>
 8006292:	0035      	movs	r5, r6
 8006294:	0843      	lsrs	r3, r0, #1
 8006296:	42a3      	cmp	r3, r4
 8006298:	d3ee      	bcc.n	8006278 <_realloc_r+0x14>
 800629a:	0021      	movs	r1, r4
 800629c:	0038      	movs	r0, r7
 800629e:	f7ff ff6b 	bl	8006178 <_malloc_r>
 80062a2:	1e05      	subs	r5, r0, #0
 80062a4:	d0e8      	beq.n	8006278 <_realloc_r+0x14>
 80062a6:	9b01      	ldr	r3, [sp, #4]
 80062a8:	0022      	movs	r2, r4
 80062aa:	429c      	cmp	r4, r3
 80062ac:	d900      	bls.n	80062b0 <_realloc_r+0x4c>
 80062ae:	001a      	movs	r2, r3
 80062b0:	0031      	movs	r1, r6
 80062b2:	0028      	movs	r0, r5
 80062b4:	f7ff fbc0 	bl	8005a38 <memcpy>
 80062b8:	0031      	movs	r1, r6
 80062ba:	0038      	movs	r0, r7
 80062bc:	f7ff fef0 	bl	80060a0 <_free_r>
 80062c0:	e7da      	b.n	8006278 <_realloc_r+0x14>
	...

080062c4 <_sbrk_r>:
 80062c4:	2300      	movs	r3, #0
 80062c6:	b570      	push	{r4, r5, r6, lr}
 80062c8:	4d06      	ldr	r5, [pc, #24]	; (80062e4 <_sbrk_r+0x20>)
 80062ca:	0004      	movs	r4, r0
 80062cc:	0008      	movs	r0, r1
 80062ce:	602b      	str	r3, [r5, #0]
 80062d0:	f7fc fb20 	bl	8002914 <_sbrk>
 80062d4:	1c43      	adds	r3, r0, #1
 80062d6:	d103      	bne.n	80062e0 <_sbrk_r+0x1c>
 80062d8:	682b      	ldr	r3, [r5, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d000      	beq.n	80062e0 <_sbrk_r+0x1c>
 80062de:	6023      	str	r3, [r4, #0]
 80062e0:	bd70      	pop	{r4, r5, r6, pc}
 80062e2:	46c0      	nop			; (mov r8, r8)
 80062e4:	20000b78 	.word	0x20000b78

080062e8 <__malloc_lock>:
 80062e8:	b510      	push	{r4, lr}
 80062ea:	4802      	ldr	r0, [pc, #8]	; (80062f4 <__malloc_lock+0xc>)
 80062ec:	f000 f814 	bl	8006318 <__retarget_lock_acquire_recursive>
 80062f0:	bd10      	pop	{r4, pc}
 80062f2:	46c0      	nop			; (mov r8, r8)
 80062f4:	20000b7c 	.word	0x20000b7c

080062f8 <__malloc_unlock>:
 80062f8:	b510      	push	{r4, lr}
 80062fa:	4802      	ldr	r0, [pc, #8]	; (8006304 <__malloc_unlock+0xc>)
 80062fc:	f000 f80d 	bl	800631a <__retarget_lock_release_recursive>
 8006300:	bd10      	pop	{r4, pc}
 8006302:	46c0      	nop			; (mov r8, r8)
 8006304:	20000b7c 	.word	0x20000b7c

08006308 <_malloc_usable_size_r>:
 8006308:	1f0b      	subs	r3, r1, #4
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	1f18      	subs	r0, r3, #4
 800630e:	2b00      	cmp	r3, #0
 8006310:	da01      	bge.n	8006316 <_malloc_usable_size_r+0xe>
 8006312:	580b      	ldr	r3, [r1, r0]
 8006314:	18c0      	adds	r0, r0, r3
 8006316:	4770      	bx	lr

08006318 <__retarget_lock_acquire_recursive>:
 8006318:	4770      	bx	lr

0800631a <__retarget_lock_release_recursive>:
 800631a:	4770      	bx	lr

0800631c <_init>:
 800631c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800631e:	46c0      	nop			; (mov r8, r8)
 8006320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006322:	bc08      	pop	{r3}
 8006324:	469e      	mov	lr, r3
 8006326:	4770      	bx	lr

08006328 <_fini>:
 8006328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800632a:	46c0      	nop			; (mov r8, r8)
 800632c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800632e:	bc08      	pop	{r3}
 8006330:	469e      	mov	lr, r3
 8006332:	4770      	bx	lr
