
Lodestone-1 1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ca0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007bc  08005d5c  08005d5c  00015d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006518  08006518  00020550  2**0
                  CONTENTS
  4 .ARM          00000000  08006518  08006518  00020550  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006518  08006518  00020550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006518  08006518  00016518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800651c  0800651c  0001651c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000550  20000000  08006520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005fc  20000550  08006a70  00020550  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  20000b4c  08006a70  00020b4c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020550  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f5d1  00000000  00000000  00020578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000262a  00000000  00000000  0002fb49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  00032178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e28  00000000  00000000  00033100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000134e1  00000000  00000000  00033f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b98  00000000  00000000  00047409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007393a  00000000  00000000  00057fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  000cb8db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aa8  00000000  00000000  000cb924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000550 	.word	0x20000550
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005d44 	.word	0x08005d44

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000554 	.word	0x20000554
 8000100:	08005d44 	.word	0x08005d44

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <nextPage>:
////////////////////////////////////////////////////////////////////////////////////////////

struct uiPage * currentPage= &page1;
struct uiSubPage * currentSubPage = &calibTime;

void nextPage(){
 8000230:	b590      	push	{r4, r7, lr}
 8000232:	b083      	sub	sp, #12
 8000234:	af02      	add	r7, sp, #8
if(allowNextPage==1){
 8000236:	4bae      	ldr	r3, [pc, #696]	; (80004f0 <nextPage+0x2c0>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	2b01      	cmp	r3, #1
 800023c:	d000      	beq.n	8000240 <nextPage+0x10>
 800023e:	e153      	b.n	80004e8 <nextPage+0x2b8>
	ssd1306_FillRectangle(0, 0, 127, 63, 0x0);//wipeScreen();
 8000240:	2300      	movs	r3, #0
 8000242:	9300      	str	r3, [sp, #0]
 8000244:	233f      	movs	r3, #63	; 0x3f
 8000246:	227f      	movs	r2, #127	; 0x7f
 8000248:	2100      	movs	r1, #0
 800024a:	2000      	movs	r0, #0
 800024c:	f001 fe6a 	bl	8001f24 <ssd1306_FillRectangle>

	if (nextOrPrev==NEXT)
 8000250:	4ba8      	ldr	r3, [pc, #672]	; (80004f4 <nextPage+0x2c4>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	2b02      	cmp	r3, #2
 8000256:	d105      	bne.n	8000264 <nextPage+0x34>
		currentPage = currentPage->nextoPage;
 8000258:	4ba7      	ldr	r3, [pc, #668]	; (80004f8 <nextPage+0x2c8>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	689a      	ldr	r2, [r3, #8]
 800025e:	4ba6      	ldr	r3, [pc, #664]	; (80004f8 <nextPage+0x2c8>)
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	e011      	b.n	8000288 <nextPage+0x58>
	else if (nextOrPrev==PREV)
 8000264:	4ba3      	ldr	r3, [pc, #652]	; (80004f4 <nextPage+0x2c4>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	2b01      	cmp	r3, #1
 800026a:	d105      	bne.n	8000278 <nextPage+0x48>
		currentPage = currentPage->prevPage;
 800026c:	4ba2      	ldr	r3, [pc, #648]	; (80004f8 <nextPage+0x2c8>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	68da      	ldr	r2, [r3, #12]
 8000272:	4ba1      	ldr	r3, [pc, #644]	; (80004f8 <nextPage+0x2c8>)
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	e007      	b.n	8000288 <nextPage+0x58>
	else if (nextOrPrev==CURRENT){currentPage = currentPage;}
 8000278:	4b9e      	ldr	r3, [pc, #632]	; (80004f4 <nextPage+0x2c4>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d103      	bne.n	8000288 <nextPage+0x58>
 8000280:	4b9d      	ldr	r3, [pc, #628]	; (80004f8 <nextPage+0x2c8>)
 8000282:	681a      	ldr	r2, [r3, #0]
 8000284:	4b9c      	ldr	r3, [pc, #624]	; (80004f8 <nextPage+0x2c8>)
 8000286:	601a      	str	r2, [r3, #0]

	currentSubPage->selected=0;
 8000288:	4b9c      	ldr	r3, [pc, #624]	; (80004fc <nextPage+0x2cc>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2200      	movs	r2, #0
 800028e:	605a      	str	r2, [r3, #4]

	ssd1306_SetCursor(1*symbolHorizontalShift, 1+0*symbolVerticalShift);		//Paste name of page
 8000290:	4b9b      	ldr	r3, [pc, #620]	; (8000500 <nextPage+0x2d0>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	b2db      	uxtb	r3, r3
 8000296:	2101      	movs	r1, #1
 8000298:	0018      	movs	r0, r3
 800029a:	f001 fd4f 	bl	8001d3c <ssd1306_SetCursor>
	ssd1306_WriteString(currentPage->nameOfPage, Font_6x8, White);
 800029e:	4b96      	ldr	r3, [pc, #600]	; (80004f8 <nextPage+0x2c8>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	3310      	adds	r3, #16
 80002a4:	0018      	movs	r0, r3
 80002a6:	4a97      	ldr	r2, [pc, #604]	; (8000504 <nextPage+0x2d4>)
 80002a8:	2301      	movs	r3, #1
 80002aa:	6811      	ldr	r1, [r2, #0]
 80002ac:	6852      	ldr	r2, [r2, #4]
 80002ae:	f001 fd1b 	bl	8001ce8 <ssd1306_WriteString>

	if(currentSubPage->selected==0)
 80002b2:	4b92      	ldr	r3, [pc, #584]	; (80004fc <nextPage+0x2cc>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	685b      	ldr	r3, [r3, #4]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d000      	beq.n	80002be <nextPage+0x8e>
 80002bc:	e112      	b.n	80004e4 <nextPage+0x2b4>
			//(	currentPage->numberOfPage!=2)&&(	currentPage->buttonMenu[currentPage->currentButton].selected!=1)
			{	//IF THIS IS NOT A SUBPAGE
		//////////////////////////////////////	BUTTONS ///////////////////////////////////////////////

		ssd1306_SetCursor(1*symbolHorizontalShift, 2+2*symbolVerticalShift);		//Place corresponding buttons
 80002be:	4b90      	ldr	r3, [pc, #576]	; (8000500 <nextPage+0x2d0>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	4b90      	ldr	r3, [pc, #576]	; (8000508 <nextPage+0x2d8>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	3301      	adds	r3, #1
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	18db      	adds	r3, r3, r3
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	0019      	movs	r1, r3
 80002d2:	0010      	movs	r0, r2
 80002d4:	f001 fd32 	bl	8001d3c <ssd1306_SetCursor>
		ssd1306_WriteString(currentPage->buttonMenu[0].title, Font_6x8, White);		//1.
 80002d8:	4b87      	ldr	r3, [pc, #540]	; (80004f8 <nextPage+0x2c8>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	3340      	adds	r3, #64	; 0x40
 80002de:	0018      	movs	r0, r3
 80002e0:	4a88      	ldr	r2, [pc, #544]	; (8000504 <nextPage+0x2d4>)
 80002e2:	2301      	movs	r3, #1
 80002e4:	6811      	ldr	r1, [r2, #0]
 80002e6:	6852      	ldr	r2, [r2, #4]
 80002e8:	f001 fcfe 	bl	8001ce8 <ssd1306_WriteString>
		if ((currentPage->buttonMenu[0].buttonType==SETORRESET)&&(currentPage->buttonMenu[0].state == STATE_SET)){				//IF SET - MARK AS SET
 80002ec:	4b82      	ldr	r3, [pc, #520]	; (80004f8 <nextPage+0x2c8>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d121      	bne.n	800033a <nextPage+0x10a>
 80002f6:	4b80      	ldr	r3, [pc, #512]	; (80004f8 <nextPage+0x2c8>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d11c      	bne.n	800033a <nextPage+0x10a>
			ssd1306_FillRectangle(	currentPage->cursorAxis[0][0]+115,
 8000300:	4b7d      	ldr	r3, [pc, #500]	; (80004f8 <nextPage+0x2c8>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000306:	b2db      	uxtb	r3, r3
 8000308:	3373      	adds	r3, #115	; 0x73
 800030a:	b2d8      	uxtb	r0, r3
									currentPage->cursorAxis[0][1]+2,
 800030c:	4b7a      	ldr	r3, [pc, #488]	; (80004f8 <nextPage+0x2c8>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			ssd1306_FillRectangle(	currentPage->cursorAxis[0][0]+115,
 8000312:	b2db      	uxtb	r3, r3
 8000314:	3302      	adds	r3, #2
 8000316:	b2d9      	uxtb	r1, r3
									currentPage->cursorAxis[0][0]+117,
 8000318:	4b77      	ldr	r3, [pc, #476]	; (80004f8 <nextPage+0x2c8>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			ssd1306_FillRectangle(	currentPage->cursorAxis[0][0]+115,
 800031e:	b2db      	uxtb	r3, r3
 8000320:	3375      	adds	r3, #117	; 0x75
 8000322:	b2da      	uxtb	r2, r3
									currentPage->cursorAxis[0][1]+4,
 8000324:	4b74      	ldr	r3, [pc, #464]	; (80004f8 <nextPage+0x2c8>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			ssd1306_FillRectangle(	currentPage->cursorAxis[0][0]+115,
 800032a:	b2db      	uxtb	r3, r3
 800032c:	3304      	adds	r3, #4
 800032e:	b2db      	uxtb	r3, r3
 8000330:	2401      	movs	r4, #1
 8000332:	9400      	str	r4, [sp, #0]
 8000334:	f001 fdf6 	bl	8001f24 <ssd1306_FillRectangle>
 8000338:	e01b      	b.n	8000372 <nextPage+0x142>
									0x01);}
		else {
			ssd1306_FillRectangle(	currentPage->cursorAxis[0][0]+115,				//IF RESET - MARK AS RESET
 800033a:	4b6f      	ldr	r3, [pc, #444]	; (80004f8 <nextPage+0x2c8>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000340:	b2db      	uxtb	r3, r3
 8000342:	3373      	adds	r3, #115	; 0x73
 8000344:	b2d8      	uxtb	r0, r3
									currentPage->cursorAxis[0][1]+2,
 8000346:	4b6c      	ldr	r3, [pc, #432]	; (80004f8 <nextPage+0x2c8>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			ssd1306_FillRectangle(	currentPage->cursorAxis[0][0]+115,				//IF RESET - MARK AS RESET
 800034c:	b2db      	uxtb	r3, r3
 800034e:	3302      	adds	r3, #2
 8000350:	b2d9      	uxtb	r1, r3
									currentPage->cursorAxis[0][0]+117,
 8000352:	4b69      	ldr	r3, [pc, #420]	; (80004f8 <nextPage+0x2c8>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			ssd1306_FillRectangle(	currentPage->cursorAxis[0][0]+115,				//IF RESET - MARK AS RESET
 8000358:	b2db      	uxtb	r3, r3
 800035a:	3375      	adds	r3, #117	; 0x75
 800035c:	b2da      	uxtb	r2, r3
									currentPage->cursorAxis[0][1]+4,
 800035e:	4b66      	ldr	r3, [pc, #408]	; (80004f8 <nextPage+0x2c8>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			ssd1306_FillRectangle(	currentPage->cursorAxis[0][0]+115,				//IF RESET - MARK AS RESET
 8000364:	b2db      	uxtb	r3, r3
 8000366:	3304      	adds	r3, #4
 8000368:	b2db      	uxtb	r3, r3
 800036a:	2400      	movs	r4, #0
 800036c:	9400      	str	r4, [sp, #0]
 800036e:	f001 fdd9 	bl	8001f24 <ssd1306_FillRectangle>
									0x00);}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////

		ssd1306_SetCursor(1*symbolHorizontalShift, 3+3*symbolVerticalShift);		//2.
 8000372:	4b63      	ldr	r3, [pc, #396]	; (8000500 <nextPage+0x2d0>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	b2da      	uxtb	r2, r3
 8000378:	4b63      	ldr	r3, [pc, #396]	; (8000508 <nextPage+0x2d8>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	3301      	adds	r3, #1
 800037e:	b2db      	uxtb	r3, r3
 8000380:	1c19      	adds	r1, r3, #0
 8000382:	1c0b      	adds	r3, r1, #0
 8000384:	18db      	adds	r3, r3, r3
 8000386:	185b      	adds	r3, r3, r1
 8000388:	b2db      	uxtb	r3, r3
 800038a:	0019      	movs	r1, r3
 800038c:	0010      	movs	r0, r2
 800038e:	f001 fcd5 	bl	8001d3c <ssd1306_SetCursor>
		ssd1306_WriteString(currentPage->buttonMenu[1].title, Font_6x8, White);
 8000392:	4b59      	ldr	r3, [pc, #356]	; (80004f8 <nextPage+0x2c8>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	3378      	adds	r3, #120	; 0x78
 8000398:	0018      	movs	r0, r3
 800039a:	4a5a      	ldr	r2, [pc, #360]	; (8000504 <nextPage+0x2d4>)
 800039c:	2301      	movs	r3, #1
 800039e:	6811      	ldr	r1, [r2, #0]
 80003a0:	6852      	ldr	r2, [r2, #4]
 80003a2:	f001 fca1 	bl	8001ce8 <ssd1306_WriteString>
		if ((currentPage->buttonMenu[0].buttonType==SETORRESET)&&(currentPage->buttonMenu[1].state == STATE_SET)){				//IF SET - MARK AS SET
 80003a6:	4b54      	ldr	r3, [pc, #336]	; (80004f8 <nextPage+0x2c8>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d122      	bne.n	80003f6 <nextPage+0x1c6>
 80003b0:	4b51      	ldr	r3, [pc, #324]	; (80004f8 <nextPage+0x2c8>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	229c      	movs	r2, #156	; 0x9c
 80003b6:	589b      	ldr	r3, [r3, r2]
 80003b8:	2b01      	cmp	r3, #1
 80003ba:	d11c      	bne.n	80003f6 <nextPage+0x1c6>
			ssd1306_FillRectangle(	currentPage->cursorAxis[1][0]+115,
 80003bc:	4b4e      	ldr	r3, [pc, #312]	; (80004f8 <nextPage+0x2c8>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	3373      	adds	r3, #115	; 0x73
 80003c6:	b2d8      	uxtb	r0, r3
									currentPage->cursorAxis[1][1]+2,
 80003c8:	4b4b      	ldr	r3, [pc, #300]	; (80004f8 <nextPage+0x2c8>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
			ssd1306_FillRectangle(	currentPage->cursorAxis[1][0]+115,
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	3302      	adds	r3, #2
 80003d2:	b2d9      	uxtb	r1, r3
									currentPage->cursorAxis[1][0]+117,
 80003d4:	4b48      	ldr	r3, [pc, #288]	; (80004f8 <nextPage+0x2c8>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			ssd1306_FillRectangle(	currentPage->cursorAxis[1][0]+115,
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	3375      	adds	r3, #117	; 0x75
 80003de:	b2da      	uxtb	r2, r3
									currentPage->cursorAxis[1][1]+4,
 80003e0:	4b45      	ldr	r3, [pc, #276]	; (80004f8 <nextPage+0x2c8>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
			ssd1306_FillRectangle(	currentPage->cursorAxis[1][0]+115,
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	3304      	adds	r3, #4
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	2401      	movs	r4, #1
 80003ee:	9400      	str	r4, [sp, #0]
 80003f0:	f001 fd98 	bl	8001f24 <ssd1306_FillRectangle>
 80003f4:	e01b      	b.n	800042e <nextPage+0x1fe>
									0x01);}
		else {
			ssd1306_FillRectangle(	currentPage->cursorAxis[1][0]+115,				//IF RESET - MARK AS RESET
 80003f6:	4b40      	ldr	r3, [pc, #256]	; (80004f8 <nextPage+0x2c8>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	3373      	adds	r3, #115	; 0x73
 8000400:	b2d8      	uxtb	r0, r3
									currentPage->cursorAxis[1][1]+2,
 8000402:	4b3d      	ldr	r3, [pc, #244]	; (80004f8 <nextPage+0x2c8>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
			ssd1306_FillRectangle(	currentPage->cursorAxis[1][0]+115,				//IF RESET - MARK AS RESET
 8000408:	b2db      	uxtb	r3, r3
 800040a:	3302      	adds	r3, #2
 800040c:	b2d9      	uxtb	r1, r3
									currentPage->cursorAxis[1][0]+117,
 800040e:	4b3a      	ldr	r3, [pc, #232]	; (80004f8 <nextPage+0x2c8>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			ssd1306_FillRectangle(	currentPage->cursorAxis[1][0]+115,				//IF RESET - MARK AS RESET
 8000414:	b2db      	uxtb	r3, r3
 8000416:	3375      	adds	r3, #117	; 0x75
 8000418:	b2da      	uxtb	r2, r3
									currentPage->cursorAxis[1][1]+4,
 800041a:	4b37      	ldr	r3, [pc, #220]	; (80004f8 <nextPage+0x2c8>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
			ssd1306_FillRectangle(	currentPage->cursorAxis[1][0]+115,				//IF RESET - MARK AS RESET
 8000420:	b2db      	uxtb	r3, r3
 8000422:	3304      	adds	r3, #4
 8000424:	b2db      	uxtb	r3, r3
 8000426:	2400      	movs	r4, #0
 8000428:	9400      	str	r4, [sp, #0]
 800042a:	f001 fd7b 	bl	8001f24 <ssd1306_FillRectangle>
									0x00);}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////

		ssd1306_SetCursor(1*symbolHorizontalShift, 4+4*symbolVerticalShift);		//3.
 800042e:	4b34      	ldr	r3, [pc, #208]	; (8000500 <nextPage+0x2d0>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	b2da      	uxtb	r2, r3
 8000434:	4b34      	ldr	r3, [pc, #208]	; (8000508 <nextPage+0x2d8>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	3301      	adds	r3, #1
 800043a:	b2db      	uxtb	r3, r3
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	b2db      	uxtb	r3, r3
 8000440:	0019      	movs	r1, r3
 8000442:	0010      	movs	r0, r2
 8000444:	f001 fc7a 	bl	8001d3c <ssd1306_SetCursor>
		ssd1306_WriteString(currentPage->buttonMenu[2].title, Font_6x8, White);
 8000448:	4b2b      	ldr	r3, [pc, #172]	; (80004f8 <nextPage+0x2c8>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	33b0      	adds	r3, #176	; 0xb0
 800044e:	0018      	movs	r0, r3
 8000450:	4a2c      	ldr	r2, [pc, #176]	; (8000504 <nextPage+0x2d4>)
 8000452:	2301      	movs	r3, #1
 8000454:	6811      	ldr	r1, [r2, #0]
 8000456:	6852      	ldr	r2, [r2, #4]
 8000458:	f001 fc46 	bl	8001ce8 <ssd1306_WriteString>
		if ((currentPage->buttonMenu[0].buttonType==SETORRESET)&&(currentPage->buttonMenu[2].state == STATE_SET)){				//IF SET - MARK AS SET
 800045c:	4b26      	ldr	r3, [pc, #152]	; (80004f8 <nextPage+0x2c8>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000462:	2b00      	cmp	r3, #0
 8000464:	d122      	bne.n	80004ac <nextPage+0x27c>
 8000466:	4b24      	ldr	r3, [pc, #144]	; (80004f8 <nextPage+0x2c8>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	22d4      	movs	r2, #212	; 0xd4
 800046c:	589b      	ldr	r3, [r3, r2]
 800046e:	2b01      	cmp	r3, #1
 8000470:	d11c      	bne.n	80004ac <nextPage+0x27c>
			ssd1306_FillRectangle(	currentPage->cursorAxis[2][0]+115,
 8000472:	4b21      	ldr	r3, [pc, #132]	; (80004f8 <nextPage+0x2c8>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000478:	b2db      	uxtb	r3, r3
 800047a:	3373      	adds	r3, #115	; 0x73
 800047c:	b2d8      	uxtb	r0, r3
									currentPage->cursorAxis[2][1]+2,
 800047e:	4b1e      	ldr	r3, [pc, #120]	; (80004f8 <nextPage+0x2c8>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
			ssd1306_FillRectangle(	currentPage->cursorAxis[2][0]+115,
 8000484:	b2db      	uxtb	r3, r3
 8000486:	3302      	adds	r3, #2
 8000488:	b2d9      	uxtb	r1, r3
									currentPage->cursorAxis[2][0]+117,
 800048a:	4b1b      	ldr	r3, [pc, #108]	; (80004f8 <nextPage+0x2c8>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ssd1306_FillRectangle(	currentPage->cursorAxis[2][0]+115,
 8000490:	b2db      	uxtb	r3, r3
 8000492:	3375      	adds	r3, #117	; 0x75
 8000494:	b2da      	uxtb	r2, r3
									currentPage->cursorAxis[2][1]+4,
 8000496:	4b18      	ldr	r3, [pc, #96]	; (80004f8 <nextPage+0x2c8>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
			ssd1306_FillRectangle(	currentPage->cursorAxis[2][0]+115,
 800049c:	b2db      	uxtb	r3, r3
 800049e:	3304      	adds	r3, #4
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	2401      	movs	r4, #1
 80004a4:	9400      	str	r4, [sp, #0]
 80004a6:	f001 fd3d 	bl	8001f24 <ssd1306_FillRectangle>
 80004aa:	e01b      	b.n	80004e4 <nextPage+0x2b4>
									0x01);}
		else {
			ssd1306_FillRectangle(	currentPage->cursorAxis[2][0]+115,				//IF RESET - MARK AS RESET
 80004ac:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <nextPage+0x2c8>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	3373      	adds	r3, #115	; 0x73
 80004b6:	b2d8      	uxtb	r0, r3
									currentPage->cursorAxis[2][1]+2,
 80004b8:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <nextPage+0x2c8>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
			ssd1306_FillRectangle(	currentPage->cursorAxis[2][0]+115,				//IF RESET - MARK AS RESET
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	3302      	adds	r3, #2
 80004c2:	b2d9      	uxtb	r1, r3
									currentPage->cursorAxis[2][0]+117,
 80004c4:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <nextPage+0x2c8>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ssd1306_FillRectangle(	currentPage->cursorAxis[2][0]+115,				//IF RESET - MARK AS RESET
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	3375      	adds	r3, #117	; 0x75
 80004ce:	b2da      	uxtb	r2, r3
									currentPage->cursorAxis[2][1]+4,
 80004d0:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <nextPage+0x2c8>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
			ssd1306_FillRectangle(	currentPage->cursorAxis[2][0]+115,				//IF RESET - MARK AS RESET
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	3304      	adds	r3, #4
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	2400      	movs	r4, #0
 80004de:	9400      	str	r4, [sp, #0]
 80004e0:	f001 fd20 	bl	8001f24 <ssd1306_FillRectangle>
		//////////////////////////////////////////////////////////////////////////////////////////////////////////
}
	else {											//THE PAGE IS A SUBPAGE ADJ TIME

	}
	ssd1306_UpdateScreen();}
 80004e4:	f001 fad6 	bl	8001a94 <ssd1306_UpdateScreen>
else {}
}
 80004e8:	46c0      	nop			; (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b001      	add	sp, #4
 80004ee:	bd90      	pop	{r4, r7, pc}
 80004f0:	20000000 	.word	0x20000000
 80004f4:	20000004 	.word	0x20000004
 80004f8:	200004b8 	.word	0x200004b8
 80004fc:	200004bc 	.word	0x200004bc
 8000500:	200004c0 	.word	0x200004c0
 8000504:	200004d4 	.word	0x200004d4
 8000508:	200004c4 	.word	0x200004c4

0800050c <nextSubPage>:

void nextSubPage(){
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af02      	add	r7, sp, #8
	if(allowNextSubPage==1){
 8000512:	4b28      	ldr	r3, [pc, #160]	; (80005b4 <nextSubPage+0xa8>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2b01      	cmp	r3, #1
 8000518:	d148      	bne.n	80005ac <nextSubPage+0xa0>
		ssd1306_FillRectangle(0, 0, 127, 63, 0x0);//wipeScreen();
 800051a:	2300      	movs	r3, #0
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	233f      	movs	r3, #63	; 0x3f
 8000520:	227f      	movs	r2, #127	; 0x7f
 8000522:	2100      	movs	r1, #0
 8000524:	2000      	movs	r0, #0
 8000526:	f001 fcfd 	bl	8001f24 <ssd1306_FillRectangle>

			checkTime();
 800052a:	f000 fd19 	bl	8000f60 <checkTime>
			if (nextOrPrev==NEXT)
 800052e:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <nextSubPage+0xac>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	2b02      	cmp	r3, #2
 8000534:	d105      	bne.n	8000542 <nextSubPage+0x36>
				currentSubPage = currentSubPage->nextoPage;
 8000536:	4b21      	ldr	r3, [pc, #132]	; (80005bc <nextSubPage+0xb0>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	689a      	ldr	r2, [r3, #8]
 800053c:	4b1f      	ldr	r3, [pc, #124]	; (80005bc <nextSubPage+0xb0>)
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	e011      	b.n	8000566 <nextSubPage+0x5a>
			else if (nextOrPrev==PREV)
 8000542:	4b1d      	ldr	r3, [pc, #116]	; (80005b8 <nextSubPage+0xac>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d105      	bne.n	8000556 <nextSubPage+0x4a>
				currentSubPage = currentSubPage->prevPage;
 800054a:	4b1c      	ldr	r3, [pc, #112]	; (80005bc <nextSubPage+0xb0>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	68da      	ldr	r2, [r3, #12]
 8000550:	4b1a      	ldr	r3, [pc, #104]	; (80005bc <nextSubPage+0xb0>)
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	e007      	b.n	8000566 <nextSubPage+0x5a>
			else if (nextOrPrev==CURRENT){currentSubPage = currentSubPage;}
 8000556:	4b18      	ldr	r3, [pc, #96]	; (80005b8 <nextSubPage+0xac>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d103      	bne.n	8000566 <nextSubPage+0x5a>
 800055e:	4b17      	ldr	r3, [pc, #92]	; (80005bc <nextSubPage+0xb0>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	4b16      	ldr	r3, [pc, #88]	; (80005bc <nextSubPage+0xb0>)
 8000564:	601a      	str	r2, [r3, #0]

			ssd1306_SetCursor(1*symbolHorizontalShift, 1+0*symbolVerticalShift);
 8000566:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <nextSubPage+0xb4>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	b2db      	uxtb	r3, r3
 800056c:	2101      	movs	r1, #1
 800056e:	0018      	movs	r0, r3
 8000570:	f001 fbe4 	bl	8001d3c <ssd1306_SetCursor>

			ssd1306_WriteString(currentSubPage->nameOfPage, Font_6x8, White);		//Paste name of page
 8000574:	4b11      	ldr	r3, [pc, #68]	; (80005bc <nextSubPage+0xb0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	3310      	adds	r3, #16
 800057a:	0018      	movs	r0, r3
 800057c:	4a11      	ldr	r2, [pc, #68]	; (80005c4 <nextSubPage+0xb8>)
 800057e:	2301      	movs	r3, #1
 8000580:	6811      	ldr	r1, [r2, #0]
 8000582:	6852      	ldr	r2, [r2, #4]
 8000584:	f001 fbb0 	bl	8001ce8 <ssd1306_WriteString>

			ssd1306_SetCursor(1*symbolHorizontalShift, 1+2*symbolVerticalShift);
 8000588:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <nextSubPage+0xb4>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	b2da      	uxtb	r2, r3
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <nextSubPage+0xbc>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	b2db      	uxtb	r3, r3
 8000594:	18db      	adds	r3, r3, r3
 8000596:	b2db      	uxtb	r3, r3
 8000598:	3301      	adds	r3, #1
 800059a:	b2db      	uxtb	r3, r3
 800059c:	0019      	movs	r1, r3
 800059e:	0010      	movs	r0, r2
 80005a0:	f001 fbcc 	bl	8001d3c <ssd1306_SetCursor>
			displayTime();
 80005a4:	f000 fd1c 	bl	8000fe0 <displayTime>

			ssd1306_UpdateScreen();
 80005a8:	f001 fa74 	bl	8001a94 <ssd1306_UpdateScreen>
	}
}
 80005ac:	46c0      	nop			; (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	2000056c 	.word	0x2000056c
 80005b8:	20000004 	.word	0x20000004
 80005bc:	200004bc 	.word	0x200004bc
 80005c0:	200004c0 	.word	0x200004c0
 80005c4:	200004d4 	.word	0x200004d4
 80005c8:	200004c4 	.word	0x200004c4

080005cc <moveCursor>:

void moveCursor(){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af02      	add	r7, sp, #8
if (currentPage->selected==1&&currentSubPage->selected==0){
 80005d2:	4b38      	ldr	r3, [pc, #224]	; (80006b4 <moveCursor+0xe8>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d167      	bne.n	80006ac <moveCursor+0xe0>
 80005dc:	4b36      	ldr	r3, [pc, #216]	; (80006b8 <moveCursor+0xec>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d162      	bne.n	80006ac <moveCursor+0xe0>
		ssd1306_FillRectangle(0, 10, 5, 54, 0x00);				//CLEAR BUTTON MARKERS
 80005e6:	2300      	movs	r3, #0
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2336      	movs	r3, #54	; 0x36
 80005ec:	2205      	movs	r2, #5
 80005ee:	210a      	movs	r1, #10
 80005f0:	2000      	movs	r0, #0
 80005f2:	f001 fc97 	bl	8001f24 <ssd1306_FillRectangle>

		currentPage->buttonMenu[0].selected=0;
 80005f6:	4b2f      	ldr	r3, [pc, #188]	; (80006b4 <moveCursor+0xe8>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2200      	movs	r2, #0
 80005fc:	669a      	str	r2, [r3, #104]	; 0x68
		currentPage->buttonMenu[1].selected=0;
 80005fe:	4b2d      	ldr	r3, [pc, #180]	; (80006b4 <moveCursor+0xe8>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	22a0      	movs	r2, #160	; 0xa0
 8000604:	2100      	movs	r1, #0
 8000606:	5099      	str	r1, [r3, r2]
		currentPage->buttonMenu[2].selected=0;
 8000608:	4b2a      	ldr	r3, [pc, #168]	; (80006b4 <moveCursor+0xe8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	22d8      	movs	r2, #216	; 0xd8
 800060e:	2100      	movs	r1, #0
 8000610:	5099      	str	r1, [r3, r2]


		if 			(nextOrPrev==PREV)
 8000612:	4b2a      	ldr	r3, [pc, #168]	; (80006bc <moveCursor+0xf0>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d120      	bne.n	800065c <moveCursor+0x90>
		{currentPage->currentButton = currentPage->buttonMenu[currentPage->currentButton].prevObject;
 800061a:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <moveCursor+0xe8>)
 800061c:	6819      	ldr	r1, [r3, #0]
 800061e:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <moveCursor+0xe8>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	22e8      	movs	r2, #232	; 0xe8
 8000624:	589a      	ldr	r2, [r3, r2]
 8000626:	0013      	movs	r3, r2
 8000628:	00db      	lsls	r3, r3, #3
 800062a:	1a9b      	subs	r3, r3, r2
 800062c:	00db      	lsls	r3, r3, #3
 800062e:	18cb      	adds	r3, r1, r3
 8000630:	3360      	adds	r3, #96	; 0x60
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <moveCursor+0xe8>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	0011      	movs	r1, r2
 800063a:	22e8      	movs	r2, #232	; 0xe8
 800063c:	5099      	str	r1, [r3, r2]
		currentPage->buttonMenu[currentPage->currentButton].selected=1;}
 800063e:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <moveCursor+0xe8>)
 8000640:	6819      	ldr	r1, [r3, #0]
 8000642:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <moveCursor+0xe8>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	22e8      	movs	r2, #232	; 0xe8
 8000648:	589a      	ldr	r2, [r3, r2]
 800064a:	0013      	movs	r3, r2
 800064c:	00db      	lsls	r3, r3, #3
 800064e:	1a9b      	subs	r3, r3, r2
 8000650:	00db      	lsls	r3, r3, #3
 8000652:	18cb      	adds	r3, r1, r3
 8000654:	3368      	adds	r3, #104	; 0x68
 8000656:	2201      	movs	r2, #1
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	e023      	b.n	80006a4 <moveCursor+0xd8>

		else if 	(nextOrPrev==NEXT)
 800065c:	4b17      	ldr	r3, [pc, #92]	; (80006bc <moveCursor+0xf0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b02      	cmp	r3, #2
 8000662:	d11f      	bne.n	80006a4 <moveCursor+0xd8>
		{currentPage->currentButton = currentPage->buttonMenu[currentPage->currentButton].nextObject;
 8000664:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <moveCursor+0xe8>)
 8000666:	6819      	ldr	r1, [r3, #0]
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <moveCursor+0xe8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	22e8      	movs	r2, #232	; 0xe8
 800066e:	589a      	ldr	r2, [r3, r2]
 8000670:	0013      	movs	r3, r2
 8000672:	00db      	lsls	r3, r3, #3
 8000674:	1a9b      	subs	r3, r3, r2
 8000676:	00db      	lsls	r3, r3, #3
 8000678:	18cb      	adds	r3, r1, r3
 800067a:	335c      	adds	r3, #92	; 0x5c
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <moveCursor+0xe8>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	0011      	movs	r1, r2
 8000684:	22e8      	movs	r2, #232	; 0xe8
 8000686:	5099      	str	r1, [r3, r2]
		currentPage->buttonMenu[currentPage->currentButton].selected=1;}
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <moveCursor+0xe8>)
 800068a:	6819      	ldr	r1, [r3, #0]
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <moveCursor+0xe8>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	22e8      	movs	r2, #232	; 0xe8
 8000692:	589a      	ldr	r2, [r3, r2]
 8000694:	0013      	movs	r3, r2
 8000696:	00db      	lsls	r3, r3, #3
 8000698:	1a9b      	subs	r3, r3, r2
 800069a:	00db      	lsls	r3, r3, #3
 800069c:	18cb      	adds	r3, r1, r3
 800069e:	3368      	adds	r3, #104	; 0x68
 80006a0:	2201      	movs	r2, #1
 80006a2:	601a      	str	r2, [r3, #0]

		markButton();					//MARK THE BUTTON
 80006a4:	f000 fa5a 	bl	8000b5c <markButton>

		ssd1306_UpdateScreen();
 80006a8:	f001 f9f4 	bl	8001a94 <ssd1306_UpdateScreen>
	}
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	200004b8 	.word	0x200004b8
 80006b8:	200004bc 	.word	0x200004bc
 80006bc:	20000004 	.word	0x20000004

080006c0 <moveSPCursor>:

void moveSPCursor(){
 80006c0:	b5b0      	push	{r4, r5, r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af02      	add	r7, sp, #8
if ((currentSubPage->selected==1)&&(allowNextSubPage==0)){
 80006c6:	4b5e      	ldr	r3, [pc, #376]	; (8000840 <moveSPCursor+0x180>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d000      	beq.n	80006d2 <moveSPCursor+0x12>
 80006d0:	e0b2      	b.n	8000838 <moveSPCursor+0x178>
 80006d2:	4b5c      	ldr	r3, [pc, #368]	; (8000844 <moveSPCursor+0x184>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d000      	beq.n	80006dc <moveSPCursor+0x1c>
 80006da:	e0ad      	b.n	8000838 <moveSPCursor+0x178>
		ssd1306_Line(			currentSubPage->cursorAxis[currentPage->currentButton][0]-1, //CLEAR ALL SubPage CURSORS
 80006dc:	4b58      	ldr	r3, [pc, #352]	; (8000840 <moveSPCursor+0x180>)
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	4b59      	ldr	r3, [pc, #356]	; (8000848 <moveSPCursor+0x188>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	21e8      	movs	r1, #232	; 0xe8
 80006e6:	585b      	ldr	r3, [r3, r1]
 80006e8:	3305      	adds	r3, #5
 80006ea:	00db      	lsls	r3, r3, #3
 80006ec:	589b      	ldr	r3, [r3, r2]
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	3b01      	subs	r3, #1
 80006f2:	b2d8      	uxtb	r0, r3
								currentSubPage->cursorAxis[currentSubPage->currentButton][1]+9,
 80006f4:	4b52      	ldr	r3, [pc, #328]	; (8000840 <moveSPCursor+0x180>)
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b51      	ldr	r3, [pc, #324]	; (8000840 <moveSPCursor+0x180>)
 80006fa:	6819      	ldr	r1, [r3, #0]
 80006fc:	23f4      	movs	r3, #244	; 0xf4
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	58cb      	ldr	r3, [r1, r3]
 8000702:	00db      	lsls	r3, r3, #3
 8000704:	18d3      	adds	r3, r2, r3
 8000706:	332c      	adds	r3, #44	; 0x2c
 8000708:	681b      	ldr	r3, [r3, #0]
		ssd1306_Line(			currentSubPage->cursorAxis[currentPage->currentButton][0]-1, //CLEAR ALL SubPage CURSORS
 800070a:	b2db      	uxtb	r3, r3
 800070c:	3309      	adds	r3, #9
 800070e:	b2dc      	uxtb	r4, r3
								currentSubPage->cursorAxis[currentSubPage->currentButton][0]+127,
 8000710:	4b4b      	ldr	r3, [pc, #300]	; (8000840 <moveSPCursor+0x180>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	4b4a      	ldr	r3, [pc, #296]	; (8000840 <moveSPCursor+0x180>)
 8000716:	6819      	ldr	r1, [r3, #0]
 8000718:	23f4      	movs	r3, #244	; 0xf4
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	58cb      	ldr	r3, [r1, r3]
 800071e:	3305      	adds	r3, #5
 8000720:	00db      	lsls	r3, r3, #3
 8000722:	589b      	ldr	r3, [r3, r2]
		ssd1306_Line(			currentSubPage->cursorAxis[currentPage->currentButton][0]-1, //CLEAR ALL SubPage CURSORS
 8000724:	b2db      	uxtb	r3, r3
 8000726:	337f      	adds	r3, #127	; 0x7f
 8000728:	b2dd      	uxtb	r5, r3
								currentSubPage->cursorAxis[currentSubPage->currentButton][1]+9,
 800072a:	4b45      	ldr	r3, [pc, #276]	; (8000840 <moveSPCursor+0x180>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	4b44      	ldr	r3, [pc, #272]	; (8000840 <moveSPCursor+0x180>)
 8000730:	6819      	ldr	r1, [r3, #0]
 8000732:	23f4      	movs	r3, #244	; 0xf4
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	58cb      	ldr	r3, [r1, r3]
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	18d3      	adds	r3, r2, r3
 800073c:	332c      	adds	r3, #44	; 0x2c
 800073e:	681b      	ldr	r3, [r3, #0]
		ssd1306_Line(			currentSubPage->cursorAxis[currentPage->currentButton][0]-1, //CLEAR ALL SubPage CURSORS
 8000740:	b2db      	uxtb	r3, r3
 8000742:	3309      	adds	r3, #9
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2200      	movs	r2, #0
 8000748:	9200      	str	r2, [sp, #0]
 800074a:	002a      	movs	r2, r5
 800074c:	0021      	movs	r1, r4
 800074e:	f001 fb0f 	bl	8001d70 <ssd1306_Line>
								0x00);

		if 	(nextOrPrev==PREV)
 8000752:	4b3e      	ldr	r3, [pc, #248]	; (800084c <moveSPCursor+0x18c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d133      	bne.n	80007c2 <moveSPCursor+0x102>
		{
			currentSubPage->buttonMenu[currentSubPage->currentButton].selected=0;
 800075a:	4b39      	ldr	r3, [pc, #228]	; (8000840 <moveSPCursor+0x180>)
 800075c:	6819      	ldr	r1, [r3, #0]
 800075e:	4b38      	ldr	r3, [pc, #224]	; (8000840 <moveSPCursor+0x180>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	23f4      	movs	r3, #244	; 0xf4
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	58d2      	ldr	r2, [r2, r3]
 8000768:	2088      	movs	r0, #136	; 0x88
 800076a:	0013      	movs	r3, r2
 800076c:	00db      	lsls	r3, r3, #3
 800076e:	1a9b      	subs	r3, r3, r2
 8000770:	00db      	lsls	r3, r3, #3
 8000772:	18cb      	adds	r3, r1, r3
 8000774:	181b      	adds	r3, r3, r0
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
			currentSubPage->currentButton = currentSubPage->buttonMenu[currentSubPage->currentButton].prevObject;
 800077a:	4b31      	ldr	r3, [pc, #196]	; (8000840 <moveSPCursor+0x180>)
 800077c:	6819      	ldr	r1, [r3, #0]
 800077e:	4b30      	ldr	r3, [pc, #192]	; (8000840 <moveSPCursor+0x180>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	23f4      	movs	r3, #244	; 0xf4
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	58d2      	ldr	r2, [r2, r3]
 8000788:	2080      	movs	r0, #128	; 0x80
 800078a:	0013      	movs	r3, r2
 800078c:	00db      	lsls	r3, r3, #3
 800078e:	1a9b      	subs	r3, r3, r2
 8000790:	00db      	lsls	r3, r3, #3
 8000792:	18cb      	adds	r3, r1, r3
 8000794:	181b      	adds	r3, r3, r0
 8000796:	6819      	ldr	r1, [r3, #0]
 8000798:	4b29      	ldr	r3, [pc, #164]	; (8000840 <moveSPCursor+0x180>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	23f4      	movs	r3, #244	; 0xf4
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	50d1      	str	r1, [r2, r3]
			currentSubPage->buttonMenu[currentSubPage->currentButton].selected=1;
 80007a2:	4b27      	ldr	r3, [pc, #156]	; (8000840 <moveSPCursor+0x180>)
 80007a4:	6819      	ldr	r1, [r3, #0]
 80007a6:	4b26      	ldr	r3, [pc, #152]	; (8000840 <moveSPCursor+0x180>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	23f4      	movs	r3, #244	; 0xf4
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	58d2      	ldr	r2, [r2, r3]
 80007b0:	2088      	movs	r0, #136	; 0x88
 80007b2:	0013      	movs	r3, r2
 80007b4:	00db      	lsls	r3, r3, #3
 80007b6:	1a9b      	subs	r3, r3, r2
 80007b8:	00db      	lsls	r3, r3, #3
 80007ba:	18cb      	adds	r3, r1, r3
 80007bc:	181b      	adds	r3, r3, r0
 80007be:	2201      	movs	r2, #1
 80007c0:	601a      	str	r2, [r3, #0]
		}

		if 	(nextOrPrev==NEXT)
 80007c2:	4b22      	ldr	r3, [pc, #136]	; (800084c <moveSPCursor+0x18c>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2b02      	cmp	r3, #2
 80007c8:	d132      	bne.n	8000830 <moveSPCursor+0x170>
		{
			currentSubPage->buttonMenu[currentSubPage->currentButton].selected=0;
 80007ca:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <moveSPCursor+0x180>)
 80007cc:	6819      	ldr	r1, [r3, #0]
 80007ce:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <moveSPCursor+0x180>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	23f4      	movs	r3, #244	; 0xf4
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	58d2      	ldr	r2, [r2, r3]
 80007d8:	2088      	movs	r0, #136	; 0x88
 80007da:	0013      	movs	r3, r2
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	1a9b      	subs	r3, r3, r2
 80007e0:	00db      	lsls	r3, r3, #3
 80007e2:	18cb      	adds	r3, r1, r3
 80007e4:	181b      	adds	r3, r3, r0
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
			currentSubPage->currentButton = currentSubPage->buttonMenu[currentSubPage->currentButton].nextObject;
 80007ea:	4b15      	ldr	r3, [pc, #84]	; (8000840 <moveSPCursor+0x180>)
 80007ec:	6819      	ldr	r1, [r3, #0]
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <moveSPCursor+0x180>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	23f4      	movs	r3, #244	; 0xf4
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	58d2      	ldr	r2, [r2, r3]
 80007f8:	0013      	movs	r3, r2
 80007fa:	00db      	lsls	r3, r3, #3
 80007fc:	1a9b      	subs	r3, r3, r2
 80007fe:	00db      	lsls	r3, r3, #3
 8000800:	18cb      	adds	r3, r1, r3
 8000802:	337c      	adds	r3, #124	; 0x7c
 8000804:	6819      	ldr	r1, [r3, #0]
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <moveSPCursor+0x180>)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	23f4      	movs	r3, #244	; 0xf4
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	50d1      	str	r1, [r2, r3]
			currentSubPage->buttonMenu[currentSubPage->currentButton].selected=1;
 8000810:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <moveSPCursor+0x180>)
 8000812:	6819      	ldr	r1, [r3, #0]
 8000814:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <moveSPCursor+0x180>)
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	23f4      	movs	r3, #244	; 0xf4
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	58d2      	ldr	r2, [r2, r3]
 800081e:	2088      	movs	r0, #136	; 0x88
 8000820:	0013      	movs	r3, r2
 8000822:	00db      	lsls	r3, r3, #3
 8000824:	1a9b      	subs	r3, r3, r2
 8000826:	00db      	lsls	r3, r3, #3
 8000828:	18cb      	adds	r3, r1, r3
 800082a:	181b      	adds	r3, r3, r0
 800082c:	2201      	movs	r2, #1
 800082e:	601a      	str	r2, [r3, #0]
		}

		markSubPageButton();																	//MARK THE SP BUTTON
 8000830:	f000 f9d4 	bl	8000bdc <markSubPageButton>

		ssd1306_UpdateScreen();
 8000834:	f001 f92e 	bl	8001a94 <ssd1306_UpdateScreen>
	}
}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	bdb0      	pop	{r4, r5, r7, pc}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	200004bc 	.word	0x200004bc
 8000844:	2000056c 	.word	0x2000056c
 8000848:	200004b8 	.word	0x200004b8
 800084c:	20000004 	.word	0x20000004

08000850 <selectPage>:

void selectPage(){
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af02      	add	r7, sp, #8
	if(currentSubPage->selected==0){
 8000856:	4b34      	ldr	r3, [pc, #208]	; (8000928 <selectPage+0xd8>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d15f      	bne.n	8000920 <selectPage+0xd0>
		ssd1306_DrawRectangle(0, 0, 127, 9, 0x01);
 8000860:	2301      	movs	r3, #1
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	2309      	movs	r3, #9
 8000866:	227f      	movs	r2, #127	; 0x7f
 8000868:	2100      	movs	r1, #0
 800086a:	2000      	movs	r0, #0
 800086c:	f001 fb0a 	bl	8001e84 <ssd1306_DrawRectangle>

		ssd1306_FillRectangle(0, 10, 5, 54, 0x00);				//CLEAR BUTTON MARKERS
 8000870:	2300      	movs	r3, #0
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	2336      	movs	r3, #54	; 0x36
 8000876:	2205      	movs	r2, #5
 8000878:	210a      	movs	r1, #10
 800087a:	2000      	movs	r0, #0
 800087c:	f001 fb52 	bl	8001f24 <ssd1306_FillRectangle>
		if ((currentPage->buttonMenu[0].selected==0)&&(currentPage->selected==0)&&(currentSubPage->selected==0))
 8000880:	4b2a      	ldr	r3, [pc, #168]	; (800092c <selectPage+0xdc>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000886:	2b00      	cmp	r3, #0
 8000888:	d14a      	bne.n	8000920 <selectPage+0xd0>
 800088a:	4b28      	ldr	r3, [pc, #160]	; (800092c <selectPage+0xdc>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d145      	bne.n	8000920 <selectPage+0xd0>
 8000894:	4b24      	ldr	r3, [pc, #144]	; (8000928 <selectPage+0xd8>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d140      	bne.n	8000920 <selectPage+0xd0>
			{
			allowNextPage=0;
 800089e:	4b24      	ldr	r3, [pc, #144]	; (8000930 <selectPage+0xe0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]

			page1.selected=0;
 80008a4:	4b23      	ldr	r3, [pc, #140]	; (8000934 <selectPage+0xe4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	605a      	str	r2, [r3, #4]
			page2.selected=0;
 80008aa:	4b23      	ldr	r3, [pc, #140]	; (8000938 <selectPage+0xe8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	605a      	str	r2, [r3, #4]
			page3.selected=0;
 80008b0:	4b22      	ldr	r3, [pc, #136]	; (800093c <selectPage+0xec>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	605a      	str	r2, [r3, #4]
			calibTime.selected=0;
 80008b6:	4b22      	ldr	r3, [pc, #136]	; (8000940 <selectPage+0xf0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	605a      	str	r2, [r3, #4]

			currentPage->selected=1;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <selectPage+0xdc>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2201      	movs	r2, #1
 80008c2:	605a      	str	r2, [r3, #4]
			currentPage->buttonMenu[0].selected=1;
 80008c4:	4b19      	ldr	r3, [pc, #100]	; (800092c <selectPage+0xdc>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2201      	movs	r2, #1
 80008ca:	669a      	str	r2, [r3, #104]	; 0x68
			currentPage->buttonMenu[1].selected=0;
 80008cc:	4b17      	ldr	r3, [pc, #92]	; (800092c <selectPage+0xdc>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	22a0      	movs	r2, #160	; 0xa0
 80008d2:	2100      	movs	r1, #0
 80008d4:	5099      	str	r1, [r3, r2]
			currentPage->buttonMenu[2].selected=0;
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <selectPage+0xdc>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	22d8      	movs	r2, #216	; 0xd8
 80008dc:	2100      	movs	r1, #0
 80008de:	5099      	str	r1, [r3, r2]
			currentPage->currentButton=0;
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <selectPage+0xdc>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	22e8      	movs	r2, #232	; 0xe8
 80008e6:	2100      	movs	r1, #0
 80008e8:	5099      	str	r1, [r3, r2]

			markButton();//MARK THE BUTTON
 80008ea:	f000 f937 	bl	8000b5c <markButton>

			if (currentPage->numberOfPage==0){
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <selectPage+0xdc>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d107      	bne.n	8000908 <selectPage+0xb8>
				 checkTime();					//DISPLAY TIME AT THE BOTTOM OF THE SCREEN
 80008f8:	f000 fb32 	bl	8000f60 <checkTime>
				 ssd1306_SetCursor(0, 55);
 80008fc:	2137      	movs	r1, #55	; 0x37
 80008fe:	2000      	movs	r0, #0
 8000900:	f001 fa1c 	bl	8001d3c <ssd1306_SetCursor>
				 displayTime();
 8000904:	f000 fb6c 	bl	8000fe0 <displayTime>
			}

			ssd1306_UpdateScreen();
 8000908:	f001 f8c4 	bl	8001a94 <ssd1306_UpdateScreen>
			for(int i=0; i<350000; i++){};	//BUTTON DEBOUNCE DELAY
 800090c:	2300      	movs	r3, #0
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	e002      	b.n	8000918 <selectPage+0xc8>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	3301      	adds	r3, #1
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <selectPage+0xf4>)
 800091c:	4293      	cmp	r3, r2
 800091e:	ddf8      	ble.n	8000912 <selectPage+0xc2>
		}
	}
}
 8000920:	46c0      	nop			; (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	b002      	add	sp, #8
 8000926:	bd80      	pop	{r7, pc}
 8000928:	200004bc 	.word	0x200004bc
 800092c:	200004b8 	.word	0x200004b8
 8000930:	20000000 	.word	0x20000000
 8000934:	20000008 	.word	0x20000008
 8000938:	200000f4 	.word	0x200000f4
 800093c:	200001e0 	.word	0x200001e0
 8000940:	200002cc 	.word	0x200002cc
 8000944:	0005572f 	.word	0x0005572f

08000948 <selectSubPage>:

void selectSubPage(){
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af02      	add	r7, sp, #8
	if ((currentPage->selected==0)){
 800094e:	4b2e      	ldr	r3, [pc, #184]	; (8000a08 <selectSubPage+0xc0>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d152      	bne.n	80009fe <selectSubPage+0xb6>
			ssd1306_DrawRectangle(0, 0, 127, 9, 0x01);
 8000958:	2301      	movs	r3, #1
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2309      	movs	r3, #9
 800095e:	227f      	movs	r2, #127	; 0x7f
 8000960:	2100      	movs	r1, #0
 8000962:	2000      	movs	r0, #0
 8000964:	f001 fa8e 	bl	8001e84 <ssd1306_DrawRectangle>

			allowNextSubPage=0;
 8000968:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <selectSubPage+0xc4>)
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]

			page1.selected=0;
 800096e:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <selectSubPage+0xc8>)
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
			page2.selected=0;
 8000974:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <selectSubPage+0xcc>)
 8000976:	2200      	movs	r2, #0
 8000978:	605a      	str	r2, [r3, #4]
			page3.selected=0;
 800097a:	4b27      	ldr	r3, [pc, #156]	; (8000a18 <selectSubPage+0xd0>)
 800097c:	2200      	movs	r2, #0
 800097e:	605a      	str	r2, [r3, #4]

			currentSubPage->selected=1;
 8000980:	4b26      	ldr	r3, [pc, #152]	; (8000a1c <selectSubPage+0xd4>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2201      	movs	r2, #1
 8000986:	605a      	str	r2, [r3, #4]
			currentSubPage->buttonMenu[0].selected=1;
 8000988:	4b24      	ldr	r3, [pc, #144]	; (8000a1c <selectSubPage+0xd4>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2288      	movs	r2, #136	; 0x88
 800098e:	2101      	movs	r1, #1
 8000990:	5099      	str	r1, [r3, r2]
			currentSubPage->buttonMenu[1].selected=0;
 8000992:	4b22      	ldr	r3, [pc, #136]	; (8000a1c <selectSubPage+0xd4>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	22c0      	movs	r2, #192	; 0xc0
 8000998:	2100      	movs	r1, #0
 800099a:	5099      	str	r1, [r3, r2]
			currentSubPage->buttonMenu[2].selected=0;
 800099c:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <selectSubPage+0xd4>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	22f8      	movs	r2, #248	; 0xf8
 80009a2:	2100      	movs	r1, #0
 80009a4:	5099      	str	r1, [r3, r2]
			currentSubPage->buttonMenu[3].selected=0;
 80009a6:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <selectSubPage+0xd4>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	2398      	movs	r3, #152	; 0x98
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	2100      	movs	r1, #0
 80009b0:	50d1      	str	r1, [r2, r3]
			currentSubPage->buttonMenu[4].selected=0;
 80009b2:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <selectSubPage+0xd4>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	23b4      	movs	r3, #180	; 0xb4
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	2100      	movs	r1, #0
 80009bc:	50d1      	str	r1, [r2, r3]
			currentSubPage->buttonMenu[5].selected=0;
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <selectSubPage+0xd4>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	23d0      	movs	r3, #208	; 0xd0
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	2100      	movs	r1, #0
 80009c8:	50d1      	str	r1, [r2, r3]
			currentSubPage->buttonMenu[6].selected=0;
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <selectSubPage+0xd4>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	23ec      	movs	r3, #236	; 0xec
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	2100      	movs	r1, #0
 80009d4:	50d1      	str	r1, [r2, r3]
			currentSubPage->currentButton=0;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <selectSubPage+0xd4>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	23f4      	movs	r3, #244	; 0xf4
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	2100      	movs	r1, #0
 80009e0:	50d1      	str	r1, [r2, r3]

			markSubPageButton();//MARK THE BUTTON
 80009e2:	f000 f8fb 	bl	8000bdc <markSubPageButton>

			ssd1306_UpdateScreen();
 80009e6:	f001 f855 	bl	8001a94 <ssd1306_UpdateScreen>
			for(int i=0; i<350000; i++){};	//BUTTON DEBOUNCE DELAY
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	e002      	b.n	80009f6 <selectSubPage+0xae>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3301      	adds	r3, #1
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a09      	ldr	r2, [pc, #36]	; (8000a20 <selectSubPage+0xd8>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	ddf8      	ble.n	80009f0 <selectSubPage+0xa8>
		}
}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b002      	add	sp, #8
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	200004b8 	.word	0x200004b8
 8000a0c:	2000056c 	.word	0x2000056c
 8000a10:	20000008 	.word	0x20000008
 8000a14:	200000f4 	.word	0x200000f4
 8000a18:	200001e0 	.word	0x200001e0
 8000a1c:	200004bc 	.word	0x200004bc
 8000a20:	0005572f 	.word	0x0005572f

08000a24 <unselectPage>:

void unselectPage(){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af02      	add	r7, sp, #8
	if (currentSubPage->selected!=1){							//IF WE'RE NOT BUSY WITH A SUBPAGE
 8000a2a:	4b20      	ldr	r3, [pc, #128]	; (8000aac <unselectPage+0x88>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d037      	beq.n	8000aa4 <unselectPage+0x80>
		ssd1306_DrawRectangle(0, 0, 127, 9, 0x00);				//CLEAR SELECT RECTANGLE
 8000a34:	2300      	movs	r3, #0
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	2309      	movs	r3, #9
 8000a3a:	227f      	movs	r2, #127	; 0x7f
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f001 fa20 	bl	8001e84 <ssd1306_DrawRectangle>
		ssd1306_FillRectangle(0, 9, 5, 54, 0x00);				//CLEAR BUTTON MARKERS
 8000a44:	2300      	movs	r3, #0
 8000a46:	9300      	str	r3, [sp, #0]
 8000a48:	2336      	movs	r3, #54	; 0x36
 8000a4a:	2205      	movs	r2, #5
 8000a4c:	2109      	movs	r1, #9
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f001 fa68 	bl	8001f24 <ssd1306_FillRectangle>
		//ssd1306_Line(0, 9, 127, 9, 0x01);						//GET BACK TITLE UNDERLINE

		currentPage->currentButton=0;
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <unselectPage+0x8c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	22e8      	movs	r2, #232	; 0xe8
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	5099      	str	r1, [r3, r2]
		currentPage->buttonMenu[0].selected=0;
 8000a5e:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <unselectPage+0x8c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2200      	movs	r2, #0
 8000a64:	669a      	str	r2, [r3, #104]	; 0x68
		currentPage->buttonMenu[1].selected=0;
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <unselectPage+0x8c>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	22a0      	movs	r2, #160	; 0xa0
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	5099      	str	r1, [r3, r2]
		currentPage->buttonMenu[2].selected=0;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <unselectPage+0x8c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	22d8      	movs	r2, #216	; 0xd8
 8000a76:	2100      	movs	r1, #0
 8000a78:	5099      	str	r1, [r3, r2]

		currentPage->selected=0;
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <unselectPage+0x8c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	605a      	str	r2, [r3, #4]
		allowNextPage=1;
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <unselectPage+0x90>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	601a      	str	r2, [r3, #0]
		//allowNextSubPage=0;

		page1.selected=0;
 8000a88:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <unselectPage+0x94>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	605a      	str	r2, [r3, #4]
		page2.selected=0;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <unselectPage+0x98>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	605a      	str	r2, [r3, #4]
		page3.selected=0;
 8000a94:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <unselectPage+0x9c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	605a      	str	r2, [r3, #4]
		calibTime.selected=0;
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <unselectPage+0xa0>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	605a      	str	r2, [r3, #4]
		ssd1306_UpdateScreen();
 8000aa0:	f000 fff8 	bl	8001a94 <ssd1306_UpdateScreen>
	}
}
 8000aa4:	46c0      	nop			; (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	200004bc 	.word	0x200004bc
 8000ab0:	200004b8 	.word	0x200004b8
 8000ab4:	20000000 	.word	0x20000000
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	200000f4 	.word	0x200000f4
 8000ac0:	200001e0 	.word	0x200001e0
 8000ac4:	200002cc 	.word	0x200002cc

08000ac8 <unselectSubPage>:

void unselectSubPage(){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af02      	add	r7, sp, #8

	ssd1306_DrawRectangle(0, 0, 127, 9, 0x00);				//CLEAR SELECT RECTANGLE
 8000ace:	2300      	movs	r3, #0
 8000ad0:	9300      	str	r3, [sp, #0]
 8000ad2:	2309      	movs	r3, #9
 8000ad4:	227f      	movs	r2, #127	; 0x7f
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f001 f9d3 	bl	8001e84 <ssd1306_DrawRectangle>

	currentSubPage->currentButton=0;
 8000ade:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <unselectSubPage+0x8c>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	23f4      	movs	r3, #244	; 0xf4
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	50d1      	str	r1, [r2, r3]
	currentSubPage->buttonMenu[0].selected=0;
 8000aea:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <unselectSubPage+0x8c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2288      	movs	r2, #136	; 0x88
 8000af0:	2100      	movs	r1, #0
 8000af2:	5099      	str	r1, [r3, r2]
	currentSubPage->buttonMenu[1].selected=0;
 8000af4:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <unselectSubPage+0x8c>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	22c0      	movs	r2, #192	; 0xc0
 8000afa:	2100      	movs	r1, #0
 8000afc:	5099      	str	r1, [r3, r2]
	currentSubPage->buttonMenu[2].selected=0;
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <unselectSubPage+0x8c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	22f8      	movs	r2, #248	; 0xf8
 8000b04:	2100      	movs	r1, #0
 8000b06:	5099      	str	r1, [r3, r2]
	currentSubPage->buttonMenu[3].selected=0;
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <unselectSubPage+0x8c>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	2398      	movs	r3, #152	; 0x98
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	2100      	movs	r1, #0
 8000b12:	50d1      	str	r1, [r2, r3]
	currentSubPage->buttonMenu[4].selected=0;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <unselectSubPage+0x8c>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	23b4      	movs	r3, #180	; 0xb4
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	50d1      	str	r1, [r2, r3]
	currentSubPage->buttonMenu[5].selected=0;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <unselectSubPage+0x8c>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	23d0      	movs	r3, #208	; 0xd0
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	2100      	movs	r1, #0
 8000b2a:	50d1      	str	r1, [r2, r3]
	currentSubPage->buttonMenu[6].selected=0;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <unselectSubPage+0x8c>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	23ec      	movs	r3, #236	; 0xec
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	2100      	movs	r1, #0
 8000b36:	50d1      	str	r1, [r2, r3]

	currentSubPage->selected=0;
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <unselectSubPage+0x8c>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	605a      	str	r2, [r3, #4]
	//allowNextSubPage=1;
	nextOrPrev=CURRENT;
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <unselectSubPage+0x90>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
	nextPage();
 8000b46:	f7ff fb73 	bl	8000230 <nextPage>
	ssd1306_UpdateScreen();
 8000b4a:	f000 ffa3 	bl	8001a94 <ssd1306_UpdateScreen>
}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200004bc 	.word	0x200004bc
 8000b58:	20000004 	.word	0x20000004

08000b5c <markButton>:

void markButton(){
 8000b5c:	b5b0      	push	{r4, r5, r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af02      	add	r7, sp, #8
	ssd1306_DrawRectangle(	currentPage->cursorAxis[currentPage->currentButton][0]-5,
 8000b62:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <markButton+0x7c>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <markButton+0x7c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	21e8      	movs	r1, #232	; 0xe8
 8000b6c:	585b      	ldr	r3, [r3, r1]
 8000b6e:	3305      	adds	r3, #5
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	589b      	ldr	r3, [r3, r2]
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	3b05      	subs	r3, #5
 8000b78:	b2d8      	uxtb	r0, r3
							currentPage->cursorAxis[currentPage->currentButton][1]+2,
 8000b7a:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <markButton+0x7c>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <markButton+0x7c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	21e8      	movs	r1, #232	; 0xe8
 8000b84:	585b      	ldr	r3, [r3, r1]
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	18d3      	adds	r3, r2, r3
 8000b8a:	332c      	adds	r3, #44	; 0x2c
 8000b8c:	681b      	ldr	r3, [r3, #0]
	ssd1306_DrawRectangle(	currentPage->cursorAxis[currentPage->currentButton][0]-5,
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	3302      	adds	r3, #2
 8000b92:	b2d9      	uxtb	r1, r3
							currentPage->cursorAxis[currentPage->currentButton][0]-3,
 8000b94:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <markButton+0x7c>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <markButton+0x7c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	24e8      	movs	r4, #232	; 0xe8
 8000b9e:	591b      	ldr	r3, [r3, r4]
 8000ba0:	3305      	adds	r3, #5
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	589b      	ldr	r3, [r3, r2]
	ssd1306_DrawRectangle(	currentPage->cursorAxis[currentPage->currentButton][0]-5,
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	3b03      	subs	r3, #3
 8000baa:	b2dc      	uxtb	r4, r3
							currentPage->cursorAxis[currentPage->currentButton][1]+4,
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <markButton+0x7c>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <markButton+0x7c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	25e8      	movs	r5, #232	; 0xe8
 8000bb6:	595b      	ldr	r3, [r3, r5]
 8000bb8:	00db      	lsls	r3, r3, #3
 8000bba:	18d3      	adds	r3, r2, r3
 8000bbc:	332c      	adds	r3, #44	; 0x2c
 8000bbe:	681b      	ldr	r3, [r3, #0]
	ssd1306_DrawRectangle(	currentPage->cursorAxis[currentPage->currentButton][0]-5,
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	3304      	adds	r3, #4
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	9200      	str	r2, [sp, #0]
 8000bca:	0022      	movs	r2, r4
 8000bcc:	f001 f95a 	bl	8001e84 <ssd1306_DrawRectangle>
							0x01);
}
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	200004b8 	.word	0x200004b8

08000bdc <markSubPageButton>:

void markSubPageButton(){
 8000bdc:	b5b0      	push	{r4, r5, r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af02      	add	r7, sp, #8
	ssd1306_Line(			currentSubPage->cursorAxis[currentSubPage->currentButton][0]-1,
 8000be2:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <markSubPageButton+0x84>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	4b1e      	ldr	r3, [pc, #120]	; (8000c60 <markSubPageButton+0x84>)
 8000be8:	6819      	ldr	r1, [r3, #0]
 8000bea:	23f4      	movs	r3, #244	; 0xf4
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	58cb      	ldr	r3, [r1, r3]
 8000bf0:	3305      	adds	r3, #5
 8000bf2:	00db      	lsls	r3, r3, #3
 8000bf4:	589b      	ldr	r3, [r3, r2]
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	b2d8      	uxtb	r0, r3
							currentSubPage->cursorAxis[currentSubPage->currentButton][1]+9,
 8000bfc:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <markSubPageButton+0x84>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <markSubPageButton+0x84>)
 8000c02:	6819      	ldr	r1, [r3, #0]
 8000c04:	23f4      	movs	r3, #244	; 0xf4
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	58cb      	ldr	r3, [r1, r3]
 8000c0a:	00db      	lsls	r3, r3, #3
 8000c0c:	18d3      	adds	r3, r2, r3
 8000c0e:	332c      	adds	r3, #44	; 0x2c
 8000c10:	681b      	ldr	r3, [r3, #0]
	ssd1306_Line(			currentSubPage->cursorAxis[currentSubPage->currentButton][0]-1,
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	3309      	adds	r3, #9
 8000c16:	b2dc      	uxtb	r4, r3
							currentSubPage->cursorAxis[currentSubPage->currentButton][0]+7,
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <markSubPageButton+0x84>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <markSubPageButton+0x84>)
 8000c1e:	6819      	ldr	r1, [r3, #0]
 8000c20:	23f4      	movs	r3, #244	; 0xf4
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	58cb      	ldr	r3, [r1, r3]
 8000c26:	3305      	adds	r3, #5
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	589b      	ldr	r3, [r3, r2]
	ssd1306_Line(			currentSubPage->cursorAxis[currentSubPage->currentButton][0]-1,
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	3307      	adds	r3, #7
 8000c30:	b2dd      	uxtb	r5, r3
							currentSubPage->cursorAxis[currentSubPage->currentButton][1]+9,
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <markSubPageButton+0x84>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <markSubPageButton+0x84>)
 8000c38:	6819      	ldr	r1, [r3, #0]
 8000c3a:	23f4      	movs	r3, #244	; 0xf4
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	58cb      	ldr	r3, [r1, r3]
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	18d3      	adds	r3, r2, r3
 8000c44:	332c      	adds	r3, #44	; 0x2c
 8000c46:	681b      	ldr	r3, [r3, #0]
	ssd1306_Line(			currentSubPage->cursorAxis[currentSubPage->currentButton][0]-1,
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	3309      	adds	r3, #9
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	2201      	movs	r2, #1
 8000c50:	9200      	str	r2, [sp, #0]
 8000c52:	002a      	movs	r2, r5
 8000c54:	0021      	movs	r1, r4
 8000c56:	f001 f88b 	bl	8001d70 <ssd1306_Line>
							0x01);
}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bdb0      	pop	{r4, r5, r7, pc}
 8000c60:	200004bc 	.word	0x200004bc

08000c64 <markSet>:

void markSet(){
 8000c64:	b5b0      	push	{r4, r5, r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af02      	add	r7, sp, #8
	ssd1306_FillRectangle(	currentPage->cursorAxis[currentPage->currentButton][0]+115,
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <markSet+0x7c>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <markSet+0x7c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	21e8      	movs	r1, #232	; 0xe8
 8000c74:	585b      	ldr	r3, [r3, r1]
 8000c76:	3305      	adds	r3, #5
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	589b      	ldr	r3, [r3, r2]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	3373      	adds	r3, #115	; 0x73
 8000c80:	b2d8      	uxtb	r0, r3
							currentPage->cursorAxis[currentPage->currentButton][1]+2,
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <markSet+0x7c>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <markSet+0x7c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	21e8      	movs	r1, #232	; 0xe8
 8000c8c:	585b      	ldr	r3, [r3, r1]
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	18d3      	adds	r3, r2, r3
 8000c92:	332c      	adds	r3, #44	; 0x2c
 8000c94:	681b      	ldr	r3, [r3, #0]
	ssd1306_FillRectangle(	currentPage->cursorAxis[currentPage->currentButton][0]+115,
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	3302      	adds	r3, #2
 8000c9a:	b2d9      	uxtb	r1, r3
							currentPage->cursorAxis[currentPage->currentButton][0]+117,
 8000c9c:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <markSet+0x7c>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <markSet+0x7c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	24e8      	movs	r4, #232	; 0xe8
 8000ca6:	591b      	ldr	r3, [r3, r4]
 8000ca8:	3305      	adds	r3, #5
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	589b      	ldr	r3, [r3, r2]
	ssd1306_FillRectangle(	currentPage->cursorAxis[currentPage->currentButton][0]+115,
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	3375      	adds	r3, #117	; 0x75
 8000cb2:	b2dc      	uxtb	r4, r3
							currentPage->cursorAxis[currentPage->currentButton][1]+4,
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <markSet+0x7c>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <markSet+0x7c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	25e8      	movs	r5, #232	; 0xe8
 8000cbe:	595b      	ldr	r3, [r3, r5]
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	18d3      	adds	r3, r2, r3
 8000cc4:	332c      	adds	r3, #44	; 0x2c
 8000cc6:	681b      	ldr	r3, [r3, #0]
	ssd1306_FillRectangle(	currentPage->cursorAxis[currentPage->currentButton][0]+115,
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	3304      	adds	r3, #4
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2201      	movs	r2, #1
 8000cd0:	9200      	str	r2, [sp, #0]
 8000cd2:	0022      	movs	r2, r4
 8000cd4:	f001 f926 	bl	8001f24 <ssd1306_FillRectangle>
							0x01);
}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	200004b8 	.word	0x200004b8

08000ce4 <unmarkSet>:

void unmarkSet(){
 8000ce4:	b5b0      	push	{r4, r5, r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af02      	add	r7, sp, #8
	ssd1306_FillRectangle(	currentPage->cursorAxis[currentPage->currentButton][0]+115,
 8000cea:	4b1d      	ldr	r3, [pc, #116]	; (8000d60 <unmarkSet+0x7c>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <unmarkSet+0x7c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	21e8      	movs	r1, #232	; 0xe8
 8000cf4:	585b      	ldr	r3, [r3, r1]
 8000cf6:	3305      	adds	r3, #5
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	589b      	ldr	r3, [r3, r2]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	3373      	adds	r3, #115	; 0x73
 8000d00:	b2d8      	uxtb	r0, r3
							currentPage->cursorAxis[currentPage->currentButton][1]+2,
 8000d02:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <unmarkSet+0x7c>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <unmarkSet+0x7c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	21e8      	movs	r1, #232	; 0xe8
 8000d0c:	585b      	ldr	r3, [r3, r1]
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	18d3      	adds	r3, r2, r3
 8000d12:	332c      	adds	r3, #44	; 0x2c
 8000d14:	681b      	ldr	r3, [r3, #0]
	ssd1306_FillRectangle(	currentPage->cursorAxis[currentPage->currentButton][0]+115,
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	3302      	adds	r3, #2
 8000d1a:	b2d9      	uxtb	r1, r3
							currentPage->cursorAxis[currentPage->currentButton][0]+117,
 8000d1c:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <unmarkSet+0x7c>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <unmarkSet+0x7c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	24e8      	movs	r4, #232	; 0xe8
 8000d26:	591b      	ldr	r3, [r3, r4]
 8000d28:	3305      	adds	r3, #5
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	589b      	ldr	r3, [r3, r2]
	ssd1306_FillRectangle(	currentPage->cursorAxis[currentPage->currentButton][0]+115,
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	3375      	adds	r3, #117	; 0x75
 8000d32:	b2dc      	uxtb	r4, r3
							currentPage->cursorAxis[currentPage->currentButton][1]+4,
 8000d34:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <unmarkSet+0x7c>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <unmarkSet+0x7c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	25e8      	movs	r5, #232	; 0xe8
 8000d3e:	595b      	ldr	r3, [r3, r5]
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	18d3      	adds	r3, r2, r3
 8000d44:	332c      	adds	r3, #44	; 0x2c
 8000d46:	681b      	ldr	r3, [r3, #0]
	ssd1306_FillRectangle(	currentPage->cursorAxis[currentPage->currentButton][0]+115,
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	3304      	adds	r3, #4
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2200      	movs	r2, #0
 8000d50:	9200      	str	r2, [sp, #0]
 8000d52:	0022      	movs	r2, r4
 8000d54:	f001 f8e6 	bl	8001f24 <ssd1306_FillRectangle>
							0x00);
}
 8000d58:	46c0      	nop			; (mov r8, r8)
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bdb0      	pop	{r4, r5, r7, pc}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	200004b8 	.word	0x200004b8

08000d64 <markSetSPButton>:

void markSetSPButton(){
 8000d64:	b5b0      	push	{r4, r5, r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af02      	add	r7, sp, #8
	ssd1306_DrawRectangle(	currentPage->cursorAxis[currentSubPage->currentButton][0]-1,
 8000d6a:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <markSetSPButton+0x80>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <markSetSPButton+0x84>)
 8000d70:	6819      	ldr	r1, [r3, #0]
 8000d72:	23f4      	movs	r3, #244	; 0xf4
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	58cb      	ldr	r3, [r1, r3]
 8000d78:	3305      	adds	r3, #5
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	589b      	ldr	r3, [r3, r2]
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	3b01      	subs	r3, #1
 8000d82:	b2d8      	uxtb	r0, r3
							currentPage->cursorAxis[currentPage->currentButton][1]-1,
 8000d84:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <markSetSPButton+0x80>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <markSetSPButton+0x80>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	21e8      	movs	r1, #232	; 0xe8
 8000d8e:	585b      	ldr	r3, [r3, r1]
 8000d90:	00db      	lsls	r3, r3, #3
 8000d92:	18d3      	adds	r3, r2, r3
 8000d94:	332c      	adds	r3, #44	; 0x2c
 8000d96:	681b      	ldr	r3, [r3, #0]
	ssd1306_DrawRectangle(	currentPage->cursorAxis[currentSubPage->currentButton][0]-1,
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	b2d9      	uxtb	r1, r3
							currentPage->cursorAxis[currentPage->currentButton][0]+7,
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <markSetSPButton+0x80>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <markSetSPButton+0x80>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	24e8      	movs	r4, #232	; 0xe8
 8000da8:	591b      	ldr	r3, [r3, r4]
 8000daa:	3305      	adds	r3, #5
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	589b      	ldr	r3, [r3, r2]
	ssd1306_DrawRectangle(	currentPage->cursorAxis[currentSubPage->currentButton][0]-1,
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	3307      	adds	r3, #7
 8000db4:	b2dc      	uxtb	r4, r3
							currentPage->cursorAxis[currentPage->currentButton][1]+9,
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <markSetSPButton+0x80>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <markSetSPButton+0x80>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	25e8      	movs	r5, #232	; 0xe8
 8000dc0:	595b      	ldr	r3, [r3, r5]
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	18d3      	adds	r3, r2, r3
 8000dc6:	332c      	adds	r3, #44	; 0x2c
 8000dc8:	681b      	ldr	r3, [r3, #0]
	ssd1306_DrawRectangle(	currentPage->cursorAxis[currentSubPage->currentButton][0]-1,
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	3309      	adds	r3, #9
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	9200      	str	r2, [sp, #0]
 8000dd4:	0022      	movs	r2, r4
 8000dd6:	f001 f855 	bl	8001e84 <ssd1306_DrawRectangle>
							0x01);
	ssd1306_UpdateScreen();
 8000dda:	f000 fe5b 	bl	8001a94 <ssd1306_UpdateScreen>
}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bdb0      	pop	{r4, r5, r7, pc}
 8000de4:	200004b8 	.word	0x200004b8
 8000de8:	200004bc 	.word	0x200004bc

08000dec <pressButton>:

void pressButton(){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	if (currentPage->selected==1){
 8000df0:	4b59      	ldr	r3, [pc, #356]	; (8000f58 <pressButton+0x16c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d000      	beq.n	8000dfc <pressButton+0x10>
 8000dfa:	e0aa      	b.n	8000f52 <pressButton+0x166>
		////////////////////////// SETORRESET  /////////////////////////
		if (	(currentPage->buttonMenu[currentPage->currentButton].selected==1)&&				//CHECKIN IF BUTTON IS SELECTED
 8000dfc:	4b56      	ldr	r3, [pc, #344]	; (8000f58 <pressButton+0x16c>)
 8000dfe:	6819      	ldr	r1, [r3, #0]
 8000e00:	4b55      	ldr	r3, [pc, #340]	; (8000f58 <pressButton+0x16c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	22e8      	movs	r2, #232	; 0xe8
 8000e06:	589a      	ldr	r2, [r3, r2]
 8000e08:	0013      	movs	r3, r2
 8000e0a:	00db      	lsls	r3, r3, #3
 8000e0c:	1a9b      	subs	r3, r3, r2
 8000e0e:	00db      	lsls	r3, r3, #3
 8000e10:	18cb      	adds	r3, r1, r3
 8000e12:	3368      	adds	r3, #104	; 0x68
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d143      	bne.n	8000ea2 <pressButton+0xb6>
				(currentPage->buttonMenu[currentPage->currentButton].buttonType == SETORRESET))	//CHECKING BUTTON TYPE
 8000e1a:	4b4f      	ldr	r3, [pc, #316]	; (8000f58 <pressButton+0x16c>)
 8000e1c:	6819      	ldr	r1, [r3, #0]
 8000e1e:	4b4e      	ldr	r3, [pc, #312]	; (8000f58 <pressButton+0x16c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	22e8      	movs	r2, #232	; 0xe8
 8000e24:	589a      	ldr	r2, [r3, r2]
 8000e26:	0013      	movs	r3, r2
 8000e28:	00db      	lsls	r3, r3, #3
 8000e2a:	1a9b      	subs	r3, r3, r2
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	18cb      	adds	r3, r1, r3
 8000e30:	336c      	adds	r3, #108	; 0x6c
 8000e32:	681b      	ldr	r3, [r3, #0]
		if (	(currentPage->buttonMenu[currentPage->currentButton].selected==1)&&				//CHECKIN IF BUTTON IS SELECTED
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d134      	bne.n	8000ea2 <pressButton+0xb6>
		{
			if (	currentPage->buttonMenu[currentPage->currentButton].state == STATE_RESET){		//IF RESET - SET
 8000e38:	4b47      	ldr	r3, [pc, #284]	; (8000f58 <pressButton+0x16c>)
 8000e3a:	6819      	ldr	r1, [r3, #0]
 8000e3c:	4b46      	ldr	r3, [pc, #280]	; (8000f58 <pressButton+0x16c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	22e8      	movs	r2, #232	; 0xe8
 8000e42:	589a      	ldr	r2, [r3, r2]
 8000e44:	0013      	movs	r3, r2
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	1a9b      	subs	r3, r3, r2
 8000e4a:	00db      	lsls	r3, r3, #3
 8000e4c:	18cb      	adds	r3, r1, r3
 8000e4e:	3364      	adds	r3, #100	; 0x64
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d112      	bne.n	8000e7c <pressButton+0x90>
					currentPage->buttonMenu[currentPage->currentButton].state = STATE_SET;
 8000e56:	4b40      	ldr	r3, [pc, #256]	; (8000f58 <pressButton+0x16c>)
 8000e58:	6819      	ldr	r1, [r3, #0]
 8000e5a:	4b3f      	ldr	r3, [pc, #252]	; (8000f58 <pressButton+0x16c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	22e8      	movs	r2, #232	; 0xe8
 8000e60:	589a      	ldr	r2, [r3, r2]
 8000e62:	0013      	movs	r3, r2
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	1a9b      	subs	r3, r3, r2
 8000e68:	00db      	lsls	r3, r3, #3
 8000e6a:	18cb      	adds	r3, r1, r3
 8000e6c:	3364      	adds	r3, #100	; 0x64
 8000e6e:	2201      	movs	r2, #1
 8000e70:	601a      	str	r2, [r3, #0]
					markSet();
 8000e72:	f7ff fef7 	bl	8000c64 <markSet>
					ssd1306_UpdateScreen();}
 8000e76:	f000 fe0d 	bl	8001a94 <ssd1306_UpdateScreen>
			if (	currentPage->buttonMenu[currentPage->currentButton].state == STATE_RESET){		//IF RESET - SET
 8000e7a:	e06a      	b.n	8000f52 <pressButton+0x166>

			else {	currentPage->buttonMenu[currentPage->currentButton].state = STATE_RESET;
 8000e7c:	4b36      	ldr	r3, [pc, #216]	; (8000f58 <pressButton+0x16c>)
 8000e7e:	6819      	ldr	r1, [r3, #0]
 8000e80:	4b35      	ldr	r3, [pc, #212]	; (8000f58 <pressButton+0x16c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	22e8      	movs	r2, #232	; 0xe8
 8000e86:	589a      	ldr	r2, [r3, r2]
 8000e88:	0013      	movs	r3, r2
 8000e8a:	00db      	lsls	r3, r3, #3
 8000e8c:	1a9b      	subs	r3, r3, r2
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	18cb      	adds	r3, r1, r3
 8000e92:	3364      	adds	r3, #100	; 0x64
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
					unmarkSet();
 8000e98:	f7ff ff24 	bl	8000ce4 <unmarkSet>
					ssd1306_UpdateScreen();}		//IF SET - RESET
 8000e9c:	f000 fdfa 	bl	8001a94 <ssd1306_UpdateScreen>
			if (	currentPage->buttonMenu[currentPage->currentButton].state == STATE_RESET){		//IF RESET - SET
 8000ea0:	e057      	b.n	8000f52 <pressButton+0x166>
		}
		////////////////////////// SINGLEPRESS /////////////////////////
		else if ((	currentPage->buttonMenu[currentPage->currentButton].selected==1)&&			//CHECKIN IF BUTTON IS SELECTED
 8000ea2:	4b2d      	ldr	r3, [pc, #180]	; (8000f58 <pressButton+0x16c>)
 8000ea4:	6819      	ldr	r1, [r3, #0]
 8000ea6:	4b2c      	ldr	r3, [pc, #176]	; (8000f58 <pressButton+0x16c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	22e8      	movs	r2, #232	; 0xe8
 8000eac:	589a      	ldr	r2, [r3, r2]
 8000eae:	0013      	movs	r3, r2
 8000eb0:	00db      	lsls	r3, r3, #3
 8000eb2:	1a9b      	subs	r3, r3, r2
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	18cb      	adds	r3, r1, r3
 8000eb8:	3368      	adds	r3, #104	; 0x68
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d111      	bne.n	8000ee4 <pressButton+0xf8>
					(currentPage->buttonMenu[currentPage->currentButton].buttonType == SINGLEPRESS)){
 8000ec0:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <pressButton+0x16c>)
 8000ec2:	6819      	ldr	r1, [r3, #0]
 8000ec4:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <pressButton+0x16c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	22e8      	movs	r2, #232	; 0xe8
 8000eca:	589a      	ldr	r2, [r3, r2]
 8000ecc:	0013      	movs	r3, r2
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	1a9b      	subs	r3, r3, r2
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	18cb      	adds	r3, r1, r3
 8000ed6:	336c      	adds	r3, #108	; 0x6c
 8000ed8:	681b      	ldr	r3, [r3, #0]
		else if ((	currentPage->buttonMenu[currentPage->currentButton].selected==1)&&			//CHECKIN IF BUTTON IS SELECTED
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d102      	bne.n	8000ee4 <pressButton+0xf8>
					event();
 8000ede:	f000 f8e9 	bl	80010b4 <event>
 8000ee2:	e036      	b.n	8000f52 <pressButton+0x166>
		}
		///////////////////////// SUBMENU /////////////////////////////////
		else if ((	currentPage->buttonMenu[currentPage->currentButton].selected==1)&&			//CHECKIN IF BUTTON IS SELECTED
 8000ee4:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <pressButton+0x16c>)
 8000ee6:	6819      	ldr	r1, [r3, #0]
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <pressButton+0x16c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	22e8      	movs	r2, #232	; 0xe8
 8000eee:	589a      	ldr	r2, [r3, r2]
 8000ef0:	0013      	movs	r3, r2
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	1a9b      	subs	r3, r3, r2
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	18cb      	adds	r3, r1, r3
 8000efa:	3368      	adds	r3, #104	; 0x68
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d127      	bne.n	8000f52 <pressButton+0x166>
				(currentPage->buttonMenu[currentPage->currentButton].buttonType == SUBMENU))	//AND IF IT'S SUBMENU
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <pressButton+0x16c>)
 8000f04:	6819      	ldr	r1, [r3, #0]
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <pressButton+0x16c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	22e8      	movs	r2, #232	; 0xe8
 8000f0c:	589a      	ldr	r2, [r3, r2]
 8000f0e:	0013      	movs	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	1a9b      	subs	r3, r3, r2
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	18cb      	adds	r3, r1, r3
 8000f18:	336c      	adds	r3, #108	; 0x6c
 8000f1a:	681b      	ldr	r3, [r3, #0]
		else if ((	currentPage->buttonMenu[currentPage->currentButton].selected==1)&&			//CHECKIN IF BUTTON IS SELECTED
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d118      	bne.n	8000f52 <pressButton+0x166>
		{
			currentSubPage->selected=0;
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <pressButton+0x170>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2200      	movs	r2, #0
 8000f26:	605a      	str	r2, [r3, #4]
			//allowNextSubPage=0;
			event();
 8000f28:	f000 f8c4 	bl	80010b4 <event>
			currentPage->buttonMenu[currentPage->currentButton].selected=1;
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <pressButton+0x16c>)
 8000f2e:	6819      	ldr	r1, [r3, #0]
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <pressButton+0x16c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	22e8      	movs	r2, #232	; 0xe8
 8000f36:	589a      	ldr	r2, [r3, r2]
 8000f38:	0013      	movs	r3, r2
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	1a9b      	subs	r3, r3, r2
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	18cb      	adds	r3, r1, r3
 8000f42:	3368      	adds	r3, #104	; 0x68
 8000f44:	2201      	movs	r2, #1
 8000f46:	601a      	str	r2, [r3, #0]
			currentPage->selected=1;
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <pressButton+0x16c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	605a      	str	r2, [r3, #4]
		}
	}
}
 8000f50:	e7ff      	b.n	8000f52 <pressButton+0x166>
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	200004b8 	.word	0x200004b8
 8000f5c:	200004bc 	.word	0x200004bc

08000f60 <checkTime>:

	ssd1306_WriteString(timeString, Font_6x8, White);
	ssd1306_UpdateScreen();
}*/

void checkTime(){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000f64:	491a      	ldr	r1, [pc, #104]	; (8000fd0 <checkTime+0x70>)
 8000f66:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <checkTime+0x74>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f003 fa66 	bl	800443c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000f70:	4919      	ldr	r1, [pc, #100]	; (8000fd8 <checkTime+0x78>)
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <checkTime+0x74>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	0018      	movs	r0, r3
 8000f78:	f003 fabe 	bl	80044f8 <HAL_RTC_GetDate>
	calibTime.buttonMenu[0].value = sTime.Hours;
 8000f7c:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <checkTime+0x70>)
 8000f7e:	7819      	ldrb	r1, [r3, #0]
 8000f80:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <checkTime+0x7c>)
 8000f82:	2276      	movs	r2, #118	; 0x76
 8000f84:	5499      	strb	r1, [r3, r2]
	calibTime.buttonMenu[1].value = sTime.Minutes;
 8000f86:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <checkTime+0x70>)
 8000f88:	7859      	ldrb	r1, [r3, #1]
 8000f8a:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <checkTime+0x7c>)
 8000f8c:	22ae      	movs	r2, #174	; 0xae
 8000f8e:	5499      	strb	r1, [r3, r2]
	calibTime.buttonMenu[2].value = sTime.Seconds;
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <checkTime+0x70>)
 8000f92:	7899      	ldrb	r1, [r3, #2]
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <checkTime+0x7c>)
 8000f96:	22e6      	movs	r2, #230	; 0xe6
 8000f98:	5499      	strb	r1, [r3, r2]
	calibTime.buttonMenu[3].value = sDate.WeekDay;
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <checkTime+0x78>)
 8000f9c:	7819      	ldrb	r1, [r3, #0]
 8000f9e:	4a0f      	ldr	r2, [pc, #60]	; (8000fdc <checkTime+0x7c>)
 8000fa0:	238f      	movs	r3, #143	; 0x8f
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	54d1      	strb	r1, [r2, r3]
	calibTime.buttonMenu[4].value = sDate.Date;
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <checkTime+0x78>)
 8000fa8:	7899      	ldrb	r1, [r3, #2]
 8000faa:	4a0c      	ldr	r2, [pc, #48]	; (8000fdc <checkTime+0x7c>)
 8000fac:	23ab      	movs	r3, #171	; 0xab
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	54d1      	strb	r1, [r2, r3]
	calibTime.buttonMenu[5].value = sDate.Month;
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <checkTime+0x78>)
 8000fb4:	7859      	ldrb	r1, [r3, #1]
 8000fb6:	4a09      	ldr	r2, [pc, #36]	; (8000fdc <checkTime+0x7c>)
 8000fb8:	23c7      	movs	r3, #199	; 0xc7
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	54d1      	strb	r1, [r2, r3]
	calibTime.buttonMenu[6].value = sDate.Year;
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <checkTime+0x78>)
 8000fc0:	78d9      	ldrb	r1, [r3, #3]
 8000fc2:	4a06      	ldr	r2, [pc, #24]	; (8000fdc <checkTime+0x7c>)
 8000fc4:	23e3      	movs	r3, #227	; 0xe3
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	54d1      	strb	r1, [r2, r3]
}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000714 	.word	0x20000714
 8000fd4:	200005b8 	.word	0x200005b8
 8000fd8:	20000728 	.word	0x20000728
 8000fdc:	200002cc 	.word	0x200002cc

08000fe0 <displayTime>:

void displayTime() {
 8000fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fe2:	b08f      	sub	sp, #60	; 0x3c
 8000fe4:	af06      	add	r7, sp, #24
		char timeString[21];
		char * wd;
	    // Format: YYYY-MM-DD WD HH:MM:SS
		switch (sDate.WeekDay){
 8000fe6:	4b24      	ldr	r3, [pc, #144]	; (8001078 <displayTime+0x98>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b07      	cmp	r3, #7
 8000fec:	d819      	bhi.n	8001022 <displayTime+0x42>
 8000fee:	009a      	lsls	r2, r3, #2
 8000ff0:	4b22      	ldr	r3, [pc, #136]	; (800107c <displayTime+0x9c>)
 8000ff2:	18d3      	adds	r3, r2, r3
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	469f      	mov	pc, r3
		case 1: 	wd="Mo";
 8000ff8:	4b21      	ldr	r3, [pc, #132]	; (8001080 <displayTime+0xa0>)
 8000ffa:	61fb      	str	r3, [r7, #28]
					break;
 8000ffc:	e011      	b.n	8001022 <displayTime+0x42>
		case 2:  	wd="Tu";
 8000ffe:	4b21      	ldr	r3, [pc, #132]	; (8001084 <displayTime+0xa4>)
 8001000:	61fb      	str	r3, [r7, #28]
					break;
 8001002:	e00e      	b.n	8001022 <displayTime+0x42>
		case 3:  	wd="We";
 8001004:	4b20      	ldr	r3, [pc, #128]	; (8001088 <displayTime+0xa8>)
 8001006:	61fb      	str	r3, [r7, #28]
					break;
 8001008:	e00b      	b.n	8001022 <displayTime+0x42>
		case 4:  	wd="Th";
 800100a:	4b20      	ldr	r3, [pc, #128]	; (800108c <displayTime+0xac>)
 800100c:	61fb      	str	r3, [r7, #28]
					break;
 800100e:	e008      	b.n	8001022 <displayTime+0x42>
		case 5:  	wd="Fr";
 8001010:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <displayTime+0xb0>)
 8001012:	61fb      	str	r3, [r7, #28]
					break;
 8001014:	e005      	b.n	8001022 <displayTime+0x42>
		case 6:  	wd="Sa";
 8001016:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <displayTime+0xb4>)
 8001018:	61fb      	str	r3, [r7, #28]
					break;
 800101a:	e002      	b.n	8001022 <displayTime+0x42>
		case 7:  	wd="Su";
 800101c:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <displayTime+0xb8>)
 800101e:	61fb      	str	r3, [r7, #28]
					break;
 8001020:	46c0      	nop			; (mov r8, r8)
		}


	    sprintf(timeString, "%02d:%02d:%02d %s %02d/%02d/%02d",
	    		 // Assuming Year is offset from 2000
				sTime.Hours,
 8001022:	4b1e      	ldr	r3, [pc, #120]	; (800109c <displayTime+0xbc>)
 8001024:	781b      	ldrb	r3, [r3, #0]
	    sprintf(timeString, "%02d:%02d:%02d %s %02d/%02d/%02d",
 8001026:	001e      	movs	r6, r3
				sTime.Minutes,
 8001028:	4b1c      	ldr	r3, [pc, #112]	; (800109c <displayTime+0xbc>)
 800102a:	785b      	ldrb	r3, [r3, #1]
	    sprintf(timeString, "%02d:%02d:%02d %s %02d/%02d/%02d",
 800102c:	469c      	mov	ip, r3
				sTime.Seconds,
 800102e:	4b1b      	ldr	r3, [pc, #108]	; (800109c <displayTime+0xbc>)
 8001030:	789b      	ldrb	r3, [r3, #2]
	    sprintf(timeString, "%02d:%02d:%02d %s %02d/%02d/%02d",
 8001032:	001a      	movs	r2, r3
				wd,
				sDate.Date,
 8001034:	4b10      	ldr	r3, [pc, #64]	; (8001078 <displayTime+0x98>)
 8001036:	789b      	ldrb	r3, [r3, #2]
	    sprintf(timeString, "%02d:%02d:%02d %s %02d/%02d/%02d",
 8001038:	001c      	movs	r4, r3
				sDate.Month,
 800103a:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <displayTime+0x98>)
 800103c:	785b      	ldrb	r3, [r3, #1]
	    sprintf(timeString, "%02d:%02d:%02d %s %02d/%02d/%02d",
 800103e:	001d      	movs	r5, r3
				sDate.Year
 8001040:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <displayTime+0x98>)
 8001042:	78db      	ldrb	r3, [r3, #3]
	    sprintf(timeString, "%02d:%02d:%02d %s %02d/%02d/%02d",
 8001044:	4916      	ldr	r1, [pc, #88]	; (80010a0 <displayTime+0xc0>)
 8001046:	1d38      	adds	r0, r7, #4
 8001048:	9304      	str	r3, [sp, #16]
 800104a:	9503      	str	r5, [sp, #12]
 800104c:	9402      	str	r4, [sp, #8]
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	9200      	str	r2, [sp, #0]
 8001054:	4663      	mov	r3, ip
 8001056:	0032      	movs	r2, r6
 8001058:	f004 fa14 	bl	8005484 <siprintf>
);
		ssd1306_WriteString(timeString, Font_6x8, White);
 800105c:	4a11      	ldr	r2, [pc, #68]	; (80010a4 <displayTime+0xc4>)
 800105e:	1d38      	adds	r0, r7, #4
 8001060:	2301      	movs	r3, #1
 8001062:	6811      	ldr	r1, [r2, #0]
 8001064:	6852      	ldr	r2, [r2, #4]
 8001066:	f000 fe3f 	bl	8001ce8 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800106a:	f000 fd13 	bl	8001a94 <ssd1306_UpdateScreen>
	}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	b009      	add	sp, #36	; 0x24
 8001074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	20000728 	.word	0x20000728
 800107c:	08005e88 	.word	0x08005e88
 8001080:	08005d5c 	.word	0x08005d5c
 8001084:	08005d60 	.word	0x08005d60
 8001088:	08005d64 	.word	0x08005d64
 800108c:	08005d68 	.word	0x08005d68
 8001090:	08005d6c 	.word	0x08005d6c
 8001094:	08005d70 	.word	0x08005d70
 8001098:	08005d74 	.word	0x08005d74
 800109c:	20000714 	.word	0x20000714
 80010a0:	08005d78 	.word	0x08005d78
 80010a4:	200004d4 	.word	0x200004d4

080010a8 <adjustTime>:
	  chTenYears=drCheckTY + '0';
	  chUniYears=drCheckUY + '0';
	}
*/

adjustTime(){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	}
	if(calibTime.currentButton==6)											//IF YEAR (1-99)
	{

	}
}
 80010ac:	46c0      	nop			; (mov r8, r8)
 80010ae:	0018      	movs	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <event>:
char * buf128="10000001100000011000000110000001100000011000000110000001100000011000000110000001100000011000000110000001100000011000000110000001";
char * frameToSend;

void transmitFrame();

void event(){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	switch (currentPage->numberOfPage){
 80010b8:	4b55      	ldr	r3, [pc, #340]	; (8001210 <event+0x15c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b03      	cmp	r3, #3
 80010c0:	d100      	bne.n	80010c4 <event+0x10>
 80010c2:	e099      	b.n	80011f8 <event+0x144>
 80010c4:	d900      	bls.n	80010c8 <event+0x14>
 80010c6:	e09f      	b.n	8001208 <event+0x154>
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d036      	beq.n	800113a <event+0x86>
 80010cc:	d900      	bls.n	80010d0 <event+0x1c>
 80010ce:	e09b      	b.n	8001208 <event+0x154>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d002      	beq.n	80010da <event+0x26>
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d009      	beq.n	80010ec <event+0x38>
		}
	break;}
////////////////////////////////////////////////////////////////////////////////////////
	default:{}
	}
}
 80010d8:	e096      	b.n	8001208 <event+0x154>
		 checkTime();					//DISPLAY TIME AT THE BOTTOM OF THE SCREEN
 80010da:	f7ff ff41 	bl	8000f60 <checkTime>
		 ssd1306_SetCursor(0, 55);
 80010de:	2137      	movs	r1, #55	; 0x37
 80010e0:	2000      	movs	r0, #0
 80010e2:	f000 fe2b 	bl	8001d3c <ssd1306_SetCursor>
		 displayTime();
 80010e6:	f7ff ff7b 	bl	8000fe0 <displayTime>
	break;}
 80010ea:	e08d      	b.n	8001208 <event+0x154>
				if (currentPage->currentButton==0){			//TEST 32
 80010ec:	4b48      	ldr	r3, [pc, #288]	; (8001210 <event+0x15c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	22e8      	movs	r2, #232	; 0xe8
 80010f2:	589b      	ldr	r3, [r3, r2]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d106      	bne.n	8001106 <event+0x52>
					frameToSend=buf32;
 80010f8:	4b46      	ldr	r3, [pc, #280]	; (8001214 <event+0x160>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b46      	ldr	r3, [pc, #280]	; (8001218 <event+0x164>)
 80010fe:	601a      	str	r2, [r3, #0]
					transmitFrame();
 8001100:	f000 f89e 	bl	8001240 <transmitFrame>
	break;}
 8001104:	e07d      	b.n	8001202 <event+0x14e>
		else 	if(currentPage->currentButton==1){			//TEST 64
 8001106:	4b42      	ldr	r3, [pc, #264]	; (8001210 <event+0x15c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	22e8      	movs	r2, #232	; 0xe8
 800110c:	589b      	ldr	r3, [r3, r2]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d106      	bne.n	8001120 <event+0x6c>
					frameToSend=buf64;
 8001112:	4b42      	ldr	r3, [pc, #264]	; (800121c <event+0x168>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4b40      	ldr	r3, [pc, #256]	; (8001218 <event+0x164>)
 8001118:	601a      	str	r2, [r3, #0]
					transmitFrame();
 800111a:	f000 f891 	bl	8001240 <transmitFrame>
	break;}
 800111e:	e070      	b.n	8001202 <event+0x14e>
		else 	if(currentPage->currentButton==2){			//TEST 128
 8001120:	4b3b      	ldr	r3, [pc, #236]	; (8001210 <event+0x15c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	22e8      	movs	r2, #232	; 0xe8
 8001126:	589b      	ldr	r3, [r3, r2]
 8001128:	2b02      	cmp	r3, #2
 800112a:	d16a      	bne.n	8001202 <event+0x14e>
					frameToSend=buf128;
 800112c:	4b3c      	ldr	r3, [pc, #240]	; (8001220 <event+0x16c>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b39      	ldr	r3, [pc, #228]	; (8001218 <event+0x164>)
 8001132:	601a      	str	r2, [r3, #0]
					transmitFrame();
 8001134:	f000 f884 	bl	8001240 <transmitFrame>
	break;}
 8001138:	e063      	b.n	8001202 <event+0x14e>
		if(canChooseButton==1){											//ADJUST TIME SECTIONS
 800113a:	4b3a      	ldr	r3, [pc, #232]	; (8001224 <event+0x170>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d12d      	bne.n	800119e <event+0xea>
			switch(calibTime.currentButton){
 8001142:	4a39      	ldr	r2, [pc, #228]	; (8001228 <event+0x174>)
 8001144:	23f4      	movs	r3, #244	; 0xf4
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	58d3      	ldr	r3, [r2, r3]
 800114a:	2b06      	cmp	r3, #6
 800114c:	d828      	bhi.n	80011a0 <event+0xec>
 800114e:	009a      	lsls	r2, r3, #2
 8001150:	4b36      	ldr	r3, [pc, #216]	; (800122c <event+0x178>)
 8001152:	18d3      	adds	r3, r2, r3
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	469f      	mov	pc, r3
				markSetSPButton();
 8001158:	f7ff fe04 	bl	8000d64 <markSetSPButton>
				adjustTime();
 800115c:	f7ff ffa4 	bl	80010a8 <adjustTime>
				break;
 8001160:	e01e      	b.n	80011a0 <event+0xec>
				markSetSPButton();
 8001162:	f7ff fdff 	bl	8000d64 <markSetSPButton>
				adjustTime();
 8001166:	f7ff ff9f 	bl	80010a8 <adjustTime>
				break;
 800116a:	e019      	b.n	80011a0 <event+0xec>
				markSetSPButton();
 800116c:	f7ff fdfa 	bl	8000d64 <markSetSPButton>
				adjustTime();
 8001170:	f7ff ff9a 	bl	80010a8 <adjustTime>
				break;
 8001174:	e014      	b.n	80011a0 <event+0xec>
				markSetSPButton();
 8001176:	f7ff fdf5 	bl	8000d64 <markSetSPButton>
				adjustTime();
 800117a:	f7ff ff95 	bl	80010a8 <adjustTime>
				break;
 800117e:	e00f      	b.n	80011a0 <event+0xec>
				markSetSPButton();
 8001180:	f7ff fdf0 	bl	8000d64 <markSetSPButton>
				adjustTime();
 8001184:	f7ff ff90 	bl	80010a8 <adjustTime>
				break;
 8001188:	e00a      	b.n	80011a0 <event+0xec>
				markSetSPButton();
 800118a:	f7ff fdeb 	bl	8000d64 <markSetSPButton>
				adjustTime();
 800118e:	f7ff ff8b 	bl	80010a8 <adjustTime>
				break;
 8001192:	e005      	b.n	80011a0 <event+0xec>
				markSetSPButton();
 8001194:	f7ff fde6 	bl	8000d64 <markSetSPButton>
				adjustTime();
 8001198:	f7ff ff86 	bl	80010a8 <adjustTime>
				break;
 800119c:	e000      	b.n	80011a0 <event+0xec>
		}
 800119e:	46c0      	nop			; (mov r8, r8)
		if((currentSubPage->selected==1)){								//NAVIGATE THE BUTTONS
 80011a0:	4b23      	ldr	r3, [pc, #140]	; (8001230 <event+0x17c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d107      	bne.n	80011ba <event+0x106>
			nextOrPrev=CURRENT;
 80011aa:	4b22      	ldr	r3, [pc, #136]	; (8001234 <event+0x180>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
			moveSPCursor();
 80011b0:	f7ff fa86 	bl	80006c0 <moveSPCursor>
			canChooseButton =1;
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <event+0x170>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	601a      	str	r2, [r3, #0]
		if(allowNextSubPage==1){	//SELECT THE SUBPAGE
 80011ba:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <event+0x184>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d106      	bne.n	80011d0 <event+0x11c>
			unselectPage();
 80011c2:	f7ff fc2f 	bl	8000a24 <unselectPage>
			allowNextPage=0;
 80011c6:	4b1d      	ldr	r3, [pc, #116]	; (800123c <event+0x188>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
			selectSubPage();
 80011cc:	f7ff fbbc 	bl	8000948 <selectSubPage>
		if ((currentSubPage->selected==0)){				//ENTER THE SUBPAGE
 80011d0:	4b17      	ldr	r3, [pc, #92]	; (8001230 <event+0x17c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d115      	bne.n	8001206 <event+0x152>
			unselectPage();
 80011da:	f7ff fc23 	bl	8000a24 <unselectPage>
			allowNextPage=0;
 80011de:	4b17      	ldr	r3, [pc, #92]	; (800123c <event+0x188>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
			allowNextSubPage=1;
 80011e4:	4b14      	ldr	r3, [pc, #80]	; (8001238 <event+0x184>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	601a      	str	r2, [r3, #0]
			nextSubPage();
 80011ea:	f7ff f98f 	bl	800050c <nextSubPage>
			currentSubPage->selected=1;
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <event+0x17c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2201      	movs	r2, #1
 80011f4:	605a      	str	r2, [r3, #4]
	break;}
 80011f6:	e006      	b.n	8001206 <event+0x152>
		if((currentPage->selected=0)&&(currentSubPage->selected==1)){
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <event+0x15c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2200      	movs	r2, #0
 80011fe:	605a      	str	r2, [r3, #4]
	break;}
 8001200:	e002      	b.n	8001208 <event+0x154>
	break;}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	e000      	b.n	8001208 <event+0x154>
	break;}
 8001206:	46c0      	nop			; (mov r8, r8)
}
 8001208:	46c0      	nop			; (mov r8, r8)
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	200004b8 	.word	0x200004b8
 8001214:	200004c8 	.word	0x200004c8
 8001218:	20000574 	.word	0x20000574
 800121c:	200004cc 	.word	0x200004cc
 8001220:	200004d0 	.word	0x200004d0
 8001224:	20000570 	.word	0x20000570
 8001228:	200002cc 	.word	0x200002cc
 800122c:	08005ea8 	.word	0x08005ea8
 8001230:	200004bc 	.word	0x200004bc
 8001234:	20000004 	.word	0x20000004
 8001238:	2000056c 	.word	0x2000056c
 800123c:	20000000 	.word	0x20000000

08001240 <transmitFrame>:

void transmitFrame(){
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0

		for (int i=0; i<256; i++){
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	e036      	b.n	80012ba <transmitFrame+0x7a>
			htim14.Instance->CNT=0;
 800124c:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <transmitFrame+0x8c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2200      	movs	r2, #0
 8001252:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start(&htim14);
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <transmitFrame+0x8c>)
 8001256:	0018      	movs	r0, r3
 8001258:	f003 fe30 	bl	8004ebc <HAL_TIM_Base_Start>
			HAL_TIM_Base_Stop(&htim14);
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <transmitFrame+0x8c>)
 800125e:	0018      	movs	r0, r3
 8001260:	f003 fe70 	bl	8004f44 <HAL_TIM_Base_Stop>

			if (frameToSend[i]=='1'){
 8001264:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <transmitFrame+0x90>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	18d3      	adds	r3, r2, r3
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b31      	cmp	r3, #49	; 0x31
 8001270:	d110      	bne.n	8001294 <transmitFrame+0x54>
				HAL_GPIO_WritePin(GPIOA, SYN115_DATA_Pin, GPIO_PIN_SET);
 8001272:	2390      	movs	r3, #144	; 0x90
 8001274:	05db      	lsls	r3, r3, #23
 8001276:	2201      	movs	r2, #1
 8001278:	2104      	movs	r1, #4
 800127a:	0018      	movs	r0, r3
 800127c:	f002 fad2 	bl	8003824 <HAL_GPIO_WritePin>
				for(int i=0; i<150; i++){};}
 8001280:	2300      	movs	r3, #0
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	e002      	b.n	800128c <transmitFrame+0x4c>
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	3301      	adds	r3, #1
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	2b95      	cmp	r3, #149	; 0x95
 8001290:	ddf9      	ble.n	8001286 <transmitFrame+0x46>
 8001292:	e00f      	b.n	80012b4 <transmitFrame+0x74>
			else{
				HAL_GPIO_WritePin(GPIOA, SYN115_DATA_Pin, GPIO_PIN_RESET);
 8001294:	2390      	movs	r3, #144	; 0x90
 8001296:	05db      	lsls	r3, r3, #23
 8001298:	2200      	movs	r2, #0
 800129a:	2104      	movs	r1, #4
 800129c:	0018      	movs	r0, r3
 800129e:	f002 fac1 	bl	8003824 <HAL_GPIO_WritePin>
				for(int i=0; i<150; i++){};}
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	e002      	b.n	80012ae <transmitFrame+0x6e>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3301      	adds	r3, #1
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b95      	cmp	r3, #149	; 0x95
 80012b2:	ddf9      	ble.n	80012a8 <transmitFrame+0x68>
		for (int i=0; i<256; i++){
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	3301      	adds	r3, #1
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2bff      	cmp	r3, #255	; 0xff
 80012be:	ddc5      	ble.n	800124c <transmitFrame+0xc>
		}

}
 80012c0:	46c0      	nop			; (mov r8, r8)
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b004      	add	sp, #16
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	20000684 	.word	0x20000684
 80012d0:	20000574 	.word	0x20000574

080012d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d8:	f001 f9ec 	bl	80026b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012dc:	f000 f834 	bl	8001348 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e0:	f000 f9f2 	bl	80016c8 <MX_GPIO_Init>
  MX_ADC_Init();
 80012e4:	f000 f8bc 	bl	8001460 <MX_ADC_Init>
  MX_RTC_Init();
 80012e8:	f000 f916 	bl	8001518 <MX_RTC_Init>
  MX_SPI1_Init();
 80012ec:	f000 f93c 	bl	8001568 <MX_SPI1_Init>
  MX_TIM7_Init();
 80012f0:	f000 f978 	bl	80015e4 <MX_TIM7_Init>
  MX_TIM14_Init();
 80012f4:	f000 f99a 	bl	800162c <MX_TIM14_Init>
  MX_TIM16_Init();
 80012f8:	f000 f9bc 	bl	8001674 <MX_TIM16_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80012fc:	f000 f892 	bl	8001424 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
		ssd1306_Init();
 8001300:	f000 fb42 	bl	8001988 <ssd1306_Init>
		HAL_TIM_Base_Stop_IT(&htim7);
 8001304:	4b0d      	ldr	r3, [pc, #52]	; (800133c <main+0x68>)
 8001306:	0018      	movs	r0, r3
 8001308:	f003 fe8e 	bl	8005028 <HAL_TIM_Base_Stop_IT>
		htim7.Instance->CNT=0;
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <main+0x68>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2200      	movs	r2, #0
 8001312:	625a      	str	r2, [r3, #36]	; 0x24
		TIM7->SR=0;
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <main+0x6c>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
		extern int nextOrPrev;
		nextOrPrev=CURRENT;
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <main+0x70>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, SYN115_DATA_Pin , GPIO_PIN_RESET);
 8001320:	2390      	movs	r3, #144	; 0x90
 8001322:	05db      	lsls	r3, r3, #23
 8001324:	2200      	movs	r2, #0
 8001326:	2104      	movs	r1, #4
 8001328:	0018      	movs	r0, r3
 800132a:	f002 fa7b 	bl	8003824 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		 HAL_SuspendTick();
 800132e:	f001 fa49 	bl	80027c4 <HAL_SuspendTick>
		 HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001332:	2101      	movs	r1, #1
 8001334:	2001      	movs	r0, #1
 8001336:	f002 fab9 	bl	80038ac <HAL_PWR_EnterSLEEPMode>
		 HAL_SuspendTick();
 800133a:	e7f8      	b.n	800132e <main+0x5a>
 800133c:	2000063c 	.word	0x2000063c
 8001340:	40001400 	.word	0x40001400
 8001344:	20000004 	.word	0x20000004

08001348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001348:	b590      	push	{r4, r7, lr}
 800134a:	b095      	sub	sp, #84	; 0x54
 800134c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134e:	2420      	movs	r4, #32
 8001350:	193b      	adds	r3, r7, r4
 8001352:	0018      	movs	r0, r3
 8001354:	2330      	movs	r3, #48	; 0x30
 8001356:	001a      	movs	r2, r3
 8001358:	2100      	movs	r1, #0
 800135a:	f004 f88a 	bl	8005472 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800135e:	2310      	movs	r3, #16
 8001360:	18fb      	adds	r3, r7, r3
 8001362:	0018      	movs	r0, r3
 8001364:	2310      	movs	r3, #16
 8001366:	001a      	movs	r2, r3
 8001368:	2100      	movs	r1, #0
 800136a:	f004 f882 	bl	8005472 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800136e:	003b      	movs	r3, r7
 8001370:	0018      	movs	r0, r3
 8001372:	2310      	movs	r3, #16
 8001374:	001a      	movs	r2, r3
 8001376:	2100      	movs	r1, #0
 8001378:	f004 f87b 	bl	8005472 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 800137c:	0021      	movs	r1, r4
 800137e:	187b      	adds	r3, r7, r1
 8001380:	221a      	movs	r2, #26
 8001382:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001384:	187b      	adds	r3, r7, r1
 8001386:	2201      	movs	r2, #1
 8001388:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800138a:	187b      	adds	r3, r7, r1
 800138c:	2201      	movs	r2, #1
 800138e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001390:	187b      	adds	r3, r7, r1
 8001392:	2210      	movs	r2, #16
 8001394:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001396:	187b      	adds	r3, r7, r1
 8001398:	2210      	movs	r2, #16
 800139a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800139c:	187b      	adds	r3, r7, r1
 800139e:	2201      	movs	r2, #1
 80013a0:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a2:	187b      	adds	r3, r7, r1
 80013a4:	2202      	movs	r2, #2
 80013a6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013a8:	187b      	adds	r3, r7, r1
 80013aa:	2280      	movs	r2, #128	; 0x80
 80013ac:	0212      	lsls	r2, r2, #8
 80013ae:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80013b0:	187b      	adds	r3, r7, r1
 80013b2:	2280      	movs	r2, #128	; 0x80
 80013b4:	0352      	lsls	r2, r2, #13
 80013b6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80013b8:	187b      	adds	r3, r7, r1
 80013ba:	2200      	movs	r2, #0
 80013bc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013be:	187b      	adds	r3, r7, r1
 80013c0:	0018      	movs	r0, r3
 80013c2:	f002 fa8f 	bl	80038e4 <HAL_RCC_OscConfig>
 80013c6:	1e03      	subs	r3, r0, #0
 80013c8:	d001      	beq.n	80013ce <SystemClock_Config+0x86>
  {
    Error_Handler();
 80013ca:	f000 fa67 	bl	800189c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ce:	2110      	movs	r1, #16
 80013d0:	187b      	adds	r3, r7, r1
 80013d2:	2207      	movs	r2, #7
 80013d4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d6:	187b      	adds	r3, r7, r1
 80013d8:	2202      	movs	r2, #2
 80013da:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013dc:	187b      	adds	r3, r7, r1
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80013e2:	187b      	adds	r3, r7, r1
 80013e4:	22e0      	movs	r2, #224	; 0xe0
 80013e6:	00d2      	lsls	r2, r2, #3
 80013e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013ea:	187b      	adds	r3, r7, r1
 80013ec:	2101      	movs	r1, #1
 80013ee:	0018      	movs	r0, r3
 80013f0:	f002 fd96 	bl	8003f20 <HAL_RCC_ClockConfig>
 80013f4:	1e03      	subs	r3, r0, #0
 80013f6:	d001      	beq.n	80013fc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80013f8:	f000 fa50 	bl	800189c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80013fc:	003b      	movs	r3, r7
 80013fe:	2280      	movs	r2, #128	; 0x80
 8001400:	0252      	lsls	r2, r2, #9
 8001402:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001404:	003b      	movs	r3, r7
 8001406:	2280      	movs	r2, #128	; 0x80
 8001408:	0092      	lsls	r2, r2, #2
 800140a:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800140c:	003b      	movs	r3, r7
 800140e:	0018      	movs	r0, r3
 8001410:	f002 feae 	bl	8004170 <HAL_RCCEx_PeriphCLKConfig>
 8001414:	1e03      	subs	r3, r0, #0
 8001416:	d001      	beq.n	800141c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001418:	f000 fa40 	bl	800189c <Error_Handler>
  }
}
 800141c:	46c0      	nop			; (mov r8, r8)
 800141e:	46bd      	mov	sp, r7
 8001420:	b015      	add	sp, #84	; 0x54
 8001422:	bd90      	pop	{r4, r7, pc}

08001424 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* EXTI4_15_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8001428:	2200      	movs	r2, #0
 800142a:	2101      	movs	r1, #1
 800142c:	2007      	movs	r0, #7
 800142e:	f002 f847 	bl	80034c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001432:	2007      	movs	r0, #7
 8001434:	f002 f859 	bl	80034ea <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 8001438:	2200      	movs	r2, #0
 800143a:	2102      	movs	r1, #2
 800143c:	2012      	movs	r0, #18
 800143e:	f002 f83f 	bl	80034c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001442:	2012      	movs	r0, #18
 8001444:	f002 f851 	bl	80034ea <HAL_NVIC_EnableIRQ>
  /* ADC1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC1_IRQn, 3, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	2103      	movs	r1, #3
 800144c:	200c      	movs	r0, #12
 800144e:	f002 f837 	bl	80034c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001452:	200c      	movs	r0, #12
 8001454:	f002 f849 	bl	80034ea <HAL_NVIC_EnableIRQ>
}
 8001458:	46c0      	nop			; (mov r8, r8)
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	0018      	movs	r0, r3
 800146a:	230c      	movs	r3, #12
 800146c:	001a      	movs	r2, r3
 800146e:	2100      	movs	r1, #0
 8001470:	f003 ffff 	bl	8005472 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001474:	4b26      	ldr	r3, [pc, #152]	; (8001510 <MX_ADC_Init+0xb0>)
 8001476:	4a27      	ldr	r2, [pc, #156]	; (8001514 <MX_ADC_Init+0xb4>)
 8001478:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800147a:	4b25      	ldr	r3, [pc, #148]	; (8001510 <MX_ADC_Init+0xb0>)
 800147c:	2200      	movs	r2, #0
 800147e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_6B;
 8001480:	4b23      	ldr	r3, [pc, #140]	; (8001510 <MX_ADC_Init+0xb0>)
 8001482:	2218      	movs	r2, #24
 8001484:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001486:	4b22      	ldr	r3, [pc, #136]	; (8001510 <MX_ADC_Init+0xb0>)
 8001488:	2200      	movs	r2, #0
 800148a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800148c:	4b20      	ldr	r3, [pc, #128]	; (8001510 <MX_ADC_Init+0xb0>)
 800148e:	2201      	movs	r2, #1
 8001490:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001492:	4b1f      	ldr	r3, [pc, #124]	; (8001510 <MX_ADC_Init+0xb0>)
 8001494:	2204      	movs	r2, #4
 8001496:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001498:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <MX_ADC_Init+0xb0>)
 800149a:	2200      	movs	r2, #0
 800149c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800149e:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <MX_ADC_Init+0xb0>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80014a4:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <MX_ADC_Init+0xb0>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80014aa:	4b19      	ldr	r3, [pc, #100]	; (8001510 <MX_ADC_Init+0xb0>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014b0:	4b17      	ldr	r3, [pc, #92]	; (8001510 <MX_ADC_Init+0xb0>)
 80014b2:	22c2      	movs	r2, #194	; 0xc2
 80014b4:	32ff      	adds	r2, #255	; 0xff
 80014b6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014b8:	4b15      	ldr	r3, [pc, #84]	; (8001510 <MX_ADC_Init+0xb0>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80014be:	4b14      	ldr	r3, [pc, #80]	; (8001510 <MX_ADC_Init+0xb0>)
 80014c0:	2224      	movs	r2, #36	; 0x24
 80014c2:	2100      	movs	r1, #0
 80014c4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <MX_ADC_Init+0xb0>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80014cc:	4b10      	ldr	r3, [pc, #64]	; (8001510 <MX_ADC_Init+0xb0>)
 80014ce:	0018      	movs	r0, r3
 80014d0:	f001 f994 	bl	80027fc <HAL_ADC_Init>
 80014d4:	1e03      	subs	r3, r0, #0
 80014d6:	d001      	beq.n	80014dc <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80014d8:	f000 f9e0 	bl	800189c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	2209      	movs	r2, #9
 80014e0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	2280      	movs	r2, #128	; 0x80
 80014e6:	0152      	lsls	r2, r2, #5
 80014e8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2280      	movs	r2, #128	; 0x80
 80014ee:	0552      	lsls	r2, r2, #21
 80014f0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014f2:	1d3a      	adds	r2, r7, #4
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_ADC_Init+0xb0>)
 80014f6:	0011      	movs	r1, r2
 80014f8:	0018      	movs	r0, r3
 80014fa:	f001 fcdb 	bl	8002eb4 <HAL_ADC_ConfigChannel>
 80014fe:	1e03      	subs	r3, r0, #0
 8001500:	d001      	beq.n	8001506 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8001502:	f000 f9cb 	bl	800189c <Error_Handler>
  /* USER CODE BEGIN ADC_Init 2 */
 // HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 // HAL_NVIC_EnableIRQ(ADC1_IRQn);
  /* USER CODE END ADC_Init 2 */

}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	46bd      	mov	sp, r7
 800150a:	b004      	add	sp, #16
 800150c:	bd80      	pop	{r7, pc}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	20000578 	.word	0x20000578
 8001514:	40012400 	.word	0x40012400

08001518 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
#endif
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800151c:	4b10      	ldr	r3, [pc, #64]	; (8001560 <MX_RTC_Init+0x48>)
 800151e:	4a11      	ldr	r2, [pc, #68]	; (8001564 <MX_RTC_Init+0x4c>)
 8001520:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <MX_RTC_Init+0x48>)
 8001524:	2200      	movs	r2, #0
 8001526:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001528:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <MX_RTC_Init+0x48>)
 800152a:	227f      	movs	r2, #127	; 0x7f
 800152c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 299;
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <MX_RTC_Init+0x48>)
 8001530:	222c      	movs	r2, #44	; 0x2c
 8001532:	32ff      	adds	r2, #255	; 0xff
 8001534:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001536:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <MX_RTC_Init+0x48>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <MX_RTC_Init+0x48>)
 800153e:	2200      	movs	r2, #0
 8001540:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001542:	4b07      	ldr	r3, [pc, #28]	; (8001560 <MX_RTC_Init+0x48>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <MX_RTC_Init+0x48>)
 800154a:	0018      	movs	r0, r3
 800154c:	f002 fede 	bl	800430c <HAL_RTC_Init>
 8001550:	1e03      	subs	r3, r0, #0
 8001552:	d001      	beq.n	8001558 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8001554:	f000 f9a2 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
#endif
  /* USER CODE END RTC_Init 2 */

}
 8001558:	46c0      	nop			; (mov r8, r8)
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	200005b8 	.word	0x200005b8
 8001564:	40002800 	.word	0x40002800

08001568 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800156c:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <MX_SPI1_Init+0x74>)
 800156e:	4a1c      	ldr	r2, [pc, #112]	; (80015e0 <MX_SPI1_Init+0x78>)
 8001570:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <MX_SPI1_Init+0x74>)
 8001574:	2282      	movs	r2, #130	; 0x82
 8001576:	0052      	lsls	r2, r2, #1
 8001578:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <MX_SPI1_Init+0x74>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <MX_SPI1_Init+0x74>)
 8001582:	22e0      	movs	r2, #224	; 0xe0
 8001584:	00d2      	lsls	r2, r2, #3
 8001586:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <MX_SPI1_Init+0x74>)
 800158a:	2200      	movs	r2, #0
 800158c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800158e:	4b13      	ldr	r3, [pc, #76]	; (80015dc <MX_SPI1_Init+0x74>)
 8001590:	2200      	movs	r2, #0
 8001592:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_SPI1_Init+0x74>)
 8001596:	2280      	movs	r2, #128	; 0x80
 8001598:	0092      	lsls	r2, r2, #2
 800159a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_SPI1_Init+0x74>)
 800159e:	2210      	movs	r2, #16
 80015a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_SPI1_Init+0x74>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_SPI1_Init+0x74>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <MX_SPI1_Init+0x74>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_SPI1_Init+0x74>)
 80015b6:	2207      	movs	r2, #7
 80015b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <MX_SPI1_Init+0x74>)
 80015bc:	2200      	movs	r2, #0
 80015be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_SPI1_Init+0x74>)
 80015c2:	2208      	movs	r2, #8
 80015c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015c6:	4b05      	ldr	r3, [pc, #20]	; (80015dc <MX_SPI1_Init+0x74>)
 80015c8:	0018      	movs	r0, r3
 80015ca:	f003 f899 	bl	8004700 <HAL_SPI_Init>
 80015ce:	1e03      	subs	r3, r0, #0
 80015d0:	d001      	beq.n	80015d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015d2:	f000 f963 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	200005d8 	.word	0x200005d8
 80015e0:	40013000 	.word	0x40013000

080015e4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM7_Init 0 */

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <MX_TIM7_Init+0x38>)
 80015ea:	4a0d      	ldr	r2, [pc, #52]	; (8001620 <MX_TIM7_Init+0x3c>)
 80015ec:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 6000;
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <MX_TIM7_Init+0x38>)
 80015f0:	4a0c      	ldr	r2, [pc, #48]	; (8001624 <MX_TIM7_Init+0x40>)
 80015f2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <MX_TIM7_Init+0x38>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000;
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <MX_TIM7_Init+0x38>)
 80015fc:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <MX_TIM7_Init+0x44>)
 80015fe:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_TIM7_Init+0x38>)
 8001602:	2200      	movs	r2, #0
 8001604:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001606:	4b05      	ldr	r3, [pc, #20]	; (800161c <MX_TIM7_Init+0x38>)
 8001608:	0018      	movs	r0, r3
 800160a:	f003 fc07 	bl	8004e1c <HAL_TIM_Base_Init>
 800160e:	1e03      	subs	r3, r0, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM7_Init+0x32>
  {
    Error_Handler();
 8001612:	f000 f943 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	2000063c 	.word	0x2000063c
 8001620:	40001400 	.word	0x40001400
 8001624:	00001770 	.word	0x00001770
 8001628:	00001388 	.word	0x00001388

0800162c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001630:	4b0e      	ldr	r3, [pc, #56]	; (800166c <MX_TIM14_Init+0x40>)
 8001632:	4a0f      	ldr	r2, [pc, #60]	; (8001670 <MX_TIM14_Init+0x44>)
 8001634:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 600;
 8001636:	4b0d      	ldr	r3, [pc, #52]	; (800166c <MX_TIM14_Init+0x40>)
 8001638:	2296      	movs	r2, #150	; 0x96
 800163a:	0092      	lsls	r2, r2, #2
 800163c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <MX_TIM14_Init+0x40>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1;
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <MX_TIM14_Init+0x40>)
 8001646:	2201      	movs	r2, #1
 8001648:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <MX_TIM14_Init+0x40>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <MX_TIM14_Init+0x40>)
 8001652:	2280      	movs	r2, #128	; 0x80
 8001654:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <MX_TIM14_Init+0x40>)
 8001658:	0018      	movs	r0, r3
 800165a:	f003 fbdf 	bl	8004e1c <HAL_TIM_Base_Init>
 800165e:	1e03      	subs	r3, r0, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8001662:	f000 f91b 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001666:	46c0      	nop			; (mov r8, r8)
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000684 	.word	0x20000684
 8001670:	40002000 	.word	0x40002000

08001674 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <MX_TIM16_Init+0x44>)
 800167a:	4a10      	ldr	r2, [pc, #64]	; (80016bc <MX_TIM16_Init+0x48>)
 800167c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48000;
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <MX_TIM16_Init+0x44>)
 8001680:	4a0f      	ldr	r2, [pc, #60]	; (80016c0 <MX_TIM16_Init+0x4c>)
 8001682:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <MX_TIM16_Init+0x44>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <MX_TIM16_Init+0x44>)
 800168c:	4a0d      	ldr	r2, [pc, #52]	; (80016c4 <MX_TIM16_Init+0x50>)
 800168e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_TIM16_Init+0x44>)
 8001692:	2200      	movs	r2, #0
 8001694:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <MX_TIM16_Init+0x44>)
 8001698:	2200      	movs	r2, #0
 800169a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <MX_TIM16_Init+0x44>)
 800169e:	2200      	movs	r2, #0
 80016a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80016a2:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <MX_TIM16_Init+0x44>)
 80016a4:	0018      	movs	r0, r3
 80016a6:	f003 fbb9 	bl	8004e1c <HAL_TIM_Base_Init>
 80016aa:	1e03      	subs	r3, r0, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80016ae:	f000 f8f5 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	200006cc 	.word	0x200006cc
 80016bc:	40014400 	.word	0x40014400
 80016c0:	0000bb80 	.word	0x0000bb80
 80016c4:	0000ffff 	.word	0x0000ffff

080016c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b08b      	sub	sp, #44	; 0x2c
 80016cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ce:	2414      	movs	r4, #20
 80016d0:	193b      	adds	r3, r7, r4
 80016d2:	0018      	movs	r0, r3
 80016d4:	2314      	movs	r3, #20
 80016d6:	001a      	movs	r2, r3
 80016d8:	2100      	movs	r1, #0
 80016da:	f003 feca 	bl	8005472 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016de:	4b69      	ldr	r3, [pc, #420]	; (8001884 <MX_GPIO_Init+0x1bc>)
 80016e0:	695a      	ldr	r2, [r3, #20]
 80016e2:	4b68      	ldr	r3, [pc, #416]	; (8001884 <MX_GPIO_Init+0x1bc>)
 80016e4:	2180      	movs	r1, #128	; 0x80
 80016e6:	0309      	lsls	r1, r1, #12
 80016e8:	430a      	orrs	r2, r1
 80016ea:	615a      	str	r2, [r3, #20]
 80016ec:	4b65      	ldr	r3, [pc, #404]	; (8001884 <MX_GPIO_Init+0x1bc>)
 80016ee:	695a      	ldr	r2, [r3, #20]
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	031b      	lsls	r3, r3, #12
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016fa:	4b62      	ldr	r3, [pc, #392]	; (8001884 <MX_GPIO_Init+0x1bc>)
 80016fc:	695a      	ldr	r2, [r3, #20]
 80016fe:	4b61      	ldr	r3, [pc, #388]	; (8001884 <MX_GPIO_Init+0x1bc>)
 8001700:	2180      	movs	r1, #128	; 0x80
 8001702:	03c9      	lsls	r1, r1, #15
 8001704:	430a      	orrs	r2, r1
 8001706:	615a      	str	r2, [r3, #20]
 8001708:	4b5e      	ldr	r3, [pc, #376]	; (8001884 <MX_GPIO_Init+0x1bc>)
 800170a:	695a      	ldr	r2, [r3, #20]
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	03db      	lsls	r3, r3, #15
 8001710:	4013      	ands	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001716:	4b5b      	ldr	r3, [pc, #364]	; (8001884 <MX_GPIO_Init+0x1bc>)
 8001718:	695a      	ldr	r2, [r3, #20]
 800171a:	4b5a      	ldr	r3, [pc, #360]	; (8001884 <MX_GPIO_Init+0x1bc>)
 800171c:	2180      	movs	r1, #128	; 0x80
 800171e:	0289      	lsls	r1, r1, #10
 8001720:	430a      	orrs	r2, r1
 8001722:	615a      	str	r2, [r3, #20]
 8001724:	4b57      	ldr	r3, [pc, #348]	; (8001884 <MX_GPIO_Init+0x1bc>)
 8001726:	695a      	ldr	r2, [r3, #20]
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	029b      	lsls	r3, r3, #10
 800172c:	4013      	ands	r3, r2
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001732:	4b54      	ldr	r3, [pc, #336]	; (8001884 <MX_GPIO_Init+0x1bc>)
 8001734:	695a      	ldr	r2, [r3, #20]
 8001736:	4b53      	ldr	r3, [pc, #332]	; (8001884 <MX_GPIO_Init+0x1bc>)
 8001738:	2180      	movs	r1, #128	; 0x80
 800173a:	02c9      	lsls	r1, r1, #11
 800173c:	430a      	orrs	r2, r1
 800173e:	615a      	str	r2, [r3, #20]
 8001740:	4b50      	ldr	r3, [pc, #320]	; (8001884 <MX_GPIO_Init+0x1bc>)
 8001742:	695a      	ldr	r2, [r3, #20]
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	02db      	lsls	r3, r3, #11
 8001748:	4013      	ands	r3, r2
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SYN115_DATA_Pin|SPI_RST_Pin|SPI_CS_Pin|SPI_DC_Pin, GPIO_PIN_RESET);
 800174e:	2390      	movs	r3, #144	; 0x90
 8001750:	05db      	lsls	r3, r3, #23
 8001752:	2200      	movs	r2, #0
 8001754:	215c      	movs	r1, #92	; 0x5c
 8001756:	0018      	movs	r0, r3
 8001758:	f002 f864 	bl	8003824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800175c:	4b4a      	ldr	r3, [pc, #296]	; (8001888 <MX_GPIO_Init+0x1c0>)
 800175e:	2200      	movs	r2, #0
 8001760:	2101      	movs	r1, #1
 8001762:	0018      	movs	r0, r3
 8001764:	f002 f85e 	bl	8003824 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001768:	193b      	adds	r3, r7, r4
 800176a:	22c0      	movs	r2, #192	; 0xc0
 800176c:	0212      	lsls	r2, r2, #8
 800176e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001770:	193b      	adds	r3, r7, r4
 8001772:	2203      	movs	r2, #3
 8001774:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	193b      	adds	r3, r7, r4
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177c:	193b      	adds	r3, r7, r4
 800177e:	4a43      	ldr	r2, [pc, #268]	; (800188c <MX_GPIO_Init+0x1c4>)
 8001780:	0019      	movs	r1, r3
 8001782:	0010      	movs	r0, r2
 8001784:	f001 fede 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001788:	193b      	adds	r3, r7, r4
 800178a:	2203      	movs	r2, #3
 800178c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800178e:	193b      	adds	r3, r7, r4
 8001790:	2203      	movs	r2, #3
 8001792:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	193b      	adds	r3, r7, r4
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800179a:	193b      	adds	r3, r7, r4
 800179c:	4a3c      	ldr	r2, [pc, #240]	; (8001890 <MX_GPIO_Init+0x1c8>)
 800179e:	0019      	movs	r1, r3
 80017a0:	0010      	movs	r0, r2
 80017a2:	f001 fecf 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_10
 80017a6:	193b      	adds	r3, r7, r4
 80017a8:	4a3a      	ldr	r2, [pc, #232]	; (8001894 <MX_GPIO_Init+0x1cc>)
 80017aa:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ac:	193b      	adds	r3, r7, r4
 80017ae:	2203      	movs	r2, #3
 80017b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	193b      	adds	r3, r7, r4
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b8:	193a      	adds	r2, r7, r4
 80017ba:	2390      	movs	r3, #144	; 0x90
 80017bc:	05db      	lsls	r3, r3, #23
 80017be:	0011      	movs	r1, r2
 80017c0:	0018      	movs	r0, r3
 80017c2:	f001 febf 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pin : SYN115_DATA_Pin */
  GPIO_InitStruct.Pin = SYN115_DATA_Pin;
 80017c6:	193b      	adds	r3, r7, r4
 80017c8:	2204      	movs	r2, #4
 80017ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017cc:	193b      	adds	r3, r7, r4
 80017ce:	2201      	movs	r2, #1
 80017d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	193b      	adds	r3, r7, r4
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d8:	193b      	adds	r3, r7, r4
 80017da:	2203      	movs	r2, #3
 80017dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SYN115_DATA_GPIO_Port, &GPIO_InitStruct);
 80017de:	193a      	adds	r2, r7, r4
 80017e0:	2390      	movs	r3, #144	; 0x90
 80017e2:	05db      	lsls	r3, r3, #23
 80017e4:	0011      	movs	r1, r2
 80017e6:	0018      	movs	r0, r3
 80017e8:	f001 feac 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_RST_Pin SPI_CS_Pin SPI_DC_Pin */
  GPIO_InitStruct.Pin = SPI_RST_Pin|SPI_CS_Pin|SPI_DC_Pin;
 80017ec:	193b      	adds	r3, r7, r4
 80017ee:	2258      	movs	r2, #88	; 0x58
 80017f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f2:	193b      	adds	r3, r7, r4
 80017f4:	2201      	movs	r2, #1
 80017f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	193b      	adds	r3, r7, r4
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	193b      	adds	r3, r7, r4
 8001800:	2200      	movs	r2, #0
 8001802:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	193a      	adds	r2, r7, r4
 8001806:	2390      	movs	r3, #144	; 0x90
 8001808:	05db      	lsls	r3, r3, #23
 800180a:	0011      	movs	r1, r2
 800180c:	0018      	movs	r0, r3
 800180e:	f001 fe99 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8001812:	193b      	adds	r3, r7, r4
 8001814:	2201      	movs	r2, #1
 8001816:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001818:	193b      	adds	r3, r7, r4
 800181a:	2201      	movs	r2, #1
 800181c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	193b      	adds	r3, r7, r4
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001824:	193b      	adds	r3, r7, r4
 8001826:	2200      	movs	r2, #0
 8001828:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800182a:	193b      	adds	r3, r7, r4
 800182c:	4a16      	ldr	r2, [pc, #88]	; (8001888 <MX_GPIO_Init+0x1c0>)
 800182e:	0019      	movs	r1, r3
 8001830:	0010      	movs	r0, r2
 8001832:	f001 fe87 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB12
                           PB13 PB14 PB15 PB3
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001836:	193b      	adds	r3, r7, r4
 8001838:	4a17      	ldr	r2, [pc, #92]	; (8001898 <MX_GPIO_Init+0x1d0>)
 800183a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800183c:	193b      	adds	r3, r7, r4
 800183e:	2203      	movs	r2, #3
 8001840:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	193b      	adds	r3, r7, r4
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001848:	193b      	adds	r3, r7, r4
 800184a:	4a0f      	ldr	r2, [pc, #60]	; (8001888 <MX_GPIO_Init+0x1c0>)
 800184c:	0019      	movs	r1, r3
 800184e:	0010      	movs	r0, r2
 8001850:	f001 fe78 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001854:	0021      	movs	r1, r4
 8001856:	187b      	adds	r3, r7, r1
 8001858:	2280      	movs	r2, #128	; 0x80
 800185a:	0092      	lsls	r2, r2, #2
 800185c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800185e:	187b      	adds	r3, r7, r1
 8001860:	2284      	movs	r2, #132	; 0x84
 8001862:	0392      	lsls	r2, r2, #14
 8001864:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001866:	187b      	adds	r3, r7, r1
 8001868:	2201      	movs	r2, #1
 800186a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186c:	187a      	adds	r2, r7, r1
 800186e:	2390      	movs	r3, #144	; 0x90
 8001870:	05db      	lsls	r3, r3, #23
 8001872:	0011      	movs	r1, r2
 8001874:	0018      	movs	r0, r3
 8001876:	f001 fe65 	bl	8003544 <HAL_GPIO_Init>

}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	46bd      	mov	sp, r7
 800187e:	b00b      	add	sp, #44	; 0x2c
 8001880:	bd90      	pop	{r4, r7, pc}
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	40021000 	.word	0x40021000
 8001888:	48000400 	.word	0x48000400
 800188c:	48000800 	.word	0x48000800
 8001890:	48001400 	.word	0x48001400
 8001894:	00009d03 	.word	0x00009d03
 8001898:	0000fffc 	.word	0x0000fffc

0800189c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a0:	b672      	cpsid	i
}
 80018a2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <Error_Handler+0x8>

080018a6 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 80018a6:	b580      	push	{r7, lr}
 80018a8:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 80018aa:	2390      	movs	r3, #144	; 0x90
 80018ac:	05db      	lsls	r3, r3, #23
 80018ae:	2201      	movs	r2, #1
 80018b0:	2110      	movs	r1, #16
 80018b2:	0018      	movs	r0, r3
 80018b4:	f001 ffb6 	bl	8003824 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 80018b8:	2390      	movs	r3, #144	; 0x90
 80018ba:	05db      	lsls	r3, r3, #23
 80018bc:	2200      	movs	r2, #0
 80018be:	2108      	movs	r1, #8
 80018c0:	0018      	movs	r0, r3
 80018c2:	f001 ffaf 	bl	8003824 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80018c6:	200a      	movs	r0, #10
 80018c8:	f000 ff58 	bl	800277c <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 80018cc:	2390      	movs	r3, #144	; 0x90
 80018ce:	05db      	lsls	r3, r3, #23
 80018d0:	2201      	movs	r2, #1
 80018d2:	2108      	movs	r1, #8
 80018d4:	0018      	movs	r0, r3
 80018d6:	f001 ffa5 	bl	8003824 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80018da:	200a      	movs	r0, #10
 80018dc:	f000 ff4e 	bl	800277c <HAL_Delay>
}
 80018e0:	46c0      	nop			; (mov r8, r8)
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	0002      	movs	r2, r0
 80018f0:	1dfb      	adds	r3, r7, #7
 80018f2:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 80018f4:	2390      	movs	r3, #144	; 0x90
 80018f6:	05db      	lsls	r3, r3, #23
 80018f8:	2200      	movs	r2, #0
 80018fa:	2110      	movs	r1, #16
 80018fc:	0018      	movs	r0, r3
 80018fe:	f001 ff91 	bl	8003824 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8001902:	2390      	movs	r3, #144	; 0x90
 8001904:	05db      	lsls	r3, r3, #23
 8001906:	2200      	movs	r2, #0
 8001908:	2140      	movs	r1, #64	; 0x40
 800190a:	0018      	movs	r0, r3
 800190c:	f001 ff8a 	bl	8003824 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8001910:	2301      	movs	r3, #1
 8001912:	425b      	negs	r3, r3
 8001914:	1df9      	adds	r1, r7, #7
 8001916:	4807      	ldr	r0, [pc, #28]	; (8001934 <ssd1306_WriteCommand+0x4c>)
 8001918:	2201      	movs	r2, #1
 800191a:	f002 ffa9 	bl	8004870 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 800191e:	2390      	movs	r3, #144	; 0x90
 8001920:	05db      	lsls	r3, r3, #23
 8001922:	2201      	movs	r2, #1
 8001924:	2110      	movs	r1, #16
 8001926:	0018      	movs	r0, r3
 8001928:	f001 ff7c 	bl	8003824 <HAL_GPIO_WritePin>
}
 800192c:	46c0      	nop			; (mov r8, r8)
 800192e:	46bd      	mov	sp, r7
 8001930:	b002      	add	sp, #8
 8001932:	bd80      	pop	{r7, pc}
 8001934:	200005d8 	.word	0x200005d8

08001938 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8001942:	2390      	movs	r3, #144	; 0x90
 8001944:	05db      	lsls	r3, r3, #23
 8001946:	2200      	movs	r2, #0
 8001948:	2110      	movs	r1, #16
 800194a:	0018      	movs	r0, r3
 800194c:	f001 ff6a 	bl	8003824 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8001950:	2390      	movs	r3, #144	; 0x90
 8001952:	05db      	lsls	r3, r3, #23
 8001954:	2201      	movs	r2, #1
 8001956:	2140      	movs	r1, #64	; 0x40
 8001958:	0018      	movs	r0, r3
 800195a:	f001 ff63 	bl	8003824 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	b29a      	uxth	r2, r3
 8001962:	2301      	movs	r3, #1
 8001964:	425b      	negs	r3, r3
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	4806      	ldr	r0, [pc, #24]	; (8001984 <ssd1306_WriteData+0x4c>)
 800196a:	f002 ff81 	bl	8004870 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 800196e:	2390      	movs	r3, #144	; 0x90
 8001970:	05db      	lsls	r3, r3, #23
 8001972:	2201      	movs	r2, #1
 8001974:	2110      	movs	r1, #16
 8001976:	0018      	movs	r0, r3
 8001978:	f001 ff54 	bl	8003824 <HAL_GPIO_WritePin>
}
 800197c:	46c0      	nop			; (mov r8, r8)
 800197e:	46bd      	mov	sp, r7
 8001980:	b002      	add	sp, #8
 8001982:	bd80      	pop	{r7, pc}
 8001984:	200005d8 	.word	0x200005d8

08001988 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800198c:	f7ff ff8b 	bl	80018a6 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001990:	2064      	movs	r0, #100	; 0x64
 8001992:	f000 fef3 	bl	800277c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001996:	2000      	movs	r0, #0
 8001998:	f000 fb64 	bl	8002064 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800199c:	2020      	movs	r0, #32
 800199e:	f7ff ffa3 	bl	80018e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80019a2:	2000      	movs	r0, #0
 80019a4:	f7ff ffa0 	bl	80018e8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80019a8:	20b0      	movs	r0, #176	; 0xb0
 80019aa:	f7ff ff9d 	bl	80018e8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80019ae:	20c8      	movs	r0, #200	; 0xc8
 80019b0:	f7ff ff9a 	bl	80018e8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80019b4:	2000      	movs	r0, #0
 80019b6:	f7ff ff97 	bl	80018e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80019ba:	2010      	movs	r0, #16
 80019bc:	f7ff ff94 	bl	80018e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80019c0:	2040      	movs	r0, #64	; 0x40
 80019c2:	f7ff ff91 	bl	80018e8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80019c6:	20ff      	movs	r0, #255	; 0xff
 80019c8:	f000 fb33 	bl	8002032 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80019cc:	20a1      	movs	r0, #161	; 0xa1
 80019ce:	f7ff ff8b 	bl	80018e8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80019d2:	20a6      	movs	r0, #166	; 0xa6
 80019d4:	f7ff ff88 	bl	80018e8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80019d8:	20a8      	movs	r0, #168	; 0xa8
 80019da:	f7ff ff85 	bl	80018e8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80019de:	203f      	movs	r0, #63	; 0x3f
 80019e0:	f7ff ff82 	bl	80018e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80019e4:	20a4      	movs	r0, #164	; 0xa4
 80019e6:	f7ff ff7f 	bl	80018e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80019ea:	20d3      	movs	r0, #211	; 0xd3
 80019ec:	f7ff ff7c 	bl	80018e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80019f0:	2000      	movs	r0, #0
 80019f2:	f7ff ff79 	bl	80018e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80019f6:	20d5      	movs	r0, #213	; 0xd5
 80019f8:	f7ff ff76 	bl	80018e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80019fc:	20f0      	movs	r0, #240	; 0xf0
 80019fe:	f7ff ff73 	bl	80018e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001a02:	20d9      	movs	r0, #217	; 0xd9
 8001a04:	f7ff ff70 	bl	80018e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001a08:	2022      	movs	r0, #34	; 0x22
 8001a0a:	f7ff ff6d 	bl	80018e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001a0e:	20da      	movs	r0, #218	; 0xda
 8001a10:	f7ff ff6a 	bl	80018e8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001a14:	2012      	movs	r0, #18
 8001a16:	f7ff ff67 	bl	80018e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001a1a:	20db      	movs	r0, #219	; 0xdb
 8001a1c:	f7ff ff64 	bl	80018e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001a20:	2020      	movs	r0, #32
 8001a22:	f7ff ff61 	bl	80018e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001a26:	208d      	movs	r0, #141	; 0x8d
 8001a28:	f7ff ff5e 	bl	80018e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001a2c:	2014      	movs	r0, #20
 8001a2e:	f7ff ff5b 	bl	80018e8 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8001a32:	2000      	movs	r0, #0
 8001a34:	f000 f814 	bl	8001a60 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001a38:	f000 f82c 	bl	8001a94 <ssd1306_UpdateScreen>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	f000 fb11 	bl	8002064 <ssd1306_SetDisplayOn>


    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <ssd1306_Init+0xd4>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001a48:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <ssd1306_Init+0xd4>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001a4e:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <ssd1306_Init+0xd4>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	711a      	strb	r2, [r3, #4]
}
 8001a54:	46c0      	nop			; (mov r8, r8)
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	20000b2c 	.word	0x20000b2c

08001a60 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	0002      	movs	r2, r0
 8001a68:	1dfb      	adds	r3, r7, #7
 8001a6a:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001a6c:	1dfb      	adds	r3, r7, #7
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <ssd1306_Fill+0x18>
 8001a74:	2300      	movs	r3, #0
 8001a76:	e000      	b.n	8001a7a <ssd1306_Fill+0x1a>
 8001a78:	23ff      	movs	r3, #255	; 0xff
 8001a7a:	2280      	movs	r2, #128	; 0x80
 8001a7c:	00d2      	lsls	r2, r2, #3
 8001a7e:	4804      	ldr	r0, [pc, #16]	; (8001a90 <ssd1306_Fill+0x30>)
 8001a80:	0019      	movs	r1, r3
 8001a82:	f003 fcf6 	bl	8005472 <memset>
}
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	b002      	add	sp, #8
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	2000072c 	.word	0x2000072c

08001a94 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001a9a:	1dfb      	adds	r3, r7, #7
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]
 8001aa0:	e01a      	b.n	8001ad8 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001aa2:	1dfb      	adds	r3, r7, #7
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	3b50      	subs	r3, #80	; 0x50
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f7ff ff1c 	bl	80018e8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f7ff ff19 	bl	80018e8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001ab6:	2010      	movs	r0, #16
 8001ab8:	f7ff ff16 	bl	80018e8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001abc:	1dfb      	adds	r3, r7, #7
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	01da      	lsls	r2, r3, #7
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <ssd1306_UpdateScreen+0x58>)
 8001ac4:	18d3      	adds	r3, r2, r3
 8001ac6:	2180      	movs	r1, #128	; 0x80
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f7ff ff35 	bl	8001938 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001ace:	1dfb      	adds	r3, r7, #7
 8001ad0:	781a      	ldrb	r2, [r3, #0]
 8001ad2:	1dfb      	adds	r3, r7, #7
 8001ad4:	3201      	adds	r2, #1
 8001ad6:	701a      	strb	r2, [r3, #0]
 8001ad8:	1dfb      	adds	r3, r7, #7
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b07      	cmp	r3, #7
 8001ade:	d9e0      	bls.n	8001aa2 <ssd1306_UpdateScreen+0xe>
    }
}
 8001ae0:	46c0      	nop			; (mov r8, r8)
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b002      	add	sp, #8
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	2000072c 	.word	0x2000072c

08001af0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001af0:	b590      	push	{r4, r7, lr}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	0004      	movs	r4, r0
 8001af8:	0008      	movs	r0, r1
 8001afa:	0011      	movs	r1, r2
 8001afc:	1dfb      	adds	r3, r7, #7
 8001afe:	1c22      	adds	r2, r4, #0
 8001b00:	701a      	strb	r2, [r3, #0]
 8001b02:	1dbb      	adds	r3, r7, #6
 8001b04:	1c02      	adds	r2, r0, #0
 8001b06:	701a      	strb	r2, [r3, #0]
 8001b08:	1d7b      	adds	r3, r7, #5
 8001b0a:	1c0a      	adds	r2, r1, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001b0e:	1dfb      	adds	r3, r7, #7
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	b25b      	sxtb	r3, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	db47      	blt.n	8001ba8 <ssd1306_DrawPixel+0xb8>
 8001b18:	1dbb      	adds	r3, r7, #6
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b3f      	cmp	r3, #63	; 0x3f
 8001b1e:	d843      	bhi.n	8001ba8 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001b20:	1d7b      	adds	r3, r7, #5
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d11e      	bne.n	8001b66 <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001b28:	1dfb      	adds	r3, r7, #7
 8001b2a:	781a      	ldrb	r2, [r3, #0]
 8001b2c:	1dbb      	adds	r3, r7, #6
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	08db      	lsrs	r3, r3, #3
 8001b32:	b2d8      	uxtb	r0, r3
 8001b34:	0003      	movs	r3, r0
 8001b36:	01db      	lsls	r3, r3, #7
 8001b38:	18d3      	adds	r3, r2, r3
 8001b3a:	4a1d      	ldr	r2, [pc, #116]	; (8001bb0 <ssd1306_DrawPixel+0xc0>)
 8001b3c:	5cd3      	ldrb	r3, [r2, r3]
 8001b3e:	b25a      	sxtb	r2, r3
 8001b40:	1dbb      	adds	r3, r7, #6
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2107      	movs	r1, #7
 8001b46:	400b      	ands	r3, r1
 8001b48:	2101      	movs	r1, #1
 8001b4a:	4099      	lsls	r1, r3
 8001b4c:	000b      	movs	r3, r1
 8001b4e:	b25b      	sxtb	r3, r3
 8001b50:	4313      	orrs	r3, r2
 8001b52:	b259      	sxtb	r1, r3
 8001b54:	1dfb      	adds	r3, r7, #7
 8001b56:	781a      	ldrb	r2, [r3, #0]
 8001b58:	0003      	movs	r3, r0
 8001b5a:	01db      	lsls	r3, r3, #7
 8001b5c:	18d3      	adds	r3, r2, r3
 8001b5e:	b2c9      	uxtb	r1, r1
 8001b60:	4a13      	ldr	r2, [pc, #76]	; (8001bb0 <ssd1306_DrawPixel+0xc0>)
 8001b62:	54d1      	strb	r1, [r2, r3]
 8001b64:	e021      	b.n	8001baa <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001b66:	1dfb      	adds	r3, r7, #7
 8001b68:	781a      	ldrb	r2, [r3, #0]
 8001b6a:	1dbb      	adds	r3, r7, #6
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	08db      	lsrs	r3, r3, #3
 8001b70:	b2d8      	uxtb	r0, r3
 8001b72:	0003      	movs	r3, r0
 8001b74:	01db      	lsls	r3, r3, #7
 8001b76:	18d3      	adds	r3, r2, r3
 8001b78:	4a0d      	ldr	r2, [pc, #52]	; (8001bb0 <ssd1306_DrawPixel+0xc0>)
 8001b7a:	5cd3      	ldrb	r3, [r2, r3]
 8001b7c:	b25b      	sxtb	r3, r3
 8001b7e:	1dba      	adds	r2, r7, #6
 8001b80:	7812      	ldrb	r2, [r2, #0]
 8001b82:	2107      	movs	r1, #7
 8001b84:	400a      	ands	r2, r1
 8001b86:	2101      	movs	r1, #1
 8001b88:	4091      	lsls	r1, r2
 8001b8a:	000a      	movs	r2, r1
 8001b8c:	b252      	sxtb	r2, r2
 8001b8e:	43d2      	mvns	r2, r2
 8001b90:	b252      	sxtb	r2, r2
 8001b92:	4013      	ands	r3, r2
 8001b94:	b259      	sxtb	r1, r3
 8001b96:	1dfb      	adds	r3, r7, #7
 8001b98:	781a      	ldrb	r2, [r3, #0]
 8001b9a:	0003      	movs	r3, r0
 8001b9c:	01db      	lsls	r3, r3, #7
 8001b9e:	18d3      	adds	r3, r2, r3
 8001ba0:	b2c9      	uxtb	r1, r1
 8001ba2:	4a03      	ldr	r2, [pc, #12]	; (8001bb0 <ssd1306_DrawPixel+0xc0>)
 8001ba4:	54d1      	strb	r1, [r2, r3]
 8001ba6:	e000      	b.n	8001baa <ssd1306_DrawPixel+0xba>
        return;
 8001ba8:	46c0      	nop			; (mov r8, r8)
    }
}
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b003      	add	sp, #12
 8001bae:	bd90      	pop	{r4, r7, pc}
 8001bb0:	2000072c 	.word	0x2000072c

08001bb4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001bb4:	b590      	push	{r4, r7, lr}
 8001bb6:	b089      	sub	sp, #36	; 0x24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	0004      	movs	r4, r0
 8001bbc:	1d38      	adds	r0, r7, #4
 8001bbe:	6001      	str	r1, [r0, #0]
 8001bc0:	6042      	str	r2, [r0, #4]
 8001bc2:	0019      	movs	r1, r3
 8001bc4:	200f      	movs	r0, #15
 8001bc6:	183b      	adds	r3, r7, r0
 8001bc8:	1c22      	adds	r2, r4, #0
 8001bca:	701a      	strb	r2, [r3, #0]
 8001bcc:	230e      	movs	r3, #14
 8001bce:	18fb      	adds	r3, r7, r3
 8001bd0:	1c0a      	adds	r2, r1, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001bd4:	183b      	adds	r3, r7, r0
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b1f      	cmp	r3, #31
 8001bda:	d903      	bls.n	8001be4 <ssd1306_WriteChar+0x30>
 8001bdc:	183b      	adds	r3, r7, r0
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b7e      	cmp	r3, #126	; 0x7e
 8001be2:	d901      	bls.n	8001be8 <ssd1306_WriteChar+0x34>
        return 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	e078      	b.n	8001cda <ssd1306_WriteChar+0x126>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001be8:	4b3e      	ldr	r3, [pc, #248]	; (8001ce4 <ssd1306_WriteChar+0x130>)
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	001a      	movs	r2, r3
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	18d3      	adds	r3, r2, r3
 8001bf4:	2b80      	cmp	r3, #128	; 0x80
 8001bf6:	dc07      	bgt.n	8001c08 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001bf8:	4b3a      	ldr	r3, [pc, #232]	; (8001ce4 <ssd1306_WriteChar+0x130>)
 8001bfa:	885b      	ldrh	r3, [r3, #2]
 8001bfc:	001a      	movs	r2, r3
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	785b      	ldrb	r3, [r3, #1]
 8001c02:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001c04:	2b40      	cmp	r3, #64	; 0x40
 8001c06:	dd01      	ble.n	8001c0c <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	e066      	b.n	8001cda <ssd1306_WriteChar+0x126>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61fb      	str	r3, [r7, #28]
 8001c10:	e051      	b.n	8001cb6 <ssd1306_WriteChar+0x102>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	230f      	movs	r3, #15
 8001c18:	18fb      	adds	r3, r7, r3
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	3b20      	subs	r3, #32
 8001c1e:	1d39      	adds	r1, r7, #4
 8001c20:	7849      	ldrb	r1, [r1, #1]
 8001c22:	434b      	muls	r3, r1
 8001c24:	0019      	movs	r1, r3
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	18cb      	adds	r3, r1, r3
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	18d3      	adds	r3, r2, r3
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001c32:	2300      	movs	r3, #0
 8001c34:	61bb      	str	r3, [r7, #24]
 8001c36:	e035      	b.n	8001ca4 <ssd1306_WriteChar+0xf0>
            if((b << j) & 0x8000)  {
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	409a      	lsls	r2, r3
 8001c3e:	2380      	movs	r3, #128	; 0x80
 8001c40:	021b      	lsls	r3, r3, #8
 8001c42:	4013      	ands	r3, r2
 8001c44:	d014      	beq.n	8001c70 <ssd1306_WriteChar+0xbc>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001c46:	4b27      	ldr	r3, [pc, #156]	; (8001ce4 <ssd1306_WriteChar+0x130>)
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	18d3      	adds	r3, r2, r3
 8001c52:	b2d8      	uxtb	r0, r3
 8001c54:	4b23      	ldr	r3, [pc, #140]	; (8001ce4 <ssd1306_WriteChar+0x130>)
 8001c56:	885b      	ldrh	r3, [r3, #2]
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	18d3      	adds	r3, r2, r3
 8001c60:	b2d9      	uxtb	r1, r3
 8001c62:	230e      	movs	r3, #14
 8001c64:	18fb      	adds	r3, r7, r3
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	001a      	movs	r2, r3
 8001c6a:	f7ff ff41 	bl	8001af0 <ssd1306_DrawPixel>
 8001c6e:	e016      	b.n	8001c9e <ssd1306_WriteChar+0xea>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001c70:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <ssd1306_WriteChar+0x130>)
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	18d3      	adds	r3, r2, r3
 8001c7c:	b2d8      	uxtb	r0, r3
 8001c7e:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <ssd1306_WriteChar+0x130>)
 8001c80:	885b      	ldrh	r3, [r3, #2]
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	18d3      	adds	r3, r2, r3
 8001c8a:	b2d9      	uxtb	r1, r3
 8001c8c:	230e      	movs	r3, #14
 8001c8e:	18fb      	adds	r3, r7, r3
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	425a      	negs	r2, r3
 8001c94:	4153      	adcs	r3, r2
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	001a      	movs	r2, r3
 8001c9a:	f7ff ff29 	bl	8001af0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	61bb      	str	r3, [r7, #24]
 8001ca4:	1d3b      	adds	r3, r7, #4
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	001a      	movs	r2, r3
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d3c3      	bcc.n	8001c38 <ssd1306_WriteChar+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	61fb      	str	r3, [r7, #28]
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	785b      	ldrb	r3, [r3, #1]
 8001cba:	001a      	movs	r2, r3
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d3a7      	bcc.n	8001c12 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001cc2:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <ssd1306_WriteChar+0x130>)
 8001cc4:	881a      	ldrh	r2, [r3, #0]
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	18d3      	adds	r3, r2, r3
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <ssd1306_WriteChar+0x130>)
 8001cd2:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001cd4:	230f      	movs	r3, #15
 8001cd6:	18fb      	adds	r3, r7, r3
 8001cd8:	781b      	ldrb	r3, [r3, #0]
}
 8001cda:	0018      	movs	r0, r3
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	b009      	add	sp, #36	; 0x24
 8001ce0:	bd90      	pop	{r4, r7, pc}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	20000b2c 	.word	0x20000b2c

08001ce8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	1d38      	adds	r0, r7, #4
 8001cf2:	6001      	str	r1, [r0, #0]
 8001cf4:	6042      	str	r2, [r0, #4]
 8001cf6:	001a      	movs	r2, r3
 8001cf8:	1cfb      	adds	r3, r7, #3
 8001cfa:	701a      	strb	r2, [r3, #0]
    while (*str) {
 8001cfc:	e014      	b.n	8001d28 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	7818      	ldrb	r0, [r3, #0]
 8001d02:	1cfb      	adds	r3, r7, #3
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	1d3a      	adds	r2, r7, #4
 8001d08:	6811      	ldr	r1, [r2, #0]
 8001d0a:	6852      	ldr	r2, [r2, #4]
 8001d0c:	f7ff ff52 	bl	8001bb4 <ssd1306_WriteChar>
 8001d10:	0003      	movs	r3, r0
 8001d12:	001a      	movs	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d002      	beq.n	8001d22 <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	e008      	b.n	8001d34 <ssd1306_WriteString+0x4c>
        }
        str++;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	3301      	adds	r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1e6      	bne.n	8001cfe <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	781b      	ldrb	r3, [r3, #0]
}
 8001d34:	0018      	movs	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b004      	add	sp, #16
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	0002      	movs	r2, r0
 8001d44:	1dfb      	adds	r3, r7, #7
 8001d46:	701a      	strb	r2, [r3, #0]
 8001d48:	1dbb      	adds	r3, r7, #6
 8001d4a:	1c0a      	adds	r2, r1, #0
 8001d4c:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8001d4e:	1dfb      	adds	r3, r7, #7
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <ssd1306_SetCursor+0x30>)
 8001d56:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001d58:	1dbb      	adds	r3, r7, #6
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	4b03      	ldr	r3, [pc, #12]	; (8001d6c <ssd1306_SetCursor+0x30>)
 8001d60:	805a      	strh	r2, [r3, #2]
}
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b002      	add	sp, #8
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	20000b2c 	.word	0x20000b2c

08001d70 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001d70:	b5b0      	push	{r4, r5, r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	0005      	movs	r5, r0
 8001d78:	000c      	movs	r4, r1
 8001d7a:	0010      	movs	r0, r2
 8001d7c:	0019      	movs	r1, r3
 8001d7e:	1dfb      	adds	r3, r7, #7
 8001d80:	1c2a      	adds	r2, r5, #0
 8001d82:	701a      	strb	r2, [r3, #0]
 8001d84:	1dbb      	adds	r3, r7, #6
 8001d86:	1c22      	adds	r2, r4, #0
 8001d88:	701a      	strb	r2, [r3, #0]
 8001d8a:	1d7b      	adds	r3, r7, #5
 8001d8c:	1c02      	adds	r2, r0, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
 8001d90:	1d3b      	adds	r3, r7, #4
 8001d92:	1c0a      	adds	r2, r1, #0
 8001d94:	701a      	strb	r2, [r3, #0]
    int32_t deltaX = abs(x2 - x1);
 8001d96:	1d7b      	adds	r3, r7, #5
 8001d98:	781a      	ldrb	r2, [r3, #0]
 8001d9a:	1dfb      	adds	r3, r7, #7
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	17da      	asrs	r2, r3, #31
 8001da2:	189b      	adds	r3, r3, r2
 8001da4:	4053      	eors	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	781a      	ldrb	r2, [r3, #0]
 8001dac:	1dbb      	adds	r3, r7, #6
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	17da      	asrs	r2, r3, #31
 8001db4:	189b      	adds	r3, r3, r2
 8001db6:	4053      	eors	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8001dba:	1dfa      	adds	r2, r7, #7
 8001dbc:	1d7b      	adds	r3, r7, #5
 8001dbe:	7812      	ldrb	r2, [r2, #0]
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d201      	bcs.n	8001dca <ssd1306_Line+0x5a>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e001      	b.n	8001dce <ssd1306_Line+0x5e>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	425b      	negs	r3, r3
 8001dce:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8001dd0:	1dba      	adds	r2, r7, #6
 8001dd2:	1d3b      	adds	r3, r7, #4
 8001dd4:	7812      	ldrb	r2, [r2, #0]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d201      	bcs.n	8001de0 <ssd1306_Line+0x70>
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e001      	b.n	8001de4 <ssd1306_Line+0x74>
 8001de0:	2301      	movs	r3, #1
 8001de2:	425b      	negs	r3, r3
 8001de4:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8001dee:	2330      	movs	r3, #48	; 0x30
 8001df0:	18fb      	adds	r3, r7, r3
 8001df2:	781a      	ldrb	r2, [r3, #0]
 8001df4:	1d3b      	adds	r3, r7, #4
 8001df6:	7819      	ldrb	r1, [r3, #0]
 8001df8:	1d7b      	adds	r3, r7, #5
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	f7ff fe77 	bl	8001af0 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8001e02:	e02f      	b.n	8001e64 <ssd1306_Line+0xf4>
        ssd1306_DrawPixel(x1, y1, color);
 8001e04:	2330      	movs	r3, #48	; 0x30
 8001e06:	18fb      	adds	r3, r7, r3
 8001e08:	781a      	ldrb	r2, [r3, #0]
 8001e0a:	1dbb      	adds	r3, r7, #6
 8001e0c:	7819      	ldrb	r1, [r3, #0]
 8001e0e:	1dfb      	adds	r3, r7, #7
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	0018      	movs	r0, r3
 8001e14:	f7ff fe6c 	bl	8001af0 <ssd1306_DrawPixel>
        error2 = error * 2;
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	425b      	negs	r3, r3
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	dd0a      	ble.n	8001e3e <ssd1306_Line+0xce>
            error -= deltaY;
 8001e28:	69fa      	ldr	r2, [r7, #28]
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	b2d9      	uxtb	r1, r3
 8001e34:	1dfb      	adds	r3, r7, #7
 8001e36:	1dfa      	adds	r2, r7, #7
 8001e38:	7812      	ldrb	r2, [r2, #0]
 8001e3a:	188a      	adds	r2, r1, r2
 8001e3c:	701a      	strb	r2, [r3, #0]
 8001e3e:	1dbb      	adds	r3, r7, #6
 8001e40:	1dba      	adds	r2, r7, #6
 8001e42:	7812      	ldrb	r2, [r2, #0]
 8001e44:	701a      	strb	r2, [r3, #0]
        }
        
        if(error2 < deltaX) {
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	da0a      	bge.n	8001e64 <ssd1306_Line+0xf4>
            error += deltaX;
 8001e4e:	69fa      	ldr	r2, [r7, #28]
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	18d3      	adds	r3, r2, r3
 8001e54:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	b2d9      	uxtb	r1, r3
 8001e5a:	1dbb      	adds	r3, r7, #6
 8001e5c:	1dba      	adds	r2, r7, #6
 8001e5e:	7812      	ldrb	r2, [r2, #0]
 8001e60:	188a      	adds	r2, r1, r2
 8001e62:	701a      	strb	r2, [r3, #0]
    while((x1 != x2) || (y1 != y2)) {
 8001e64:	1dfa      	adds	r2, r7, #7
 8001e66:	1d7b      	adds	r3, r7, #5
 8001e68:	7812      	ldrb	r2, [r2, #0]
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d1c9      	bne.n	8001e04 <ssd1306_Line+0x94>
 8001e70:	1dba      	adds	r2, r7, #6
 8001e72:	1d3b      	adds	r3, r7, #4
 8001e74:	7812      	ldrb	r2, [r2, #0]
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d1c3      	bne.n	8001e04 <ssd1306_Line+0x94>
        }
    }
    return;
 8001e7c:	46c0      	nop			; (mov r8, r8)
}
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b008      	add	sp, #32
 8001e82:	bdb0      	pop	{r4, r5, r7, pc}

08001e84 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001e84:	b5b0      	push	{r4, r5, r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af02      	add	r7, sp, #8
 8001e8a:	0005      	movs	r5, r0
 8001e8c:	000c      	movs	r4, r1
 8001e8e:	0010      	movs	r0, r2
 8001e90:	0019      	movs	r1, r3
 8001e92:	1dfb      	adds	r3, r7, #7
 8001e94:	1c2a      	adds	r2, r5, #0
 8001e96:	701a      	strb	r2, [r3, #0]
 8001e98:	1dbb      	adds	r3, r7, #6
 8001e9a:	1c22      	adds	r2, r4, #0
 8001e9c:	701a      	strb	r2, [r3, #0]
 8001e9e:	1d7b      	adds	r3, r7, #5
 8001ea0:	1c02      	adds	r2, r0, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
 8001ea4:	1d3b      	adds	r3, r7, #4
 8001ea6:	1c0a      	adds	r2, r1, #0
 8001ea8:	701a      	strb	r2, [r3, #0]
    ssd1306_Line(x1,y1,x2,y1,color);
 8001eaa:	1dbb      	adds	r3, r7, #6
 8001eac:	781c      	ldrb	r4, [r3, #0]
 8001eae:	1d7b      	adds	r3, r7, #5
 8001eb0:	781a      	ldrb	r2, [r3, #0]
 8001eb2:	1dbb      	adds	r3, r7, #6
 8001eb4:	7819      	ldrb	r1, [r3, #0]
 8001eb6:	1dfb      	adds	r3, r7, #7
 8001eb8:	7818      	ldrb	r0, [r3, #0]
 8001eba:	2518      	movs	r5, #24
 8001ebc:	197b      	adds	r3, r7, r5
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	0023      	movs	r3, r4
 8001ec4:	f7ff ff54 	bl	8001d70 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8001ec8:	1d3b      	adds	r3, r7, #4
 8001eca:	781c      	ldrb	r4, [r3, #0]
 8001ecc:	1d7b      	adds	r3, r7, #5
 8001ece:	781a      	ldrb	r2, [r3, #0]
 8001ed0:	1dbb      	adds	r3, r7, #6
 8001ed2:	7819      	ldrb	r1, [r3, #0]
 8001ed4:	1d7b      	adds	r3, r7, #5
 8001ed6:	7818      	ldrb	r0, [r3, #0]
 8001ed8:	197b      	adds	r3, r7, r5
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	0023      	movs	r3, r4
 8001ee0:	f7ff ff46 	bl	8001d70 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8001ee4:	1d3b      	adds	r3, r7, #4
 8001ee6:	781c      	ldrb	r4, [r3, #0]
 8001ee8:	1dfb      	adds	r3, r7, #7
 8001eea:	781a      	ldrb	r2, [r3, #0]
 8001eec:	1d3b      	adds	r3, r7, #4
 8001eee:	7819      	ldrb	r1, [r3, #0]
 8001ef0:	1d7b      	adds	r3, r7, #5
 8001ef2:	7818      	ldrb	r0, [r3, #0]
 8001ef4:	197b      	adds	r3, r7, r5
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	0023      	movs	r3, r4
 8001efc:	f7ff ff38 	bl	8001d70 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8001f00:	1dbb      	adds	r3, r7, #6
 8001f02:	781c      	ldrb	r4, [r3, #0]
 8001f04:	1dfb      	adds	r3, r7, #7
 8001f06:	781a      	ldrb	r2, [r3, #0]
 8001f08:	1d3b      	adds	r3, r7, #4
 8001f0a:	7819      	ldrb	r1, [r3, #0]
 8001f0c:	1dfb      	adds	r3, r7, #7
 8001f0e:	7818      	ldrb	r0, [r3, #0]
 8001f10:	197b      	adds	r3, r7, r5
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	0023      	movs	r3, r4
 8001f18:	f7ff ff2a 	bl	8001d70 <ssd1306_Line>

    return;
 8001f1c:	46c0      	nop			; (mov r8, r8)
}
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	b002      	add	sp, #8
 8001f22:	bdb0      	pop	{r4, r5, r7, pc}

08001f24 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001f24:	b5b0      	push	{r4, r5, r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	0005      	movs	r5, r0
 8001f2c:	000c      	movs	r4, r1
 8001f2e:	0010      	movs	r0, r2
 8001f30:	0019      	movs	r1, r3
 8001f32:	1dfb      	adds	r3, r7, #7
 8001f34:	1c2a      	adds	r2, r5, #0
 8001f36:	701a      	strb	r2, [r3, #0]
 8001f38:	1dbb      	adds	r3, r7, #6
 8001f3a:	1c22      	adds	r2, r4, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
 8001f3e:	1d7b      	adds	r3, r7, #5
 8001f40:	1c02      	adds	r2, r0, #0
 8001f42:	701a      	strb	r2, [r3, #0]
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	1c0a      	adds	r2, r1, #0
 8001f48:	701a      	strb	r2, [r3, #0]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8001f4a:	230d      	movs	r3, #13
 8001f4c:	18fa      	adds	r2, r7, r3
 8001f4e:	1dfb      	adds	r3, r7, #7
 8001f50:	1d79      	adds	r1, r7, #5
 8001f52:	780c      	ldrb	r4, [r1, #0]
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	b2d8      	uxtb	r0, r3
 8001f58:	b2e1      	uxtb	r1, r4
 8001f5a:	4288      	cmp	r0, r1
 8001f5c:	d900      	bls.n	8001f60 <ssd1306_FillRectangle+0x3c>
 8001f5e:	1c23      	adds	r3, r4, #0
 8001f60:	7013      	strb	r3, [r2, #0]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8001f62:	230c      	movs	r3, #12
 8001f64:	18fa      	adds	r2, r7, r3
 8001f66:	1d7b      	adds	r3, r7, #5
 8001f68:	1df9      	adds	r1, r7, #7
 8001f6a:	780c      	ldrb	r4, [r1, #0]
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	b2d8      	uxtb	r0, r3
 8001f70:	b2e1      	uxtb	r1, r4
 8001f72:	4288      	cmp	r0, r1
 8001f74:	d200      	bcs.n	8001f78 <ssd1306_FillRectangle+0x54>
 8001f76:	1c23      	adds	r3, r4, #0
 8001f78:	7013      	strb	r3, [r2, #0]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8001f7a:	230b      	movs	r3, #11
 8001f7c:	18fa      	adds	r2, r7, r3
 8001f7e:	1dbb      	adds	r3, r7, #6
 8001f80:	1d39      	adds	r1, r7, #4
 8001f82:	780c      	ldrb	r4, [r1, #0]
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	b2d8      	uxtb	r0, r3
 8001f88:	b2e1      	uxtb	r1, r4
 8001f8a:	4288      	cmp	r0, r1
 8001f8c:	d900      	bls.n	8001f90 <ssd1306_FillRectangle+0x6c>
 8001f8e:	1c23      	adds	r3, r4, #0
 8001f90:	7013      	strb	r3, [r2, #0]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8001f92:	230a      	movs	r3, #10
 8001f94:	18fa      	adds	r2, r7, r3
 8001f96:	1d3b      	adds	r3, r7, #4
 8001f98:	1db9      	adds	r1, r7, #6
 8001f9a:	780c      	ldrb	r4, [r1, #0]
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	b2d8      	uxtb	r0, r3
 8001fa0:	b2e1      	uxtb	r1, r4
 8001fa2:	4288      	cmp	r0, r1
 8001fa4:	d200      	bcs.n	8001fa8 <ssd1306_FillRectangle+0x84>
 8001fa6:	1c23      	adds	r3, r4, #0
 8001fa8:	7013      	strb	r3, [r2, #0]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001faa:	230f      	movs	r3, #15
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	220b      	movs	r2, #11
 8001fb0:	18ba      	adds	r2, r7, r2
 8001fb2:	7812      	ldrb	r2, [r2, #0]
 8001fb4:	701a      	strb	r2, [r3, #0]
 8001fb6:	e02b      	b.n	8002010 <ssd1306_FillRectangle+0xec>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001fb8:	230e      	movs	r3, #14
 8001fba:	18fb      	adds	r3, r7, r3
 8001fbc:	220d      	movs	r2, #13
 8001fbe:	18ba      	adds	r2, r7, r2
 8001fc0:	7812      	ldrb	r2, [r2, #0]
 8001fc2:	701a      	strb	r2, [r3, #0]
 8001fc4:	e011      	b.n	8001fea <ssd1306_FillRectangle+0xc6>
            ssd1306_DrawPixel(x, y, color);
 8001fc6:	2320      	movs	r3, #32
 8001fc8:	18fb      	adds	r3, r7, r3
 8001fca:	781a      	ldrb	r2, [r3, #0]
 8001fcc:	230f      	movs	r3, #15
 8001fce:	18fb      	adds	r3, r7, r3
 8001fd0:	7819      	ldrb	r1, [r3, #0]
 8001fd2:	240e      	movs	r4, #14
 8001fd4:	193b      	adds	r3, r7, r4
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f7ff fd89 	bl	8001af0 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001fde:	0021      	movs	r1, r4
 8001fe0:	187b      	adds	r3, r7, r1
 8001fe2:	781a      	ldrb	r2, [r3, #0]
 8001fe4:	187b      	adds	r3, r7, r1
 8001fe6:	3201      	adds	r2, #1
 8001fe8:	701a      	strb	r2, [r3, #0]
 8001fea:	210e      	movs	r1, #14
 8001fec:	187a      	adds	r2, r7, r1
 8001fee:	230c      	movs	r3, #12
 8001ff0:	18fb      	adds	r3, r7, r3
 8001ff2:	7812      	ldrb	r2, [r2, #0]
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d804      	bhi.n	8002004 <ssd1306_FillRectangle+0xe0>
 8001ffa:	187b      	adds	r3, r7, r1
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	b25b      	sxtb	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	dae0      	bge.n	8001fc6 <ssd1306_FillRectangle+0xa2>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002004:	210f      	movs	r1, #15
 8002006:	187b      	adds	r3, r7, r1
 8002008:	781a      	ldrb	r2, [r3, #0]
 800200a:	187b      	adds	r3, r7, r1
 800200c:	3201      	adds	r2, #1
 800200e:	701a      	strb	r2, [r3, #0]
 8002010:	210f      	movs	r1, #15
 8002012:	187a      	adds	r2, r7, r1
 8002014:	230a      	movs	r3, #10
 8002016:	18fb      	adds	r3, r7, r3
 8002018:	7812      	ldrb	r2, [r2, #0]
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	429a      	cmp	r2, r3
 800201e:	d804      	bhi.n	800202a <ssd1306_FillRectangle+0x106>
 8002020:	187b      	adds	r3, r7, r1
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b3f      	cmp	r3, #63	; 0x3f
 8002026:	d9c7      	bls.n	8001fb8 <ssd1306_FillRectangle+0x94>
        }
    }
    return;
 8002028:	46c0      	nop			; (mov r8, r8)
 800202a:	46c0      	nop			; (mov r8, r8)
}
 800202c:	46bd      	mov	sp, r7
 800202e:	b004      	add	sp, #16
 8002030:	bdb0      	pop	{r4, r5, r7, pc}

08002032 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002032:	b580      	push	{r7, lr}
 8002034:	b084      	sub	sp, #16
 8002036:	af00      	add	r7, sp, #0
 8002038:	0002      	movs	r2, r0
 800203a:	1dfb      	adds	r3, r7, #7
 800203c:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 800203e:	210f      	movs	r1, #15
 8002040:	187b      	adds	r3, r7, r1
 8002042:	2281      	movs	r2, #129	; 0x81
 8002044:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002046:	187b      	adds	r3, r7, r1
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	0018      	movs	r0, r3
 800204c:	f7ff fc4c 	bl	80018e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002050:	1dfb      	adds	r3, r7, #7
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	0018      	movs	r0, r3
 8002056:	f7ff fc47 	bl	80018e8 <ssd1306_WriteCommand>
}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	46bd      	mov	sp, r7
 800205e:	b004      	add	sp, #16
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	0002      	movs	r2, r0
 800206c:	1dfb      	adds	r3, r7, #7
 800206e:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8002070:	1dfb      	adds	r3, r7, #7
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d007      	beq.n	8002088 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8002078:	230f      	movs	r3, #15
 800207a:	18fb      	adds	r3, r7, r3
 800207c:	22af      	movs	r2, #175	; 0xaf
 800207e:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8002080:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <ssd1306_SetDisplayOn+0x48>)
 8002082:	2201      	movs	r2, #1
 8002084:	715a      	strb	r2, [r3, #5]
 8002086:	e006      	b.n	8002096 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8002088:	230f      	movs	r3, #15
 800208a:	18fb      	adds	r3, r7, r3
 800208c:	22ae      	movs	r2, #174	; 0xae
 800208e:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8002090:	4b06      	ldr	r3, [pc, #24]	; (80020ac <ssd1306_SetDisplayOn+0x48>)
 8002092:	2200      	movs	r2, #0
 8002094:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002096:	230f      	movs	r3, #15
 8002098:	18fb      	adds	r3, r7, r3
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	0018      	movs	r0, r3
 800209e:	f7ff fc23 	bl	80018e8 <ssd1306_WriteCommand>
}
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	46bd      	mov	sp, r7
 80020a6:	b004      	add	sp, #16
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	20000b2c 	.word	0x20000b2c

080020b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b6:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <HAL_MspInit+0x44>)
 80020b8:	699a      	ldr	r2, [r3, #24]
 80020ba:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <HAL_MspInit+0x44>)
 80020bc:	2101      	movs	r1, #1
 80020be:	430a      	orrs	r2, r1
 80020c0:	619a      	str	r2, [r3, #24]
 80020c2:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <HAL_MspInit+0x44>)
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	2201      	movs	r2, #1
 80020c8:	4013      	ands	r3, r2
 80020ca:	607b      	str	r3, [r7, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ce:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <HAL_MspInit+0x44>)
 80020d0:	69da      	ldr	r2, [r3, #28]
 80020d2:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <HAL_MspInit+0x44>)
 80020d4:	2180      	movs	r1, #128	; 0x80
 80020d6:	0549      	lsls	r1, r1, #21
 80020d8:	430a      	orrs	r2, r1
 80020da:	61da      	str	r2, [r3, #28]
 80020dc:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <HAL_MspInit+0x44>)
 80020de:	69da      	ldr	r2, [r3, #28]
 80020e0:	2380      	movs	r3, #128	; 0x80
 80020e2:	055b      	lsls	r3, r3, #21
 80020e4:	4013      	ands	r3, r2
 80020e6:	603b      	str	r3, [r7, #0]
 80020e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	46bd      	mov	sp, r7
 80020ee:	b002      	add	sp, #8
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	40021000 	.word	0x40021000

080020f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020f8:	b590      	push	{r4, r7, lr}
 80020fa:	b08b      	sub	sp, #44	; 0x2c
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	2414      	movs	r4, #20
 8002102:	193b      	adds	r3, r7, r4
 8002104:	0018      	movs	r0, r3
 8002106:	2314      	movs	r3, #20
 8002108:	001a      	movs	r2, r3
 800210a:	2100      	movs	r1, #0
 800210c:	f003 f9b1 	bl	8005472 <memset>
  if(hadc->Instance==ADC1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a18      	ldr	r2, [pc, #96]	; (8002178 <HAL_ADC_MspInit+0x80>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d12a      	bne.n	8002170 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800211a:	4b18      	ldr	r3, [pc, #96]	; (800217c <HAL_ADC_MspInit+0x84>)
 800211c:	699a      	ldr	r2, [r3, #24]
 800211e:	4b17      	ldr	r3, [pc, #92]	; (800217c <HAL_ADC_MspInit+0x84>)
 8002120:	2180      	movs	r1, #128	; 0x80
 8002122:	0089      	lsls	r1, r1, #2
 8002124:	430a      	orrs	r2, r1
 8002126:	619a      	str	r2, [r3, #24]
 8002128:	4b14      	ldr	r3, [pc, #80]	; (800217c <HAL_ADC_MspInit+0x84>)
 800212a:	699a      	ldr	r2, [r3, #24]
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4013      	ands	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002136:	4b11      	ldr	r3, [pc, #68]	; (800217c <HAL_ADC_MspInit+0x84>)
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	4b10      	ldr	r3, [pc, #64]	; (800217c <HAL_ADC_MspInit+0x84>)
 800213c:	2180      	movs	r1, #128	; 0x80
 800213e:	02c9      	lsls	r1, r1, #11
 8002140:	430a      	orrs	r2, r1
 8002142:	615a      	str	r2, [r3, #20]
 8002144:	4b0d      	ldr	r3, [pc, #52]	; (800217c <HAL_ADC_MspInit+0x84>)
 8002146:	695a      	ldr	r2, [r3, #20]
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	02db      	lsls	r3, r3, #11
 800214c:	4013      	ands	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = INPUT_FLUID_Pin;
 8002152:	193b      	adds	r3, r7, r4
 8002154:	2202      	movs	r2, #2
 8002156:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002158:	193b      	adds	r3, r7, r4
 800215a:	2203      	movs	r2, #3
 800215c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	193b      	adds	r3, r7, r4
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(INPUT_FLUID_GPIO_Port, &GPIO_InitStruct);
 8002164:	193b      	adds	r3, r7, r4
 8002166:	4a06      	ldr	r2, [pc, #24]	; (8002180 <HAL_ADC_MspInit+0x88>)
 8002168:	0019      	movs	r1, r3
 800216a:	0010      	movs	r0, r2
 800216c:	f001 f9ea 	bl	8003544 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002170:	46c0      	nop			; (mov r8, r8)
 8002172:	46bd      	mov	sp, r7
 8002174:	b00b      	add	sp, #44	; 0x2c
 8002176:	bd90      	pop	{r4, r7, pc}
 8002178:	40012400 	.word	0x40012400
 800217c:	40021000 	.word	0x40021000
 8002180:	48000400 	.word	0x48000400

08002184 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002184:	b590      	push	{r4, r7, lr}
 8002186:	b089      	sub	sp, #36	; 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	240c      	movs	r4, #12
 800218e:	193b      	adds	r3, r7, r4
 8002190:	0018      	movs	r0, r3
 8002192:	2314      	movs	r3, #20
 8002194:	001a      	movs	r2, r3
 8002196:	2100      	movs	r1, #0
 8002198:	f003 f96b 	bl	8005472 <memset>
  if(hrtc->Instance==RTC)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a10      	ldr	r2, [pc, #64]	; (80021e4 <HAL_RTC_MspInit+0x60>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d11a      	bne.n	80021dc <HAL_RTC_MspInit+0x58>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021a6:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <HAL_RTC_MspInit+0x64>)
 80021a8:	6a1a      	ldr	r2, [r3, #32]
 80021aa:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <HAL_RTC_MspInit+0x64>)
 80021ac:	2180      	movs	r1, #128	; 0x80
 80021ae:	0209      	lsls	r1, r1, #8
 80021b0:	430a      	orrs	r2, r1
 80021b2:	621a      	str	r2, [r3, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <HAL_RTC_MspInit+0x64>)
 80021b6:	695a      	ldr	r2, [r3, #20]
 80021b8:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <HAL_RTC_MspInit+0x64>)
 80021ba:	2180      	movs	r1, #128	; 0x80
 80021bc:	0309      	lsls	r1, r1, #12
 80021be:	430a      	orrs	r2, r1
 80021c0:	615a      	str	r2, [r3, #20]
 80021c2:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <HAL_RTC_MspInit+0x64>)
 80021c4:	695a      	ldr	r2, [r3, #20]
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	031b      	lsls	r3, r3, #12
 80021ca:	4013      	ands	r3, r2
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration
    PC13     ------> RTC_OUT_CALIB
    */
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d0:	193b      	adds	r3, r7, r4
 80021d2:	4a06      	ldr	r2, [pc, #24]	; (80021ec <HAL_RTC_MspInit+0x68>)
 80021d4:	0019      	movs	r1, r3
 80021d6:	0010      	movs	r0, r2
 80021d8:	f001 f9b4 	bl	8003544 <HAL_GPIO_Init>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80021dc:	46c0      	nop			; (mov r8, r8)
 80021de:	46bd      	mov	sp, r7
 80021e0:	b009      	add	sp, #36	; 0x24
 80021e2:	bd90      	pop	{r4, r7, pc}
 80021e4:	40002800 	.word	0x40002800
 80021e8:	40021000 	.word	0x40021000
 80021ec:	48000800 	.word	0x48000800

080021f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021f0:	b590      	push	{r4, r7, lr}
 80021f2:	b08b      	sub	sp, #44	; 0x2c
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	2414      	movs	r4, #20
 80021fa:	193b      	adds	r3, r7, r4
 80021fc:	0018      	movs	r0, r3
 80021fe:	2314      	movs	r3, #20
 8002200:	001a      	movs	r2, r3
 8002202:	2100      	movs	r1, #0
 8002204:	f003 f935 	bl	8005472 <memset>
  if(hspi->Instance==SPI1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a1c      	ldr	r2, [pc, #112]	; (8002280 <HAL_SPI_MspInit+0x90>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d132      	bne.n	8002278 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002212:	4b1c      	ldr	r3, [pc, #112]	; (8002284 <HAL_SPI_MspInit+0x94>)
 8002214:	699a      	ldr	r2, [r3, #24]
 8002216:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <HAL_SPI_MspInit+0x94>)
 8002218:	2180      	movs	r1, #128	; 0x80
 800221a:	0149      	lsls	r1, r1, #5
 800221c:	430a      	orrs	r2, r1
 800221e:	619a      	str	r2, [r3, #24]
 8002220:	4b18      	ldr	r3, [pc, #96]	; (8002284 <HAL_SPI_MspInit+0x94>)
 8002222:	699a      	ldr	r2, [r3, #24]
 8002224:	2380      	movs	r3, #128	; 0x80
 8002226:	015b      	lsls	r3, r3, #5
 8002228:	4013      	ands	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222e:	4b15      	ldr	r3, [pc, #84]	; (8002284 <HAL_SPI_MspInit+0x94>)
 8002230:	695a      	ldr	r2, [r3, #20]
 8002232:	4b14      	ldr	r3, [pc, #80]	; (8002284 <HAL_SPI_MspInit+0x94>)
 8002234:	2180      	movs	r1, #128	; 0x80
 8002236:	0289      	lsls	r1, r1, #10
 8002238:	430a      	orrs	r2, r1
 800223a:	615a      	str	r2, [r3, #20]
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <HAL_SPI_MspInit+0x94>)
 800223e:	695a      	ldr	r2, [r3, #20]
 8002240:	2380      	movs	r3, #128	; 0x80
 8002242:	029b      	lsls	r3, r3, #10
 8002244:	4013      	ands	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800224a:	0021      	movs	r1, r4
 800224c:	187b      	adds	r3, r7, r1
 800224e:	22a0      	movs	r2, #160	; 0xa0
 8002250:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002252:	187b      	adds	r3, r7, r1
 8002254:	2202      	movs	r2, #2
 8002256:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	187b      	adds	r3, r7, r1
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800225e:	187b      	adds	r3, r7, r1
 8002260:	2203      	movs	r2, #3
 8002262:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002264:	187b      	adds	r3, r7, r1
 8002266:	2200      	movs	r2, #0
 8002268:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226a:	187a      	adds	r2, r7, r1
 800226c:	2390      	movs	r3, #144	; 0x90
 800226e:	05db      	lsls	r3, r3, #23
 8002270:	0011      	movs	r1, r2
 8002272:	0018      	movs	r0, r3
 8002274:	f001 f966 	bl	8003544 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002278:	46c0      	nop			; (mov r8, r8)
 800227a:	46bd      	mov	sp, r7
 800227c:	b00b      	add	sp, #44	; 0x2c
 800227e:	bd90      	pop	{r4, r7, pc}
 8002280:	40013000 	.word	0x40013000
 8002284:	40021000 	.word	0x40021000

08002288 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a25      	ldr	r2, [pc, #148]	; (800232c <HAL_TIM_Base_MspInit+0xa4>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d10c      	bne.n	80022b4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800229a:	4b25      	ldr	r3, [pc, #148]	; (8002330 <HAL_TIM_Base_MspInit+0xa8>)
 800229c:	69da      	ldr	r2, [r3, #28]
 800229e:	4b24      	ldr	r3, [pc, #144]	; (8002330 <HAL_TIM_Base_MspInit+0xa8>)
 80022a0:	2120      	movs	r1, #32
 80022a2:	430a      	orrs	r2, r1
 80022a4:	61da      	str	r2, [r3, #28]
 80022a6:	4b22      	ldr	r3, [pc, #136]	; (8002330 <HAL_TIM_Base_MspInit+0xa8>)
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	2220      	movs	r2, #32
 80022ac:	4013      	ands	r3, r2
 80022ae:	617b      	str	r3, [r7, #20]
 80022b0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80022b2:	e036      	b.n	8002322 <HAL_TIM_Base_MspInit+0x9a>
  else if(htim_base->Instance==TIM14)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a1e      	ldr	r2, [pc, #120]	; (8002334 <HAL_TIM_Base_MspInit+0xac>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d116      	bne.n	80022ec <HAL_TIM_Base_MspInit+0x64>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80022be:	4b1c      	ldr	r3, [pc, #112]	; (8002330 <HAL_TIM_Base_MspInit+0xa8>)
 80022c0:	69da      	ldr	r2, [r3, #28]
 80022c2:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <HAL_TIM_Base_MspInit+0xa8>)
 80022c4:	2180      	movs	r1, #128	; 0x80
 80022c6:	0049      	lsls	r1, r1, #1
 80022c8:	430a      	orrs	r2, r1
 80022ca:	61da      	str	r2, [r3, #28]
 80022cc:	4b18      	ldr	r3, [pc, #96]	; (8002330 <HAL_TIM_Base_MspInit+0xa8>)
 80022ce:	69da      	ldr	r2, [r3, #28]
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	4013      	ands	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
 80022d8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 3, 0);
 80022da:	2200      	movs	r2, #0
 80022dc:	2103      	movs	r1, #3
 80022de:	2013      	movs	r0, #19
 80022e0:	f001 f8ee 	bl	80034c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80022e4:	2013      	movs	r0, #19
 80022e6:	f001 f900 	bl	80034ea <HAL_NVIC_EnableIRQ>
}
 80022ea:	e01a      	b.n	8002322 <HAL_TIM_Base_MspInit+0x9a>
  else if(htim_base->Instance==TIM16)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a11      	ldr	r2, [pc, #68]	; (8002338 <HAL_TIM_Base_MspInit+0xb0>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d115      	bne.n	8002322 <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80022f6:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <HAL_TIM_Base_MspInit+0xa8>)
 80022f8:	699a      	ldr	r2, [r3, #24]
 80022fa:	4b0d      	ldr	r3, [pc, #52]	; (8002330 <HAL_TIM_Base_MspInit+0xa8>)
 80022fc:	2180      	movs	r1, #128	; 0x80
 80022fe:	0289      	lsls	r1, r1, #10
 8002300:	430a      	orrs	r2, r1
 8002302:	619a      	str	r2, [r3, #24]
 8002304:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <HAL_TIM_Base_MspInit+0xa8>)
 8002306:	699a      	ldr	r2, [r3, #24]
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	029b      	lsls	r3, r3, #10
 800230c:	4013      	ands	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 3, 0);
 8002312:	2200      	movs	r2, #0
 8002314:	2103      	movs	r1, #3
 8002316:	2015      	movs	r0, #21
 8002318:	f001 f8d2 	bl	80034c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800231c:	2015      	movs	r0, #21
 800231e:	f001 f8e4 	bl	80034ea <HAL_NVIC_EnableIRQ>
}
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	46bd      	mov	sp, r7
 8002326:	b006      	add	sp, #24
 8002328:	bd80      	pop	{r7, pc}
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	40001400 	.word	0x40001400
 8002330:	40021000 	.word	0x40021000
 8002334:	40002000 	.word	0x40002000
 8002338:	40014400 	.word	0x40014400

0800233c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002340:	e7fe      	b.n	8002340 <NMI_Handler+0x4>

08002342 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002346:	e7fe      	b.n	8002346 <HardFault_Handler+0x4>

08002348 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800234c:	46c0      	nop			; (mov r8, r8)
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002360:	f000 f9f0 	bl	8002744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002364:	46c0      	nop			; (mov r8, r8)
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002372:	2380      	movs	r3, #128	; 0x80
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	0018      	movs	r0, r3
 8002378:	f001 fa72 	bl	8003860 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */
	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn); //FOR BUTTON DEBOUNCE
 800237c:	2007      	movs	r0, #7
 800237e:	f001 f8c4 	bl	800350a <HAL_NVIC_DisableIRQ>

	HAL_TIM_Base_Start_IT(&htim7);		//STARTING 5 SECS CONTDOWN
 8002382:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <EXTI4_15_IRQHandler+0x6c>)
 8002384:	0018      	movs	r0, r3
 8002386:	f002 fe03 	bl	8004f90 <HAL_TIM_Base_Start_IT>
	htim7.Instance->CNT=0;				//NULLIFY THE COUNTER
 800238a:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <EXTI4_15_IRQHandler+0x6c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2200      	movs	r2, #0
 8002390:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_ResumeTick();					//WAKE THE CPU UP
 8002392:	f000 fa25 	bl	80027e0 <HAL_ResumeTick>
	if (allowNextSubPage==1){

	}
	HAL_ADC_Start_IT(&hadc);			//STARTING ADC CONVERSIONS WITH IT
 8002396:	4b11      	ldr	r3, [pc, #68]	; (80023dc <EXTI4_15_IRQHandler+0x70>)
 8002398:	0018      	movs	r0, r3
 800239a:	f000 fc07 	bl	8002bac <HAL_ADC_Start_IT>
	if (allowNextSubPage==1){

	}
	nextOrPrev=CURRENT;					//STARTING PAGE IS CURRENT
 800239e:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <EXTI4_15_IRQHandler+0x74>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
	nextPage();
 80023a4:	f7fd ff44 	bl	8000230 <nextPage>

	ssd1306_SetDisplayOn(1);			//DISPLAY SET ON
 80023a8:	2001      	movs	r0, #1
 80023aa:	f7ff fe5b 	bl	8002064 <ssd1306_SetDisplayOn>
	//allowNextSubPage=0;

	pressButton();
 80023ae:	f7fe fd1d 	bl	8000dec <pressButton>
	selectPage();						//SELECT THE CURRENT PAGE
 80023b2:	f7fe fa4d 	bl	8000850 <selectPage>


	for(int i=0; i<350000; i++){};	//BUTTON DEBOUNCE DELAY
 80023b6:	2300      	movs	r3, #0
 80023b8:	607b      	str	r3, [r7, #4]
 80023ba:	e002      	b.n	80023c2 <EXTI4_15_IRQHandler+0x56>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3301      	adds	r3, #1
 80023c0:	607b      	str	r3, [r7, #4]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a07      	ldr	r2, [pc, #28]	; (80023e4 <EXTI4_15_IRQHandler+0x78>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	ddf8      	ble.n	80023bc <EXTI4_15_IRQHandler+0x50>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);	//DEBOUNCE DISABLED
 80023ca:	2007      	movs	r0, #7
 80023cc:	f001 f88d 	bl	80034ea <HAL_NVIC_EnableIRQ>
  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80023d0:	46c0      	nop			; (mov r8, r8)
 80023d2:	46bd      	mov	sp, r7
 80023d4:	b002      	add	sp, #8
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	2000063c 	.word	0x2000063c
 80023dc:	20000578 	.word	0x20000578
 80023e0:	20000004 	.word	0x20000004
 80023e4:	0005572f 	.word	0x0005572f

080023e8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80023ee:	4b35      	ldr	r3, [pc, #212]	; (80024c4 <ADC1_IRQHandler+0xdc>)
 80023f0:	0018      	movs	r0, r3
 80023f2:	f000 fca3 	bl	8002d3c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */
  	  adcConverted=63;
 80023f6:	4b34      	ldr	r3, [pc, #208]	; (80024c8 <ADC1_IRQHandler+0xe0>)
 80023f8:	223f      	movs	r2, #63	; 0x3f
 80023fa:	601a      	str	r2, [r3, #0]
	  HAL_ADC_PollForConversion(&hadc, 50);
 80023fc:	4b31      	ldr	r3, [pc, #196]	; (80024c4 <ADC1_IRQHandler+0xdc>)
 80023fe:	2132      	movs	r1, #50	; 0x32
 8002400:	0018      	movs	r0, r3
 8002402:	f000 fb3b 	bl	8002a7c <HAL_ADC_PollForConversion>
	  adcConverted=HAL_ADC_GetValue(&hadc);
 8002406:	4b2f      	ldr	r3, [pc, #188]	; (80024c4 <ADC1_IRQHandler+0xdc>)
 8002408:	0018      	movs	r0, r3
 800240a:	f000 fc8b 	bl	8002d24 <HAL_ADC_GetValue>
 800240e:	0002      	movs	r2, r0
 8002410:	4b2d      	ldr	r3, [pc, #180]	; (80024c8 <ADC1_IRQHandler+0xe0>)
 8002412:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop_IT(&hadc);
 8002414:	4b2b      	ldr	r3, [pc, #172]	; (80024c4 <ADC1_IRQHandler+0xdc>)
 8002416:	0018      	movs	r0, r3
 8002418:	f000 fc3a 	bl	8002c90 <HAL_ADC_Stop_IT>

	  if(adcConverted>13){}
 800241c:	4b2a      	ldr	r3, [pc, #168]	; (80024c8 <ADC1_IRQHandler+0xe0>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b0d      	cmp	r3, #13
 8002422:	d83c      	bhi.n	800249e <ADC1_IRQHandler+0xb6>

	  else if (adcConverted<2){			//BUTTON 3	(BACK)3
 8002424:	4b28      	ldr	r3, [pc, #160]	; (80024c8 <ADC1_IRQHandler+0xe0>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d811      	bhi.n	8002450 <ADC1_IRQHandler+0x68>
		htim7.Instance->CNT=0;
 800242c:	4b27      	ldr	r3, [pc, #156]	; (80024cc <ADC1_IRQHandler+0xe4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2200      	movs	r2, #0
 8002432:	625a      	str	r2, [r3, #36]	; 0x24
		htim7.Instance->ARR=65000;
 8002434:	4b25      	ldr	r3, [pc, #148]	; (80024cc <ADC1_IRQHandler+0xe4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a25      	ldr	r2, [pc, #148]	; (80024d0 <ADC1_IRQHandler+0xe8>)
 800243a:	62da      	str	r2, [r3, #44]	; 0x2c
		nextPage();
 800243c:	f7fd fef8 	bl	8000230 <nextPage>
		canChooseButton=0;
 8002440:	4b24      	ldr	r3, [pc, #144]	; (80024d4 <ADC1_IRQHandler+0xec>)
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
		unselectPage();
 8002446:	f7fe faed 	bl	8000a24 <unselectPage>
		unselectSubPage();
 800244a:	f7fe fb3d 	bl	8000ac8 <unselectSubPage>
 800244e:	e026      	b.n	800249e <ADC1_IRQHandler+0xb6>
	  }
	  else if (adcConverted<7){		//BUTTON 2	(RIGHT/DOWN) 12
 8002450:	4b1d      	ldr	r3, [pc, #116]	; (80024c8 <ADC1_IRQHandler+0xe0>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b06      	cmp	r3, #6
 8002456:	d811      	bhi.n	800247c <ADC1_IRQHandler+0x94>
		nextOrPrev=PREV;
 8002458:	4b1f      	ldr	r3, [pc, #124]	; (80024d8 <ADC1_IRQHandler+0xf0>)
 800245a:	2201      	movs	r2, #1
 800245c:	601a      	str	r2, [r3, #0]
		nextPage();
 800245e:	f7fd fee7 	bl	8000230 <nextPage>
		moveCursor();
 8002462:	f7fe f8b3 	bl	80005cc <moveCursor>
		moveSPCursor();
 8002466:	f7fe f92b 	bl	80006c0 <moveSPCursor>
		htim7.Instance->CNT=0;
 800246a:	4b18      	ldr	r3, [pc, #96]	; (80024cc <ADC1_IRQHandler+0xe4>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2200      	movs	r2, #0
 8002470:	625a      	str	r2, [r3, #36]	; 0x24
		htim7.Instance->ARR=65000;
 8002472:	4b16      	ldr	r3, [pc, #88]	; (80024cc <ADC1_IRQHandler+0xe4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a16      	ldr	r2, [pc, #88]	; (80024d0 <ADC1_IRQHandler+0xe8>)
 8002478:	62da      	str	r2, [r3, #44]	; 0x2c
 800247a:	e010      	b.n	800249e <ADC1_IRQHandler+0xb6>
	  }
	  else {							//BUTTON 1	(LEFT/UP)[if (adcConverted<24||adcConverted>11)]
		nextOrPrev=NEXT;
 800247c:	4b16      	ldr	r3, [pc, #88]	; (80024d8 <ADC1_IRQHandler+0xf0>)
 800247e:	2202      	movs	r2, #2
 8002480:	601a      	str	r2, [r3, #0]
		moveCursor();
 8002482:	f7fe f8a3 	bl	80005cc <moveCursor>
		nextPage();
 8002486:	f7fd fed3 	bl	8000230 <nextPage>
		moveSPCursor();
 800248a:	f7fe f919 	bl	80006c0 <moveSPCursor>
		htim7.Instance->CNT=0;
 800248e:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <ADC1_IRQHandler+0xe4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2200      	movs	r2, #0
 8002494:	625a      	str	r2, [r3, #36]	; 0x24
		htim7.Instance->ARR=65000;
 8002496:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <ADC1_IRQHandler+0xe4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a0d      	ldr	r2, [pc, #52]	; (80024d0 <ADC1_IRQHandler+0xe8>)
 800249c:	62da      	str	r2, [r3, #44]	; 0x2c
	  }
for(int i=0; i<350000; i++){};
 800249e:	2300      	movs	r3, #0
 80024a0:	607b      	str	r3, [r7, #4]
 80024a2:	e002      	b.n	80024aa <ADC1_IRQHandler+0xc2>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3301      	adds	r3, #1
 80024a8:	607b      	str	r3, [r7, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a0b      	ldr	r2, [pc, #44]	; (80024dc <ADC1_IRQHandler+0xf4>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	ddf8      	ble.n	80024a4 <ADC1_IRQHandler+0xbc>


		HAL_ADC_Start_IT(&hadc);
 80024b2:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <ADC1_IRQHandler+0xdc>)
 80024b4:	0018      	movs	r0, r3
 80024b6:	f000 fb79 	bl	8002bac <HAL_ADC_Start_IT>
	 //checkTime();
	 //ssd1306_SetCursor(2, 52);
	 //displayTime();
	 //ssd1306_UpdateScreen();
  /* USER CODE END ADC1_IRQn 1 */
}
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	46bd      	mov	sp, r7
 80024be:	b002      	add	sp, #8
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	20000578 	.word	0x20000578
 80024c8:	200004dc 	.word	0x200004dc
 80024cc:	2000063c 	.word	0x2000063c
 80024d0:	0000fde8 	.word	0x0000fde8
 80024d4:	20000570 	.word	0x20000570
 80024d8:	20000004 	.word	0x20000004
 80024dc:	0005572f 	.word	0x0005572f

080024e0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80024e6:	4b2a      	ldr	r3, [pc, #168]	; (8002590 <TIM7_IRQHandler+0xb0>)
 80024e8:	0018      	movs	r0, r3
 80024ea:	f002 fdcb 	bl	8005084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
		HAL_TIM_Base_Stop_IT(&htim7);
 80024ee:	4b28      	ldr	r3, [pc, #160]	; (8002590 <TIM7_IRQHandler+0xb0>)
 80024f0:	0018      	movs	r0, r3
 80024f2:	f002 fd99 	bl	8005028 <HAL_TIM_Base_Stop_IT>
		HAL_ADC_Stop_IT(&hadc);
 80024f6:	4b27      	ldr	r3, [pc, #156]	; (8002594 <TIM7_IRQHandler+0xb4>)
 80024f8:	0018      	movs	r0, r3
 80024fa:	f000 fbc9 	bl	8002c90 <HAL_ADC_Stop_IT>
		ssd1306_SetDisplayOn(0);
 80024fe:	2000      	movs	r0, #0
 8002500:	f7ff fdb0 	bl	8002064 <ssd1306_SetDisplayOn>

		htim7.Instance->ARR=5000;
 8002504:	4b22      	ldr	r3, [pc, #136]	; (8002590 <TIM7_IRQHandler+0xb0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a23      	ldr	r2, [pc, #140]	; (8002598 <TIM7_IRQHandler+0xb8>)
 800250a:	62da      	str	r2, [r3, #44]	; 0x2c
		htim7.Instance->CNT=0;
 800250c:	4b20      	ldr	r3, [pc, #128]	; (8002590 <TIM7_IRQHandler+0xb0>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2200      	movs	r2, #0
 8002512:	625a      	str	r2, [r3, #36]	; 0x24

		nextOrPrev=CURRENT;
 8002514:	4b21      	ldr	r3, [pc, #132]	; (800259c <TIM7_IRQHandler+0xbc>)
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
		allowNextPage=1;
 800251a:	4b21      	ldr	r3, [pc, #132]	; (80025a0 <TIM7_IRQHandler+0xc0>)
 800251c:	2201      	movs	r2, #1
 800251e:	601a      	str	r2, [r3, #0]
		page1.selected=0;
 8002520:	4b20      	ldr	r3, [pc, #128]	; (80025a4 <TIM7_IRQHandler+0xc4>)
 8002522:	2200      	movs	r2, #0
 8002524:	605a      	str	r2, [r3, #4]
		page2.selected=0;
 8002526:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <TIM7_IRQHandler+0xc8>)
 8002528:	2200      	movs	r2, #0
 800252a:	605a      	str	r2, [r3, #4]
		page3.selected=0;
 800252c:	4b1f      	ldr	r3, [pc, #124]	; (80025ac <TIM7_IRQHandler+0xcc>)
 800252e:	2200      	movs	r2, #0
 8002530:	605a      	str	r2, [r3, #4]
		currentPage= &page1;
 8002532:	4b1f      	ldr	r3, [pc, #124]	; (80025b0 <TIM7_IRQHandler+0xd0>)
 8002534:	4a1b      	ldr	r2, [pc, #108]	; (80025a4 <TIM7_IRQHandler+0xc4>)
 8002536:	601a      	str	r2, [r3, #0]
		currentPage->buttonMenu[0].selected=0;
 8002538:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <TIM7_IRQHandler+0xd0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2200      	movs	r2, #0
 800253e:	669a      	str	r2, [r3, #104]	; 0x68
		currentPage->buttonMenu[1].selected=0;
 8002540:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <TIM7_IRQHandler+0xd0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	22a0      	movs	r2, #160	; 0xa0
 8002546:	2100      	movs	r1, #0
 8002548:	5099      	str	r1, [r3, r2]
		currentPage->buttonMenu[2].selected=0;
 800254a:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <TIM7_IRQHandler+0xd0>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	22d8      	movs	r2, #216	; 0xd8
 8002550:	2100      	movs	r1, #0
 8002552:	5099      	str	r1, [r3, r2]
		currentPage->currentButton=0;
 8002554:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <TIM7_IRQHandler+0xd0>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	22e8      	movs	r2, #232	; 0xe8
 800255a:	2100      	movs	r1, #0
 800255c:	5099      	str	r1, [r3, r2]
		currentSubPage->selected=0;
 800255e:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <TIM7_IRQHandler+0xd4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2200      	movs	r2, #0
 8002564:	605a      	str	r2, [r3, #4]
		HAL_GPIO_WritePin(GPIOA, SYN115_DATA_Pin , GPIO_PIN_RESET);
 8002566:	2390      	movs	r3, #144	; 0x90
 8002568:	05db      	lsls	r3, r3, #23
 800256a:	2200      	movs	r2, #0
 800256c:	2104      	movs	r1, #4
 800256e:	0018      	movs	r0, r3
 8002570:	f001 f958 	bl	8003824 <HAL_GPIO_WritePin>
		ssd1306_FillRectangle(0, 10, 5, 54, 0x00);
 8002574:	2300      	movs	r3, #0
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	2336      	movs	r3, #54	; 0x36
 800257a:	2205      	movs	r2, #5
 800257c:	210a      	movs	r1, #10
 800257e:	2000      	movs	r0, #0
 8002580:	f7ff fcd0 	bl	8001f24 <ssd1306_FillRectangle>

		HAL_SuspendTick();
 8002584:	f000 f91e 	bl	80027c4 <HAL_SuspendTick>
   // HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
  /* USER CODE END TIM7_IRQn 1 */
}
 8002588:	46c0      	nop			; (mov r8, r8)
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	2000063c 	.word	0x2000063c
 8002594:	20000578 	.word	0x20000578
 8002598:	00001388 	.word	0x00001388
 800259c:	20000004 	.word	0x20000004
 80025a0:	20000000 	.word	0x20000000
 80025a4:	20000008 	.word	0x20000008
 80025a8:	200000f4 	.word	0x200000f4
 80025ac:	200001e0 	.word	0x200001e0
 80025b0:	200004b8 	.word	0x200004b8
 80025b4:	200004bc 	.word	0x200004bc

080025b8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80025bc:	4b03      	ldr	r3, [pc, #12]	; (80025cc <TIM14_IRQHandler+0x14>)
 80025be:	0018      	movs	r0, r3
 80025c0:	f002 fd60 	bl	8005084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80025c4:	46c0      	nop			; (mov r8, r8)
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	20000684 	.word	0x20000684

080025d0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80025d4:	4b03      	ldr	r3, [pc, #12]	; (80025e4 <TIM16_IRQHandler+0x14>)
 80025d6:	0018      	movs	r0, r3
 80025d8:	f002 fd54 	bl	8005084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80025dc:	46c0      	nop			; (mov r8, r8)
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	200006cc 	.word	0x200006cc

080025e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025f0:	4a14      	ldr	r2, [pc, #80]	; (8002644 <_sbrk+0x5c>)
 80025f2:	4b15      	ldr	r3, [pc, #84]	; (8002648 <_sbrk+0x60>)
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025fc:	4b13      	ldr	r3, [pc, #76]	; (800264c <_sbrk+0x64>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d102      	bne.n	800260a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002604:	4b11      	ldr	r3, [pc, #68]	; (800264c <_sbrk+0x64>)
 8002606:	4a12      	ldr	r2, [pc, #72]	; (8002650 <_sbrk+0x68>)
 8002608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800260a:	4b10      	ldr	r3, [pc, #64]	; (800264c <_sbrk+0x64>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	18d3      	adds	r3, r2, r3
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	429a      	cmp	r2, r3
 8002616:	d207      	bcs.n	8002628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002618:	f002 fef8 	bl	800540c <__errno>
 800261c:	0003      	movs	r3, r0
 800261e:	220c      	movs	r2, #12
 8002620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002622:	2301      	movs	r3, #1
 8002624:	425b      	negs	r3, r3
 8002626:	e009      	b.n	800263c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002628:	4b08      	ldr	r3, [pc, #32]	; (800264c <_sbrk+0x64>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800262e:	4b07      	ldr	r3, [pc, #28]	; (800264c <_sbrk+0x64>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	18d2      	adds	r2, r2, r3
 8002636:	4b05      	ldr	r3, [pc, #20]	; (800264c <_sbrk+0x64>)
 8002638:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800263a:	68fb      	ldr	r3, [r7, #12]
}
 800263c:	0018      	movs	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	b006      	add	sp, #24
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20008000 	.word	0x20008000
 8002648:	00000600 	.word	0x00000600
 800264c:	20000b34 	.word	0x20000b34
 8002650:	20000b50 	.word	0x20000b50

08002654 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002658:	46c0      	nop			; (mov r8, r8)
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002660:	480d      	ldr	r0, [pc, #52]	; (8002698 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002662:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002664:	f7ff fff6 	bl	8002654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002668:	480c      	ldr	r0, [pc, #48]	; (800269c <LoopForever+0x6>)
  ldr r1, =_edata
 800266a:	490d      	ldr	r1, [pc, #52]	; (80026a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800266c:	4a0d      	ldr	r2, [pc, #52]	; (80026a4 <LoopForever+0xe>)
  movs r3, #0
 800266e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002670:	e002      	b.n	8002678 <LoopCopyDataInit>

08002672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002676:	3304      	adds	r3, #4

08002678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800267a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800267c:	d3f9      	bcc.n	8002672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800267e:	4a0a      	ldr	r2, [pc, #40]	; (80026a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002680:	4c0a      	ldr	r4, [pc, #40]	; (80026ac <LoopForever+0x16>)
  movs r3, #0
 8002682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002684:	e001      	b.n	800268a <LoopFillZerobss>

08002686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002688:	3204      	adds	r2, #4

0800268a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800268a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800268c:	d3fb      	bcc.n	8002686 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800268e:	f002 fec3 	bl	8005418 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002692:	f7fe fe1f 	bl	80012d4 <main>

08002696 <LoopForever>:

LoopForever:
    b LoopForever
 8002696:	e7fe      	b.n	8002696 <LoopForever>
  ldr   r0, =_estack
 8002698:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800269c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026a0:	20000550 	.word	0x20000550
  ldr r2, =_sidata
 80026a4:	08006520 	.word	0x08006520
  ldr r2, =_sbss
 80026a8:	20000550 	.word	0x20000550
  ldr r4, =_ebss
 80026ac:	20000b4c 	.word	0x20000b4c

080026b0 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026b0:	e7fe      	b.n	80026b0 <DMA1_Channel1_IRQHandler>
	...

080026b4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026b8:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <HAL_Init+0x24>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <HAL_Init+0x24>)
 80026be:	2110      	movs	r1, #16
 80026c0:	430a      	orrs	r2, r1
 80026c2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80026c4:	2003      	movs	r0, #3
 80026c6:	f000 f809 	bl	80026dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026ca:	f7ff fcf1 	bl	80020b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	0018      	movs	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	40022000 	.word	0x40022000

080026dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026dc:	b590      	push	{r4, r7, lr}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026e4:	4b14      	ldr	r3, [pc, #80]	; (8002738 <HAL_InitTick+0x5c>)
 80026e6:	681c      	ldr	r4, [r3, #0]
 80026e8:	4b14      	ldr	r3, [pc, #80]	; (800273c <HAL_InitTick+0x60>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	0019      	movs	r1, r3
 80026ee:	23fa      	movs	r3, #250	; 0xfa
 80026f0:	0098      	lsls	r0, r3, #2
 80026f2:	f7fd fd11 	bl	8000118 <__udivsi3>
 80026f6:	0003      	movs	r3, r0
 80026f8:	0019      	movs	r1, r3
 80026fa:	0020      	movs	r0, r4
 80026fc:	f7fd fd0c 	bl	8000118 <__udivsi3>
 8002700:	0003      	movs	r3, r0
 8002702:	0018      	movs	r0, r3
 8002704:	f000 ff11 	bl	800352a <HAL_SYSTICK_Config>
 8002708:	1e03      	subs	r3, r0, #0
 800270a:	d001      	beq.n	8002710 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e00f      	b.n	8002730 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b03      	cmp	r3, #3
 8002714:	d80b      	bhi.n	800272e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	2301      	movs	r3, #1
 800271a:	425b      	negs	r3, r3
 800271c:	2200      	movs	r2, #0
 800271e:	0018      	movs	r0, r3
 8002720:	f000 fece 	bl	80034c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <HAL_InitTick+0x64>)
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	e000      	b.n	8002730 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
}
 8002730:	0018      	movs	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	b003      	add	sp, #12
 8002736:	bd90      	pop	{r4, r7, pc}
 8002738:	200004e0 	.word	0x200004e0
 800273c:	200004e8 	.word	0x200004e8
 8002740:	200004e4 	.word	0x200004e4

08002744 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002748:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_IncTick+0x1c>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	001a      	movs	r2, r3
 800274e:	4b05      	ldr	r3, [pc, #20]	; (8002764 <HAL_IncTick+0x20>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	18d2      	adds	r2, r2, r3
 8002754:	4b03      	ldr	r3, [pc, #12]	; (8002764 <HAL_IncTick+0x20>)
 8002756:	601a      	str	r2, [r3, #0]
}
 8002758:	46c0      	nop			; (mov r8, r8)
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	200004e8 	.word	0x200004e8
 8002764:	20000b38 	.word	0x20000b38

08002768 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  return uwTick;
 800276c:	4b02      	ldr	r3, [pc, #8]	; (8002778 <HAL_GetTick+0x10>)
 800276e:	681b      	ldr	r3, [r3, #0]
}
 8002770:	0018      	movs	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	20000b38 	.word	0x20000b38

0800277c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002784:	f7ff fff0 	bl	8002768 <HAL_GetTick>
 8002788:	0003      	movs	r3, r0
 800278a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	3301      	adds	r3, #1
 8002794:	d005      	beq.n	80027a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002796:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <HAL_Delay+0x44>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	001a      	movs	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	189b      	adds	r3, r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	f7ff ffe0 	bl	8002768 <HAL_GetTick>
 80027a8:	0002      	movs	r2, r0
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d8f7      	bhi.n	80027a4 <HAL_Delay+0x28>
  {
  }
}
 80027b4:	46c0      	nop			; (mov r8, r8)
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	46bd      	mov	sp, r7
 80027ba:	b004      	add	sp, #16
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	200004e8 	.word	0x200004e8

080027c4 <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80027c8:	4b04      	ldr	r3, [pc, #16]	; (80027dc <HAL_SuspendTick+0x18>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	4b03      	ldr	r3, [pc, #12]	; (80027dc <HAL_SuspendTick+0x18>)
 80027ce:	2102      	movs	r1, #2
 80027d0:	438a      	bics	r2, r1
 80027d2:	601a      	str	r2, [r3, #0]
}
 80027d4:	46c0      	nop			; (mov r8, r8)
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	e000e010 	.word	0xe000e010

080027e0 <HAL_ResumeTick>:
  * @note This function is declared as __weak  to be overwritten  in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80027e4:	4b04      	ldr	r3, [pc, #16]	; (80027f8 <HAL_ResumeTick+0x18>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <HAL_ResumeTick+0x18>)
 80027ea:	2102      	movs	r1, #2
 80027ec:	430a      	orrs	r2, r1
 80027ee:	601a      	str	r2, [r3, #0]
}
 80027f0:	46c0      	nop			; (mov r8, r8)
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	46c0      	nop			; (mov r8, r8)
 80027f8:	e000e010 	.word	0xe000e010

080027fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002804:	230f      	movs	r3, #15
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e125      	b.n	8002a66 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10a      	bne.n	8002838 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2234      	movs	r2, #52	; 0x34
 800282c:	2100      	movs	r1, #0
 800282e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	0018      	movs	r0, r3
 8002834:	f7ff fc60 	bl	80020f8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283c:	2210      	movs	r2, #16
 800283e:	4013      	ands	r3, r2
 8002840:	d000      	beq.n	8002844 <HAL_ADC_Init+0x48>
 8002842:	e103      	b.n	8002a4c <HAL_ADC_Init+0x250>
 8002844:	230f      	movs	r3, #15
 8002846:	18fb      	adds	r3, r7, r3
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d000      	beq.n	8002850 <HAL_ADC_Init+0x54>
 800284e:	e0fd      	b.n	8002a4c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2204      	movs	r2, #4
 8002858:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800285a:	d000      	beq.n	800285e <HAL_ADC_Init+0x62>
 800285c:	e0f6      	b.n	8002a4c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002862:	4a83      	ldr	r2, [pc, #524]	; (8002a70 <HAL_ADC_Init+0x274>)
 8002864:	4013      	ands	r3, r2
 8002866:	2202      	movs	r2, #2
 8002868:	431a      	orrs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2203      	movs	r2, #3
 8002876:	4013      	ands	r3, r2
 8002878:	2b01      	cmp	r3, #1
 800287a:	d112      	bne.n	80028a2 <HAL_ADC_Init+0xa6>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2201      	movs	r2, #1
 8002884:	4013      	ands	r3, r2
 8002886:	2b01      	cmp	r3, #1
 8002888:	d009      	beq.n	800289e <HAL_ADC_Init+0xa2>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	2380      	movs	r3, #128	; 0x80
 8002892:	021b      	lsls	r3, r3, #8
 8002894:	401a      	ands	r2, r3
 8002896:	2380      	movs	r3, #128	; 0x80
 8002898:	021b      	lsls	r3, r3, #8
 800289a:	429a      	cmp	r2, r3
 800289c:	d101      	bne.n	80028a2 <HAL_ADC_Init+0xa6>
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <HAL_ADC_Init+0xa8>
 80028a2:	2300      	movs	r3, #0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d116      	bne.n	80028d6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	2218      	movs	r2, #24
 80028b0:	4393      	bics	r3, r2
 80028b2:	0019      	movs	r1, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	0899      	lsrs	r1, r3, #2
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68da      	ldr	r2, [r3, #12]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4964      	ldr	r1, [pc, #400]	; (8002a74 <HAL_ADC_Init+0x278>)
 80028e2:	400a      	ands	r2, r1
 80028e4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	7e1b      	ldrb	r3, [r3, #24]
 80028ea:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	7e5b      	ldrb	r3, [r3, #25]
 80028f0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028f2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	7e9b      	ldrb	r3, [r3, #26]
 80028f8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80028fa:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002900:	2b01      	cmp	r3, #1
 8002902:	d002      	beq.n	800290a <HAL_ADC_Init+0x10e>
 8002904:	2380      	movs	r3, #128	; 0x80
 8002906:	015b      	lsls	r3, r3, #5
 8002908:	e000      	b.n	800290c <HAL_ADC_Init+0x110>
 800290a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800290c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002912:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	2b02      	cmp	r3, #2
 800291a:	d101      	bne.n	8002920 <HAL_ADC_Init+0x124>
 800291c:	2304      	movs	r3, #4
 800291e:	e000      	b.n	8002922 <HAL_ADC_Init+0x126>
 8002920:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002922:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2124      	movs	r1, #36	; 0x24
 8002928:	5c5b      	ldrb	r3, [r3, r1]
 800292a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800292c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	4313      	orrs	r3, r2
 8002932:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	7edb      	ldrb	r3, [r3, #27]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d115      	bne.n	8002968 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	7e9b      	ldrb	r3, [r3, #26]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d105      	bne.n	8002950 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2280      	movs	r2, #128	; 0x80
 8002948:	0252      	lsls	r2, r2, #9
 800294a:	4313      	orrs	r3, r2
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	e00b      	b.n	8002968 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002954:	2220      	movs	r2, #32
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002960:	2201      	movs	r2, #1
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69da      	ldr	r2, [r3, #28]
 800296c:	23c2      	movs	r3, #194	; 0xc2
 800296e:	33ff      	adds	r3, #255	; 0xff
 8002970:	429a      	cmp	r2, r3
 8002972:	d007      	beq.n	8002984 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800297c:	4313      	orrs	r3, r2
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	4313      	orrs	r3, r2
 8002982:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68d9      	ldr	r1, [r3, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	430a      	orrs	r2, r1
 8002992:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002998:	2380      	movs	r3, #128	; 0x80
 800299a:	055b      	lsls	r3, r3, #21
 800299c:	429a      	cmp	r2, r3
 800299e:	d01b      	beq.n	80029d8 <HAL_ADC_Init+0x1dc>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d017      	beq.n	80029d8 <HAL_ADC_Init+0x1dc>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d013      	beq.n	80029d8 <HAL_ADC_Init+0x1dc>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d00f      	beq.n	80029d8 <HAL_ADC_Init+0x1dc>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d00b      	beq.n	80029d8 <HAL_ADC_Init+0x1dc>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c4:	2b05      	cmp	r3, #5
 80029c6:	d007      	beq.n	80029d8 <HAL_ADC_Init+0x1dc>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029cc:	2b06      	cmp	r3, #6
 80029ce:	d003      	beq.n	80029d8 <HAL_ADC_Init+0x1dc>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d4:	2b07      	cmp	r3, #7
 80029d6:	d112      	bne.n	80029fe <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695a      	ldr	r2, [r3, #20]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2107      	movs	r1, #7
 80029e4:	438a      	bics	r2, r1
 80029e6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6959      	ldr	r1, [r3, #20]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f2:	2207      	movs	r2, #7
 80029f4:	401a      	ands	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	4a1c      	ldr	r2, [pc, #112]	; (8002a78 <HAL_ADC_Init+0x27c>)
 8002a06:	4013      	ands	r3, r2
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d10b      	bne.n	8002a26 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a18:	2203      	movs	r2, #3
 8002a1a:	4393      	bics	r3, r2
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002a24:	e01c      	b.n	8002a60 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2a:	2212      	movs	r2, #18
 8002a2c:	4393      	bics	r3, r2
 8002a2e:	2210      	movs	r2, #16
 8002a30:	431a      	orrs	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002a42:	230f      	movs	r3, #15
 8002a44:	18fb      	adds	r3, r7, r3
 8002a46:	2201      	movs	r2, #1
 8002a48:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002a4a:	e009      	b.n	8002a60 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a50:	2210      	movs	r2, #16
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002a58:	230f      	movs	r3, #15
 8002a5a:	18fb      	adds	r3, r7, r3
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a60:	230f      	movs	r3, #15
 8002a62:	18fb      	adds	r3, r7, r3
 8002a64:	781b      	ldrb	r3, [r3, #0]
}
 8002a66:	0018      	movs	r0, r3
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	b004      	add	sp, #16
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	fffffefd 	.word	0xfffffefd
 8002a74:	fffe0219 	.word	0xfffe0219
 8002a78:	833fffe7 	.word	0x833fffe7

08002a7c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d102      	bne.n	8002a94 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002a8e:	2308      	movs	r3, #8
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	e014      	b.n	8002abe <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d10b      	bne.n	8002aba <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2234      	movs	r2, #52	; 0x34
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e071      	b.n	8002b9e <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002aba:	230c      	movs	r3, #12
 8002abc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002abe:	f7ff fe53 	bl	8002768 <HAL_GetTick>
 8002ac2:	0003      	movs	r3, r0
 8002ac4:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002ac6:	e01f      	b.n	8002b08 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	3301      	adds	r3, #1
 8002acc:	d01c      	beq.n	8002b08 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d007      	beq.n	8002ae4 <HAL_ADC_PollForConversion+0x68>
 8002ad4:	f7ff fe48 	bl	8002768 <HAL_GetTick>
 8002ad8:	0002      	movs	r2, r0
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d211      	bcs.n	8002b08 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	4013      	ands	r3, r2
 8002aee:	d10b      	bne.n	8002b08 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af4:	2204      	movs	r2, #4
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2234      	movs	r2, #52	; 0x34
 8002b00:	2100      	movs	r1, #0
 8002b02:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e04a      	b.n	8002b9e <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4013      	ands	r3, r2
 8002b12:	d0d9      	beq.n	8002ac8 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b18:	2280      	movs	r2, #128	; 0x80
 8002b1a:	0092      	lsls	r2, r2, #2
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	23c0      	movs	r3, #192	; 0xc0
 8002b2a:	011b      	lsls	r3, r3, #4
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	d12d      	bne.n	8002b8c <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d129      	bne.n	8002b8c <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2208      	movs	r2, #8
 8002b40:	4013      	ands	r3, r2
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d122      	bne.n	8002b8c <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2204      	movs	r2, #4
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d110      	bne.n	8002b74 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	210c      	movs	r1, #12
 8002b5e:	438a      	bics	r2, r1
 8002b60:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b66:	4a10      	ldr	r2, [pc, #64]	; (8002ba8 <HAL_ADC_PollForConversion+0x12c>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	639a      	str	r2, [r3, #56]	; 0x38
 8002b72:	e00b      	b.n	8002b8c <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b78:	2220      	movs	r2, #32
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b84:	2201      	movs	r2, #1
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	7e1b      	ldrb	r3, [r3, #24]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d103      	bne.n	8002b9c <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	220c      	movs	r2, #12
 8002b9a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	b004      	add	sp, #16
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	fffffefe 	.word	0xfffffefe

08002bac <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002bac:	b590      	push	{r4, r7, lr}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bb4:	230f      	movs	r3, #15
 8002bb6:	18fb      	adds	r3, r7, r3
 8002bb8:	2200      	movs	r2, #0
 8002bba:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2204      	movs	r2, #4
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d156      	bne.n	8002c76 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2234      	movs	r2, #52	; 0x34
 8002bcc:	5c9b      	ldrb	r3, [r3, r2]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d101      	bne.n	8002bd6 <HAL_ADC_Start_IT+0x2a>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	e056      	b.n	8002c84 <HAL_ADC_Start_IT+0xd8>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2234      	movs	r2, #52	; 0x34
 8002bda:	2101      	movs	r1, #1
 8002bdc:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	7e5b      	ldrb	r3, [r3, #25]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d007      	beq.n	8002bf6 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002be6:	230f      	movs	r3, #15
 8002be8:	18fc      	adds	r4, r7, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	0018      	movs	r0, r3
 8002bee:	f000 fa57 	bl	80030a0 <ADC_Enable>
 8002bf2:	0003      	movs	r3, r0
 8002bf4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002bf6:	230f      	movs	r3, #15
 8002bf8:	18fb      	adds	r3, r7, r3
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d13e      	bne.n	8002c7e <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c04:	4a21      	ldr	r2, [pc, #132]	; (8002c8c <HAL_ADC_Start_IT+0xe0>)
 8002c06:	4013      	ands	r3, r2
 8002c08:	2280      	movs	r2, #128	; 0x80
 8002c0a:	0052      	lsls	r2, r2, #1
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2234      	movs	r2, #52	; 0x34
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	221c      	movs	r2, #28
 8002c26:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d110      	bne.n	8002c52 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2104      	movs	r1, #4
 8002c3c:	438a      	bics	r2, r1
 8002c3e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2118      	movs	r1, #24
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	605a      	str	r2, [r3, #4]
          break;
 8002c50:	e008      	b.n	8002c64 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	211c      	movs	r1, #28
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	605a      	str	r2, [r3, #4]
          break;
 8002c62:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2104      	movs	r1, #4
 8002c70:	430a      	orrs	r2, r1
 8002c72:	609a      	str	r2, [r3, #8]
 8002c74:	e003      	b.n	8002c7e <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c76:	230f      	movs	r3, #15
 8002c78:	18fb      	adds	r3, r7, r3
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 8002c7e:	230f      	movs	r3, #15
 8002c80:	18fb      	adds	r3, r7, r3
 8002c82:	781b      	ldrb	r3, [r3, #0]
}
 8002c84:	0018      	movs	r0, r3
 8002c86:	46bd      	mov	sp, r7
 8002c88:	b005      	add	sp, #20
 8002c8a:	bd90      	pop	{r4, r7, pc}
 8002c8c:	fffff0fe 	.word	0xfffff0fe

08002c90 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8002c90:	b5b0      	push	{r4, r5, r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c98:	230f      	movs	r3, #15
 8002c9a:	18fb      	adds	r3, r7, r3
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2234      	movs	r2, #52	; 0x34
 8002ca4:	5c9b      	ldrb	r3, [r3, r2]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <HAL_ADC_Stop_IT+0x1e>
 8002caa:	2302      	movs	r3, #2
 8002cac:	e033      	b.n	8002d16 <HAL_ADC_Stop_IT+0x86>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2234      	movs	r2, #52	; 0x34
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002cb6:	250f      	movs	r5, #15
 8002cb8:	197c      	adds	r4, r7, r5
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f000 fae4 	bl	800328a <ADC_ConversionStop>
 8002cc2:	0003      	movs	r3, r0
 8002cc4:	7023      	strb	r3, [r4, #0]
   
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002cc6:	0028      	movs	r0, r5
 8002cc8:	183b      	adds	r3, r7, r0
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d11b      	bne.n	8002d08 <HAL_ADC_Stop_IT+0x78>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	211c      	movs	r1, #28
 8002cdc:	438a      	bics	r2, r1
 8002cde:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002ce0:	0005      	movs	r5, r0
 8002ce2:	183c      	adds	r4, r7, r0
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f000 fa5e 	bl	80031a8 <ADC_Disable>
 8002cec:	0003      	movs	r3, r0
 8002cee:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002cf0:	197b      	adds	r3, r7, r5
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d107      	bne.n	8002d08 <HAL_ADC_Stop_IT+0x78>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfc:	4a08      	ldr	r2, [pc, #32]	; (8002d20 <HAL_ADC_Stop_IT+0x90>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2201      	movs	r2, #1
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2234      	movs	r2, #52	; 0x34
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002d10:	230f      	movs	r3, #15
 8002d12:	18fb      	adds	r3, r7, r3
 8002d14:	781b      	ldrb	r3, [r3, #0]
}
 8002d16:	0018      	movs	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b004      	add	sp, #16
 8002d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	fffffefe 	.word	0xfffffefe

08002d24 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002d32:	0018      	movs	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	b002      	add	sp, #8
 8002d38:	bd80      	pop	{r7, pc}
	...

08002d3c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2204      	movs	r2, #4
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d003      	beq.n	8002d64 <HAL_ADC_IRQHandler+0x28>
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2204      	movs	r2, #4
 8002d60:	4013      	ands	r3, r2
 8002d62:	d107      	bne.n	8002d74 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2208      	movs	r2, #8
 8002d68:	4013      	ands	r3, r2
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002d6a:	d049      	beq.n	8002e00 <HAL_ADC_IRQHandler+0xc4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2208      	movs	r2, #8
 8002d70:	4013      	ands	r3, r2
 8002d72:	d045      	beq.n	8002e00 <HAL_ADC_IRQHandler+0xc4>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d78:	2210      	movs	r2, #16
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d106      	bne.n	8002d8c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	2280      	movs	r2, #128	; 0x80
 8002d84:	0092      	lsls	r2, r2, #2
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	23c0      	movs	r3, #192	; 0xc0
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	4013      	ands	r3, r2
 8002d98:	d12a      	bne.n	8002df0 <HAL_ADC_IRQHandler+0xb4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d126      	bne.n	8002df0 <HAL_ADC_IRQHandler+0xb4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2208      	movs	r2, #8
 8002da6:	4013      	ands	r3, r2
 8002da8:	d022      	beq.n	8002df0 <HAL_ADC_IRQHandler+0xb4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2204      	movs	r2, #4
 8002db2:	4013      	ands	r3, r2
 8002db4:	d110      	bne.n	8002dd8 <HAL_ADC_IRQHandler+0x9c>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	210c      	movs	r1, #12
 8002dc2:	438a      	bics	r2, r1
 8002dc4:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dca:	4a2d      	ldr	r2, [pc, #180]	; (8002e80 <HAL_ADC_IRQHandler+0x144>)
 8002dcc:	4013      	ands	r3, r2
 8002dce:	2201      	movs	r2, #1
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	639a      	str	r2, [r3, #56]	; 0x38
 8002dd6:	e00b      	b.n	8002df0 <HAL_ADC_IRQHandler+0xb4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ddc:	2220      	movs	r2, #32
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de8:	2201      	movs	r2, #1
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	0018      	movs	r0, r3
 8002df4:	f000 f846 	bl	8002e84 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	220c      	movs	r2, #12
 8002dfe:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2280      	movs	r2, #128	; 0x80
 8002e04:	4013      	ands	r3, r2
 8002e06:	d012      	beq.n	8002e2e <HAL_ADC_IRQHandler+0xf2>
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2280      	movs	r2, #128	; 0x80
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d00e      	beq.n	8002e2e <HAL_ADC_IRQHandler+0xf2>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e14:	2280      	movs	r2, #128	; 0x80
 8002e16:	0252      	lsls	r2, r2, #9
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	0018      	movs	r0, r3
 8002e22:	f000 f837 	bl	8002e94 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2280      	movs	r2, #128	; 0x80
 8002e2c:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2210      	movs	r2, #16
 8002e32:	4013      	ands	r3, r2
 8002e34:	d020      	beq.n	8002e78 <HAL_ADC_IRQHandler+0x13c>
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2210      	movs	r2, #16
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d01c      	beq.n	8002e78 <HAL_ADC_IRQHandler+0x13c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d006      	beq.n	8002e54 <HAL_ADC_IRQHandler+0x118>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d10d      	bne.n	8002e70 <HAL_ADC_IRQHandler+0x134>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e58:	2202      	movs	r2, #2
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2210      	movs	r2, #16
 8002e66:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f000 f81a 	bl	8002ea4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2210      	movs	r2, #16
 8002e76:	601a      	str	r2, [r3, #0]
  }

}
 8002e78:	46c0      	nop			; (mov r8, r8)
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	b004      	add	sp, #16
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	fffffefe 	.word	0xfffffefe

08002e84 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002e8c:	46c0      	nop			; (mov r8, r8)
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b002      	add	sp, #8
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002e9c:	46c0      	nop			; (mov r8, r8)
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	b002      	add	sp, #8
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002eac:	46c0      	nop			; (mov r8, r8)
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	b002      	add	sp, #8
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ebe:	230f      	movs	r3, #15
 8002ec0:	18fb      	adds	r3, r7, r3
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ece:	2380      	movs	r3, #128	; 0x80
 8002ed0:	055b      	lsls	r3, r3, #21
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d011      	beq.n	8002efa <HAL_ADC_ConfigChannel+0x46>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d00d      	beq.n	8002efa <HAL_ADC_ConfigChannel+0x46>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d009      	beq.n	8002efa <HAL_ADC_ConfigChannel+0x46>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d005      	beq.n	8002efa <HAL_ADC_ConfigChannel+0x46>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d001      	beq.n	8002efa <HAL_ADC_ConfigChannel+0x46>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2234      	movs	r2, #52	; 0x34
 8002efe:	5c9b      	ldrb	r3, [r3, r2]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x54>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e0bb      	b.n	8003080 <HAL_ADC_ConfigChannel+0x1cc>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2234      	movs	r2, #52	; 0x34
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2204      	movs	r2, #4
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d000      	beq.n	8002f1e <HAL_ADC_ConfigChannel+0x6a>
 8002f1c:	e09f      	b.n	800305e <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	4a59      	ldr	r2, [pc, #356]	; (8003088 <HAL_ADC_ConfigChannel+0x1d4>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d100      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x76>
 8002f28:	e077      	b.n	800301a <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2201      	movs	r2, #1
 8002f36:	409a      	lsls	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f44:	2380      	movs	r3, #128	; 0x80
 8002f46:	055b      	lsls	r3, r3, #21
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d037      	beq.n	8002fbc <HAL_ADC_ConfigChannel+0x108>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d033      	beq.n	8002fbc <HAL_ADC_ConfigChannel+0x108>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d02f      	beq.n	8002fbc <HAL_ADC_ConfigChannel+0x108>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d02b      	beq.n	8002fbc <HAL_ADC_ConfigChannel+0x108>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d027      	beq.n	8002fbc <HAL_ADC_ConfigChannel+0x108>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	2b05      	cmp	r3, #5
 8002f72:	d023      	beq.n	8002fbc <HAL_ADC_ConfigChannel+0x108>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f78:	2b06      	cmp	r3, #6
 8002f7a:	d01f      	beq.n	8002fbc <HAL_ADC_ConfigChannel+0x108>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	2b07      	cmp	r3, #7
 8002f82:	d01b      	beq.n	8002fbc <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	2107      	movs	r1, #7
 8002f90:	400b      	ands	r3, r1
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d012      	beq.n	8002fbc <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695a      	ldr	r2, [r3, #20]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2107      	movs	r1, #7
 8002fa2:	438a      	bics	r2, r1
 8002fa4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6959      	ldr	r1, [r3, #20]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	2207      	movs	r2, #7
 8002fb2:	401a      	ands	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b10      	cmp	r3, #16
 8002fc2:	d003      	beq.n	8002fcc <HAL_ADC_ConfigChannel+0x118>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b11      	cmp	r3, #17
 8002fca:	d152      	bne.n	8003072 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002fcc:	4b2f      	ldr	r3, [pc, #188]	; (800308c <HAL_ADC_ConfigChannel+0x1d8>)
 8002fce:	6819      	ldr	r1, [r3, #0]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b10      	cmp	r3, #16
 8002fd6:	d102      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x12a>
 8002fd8:	2380      	movs	r3, #128	; 0x80
 8002fda:	041b      	lsls	r3, r3, #16
 8002fdc:	e001      	b.n	8002fe2 <HAL_ADC_ConfigChannel+0x12e>
 8002fde:	2380      	movs	r3, #128	; 0x80
 8002fe0:	03db      	lsls	r3, r3, #15
 8002fe2:	4a2a      	ldr	r2, [pc, #168]	; (800308c <HAL_ADC_ConfigChannel+0x1d8>)
 8002fe4:	430b      	orrs	r3, r1
 8002fe6:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b10      	cmp	r3, #16
 8002fee:	d140      	bne.n	8003072 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ff0:	4b27      	ldr	r3, [pc, #156]	; (8003090 <HAL_ADC_ConfigChannel+0x1dc>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4927      	ldr	r1, [pc, #156]	; (8003094 <HAL_ADC_ConfigChannel+0x1e0>)
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f7fd f88e 	bl	8000118 <__udivsi3>
 8002ffc:	0003      	movs	r3, r0
 8002ffe:	001a      	movs	r2, r3
 8003000:	0013      	movs	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	189b      	adds	r3, r3, r2
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800300a:	e002      	b.n	8003012 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	3b01      	subs	r3, #1
 8003010:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1f9      	bne.n	800300c <HAL_ADC_ConfigChannel+0x158>
 8003018:	e02b      	b.n	8003072 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2101      	movs	r1, #1
 8003026:	4099      	lsls	r1, r3
 8003028:	000b      	movs	r3, r1
 800302a:	43d9      	mvns	r1, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	400a      	ands	r2, r1
 8003032:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b10      	cmp	r3, #16
 800303a:	d003      	beq.n	8003044 <HAL_ADC_ConfigChannel+0x190>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b11      	cmp	r3, #17
 8003042:	d116      	bne.n	8003072 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003044:	4b11      	ldr	r3, [pc, #68]	; (800308c <HAL_ADC_ConfigChannel+0x1d8>)
 8003046:	6819      	ldr	r1, [r3, #0]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b10      	cmp	r3, #16
 800304e:	d101      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x1a0>
 8003050:	4a11      	ldr	r2, [pc, #68]	; (8003098 <HAL_ADC_ConfigChannel+0x1e4>)
 8003052:	e000      	b.n	8003056 <HAL_ADC_ConfigChannel+0x1a2>
 8003054:	4a11      	ldr	r2, [pc, #68]	; (800309c <HAL_ADC_ConfigChannel+0x1e8>)
 8003056:	4b0d      	ldr	r3, [pc, #52]	; (800308c <HAL_ADC_ConfigChannel+0x1d8>)
 8003058:	400a      	ands	r2, r1
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	e009      	b.n	8003072 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003062:	2220      	movs	r2, #32
 8003064:	431a      	orrs	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800306a:	230f      	movs	r3, #15
 800306c:	18fb      	adds	r3, r7, r3
 800306e:	2201      	movs	r2, #1
 8003070:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2234      	movs	r2, #52	; 0x34
 8003076:	2100      	movs	r1, #0
 8003078:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800307a:	230f      	movs	r3, #15
 800307c:	18fb      	adds	r3, r7, r3
 800307e:	781b      	ldrb	r3, [r3, #0]
}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	b004      	add	sp, #16
 8003086:	bd80      	pop	{r7, pc}
 8003088:	00001001 	.word	0x00001001
 800308c:	40012708 	.word	0x40012708
 8003090:	200004e0 	.word	0x200004e0
 8003094:	000f4240 	.word	0x000f4240
 8003098:	ff7fffff 	.word	0xff7fffff
 800309c:	ffbfffff 	.word	0xffbfffff

080030a0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2203      	movs	r2, #3
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d112      	bne.n	80030e4 <ADC_Enable+0x44>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2201      	movs	r2, #1
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d009      	beq.n	80030e0 <ADC_Enable+0x40>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	2380      	movs	r3, #128	; 0x80
 80030d4:	021b      	lsls	r3, r3, #8
 80030d6:	401a      	ands	r2, r3
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	021b      	lsls	r3, r3, #8
 80030dc:	429a      	cmp	r2, r3
 80030de:	d101      	bne.n	80030e4 <ADC_Enable+0x44>
 80030e0:	2301      	movs	r3, #1
 80030e2:	e000      	b.n	80030e6 <ADC_Enable+0x46>
 80030e4:	2300      	movs	r3, #0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d152      	bne.n	8003190 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	4a2a      	ldr	r2, [pc, #168]	; (800319c <ADC_Enable+0xfc>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	d00d      	beq.n	8003112 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fa:	2210      	movs	r2, #16
 80030fc:	431a      	orrs	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003106:	2201      	movs	r2, #1
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e03f      	b.n	8003192 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2101      	movs	r1, #1
 800311e:	430a      	orrs	r2, r1
 8003120:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003122:	4b1f      	ldr	r3, [pc, #124]	; (80031a0 <ADC_Enable+0x100>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	491f      	ldr	r1, [pc, #124]	; (80031a4 <ADC_Enable+0x104>)
 8003128:	0018      	movs	r0, r3
 800312a:	f7fc fff5 	bl	8000118 <__udivsi3>
 800312e:	0003      	movs	r3, r0
 8003130:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003132:	e002      	b.n	800313a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	3b01      	subs	r3, #1
 8003138:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1f9      	bne.n	8003134 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003140:	f7ff fb12 	bl	8002768 <HAL_GetTick>
 8003144:	0003      	movs	r3, r0
 8003146:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003148:	e01b      	b.n	8003182 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800314a:	f7ff fb0d 	bl	8002768 <HAL_GetTick>
 800314e:	0002      	movs	r2, r0
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d914      	bls.n	8003182 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2201      	movs	r2, #1
 8003160:	4013      	ands	r3, r2
 8003162:	2b01      	cmp	r3, #1
 8003164:	d00d      	beq.n	8003182 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316a:	2210      	movs	r2, #16
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003176:	2201      	movs	r2, #1
 8003178:	431a      	orrs	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e007      	b.n	8003192 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2201      	movs	r2, #1
 800318a:	4013      	ands	r3, r2
 800318c:	2b01      	cmp	r3, #1
 800318e:	d1dc      	bne.n	800314a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	0018      	movs	r0, r3
 8003194:	46bd      	mov	sp, r7
 8003196:	b004      	add	sp, #16
 8003198:	bd80      	pop	{r7, pc}
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	80000017 	.word	0x80000017
 80031a0:	200004e0 	.word	0x200004e0
 80031a4:	000f4240 	.word	0x000f4240

080031a8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	2203      	movs	r2, #3
 80031bc:	4013      	ands	r3, r2
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d112      	bne.n	80031e8 <ADC_Disable+0x40>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2201      	movs	r2, #1
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d009      	beq.n	80031e4 <ADC_Disable+0x3c>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	2380      	movs	r3, #128	; 0x80
 80031d8:	021b      	lsls	r3, r3, #8
 80031da:	401a      	ands	r2, r3
 80031dc:	2380      	movs	r3, #128	; 0x80
 80031de:	021b      	lsls	r3, r3, #8
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d101      	bne.n	80031e8 <ADC_Disable+0x40>
 80031e4:	2301      	movs	r3, #1
 80031e6:	e000      	b.n	80031ea <ADC_Disable+0x42>
 80031e8:	2300      	movs	r3, #0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d048      	beq.n	8003280 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	2205      	movs	r2, #5
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d110      	bne.n	800321e <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2102      	movs	r1, #2
 8003208:	430a      	orrs	r2, r1
 800320a:	609a      	str	r2, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2203      	movs	r2, #3
 8003212:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003214:	f7ff faa8 	bl	8002768 <HAL_GetTick>
 8003218:	0003      	movs	r3, r0
 800321a:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800321c:	e029      	b.n	8003272 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	2210      	movs	r2, #16
 8003224:	431a      	orrs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322e:	2201      	movs	r2, #1
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e023      	b.n	8003282 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800323a:	f7ff fa95 	bl	8002768 <HAL_GetTick>
 800323e:	0002      	movs	r2, r0
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d914      	bls.n	8003272 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2201      	movs	r2, #1
 8003250:	4013      	ands	r3, r2
 8003252:	2b01      	cmp	r3, #1
 8003254:	d10d      	bne.n	8003272 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325a:	2210      	movs	r2, #16
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003266:	2201      	movs	r2, #1
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e007      	b.n	8003282 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	2201      	movs	r2, #1
 800327a:	4013      	ands	r3, r2
 800327c:	2b01      	cmp	r3, #1
 800327e:	d0dc      	beq.n	800323a <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	0018      	movs	r0, r3
 8003284:	46bd      	mov	sp, r7
 8003286:	b004      	add	sp, #16
 8003288:	bd80      	pop	{r7, pc}

0800328a <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b084      	sub	sp, #16
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	2204      	movs	r2, #4
 800329e:	4013      	ands	r3, r2
 80032a0:	d03a      	beq.n	8003318 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	2204      	movs	r2, #4
 80032aa:	4013      	ands	r3, r2
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d10d      	bne.n	80032cc <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2202      	movs	r2, #2
 80032b8:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80032ba:	d107      	bne.n	80032cc <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2110      	movs	r1, #16
 80032c8:	430a      	orrs	r2, r1
 80032ca:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032cc:	f7ff fa4c 	bl	8002768 <HAL_GetTick>
 80032d0:	0003      	movs	r3, r0
 80032d2:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80032d4:	e01a      	b.n	800330c <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80032d6:	f7ff fa47 	bl	8002768 <HAL_GetTick>
 80032da:	0002      	movs	r2, r0
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d913      	bls.n	800330c <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	2204      	movs	r2, #4
 80032ec:	4013      	ands	r3, r2
 80032ee:	d00d      	beq.n	800330c <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f4:	2210      	movs	r2, #16
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003300:	2201      	movs	r2, #1
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e006      	b.n	800331a <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2204      	movs	r2, #4
 8003314:	4013      	ands	r3, r2
 8003316:	d1de      	bne.n	80032d6 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	0018      	movs	r0, r3
 800331c:	46bd      	mov	sp, r7
 800331e:	b004      	add	sp, #16
 8003320:	bd80      	pop	{r7, pc}
	...

08003324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	0002      	movs	r2, r0
 800332c:	1dfb      	adds	r3, r7, #7
 800332e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003330:	1dfb      	adds	r3, r7, #7
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b7f      	cmp	r3, #127	; 0x7f
 8003336:	d809      	bhi.n	800334c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003338:	1dfb      	adds	r3, r7, #7
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	001a      	movs	r2, r3
 800333e:	231f      	movs	r3, #31
 8003340:	401a      	ands	r2, r3
 8003342:	4b04      	ldr	r3, [pc, #16]	; (8003354 <__NVIC_EnableIRQ+0x30>)
 8003344:	2101      	movs	r1, #1
 8003346:	4091      	lsls	r1, r2
 8003348:	000a      	movs	r2, r1
 800334a:	601a      	str	r2, [r3, #0]
  }
}
 800334c:	46c0      	nop			; (mov r8, r8)
 800334e:	46bd      	mov	sp, r7
 8003350:	b002      	add	sp, #8
 8003352:	bd80      	pop	{r7, pc}
 8003354:	e000e100 	.word	0xe000e100

08003358 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	0002      	movs	r2, r0
 8003360:	1dfb      	adds	r3, r7, #7
 8003362:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003364:	1dfb      	adds	r3, r7, #7
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2b7f      	cmp	r3, #127	; 0x7f
 800336a:	d810      	bhi.n	800338e <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800336c:	1dfb      	adds	r3, r7, #7
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	001a      	movs	r2, r3
 8003372:	231f      	movs	r3, #31
 8003374:	4013      	ands	r3, r2
 8003376:	4908      	ldr	r1, [pc, #32]	; (8003398 <__NVIC_DisableIRQ+0x40>)
 8003378:	2201      	movs	r2, #1
 800337a:	409a      	lsls	r2, r3
 800337c:	0013      	movs	r3, r2
 800337e:	2280      	movs	r2, #128	; 0x80
 8003380:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003382:	f3bf 8f4f 	dsb	sy
}
 8003386:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8003388:	f3bf 8f6f 	isb	sy
}
 800338c:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	46bd      	mov	sp, r7
 8003392:	b002      	add	sp, #8
 8003394:	bd80      	pop	{r7, pc}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	e000e100 	.word	0xe000e100

0800339c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800339c:	b590      	push	{r4, r7, lr}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	0002      	movs	r2, r0
 80033a4:	6039      	str	r1, [r7, #0]
 80033a6:	1dfb      	adds	r3, r7, #7
 80033a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033aa:	1dfb      	adds	r3, r7, #7
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	2b7f      	cmp	r3, #127	; 0x7f
 80033b0:	d828      	bhi.n	8003404 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033b2:	4a2f      	ldr	r2, [pc, #188]	; (8003470 <__NVIC_SetPriority+0xd4>)
 80033b4:	1dfb      	adds	r3, r7, #7
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	b25b      	sxtb	r3, r3
 80033ba:	089b      	lsrs	r3, r3, #2
 80033bc:	33c0      	adds	r3, #192	; 0xc0
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	589b      	ldr	r3, [r3, r2]
 80033c2:	1dfa      	adds	r2, r7, #7
 80033c4:	7812      	ldrb	r2, [r2, #0]
 80033c6:	0011      	movs	r1, r2
 80033c8:	2203      	movs	r2, #3
 80033ca:	400a      	ands	r2, r1
 80033cc:	00d2      	lsls	r2, r2, #3
 80033ce:	21ff      	movs	r1, #255	; 0xff
 80033d0:	4091      	lsls	r1, r2
 80033d2:	000a      	movs	r2, r1
 80033d4:	43d2      	mvns	r2, r2
 80033d6:	401a      	ands	r2, r3
 80033d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	019b      	lsls	r3, r3, #6
 80033de:	22ff      	movs	r2, #255	; 0xff
 80033e0:	401a      	ands	r2, r3
 80033e2:	1dfb      	adds	r3, r7, #7
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	0018      	movs	r0, r3
 80033e8:	2303      	movs	r3, #3
 80033ea:	4003      	ands	r3, r0
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033f0:	481f      	ldr	r0, [pc, #124]	; (8003470 <__NVIC_SetPriority+0xd4>)
 80033f2:	1dfb      	adds	r3, r7, #7
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	b25b      	sxtb	r3, r3
 80033f8:	089b      	lsrs	r3, r3, #2
 80033fa:	430a      	orrs	r2, r1
 80033fc:	33c0      	adds	r3, #192	; 0xc0
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003402:	e031      	b.n	8003468 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003404:	4a1b      	ldr	r2, [pc, #108]	; (8003474 <__NVIC_SetPriority+0xd8>)
 8003406:	1dfb      	adds	r3, r7, #7
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	0019      	movs	r1, r3
 800340c:	230f      	movs	r3, #15
 800340e:	400b      	ands	r3, r1
 8003410:	3b08      	subs	r3, #8
 8003412:	089b      	lsrs	r3, r3, #2
 8003414:	3306      	adds	r3, #6
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	18d3      	adds	r3, r2, r3
 800341a:	3304      	adds	r3, #4
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	1dfa      	adds	r2, r7, #7
 8003420:	7812      	ldrb	r2, [r2, #0]
 8003422:	0011      	movs	r1, r2
 8003424:	2203      	movs	r2, #3
 8003426:	400a      	ands	r2, r1
 8003428:	00d2      	lsls	r2, r2, #3
 800342a:	21ff      	movs	r1, #255	; 0xff
 800342c:	4091      	lsls	r1, r2
 800342e:	000a      	movs	r2, r1
 8003430:	43d2      	mvns	r2, r2
 8003432:	401a      	ands	r2, r3
 8003434:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	019b      	lsls	r3, r3, #6
 800343a:	22ff      	movs	r2, #255	; 0xff
 800343c:	401a      	ands	r2, r3
 800343e:	1dfb      	adds	r3, r7, #7
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	0018      	movs	r0, r3
 8003444:	2303      	movs	r3, #3
 8003446:	4003      	ands	r3, r0
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800344c:	4809      	ldr	r0, [pc, #36]	; (8003474 <__NVIC_SetPriority+0xd8>)
 800344e:	1dfb      	adds	r3, r7, #7
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	001c      	movs	r4, r3
 8003454:	230f      	movs	r3, #15
 8003456:	4023      	ands	r3, r4
 8003458:	3b08      	subs	r3, #8
 800345a:	089b      	lsrs	r3, r3, #2
 800345c:	430a      	orrs	r2, r1
 800345e:	3306      	adds	r3, #6
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	18c3      	adds	r3, r0, r3
 8003464:	3304      	adds	r3, #4
 8003466:	601a      	str	r2, [r3, #0]
}
 8003468:	46c0      	nop			; (mov r8, r8)
 800346a:	46bd      	mov	sp, r7
 800346c:	b003      	add	sp, #12
 800346e:	bd90      	pop	{r4, r7, pc}
 8003470:	e000e100 	.word	0xe000e100
 8003474:	e000ed00 	.word	0xe000ed00

08003478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	1e5a      	subs	r2, r3, #1
 8003484:	2380      	movs	r3, #128	; 0x80
 8003486:	045b      	lsls	r3, r3, #17
 8003488:	429a      	cmp	r2, r3
 800348a:	d301      	bcc.n	8003490 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800348c:	2301      	movs	r3, #1
 800348e:	e010      	b.n	80034b2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003490:	4b0a      	ldr	r3, [pc, #40]	; (80034bc <SysTick_Config+0x44>)
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	3a01      	subs	r2, #1
 8003496:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003498:	2301      	movs	r3, #1
 800349a:	425b      	negs	r3, r3
 800349c:	2103      	movs	r1, #3
 800349e:	0018      	movs	r0, r3
 80034a0:	f7ff ff7c 	bl	800339c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034a4:	4b05      	ldr	r3, [pc, #20]	; (80034bc <SysTick_Config+0x44>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034aa:	4b04      	ldr	r3, [pc, #16]	; (80034bc <SysTick_Config+0x44>)
 80034ac:	2207      	movs	r2, #7
 80034ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	0018      	movs	r0, r3
 80034b4:	46bd      	mov	sp, r7
 80034b6:	b002      	add	sp, #8
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	e000e010 	.word	0xe000e010

080034c0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60b9      	str	r1, [r7, #8]
 80034c8:	607a      	str	r2, [r7, #4]
 80034ca:	210f      	movs	r1, #15
 80034cc:	187b      	adds	r3, r7, r1
 80034ce:	1c02      	adds	r2, r0, #0
 80034d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	187b      	adds	r3, r7, r1
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	b25b      	sxtb	r3, r3
 80034da:	0011      	movs	r1, r2
 80034dc:	0018      	movs	r0, r3
 80034de:	f7ff ff5d 	bl	800339c <__NVIC_SetPriority>
}
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	46bd      	mov	sp, r7
 80034e6:	b004      	add	sp, #16
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	0002      	movs	r2, r0
 80034f2:	1dfb      	adds	r3, r7, #7
 80034f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034f6:	1dfb      	adds	r3, r7, #7
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	b25b      	sxtb	r3, r3
 80034fc:	0018      	movs	r0, r3
 80034fe:	f7ff ff11 	bl	8003324 <__NVIC_EnableIRQ>
}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	46bd      	mov	sp, r7
 8003506:	b002      	add	sp, #8
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b082      	sub	sp, #8
 800350e:	af00      	add	r7, sp, #0
 8003510:	0002      	movs	r2, r0
 8003512:	1dfb      	adds	r3, r7, #7
 8003514:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003516:	1dfb      	adds	r3, r7, #7
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	b25b      	sxtb	r3, r3
 800351c:	0018      	movs	r0, r3
 800351e:	f7ff ff1b 	bl	8003358 <__NVIC_DisableIRQ>
}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	46bd      	mov	sp, r7
 8003526:	b002      	add	sp, #8
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	0018      	movs	r0, r3
 8003536:	f7ff ff9f 	bl	8003478 <SysTick_Config>
 800353a:	0003      	movs	r3, r0
}
 800353c:	0018      	movs	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	b002      	add	sp, #8
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800354e:	2300      	movs	r3, #0
 8003550:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003552:	e14f      	b.n	80037f4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2101      	movs	r1, #1
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	4091      	lsls	r1, r2
 800355e:	000a      	movs	r2, r1
 8003560:	4013      	ands	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d100      	bne.n	800356c <HAL_GPIO_Init+0x28>
 800356a:	e140      	b.n	80037ee <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2203      	movs	r2, #3
 8003572:	4013      	ands	r3, r2
 8003574:	2b01      	cmp	r3, #1
 8003576:	d005      	beq.n	8003584 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2203      	movs	r2, #3
 800357e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003580:	2b02      	cmp	r3, #2
 8003582:	d130      	bne.n	80035e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	2203      	movs	r2, #3
 8003590:	409a      	lsls	r2, r3
 8003592:	0013      	movs	r3, r2
 8003594:	43da      	mvns	r2, r3
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	4013      	ands	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	409a      	lsls	r2, r3
 80035a6:	0013      	movs	r3, r2
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035ba:	2201      	movs	r2, #1
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	409a      	lsls	r2, r3
 80035c0:	0013      	movs	r3, r2
 80035c2:	43da      	mvns	r2, r3
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4013      	ands	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	091b      	lsrs	r3, r3, #4
 80035d0:	2201      	movs	r2, #1
 80035d2:	401a      	ands	r2, r3
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	409a      	lsls	r2, r3
 80035d8:	0013      	movs	r3, r2
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2203      	movs	r2, #3
 80035ec:	4013      	ands	r3, r2
 80035ee:	2b03      	cmp	r3, #3
 80035f0:	d017      	beq.n	8003622 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	2203      	movs	r2, #3
 80035fe:	409a      	lsls	r2, r3
 8003600:	0013      	movs	r3, r2
 8003602:	43da      	mvns	r2, r3
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	4013      	ands	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	409a      	lsls	r2, r3
 8003614:	0013      	movs	r3, r2
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2203      	movs	r2, #3
 8003628:	4013      	ands	r3, r2
 800362a:	2b02      	cmp	r3, #2
 800362c:	d123      	bne.n	8003676 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	08da      	lsrs	r2, r3, #3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3208      	adds	r2, #8
 8003636:	0092      	lsls	r2, r2, #2
 8003638:	58d3      	ldr	r3, [r2, r3]
 800363a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	2207      	movs	r2, #7
 8003640:	4013      	ands	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	220f      	movs	r2, #15
 8003646:	409a      	lsls	r2, r3
 8003648:	0013      	movs	r3, r2
 800364a:	43da      	mvns	r2, r3
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	4013      	ands	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	691a      	ldr	r2, [r3, #16]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2107      	movs	r1, #7
 800365a:	400b      	ands	r3, r1
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	409a      	lsls	r2, r3
 8003660:	0013      	movs	r3, r2
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	08da      	lsrs	r2, r3, #3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3208      	adds	r2, #8
 8003670:	0092      	lsls	r2, r2, #2
 8003672:	6939      	ldr	r1, [r7, #16]
 8003674:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	2203      	movs	r2, #3
 8003682:	409a      	lsls	r2, r3
 8003684:	0013      	movs	r3, r2
 8003686:	43da      	mvns	r2, r3
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	4013      	ands	r3, r2
 800368c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2203      	movs	r2, #3
 8003694:	401a      	ands	r2, r3
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	409a      	lsls	r2, r3
 800369c:	0013      	movs	r3, r2
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	23c0      	movs	r3, #192	; 0xc0
 80036b0:	029b      	lsls	r3, r3, #10
 80036b2:	4013      	ands	r3, r2
 80036b4:	d100      	bne.n	80036b8 <HAL_GPIO_Init+0x174>
 80036b6:	e09a      	b.n	80037ee <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036b8:	4b54      	ldr	r3, [pc, #336]	; (800380c <HAL_GPIO_Init+0x2c8>)
 80036ba:	699a      	ldr	r2, [r3, #24]
 80036bc:	4b53      	ldr	r3, [pc, #332]	; (800380c <HAL_GPIO_Init+0x2c8>)
 80036be:	2101      	movs	r1, #1
 80036c0:	430a      	orrs	r2, r1
 80036c2:	619a      	str	r2, [r3, #24]
 80036c4:	4b51      	ldr	r3, [pc, #324]	; (800380c <HAL_GPIO_Init+0x2c8>)
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	2201      	movs	r2, #1
 80036ca:	4013      	ands	r3, r2
 80036cc:	60bb      	str	r3, [r7, #8]
 80036ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036d0:	4a4f      	ldr	r2, [pc, #316]	; (8003810 <HAL_GPIO_Init+0x2cc>)
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	089b      	lsrs	r3, r3, #2
 80036d6:	3302      	adds	r3, #2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	589b      	ldr	r3, [r3, r2]
 80036dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2203      	movs	r2, #3
 80036e2:	4013      	ands	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	220f      	movs	r2, #15
 80036e8:	409a      	lsls	r2, r3
 80036ea:	0013      	movs	r3, r2
 80036ec:	43da      	mvns	r2, r3
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4013      	ands	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	2390      	movs	r3, #144	; 0x90
 80036f8:	05db      	lsls	r3, r3, #23
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d013      	beq.n	8003726 <HAL_GPIO_Init+0x1e2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a44      	ldr	r2, [pc, #272]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00d      	beq.n	8003722 <HAL_GPIO_Init+0x1de>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a43      	ldr	r2, [pc, #268]	; (8003818 <HAL_GPIO_Init+0x2d4>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d007      	beq.n	800371e <HAL_GPIO_Init+0x1da>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a42      	ldr	r2, [pc, #264]	; (800381c <HAL_GPIO_Init+0x2d8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d101      	bne.n	800371a <HAL_GPIO_Init+0x1d6>
 8003716:	2303      	movs	r3, #3
 8003718:	e006      	b.n	8003728 <HAL_GPIO_Init+0x1e4>
 800371a:	2305      	movs	r3, #5
 800371c:	e004      	b.n	8003728 <HAL_GPIO_Init+0x1e4>
 800371e:	2302      	movs	r3, #2
 8003720:	e002      	b.n	8003728 <HAL_GPIO_Init+0x1e4>
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <HAL_GPIO_Init+0x1e4>
 8003726:	2300      	movs	r3, #0
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	2103      	movs	r1, #3
 800372c:	400a      	ands	r2, r1
 800372e:	0092      	lsls	r2, r2, #2
 8003730:	4093      	lsls	r3, r2
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	4313      	orrs	r3, r2
 8003736:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003738:	4935      	ldr	r1, [pc, #212]	; (8003810 <HAL_GPIO_Init+0x2cc>)
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	089b      	lsrs	r3, r3, #2
 800373e:	3302      	adds	r3, #2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003746:	4b36      	ldr	r3, [pc, #216]	; (8003820 <HAL_GPIO_Init+0x2dc>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	43da      	mvns	r2, r3
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	4013      	ands	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	2380      	movs	r3, #128	; 0x80
 800375c:	035b      	lsls	r3, r3, #13
 800375e:	4013      	ands	r3, r2
 8003760:	d003      	beq.n	800376a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4313      	orrs	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800376a:	4b2d      	ldr	r3, [pc, #180]	; (8003820 <HAL_GPIO_Init+0x2dc>)
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003770:	4b2b      	ldr	r3, [pc, #172]	; (8003820 <HAL_GPIO_Init+0x2dc>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	43da      	mvns	r2, r3
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	4013      	ands	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	2380      	movs	r3, #128	; 0x80
 8003786:	039b      	lsls	r3, r3, #14
 8003788:	4013      	ands	r3, r2
 800378a:	d003      	beq.n	8003794 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003794:	4b22      	ldr	r3, [pc, #136]	; (8003820 <HAL_GPIO_Init+0x2dc>)
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800379a:	4b21      	ldr	r3, [pc, #132]	; (8003820 <HAL_GPIO_Init+0x2dc>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	43da      	mvns	r2, r3
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	4013      	ands	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	2380      	movs	r3, #128	; 0x80
 80037b0:	029b      	lsls	r3, r3, #10
 80037b2:	4013      	ands	r3, r2
 80037b4:	d003      	beq.n	80037be <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80037be:	4b18      	ldr	r3, [pc, #96]	; (8003820 <HAL_GPIO_Init+0x2dc>)
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80037c4:	4b16      	ldr	r3, [pc, #88]	; (8003820 <HAL_GPIO_Init+0x2dc>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	43da      	mvns	r2, r3
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	4013      	ands	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	2380      	movs	r3, #128	; 0x80
 80037da:	025b      	lsls	r3, r3, #9
 80037dc:	4013      	ands	r3, r2
 80037de:	d003      	beq.n	80037e8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80037e8:	4b0d      	ldr	r3, [pc, #52]	; (8003820 <HAL_GPIO_Init+0x2dc>)
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	3301      	adds	r3, #1
 80037f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	40da      	lsrs	r2, r3
 80037fc:	1e13      	subs	r3, r2, #0
 80037fe:	d000      	beq.n	8003802 <HAL_GPIO_Init+0x2be>
 8003800:	e6a8      	b.n	8003554 <HAL_GPIO_Init+0x10>
  } 
}
 8003802:	46c0      	nop			; (mov r8, r8)
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	46bd      	mov	sp, r7
 8003808:	b006      	add	sp, #24
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40021000 	.word	0x40021000
 8003810:	40010000 	.word	0x40010000
 8003814:	48000400 	.word	0x48000400
 8003818:	48000800 	.word	0x48000800
 800381c:	48000c00 	.word	0x48000c00
 8003820:	40010400 	.word	0x40010400

08003824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	0008      	movs	r0, r1
 800382e:	0011      	movs	r1, r2
 8003830:	1cbb      	adds	r3, r7, #2
 8003832:	1c02      	adds	r2, r0, #0
 8003834:	801a      	strh	r2, [r3, #0]
 8003836:	1c7b      	adds	r3, r7, #1
 8003838:	1c0a      	adds	r2, r1, #0
 800383a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800383c:	1c7b      	adds	r3, r7, #1
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d004      	beq.n	800384e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003844:	1cbb      	adds	r3, r7, #2
 8003846:	881a      	ldrh	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800384c:	e003      	b.n	8003856 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800384e:	1cbb      	adds	r3, r7, #2
 8003850:	881a      	ldrh	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003856:	46c0      	nop			; (mov r8, r8)
 8003858:	46bd      	mov	sp, r7
 800385a:	b002      	add	sp, #8
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	0002      	movs	r2, r0
 8003868:	1dbb      	adds	r3, r7, #6
 800386a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800386c:	4b09      	ldr	r3, [pc, #36]	; (8003894 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	1dba      	adds	r2, r7, #6
 8003872:	8812      	ldrh	r2, [r2, #0]
 8003874:	4013      	ands	r3, r2
 8003876:	d008      	beq.n	800388a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003878:	4b06      	ldr	r3, [pc, #24]	; (8003894 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800387a:	1dba      	adds	r2, r7, #6
 800387c:	8812      	ldrh	r2, [r2, #0]
 800387e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003880:	1dbb      	adds	r3, r7, #6
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	0018      	movs	r0, r3
 8003886:	f000 f807 	bl	8003898 <HAL_GPIO_EXTI_Callback>
  }
}
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	46bd      	mov	sp, r7
 800388e:	b002      	add	sp, #8
 8003890:	bd80      	pop	{r7, pc}
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	40010400 	.word	0x40010400

08003898 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	0002      	movs	r2, r0
 80038a0:	1dbb      	adds	r3, r7, #6
 80038a2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 80038a4:	46c0      	nop			; (mov r8, r8)
 80038a6:	46bd      	mov	sp, r7
 80038a8:	b002      	add	sp, #8
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	000a      	movs	r2, r1
 80038b6:	1cfb      	adds	r3, r7, #3
 80038b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 80038ba:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <HAL_PWR_EnterSLEEPMode+0x34>)
 80038bc:	691a      	ldr	r2, [r3, #16]
 80038be:	4b08      	ldr	r3, [pc, #32]	; (80038e0 <HAL_PWR_EnterSLEEPMode+0x34>)
 80038c0:	2104      	movs	r1, #4
 80038c2:	438a      	bics	r2, r1
 80038c4:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80038c6:	1cfb      	adds	r3, r7, #3
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d101      	bne.n	80038d2 <HAL_PWR_EnterSLEEPMode+0x26>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80038ce:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80038d0:	e002      	b.n	80038d8 <HAL_PWR_EnterSLEEPMode+0x2c>
    __SEV();
 80038d2:	bf40      	sev
    __WFE();
 80038d4:	bf20      	wfe
    __WFE();
 80038d6:	bf20      	wfe
}
 80038d8:	46c0      	nop			; (mov r8, r8)
 80038da:	46bd      	mov	sp, r7
 80038dc:	b002      	add	sp, #8
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	e000ed00 	.word	0xe000ed00

080038e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b088      	sub	sp, #32
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e305      	b.n	8003f02 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2201      	movs	r2, #1
 80038fc:	4013      	ands	r3, r2
 80038fe:	d100      	bne.n	8003902 <HAL_RCC_OscConfig+0x1e>
 8003900:	e08d      	b.n	8003a1e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003902:	4bc5      	ldr	r3, [pc, #788]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	220c      	movs	r2, #12
 8003908:	4013      	ands	r3, r2
 800390a:	2b04      	cmp	r3, #4
 800390c:	d00e      	beq.n	800392c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800390e:	4bc2      	ldr	r3, [pc, #776]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	220c      	movs	r2, #12
 8003914:	4013      	ands	r3, r2
 8003916:	2b08      	cmp	r3, #8
 8003918:	d116      	bne.n	8003948 <HAL_RCC_OscConfig+0x64>
 800391a:	4bbf      	ldr	r3, [pc, #764]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	23c0      	movs	r3, #192	; 0xc0
 8003920:	025b      	lsls	r3, r3, #9
 8003922:	401a      	ands	r2, r3
 8003924:	2380      	movs	r3, #128	; 0x80
 8003926:	025b      	lsls	r3, r3, #9
 8003928:	429a      	cmp	r2, r3
 800392a:	d10d      	bne.n	8003948 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800392c:	4bba      	ldr	r3, [pc, #744]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	2380      	movs	r3, #128	; 0x80
 8003932:	029b      	lsls	r3, r3, #10
 8003934:	4013      	ands	r3, r2
 8003936:	d100      	bne.n	800393a <HAL_RCC_OscConfig+0x56>
 8003938:	e070      	b.n	8003a1c <HAL_RCC_OscConfig+0x138>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d000      	beq.n	8003944 <HAL_RCC_OscConfig+0x60>
 8003942:	e06b      	b.n	8003a1c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e2dc      	b.n	8003f02 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d107      	bne.n	8003960 <HAL_RCC_OscConfig+0x7c>
 8003950:	4bb1      	ldr	r3, [pc, #708]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	4bb0      	ldr	r3, [pc, #704]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003956:	2180      	movs	r1, #128	; 0x80
 8003958:	0249      	lsls	r1, r1, #9
 800395a:	430a      	orrs	r2, r1
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	e02f      	b.n	80039c0 <HAL_RCC_OscConfig+0xdc>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10c      	bne.n	8003982 <HAL_RCC_OscConfig+0x9e>
 8003968:	4bab      	ldr	r3, [pc, #684]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4baa      	ldr	r3, [pc, #680]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 800396e:	49ab      	ldr	r1, [pc, #684]	; (8003c1c <HAL_RCC_OscConfig+0x338>)
 8003970:	400a      	ands	r2, r1
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	4ba8      	ldr	r3, [pc, #672]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	4ba7      	ldr	r3, [pc, #668]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 800397a:	49a9      	ldr	r1, [pc, #676]	; (8003c20 <HAL_RCC_OscConfig+0x33c>)
 800397c:	400a      	ands	r2, r1
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	e01e      	b.n	80039c0 <HAL_RCC_OscConfig+0xdc>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b05      	cmp	r3, #5
 8003988:	d10e      	bne.n	80039a8 <HAL_RCC_OscConfig+0xc4>
 800398a:	4ba3      	ldr	r3, [pc, #652]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	4ba2      	ldr	r3, [pc, #648]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003990:	2180      	movs	r1, #128	; 0x80
 8003992:	02c9      	lsls	r1, r1, #11
 8003994:	430a      	orrs	r2, r1
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	4b9f      	ldr	r3, [pc, #636]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	4b9e      	ldr	r3, [pc, #632]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 800399e:	2180      	movs	r1, #128	; 0x80
 80039a0:	0249      	lsls	r1, r1, #9
 80039a2:	430a      	orrs	r2, r1
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	e00b      	b.n	80039c0 <HAL_RCC_OscConfig+0xdc>
 80039a8:	4b9b      	ldr	r3, [pc, #620]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	4b9a      	ldr	r3, [pc, #616]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 80039ae:	499b      	ldr	r1, [pc, #620]	; (8003c1c <HAL_RCC_OscConfig+0x338>)
 80039b0:	400a      	ands	r2, r1
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	4b98      	ldr	r3, [pc, #608]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	4b97      	ldr	r3, [pc, #604]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 80039ba:	4999      	ldr	r1, [pc, #612]	; (8003c20 <HAL_RCC_OscConfig+0x33c>)
 80039bc:	400a      	ands	r2, r1
 80039be:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d014      	beq.n	80039f2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c8:	f7fe fece 	bl	8002768 <HAL_GetTick>
 80039cc:	0003      	movs	r3, r0
 80039ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d0:	e008      	b.n	80039e4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039d2:	f7fe fec9 	bl	8002768 <HAL_GetTick>
 80039d6:	0002      	movs	r2, r0
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b64      	cmp	r3, #100	; 0x64
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e28e      	b.n	8003f02 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e4:	4b8c      	ldr	r3, [pc, #560]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	2380      	movs	r3, #128	; 0x80
 80039ea:	029b      	lsls	r3, r3, #10
 80039ec:	4013      	ands	r3, r2
 80039ee:	d0f0      	beq.n	80039d2 <HAL_RCC_OscConfig+0xee>
 80039f0:	e015      	b.n	8003a1e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f2:	f7fe feb9 	bl	8002768 <HAL_GetTick>
 80039f6:	0003      	movs	r3, r0
 80039f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039fc:	f7fe feb4 	bl	8002768 <HAL_GetTick>
 8003a00:	0002      	movs	r2, r0
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b64      	cmp	r3, #100	; 0x64
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e279      	b.n	8003f02 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a0e:	4b82      	ldr	r3, [pc, #520]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	2380      	movs	r3, #128	; 0x80
 8003a14:	029b      	lsls	r3, r3, #10
 8003a16:	4013      	ands	r3, r2
 8003a18:	d1f0      	bne.n	80039fc <HAL_RCC_OscConfig+0x118>
 8003a1a:	e000      	b.n	8003a1e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a1c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2202      	movs	r2, #2
 8003a24:	4013      	ands	r3, r2
 8003a26:	d100      	bne.n	8003a2a <HAL_RCC_OscConfig+0x146>
 8003a28:	e06c      	b.n	8003b04 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003a2a:	4b7b      	ldr	r3, [pc, #492]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	220c      	movs	r2, #12
 8003a30:	4013      	ands	r3, r2
 8003a32:	d00e      	beq.n	8003a52 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003a34:	4b78      	ldr	r3, [pc, #480]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	220c      	movs	r2, #12
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d11f      	bne.n	8003a80 <HAL_RCC_OscConfig+0x19c>
 8003a40:	4b75      	ldr	r3, [pc, #468]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	23c0      	movs	r3, #192	; 0xc0
 8003a46:	025b      	lsls	r3, r3, #9
 8003a48:	401a      	ands	r2, r3
 8003a4a:	2380      	movs	r3, #128	; 0x80
 8003a4c:	021b      	lsls	r3, r3, #8
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d116      	bne.n	8003a80 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a52:	4b71      	ldr	r3, [pc, #452]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2202      	movs	r2, #2
 8003a58:	4013      	ands	r3, r2
 8003a5a:	d005      	beq.n	8003a68 <HAL_RCC_OscConfig+0x184>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d001      	beq.n	8003a68 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e24c      	b.n	8003f02 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a68:	4b6b      	ldr	r3, [pc, #428]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	22f8      	movs	r2, #248	; 0xf8
 8003a6e:	4393      	bics	r3, r2
 8003a70:	0019      	movs	r1, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	00da      	lsls	r2, r3, #3
 8003a78:	4b67      	ldr	r3, [pc, #412]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a7e:	e041      	b.n	8003b04 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d024      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a88:	4b63      	ldr	r3, [pc, #396]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	4b62      	ldr	r3, [pc, #392]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003a8e:	2101      	movs	r1, #1
 8003a90:	430a      	orrs	r2, r1
 8003a92:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a94:	f7fe fe68 	bl	8002768 <HAL_GetTick>
 8003a98:	0003      	movs	r3, r0
 8003a9a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a9e:	f7fe fe63 	bl	8002768 <HAL_GetTick>
 8003aa2:	0002      	movs	r2, r0
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e228      	b.n	8003f02 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab0:	4b59      	ldr	r3, [pc, #356]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	d0f1      	beq.n	8003a9e <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aba:	4b57      	ldr	r3, [pc, #348]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	22f8      	movs	r2, #248	; 0xf8
 8003ac0:	4393      	bics	r3, r2
 8003ac2:	0019      	movs	r1, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	00da      	lsls	r2, r3, #3
 8003aca:	4b53      	ldr	r3, [pc, #332]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003acc:	430a      	orrs	r2, r1
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	e018      	b.n	8003b04 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ad2:	4b51      	ldr	r3, [pc, #324]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	4b50      	ldr	r3, [pc, #320]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003ad8:	2101      	movs	r1, #1
 8003ada:	438a      	bics	r2, r1
 8003adc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ade:	f7fe fe43 	bl	8002768 <HAL_GetTick>
 8003ae2:	0003      	movs	r3, r0
 8003ae4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ae8:	f7fe fe3e 	bl	8002768 <HAL_GetTick>
 8003aec:	0002      	movs	r2, r0
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e203      	b.n	8003f02 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003afa:	4b47      	ldr	r3, [pc, #284]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2202      	movs	r2, #2
 8003b00:	4013      	ands	r3, r2
 8003b02:	d1f1      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2208      	movs	r2, #8
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d036      	beq.n	8003b7c <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d019      	beq.n	8003b4a <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b16:	4b40      	ldr	r3, [pc, #256]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003b18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b1a:	4b3f      	ldr	r3, [pc, #252]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b22:	f7fe fe21 	bl	8002768 <HAL_GetTick>
 8003b26:	0003      	movs	r3, r0
 8003b28:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b2c:	f7fe fe1c 	bl	8002768 <HAL_GetTick>
 8003b30:	0002      	movs	r2, r0
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e1e1      	b.n	8003f02 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b3e:	4b36      	ldr	r3, [pc, #216]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	2202      	movs	r2, #2
 8003b44:	4013      	ands	r3, r2
 8003b46:	d0f1      	beq.n	8003b2c <HAL_RCC_OscConfig+0x248>
 8003b48:	e018      	b.n	8003b7c <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b4a:	4b33      	ldr	r3, [pc, #204]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003b4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b4e:	4b32      	ldr	r3, [pc, #200]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003b50:	2101      	movs	r1, #1
 8003b52:	438a      	bics	r2, r1
 8003b54:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b56:	f7fe fe07 	bl	8002768 <HAL_GetTick>
 8003b5a:	0003      	movs	r3, r0
 8003b5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b60:	f7fe fe02 	bl	8002768 <HAL_GetTick>
 8003b64:	0002      	movs	r2, r0
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e1c7      	b.n	8003f02 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b72:	4b29      	ldr	r3, [pc, #164]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	2202      	movs	r2, #2
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d1f1      	bne.n	8003b60 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2204      	movs	r2, #4
 8003b82:	4013      	ands	r3, r2
 8003b84:	d100      	bne.n	8003b88 <HAL_RCC_OscConfig+0x2a4>
 8003b86:	e0b5      	b.n	8003cf4 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b88:	201f      	movs	r0, #31
 8003b8a:	183b      	adds	r3, r7, r0
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b90:	4b21      	ldr	r3, [pc, #132]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003b92:	69da      	ldr	r2, [r3, #28]
 8003b94:	2380      	movs	r3, #128	; 0x80
 8003b96:	055b      	lsls	r3, r3, #21
 8003b98:	4013      	ands	r3, r2
 8003b9a:	d110      	bne.n	8003bbe <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b9c:	4b1e      	ldr	r3, [pc, #120]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003b9e:	69da      	ldr	r2, [r3, #28]
 8003ba0:	4b1d      	ldr	r3, [pc, #116]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003ba2:	2180      	movs	r1, #128	; 0x80
 8003ba4:	0549      	lsls	r1, r1, #21
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	61da      	str	r2, [r3, #28]
 8003baa:	4b1b      	ldr	r3, [pc, #108]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003bac:	69da      	ldr	r2, [r3, #28]
 8003bae:	2380      	movs	r3, #128	; 0x80
 8003bb0:	055b      	lsls	r3, r3, #21
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003bb8:	183b      	adds	r3, r7, r0
 8003bba:	2201      	movs	r2, #1
 8003bbc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bbe:	4b19      	ldr	r3, [pc, #100]	; (8003c24 <HAL_RCC_OscConfig+0x340>)
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	2380      	movs	r3, #128	; 0x80
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	d11a      	bne.n	8003c00 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bca:	4b16      	ldr	r3, [pc, #88]	; (8003c24 <HAL_RCC_OscConfig+0x340>)
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	4b15      	ldr	r3, [pc, #84]	; (8003c24 <HAL_RCC_OscConfig+0x340>)
 8003bd0:	2180      	movs	r1, #128	; 0x80
 8003bd2:	0049      	lsls	r1, r1, #1
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bd8:	f7fe fdc6 	bl	8002768 <HAL_GetTick>
 8003bdc:	0003      	movs	r3, r0
 8003bde:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003be2:	f7fe fdc1 	bl	8002768 <HAL_GetTick>
 8003be6:	0002      	movs	r2, r0
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b64      	cmp	r3, #100	; 0x64
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e186      	b.n	8003f02 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf4:	4b0b      	ldr	r3, [pc, #44]	; (8003c24 <HAL_RCC_OscConfig+0x340>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	2380      	movs	r3, #128	; 0x80
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	d0f0      	beq.n	8003be2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d10f      	bne.n	8003c28 <HAL_RCC_OscConfig+0x344>
 8003c08:	4b03      	ldr	r3, [pc, #12]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003c0a:	6a1a      	ldr	r2, [r3, #32]
 8003c0c:	4b02      	ldr	r3, [pc, #8]	; (8003c18 <HAL_RCC_OscConfig+0x334>)
 8003c0e:	2101      	movs	r1, #1
 8003c10:	430a      	orrs	r2, r1
 8003c12:	621a      	str	r2, [r3, #32]
 8003c14:	e036      	b.n	8003c84 <HAL_RCC_OscConfig+0x3a0>
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	fffeffff 	.word	0xfffeffff
 8003c20:	fffbffff 	.word	0xfffbffff
 8003c24:	40007000 	.word	0x40007000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10c      	bne.n	8003c4a <HAL_RCC_OscConfig+0x366>
 8003c30:	4bb6      	ldr	r3, [pc, #728]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003c32:	6a1a      	ldr	r2, [r3, #32]
 8003c34:	4bb5      	ldr	r3, [pc, #724]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003c36:	2101      	movs	r1, #1
 8003c38:	438a      	bics	r2, r1
 8003c3a:	621a      	str	r2, [r3, #32]
 8003c3c:	4bb3      	ldr	r3, [pc, #716]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003c3e:	6a1a      	ldr	r2, [r3, #32]
 8003c40:	4bb2      	ldr	r3, [pc, #712]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003c42:	2104      	movs	r1, #4
 8003c44:	438a      	bics	r2, r1
 8003c46:	621a      	str	r2, [r3, #32]
 8003c48:	e01c      	b.n	8003c84 <HAL_RCC_OscConfig+0x3a0>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	2b05      	cmp	r3, #5
 8003c50:	d10c      	bne.n	8003c6c <HAL_RCC_OscConfig+0x388>
 8003c52:	4bae      	ldr	r3, [pc, #696]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003c54:	6a1a      	ldr	r2, [r3, #32]
 8003c56:	4bad      	ldr	r3, [pc, #692]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003c58:	2104      	movs	r1, #4
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	621a      	str	r2, [r3, #32]
 8003c5e:	4bab      	ldr	r3, [pc, #684]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003c60:	6a1a      	ldr	r2, [r3, #32]
 8003c62:	4baa      	ldr	r3, [pc, #680]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003c64:	2101      	movs	r1, #1
 8003c66:	430a      	orrs	r2, r1
 8003c68:	621a      	str	r2, [r3, #32]
 8003c6a:	e00b      	b.n	8003c84 <HAL_RCC_OscConfig+0x3a0>
 8003c6c:	4ba7      	ldr	r3, [pc, #668]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003c6e:	6a1a      	ldr	r2, [r3, #32]
 8003c70:	4ba6      	ldr	r3, [pc, #664]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003c72:	2101      	movs	r1, #1
 8003c74:	438a      	bics	r2, r1
 8003c76:	621a      	str	r2, [r3, #32]
 8003c78:	4ba4      	ldr	r3, [pc, #656]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003c7a:	6a1a      	ldr	r2, [r3, #32]
 8003c7c:	4ba3      	ldr	r3, [pc, #652]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003c7e:	2104      	movs	r1, #4
 8003c80:	438a      	bics	r2, r1
 8003c82:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d014      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c8c:	f7fe fd6c 	bl	8002768 <HAL_GetTick>
 8003c90:	0003      	movs	r3, r0
 8003c92:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c94:	e009      	b.n	8003caa <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c96:	f7fe fd67 	bl	8002768 <HAL_GetTick>
 8003c9a:	0002      	movs	r2, r0
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	4a9b      	ldr	r2, [pc, #620]	; (8003f10 <HAL_RCC_OscConfig+0x62c>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e12b      	b.n	8003f02 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003caa:	4b98      	ldr	r3, [pc, #608]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	d0f0      	beq.n	8003c96 <HAL_RCC_OscConfig+0x3b2>
 8003cb4:	e013      	b.n	8003cde <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb6:	f7fe fd57 	bl	8002768 <HAL_GetTick>
 8003cba:	0003      	movs	r3, r0
 8003cbc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cbe:	e009      	b.n	8003cd4 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cc0:	f7fe fd52 	bl	8002768 <HAL_GetTick>
 8003cc4:	0002      	movs	r2, r0
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	4a91      	ldr	r2, [pc, #580]	; (8003f10 <HAL_RCC_OscConfig+0x62c>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e116      	b.n	8003f02 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd4:	4b8d      	ldr	r3, [pc, #564]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	2202      	movs	r2, #2
 8003cda:	4013      	ands	r3, r2
 8003cdc:	d1f0      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cde:	231f      	movs	r3, #31
 8003ce0:	18fb      	adds	r3, r7, r3
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d105      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce8:	4b88      	ldr	r3, [pc, #544]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003cea:	69da      	ldr	r2, [r3, #28]
 8003cec:	4b87      	ldr	r3, [pc, #540]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003cee:	4989      	ldr	r1, [pc, #548]	; (8003f14 <HAL_RCC_OscConfig+0x630>)
 8003cf0:	400a      	ands	r2, r1
 8003cf2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2210      	movs	r2, #16
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	d063      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d12a      	bne.n	8003d5c <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003d06:	4b81      	ldr	r3, [pc, #516]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003d08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d0a:	4b80      	ldr	r3, [pc, #512]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003d0c:	2104      	movs	r1, #4
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003d12:	4b7e      	ldr	r3, [pc, #504]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003d14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d16:	4b7d      	ldr	r3, [pc, #500]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003d18:	2101      	movs	r1, #1
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d1e:	f7fe fd23 	bl	8002768 <HAL_GetTick>
 8003d22:	0003      	movs	r3, r0
 8003d24:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003d28:	f7fe fd1e 	bl	8002768 <HAL_GetTick>
 8003d2c:	0002      	movs	r2, r0
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e0e3      	b.n	8003f02 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003d3a:	4b74      	ldr	r3, [pc, #464]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3e:	2202      	movs	r2, #2
 8003d40:	4013      	ands	r3, r2
 8003d42:	d0f1      	beq.n	8003d28 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003d44:	4b71      	ldr	r3, [pc, #452]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d48:	22f8      	movs	r2, #248	; 0xf8
 8003d4a:	4393      	bics	r3, r2
 8003d4c:	0019      	movs	r1, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	00da      	lsls	r2, r3, #3
 8003d54:	4b6d      	ldr	r3, [pc, #436]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003d56:	430a      	orrs	r2, r1
 8003d58:	635a      	str	r2, [r3, #52]	; 0x34
 8003d5a:	e034      	b.n	8003dc6 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	3305      	adds	r3, #5
 8003d62:	d111      	bne.n	8003d88 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003d64:	4b69      	ldr	r3, [pc, #420]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d68:	4b68      	ldr	r3, [pc, #416]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003d6a:	2104      	movs	r1, #4
 8003d6c:	438a      	bics	r2, r1
 8003d6e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003d70:	4b66      	ldr	r3, [pc, #408]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d74:	22f8      	movs	r2, #248	; 0xf8
 8003d76:	4393      	bics	r3, r2
 8003d78:	0019      	movs	r1, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	00da      	lsls	r2, r3, #3
 8003d80:	4b62      	ldr	r3, [pc, #392]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003d82:	430a      	orrs	r2, r1
 8003d84:	635a      	str	r2, [r3, #52]	; 0x34
 8003d86:	e01e      	b.n	8003dc6 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003d88:	4b60      	ldr	r3, [pc, #384]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d8c:	4b5f      	ldr	r3, [pc, #380]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003d8e:	2104      	movs	r1, #4
 8003d90:	430a      	orrs	r2, r1
 8003d92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003d94:	4b5d      	ldr	r3, [pc, #372]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003d96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d98:	4b5c      	ldr	r3, [pc, #368]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	438a      	bics	r2, r1
 8003d9e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da0:	f7fe fce2 	bl	8002768 <HAL_GetTick>
 8003da4:	0003      	movs	r3, r0
 8003da6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003daa:	f7fe fcdd 	bl	8002768 <HAL_GetTick>
 8003dae:	0002      	movs	r2, r0
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e0a2      	b.n	8003f02 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003dbc:	4b53      	ldr	r3, [pc, #332]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	d1f1      	bne.n	8003daa <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d100      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x4ec>
 8003dce:	e097      	b.n	8003f00 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dd0:	4b4e      	ldr	r3, [pc, #312]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	220c      	movs	r2, #12
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d100      	bne.n	8003dde <HAL_RCC_OscConfig+0x4fa>
 8003ddc:	e06b      	b.n	8003eb6 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d14c      	bne.n	8003e80 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de6:	4b49      	ldr	r3, [pc, #292]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	4b48      	ldr	r3, [pc, #288]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003dec:	494a      	ldr	r1, [pc, #296]	; (8003f18 <HAL_RCC_OscConfig+0x634>)
 8003dee:	400a      	ands	r2, r1
 8003df0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df2:	f7fe fcb9 	bl	8002768 <HAL_GetTick>
 8003df6:	0003      	movs	r3, r0
 8003df8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dfc:	f7fe fcb4 	bl	8002768 <HAL_GetTick>
 8003e00:	0002      	movs	r2, r0
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e079      	b.n	8003f02 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e0e:	4b3f      	ldr	r3, [pc, #252]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	2380      	movs	r3, #128	; 0x80
 8003e14:	049b      	lsls	r3, r3, #18
 8003e16:	4013      	ands	r3, r2
 8003e18:	d1f0      	bne.n	8003dfc <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e1a:	4b3c      	ldr	r3, [pc, #240]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1e:	220f      	movs	r2, #15
 8003e20:	4393      	bics	r3, r2
 8003e22:	0019      	movs	r1, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e28:	4b38      	ldr	r3, [pc, #224]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e2e:	4b37      	ldr	r3, [pc, #220]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	4a3a      	ldr	r2, [pc, #232]	; (8003f1c <HAL_RCC_OscConfig+0x638>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	0019      	movs	r1, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	431a      	orrs	r2, r3
 8003e42:	4b32      	ldr	r3, [pc, #200]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003e44:	430a      	orrs	r2, r1
 8003e46:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e48:	4b30      	ldr	r3, [pc, #192]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	4b2f      	ldr	r3, [pc, #188]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003e4e:	2180      	movs	r1, #128	; 0x80
 8003e50:	0449      	lsls	r1, r1, #17
 8003e52:	430a      	orrs	r2, r1
 8003e54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e56:	f7fe fc87 	bl	8002768 <HAL_GetTick>
 8003e5a:	0003      	movs	r3, r0
 8003e5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e60:	f7fe fc82 	bl	8002768 <HAL_GetTick>
 8003e64:	0002      	movs	r2, r0
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e047      	b.n	8003f02 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e72:	4b26      	ldr	r3, [pc, #152]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	2380      	movs	r3, #128	; 0x80
 8003e78:	049b      	lsls	r3, r3, #18
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	d0f0      	beq.n	8003e60 <HAL_RCC_OscConfig+0x57c>
 8003e7e:	e03f      	b.n	8003f00 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e80:	4b22      	ldr	r3, [pc, #136]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	4b21      	ldr	r3, [pc, #132]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003e86:	4924      	ldr	r1, [pc, #144]	; (8003f18 <HAL_RCC_OscConfig+0x634>)
 8003e88:	400a      	ands	r2, r1
 8003e8a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8c:	f7fe fc6c 	bl	8002768 <HAL_GetTick>
 8003e90:	0003      	movs	r3, r0
 8003e92:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e96:	f7fe fc67 	bl	8002768 <HAL_GetTick>
 8003e9a:	0002      	movs	r2, r0
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e02c      	b.n	8003f02 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ea8:	4b18      	ldr	r3, [pc, #96]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	2380      	movs	r3, #128	; 0x80
 8003eae:	049b      	lsls	r3, r3, #18
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	d1f0      	bne.n	8003e96 <HAL_RCC_OscConfig+0x5b2>
 8003eb4:	e024      	b.n	8003f00 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d101      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e01f      	b.n	8003f02 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003ec2:	4b12      	ldr	r3, [pc, #72]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003ec8:	4b10      	ldr	r3, [pc, #64]	; (8003f0c <HAL_RCC_OscConfig+0x628>)
 8003eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ecc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	23c0      	movs	r3, #192	; 0xc0
 8003ed2:	025b      	lsls	r3, r3, #9
 8003ed4:	401a      	ands	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d10e      	bne.n	8003efc <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	220f      	movs	r2, #15
 8003ee2:	401a      	ands	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d107      	bne.n	8003efc <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	23f0      	movs	r3, #240	; 0xf0
 8003ef0:	039b      	lsls	r3, r3, #14
 8003ef2:	401a      	ands	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d001      	beq.n	8003f00 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	0018      	movs	r0, r3
 8003f04:	46bd      	mov	sp, r7
 8003f06:	b008      	add	sp, #32
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	00001388 	.word	0x00001388
 8003f14:	efffffff 	.word	0xefffffff
 8003f18:	feffffff 	.word	0xfeffffff
 8003f1c:	ffc27fff 	.word	0xffc27fff

08003f20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e0b3      	b.n	800409c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f34:	4b5b      	ldr	r3, [pc, #364]	; (80040a4 <HAL_RCC_ClockConfig+0x184>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d911      	bls.n	8003f66 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f42:	4b58      	ldr	r3, [pc, #352]	; (80040a4 <HAL_RCC_ClockConfig+0x184>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2201      	movs	r2, #1
 8003f48:	4393      	bics	r3, r2
 8003f4a:	0019      	movs	r1, r3
 8003f4c:	4b55      	ldr	r3, [pc, #340]	; (80040a4 <HAL_RCC_ClockConfig+0x184>)
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f54:	4b53      	ldr	r3, [pc, #332]	; (80040a4 <HAL_RCC_ClockConfig+0x184>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d001      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e09a      	b.n	800409c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	d015      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2204      	movs	r2, #4
 8003f76:	4013      	ands	r3, r2
 8003f78:	d006      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003f7a:	4b4b      	ldr	r3, [pc, #300]	; (80040a8 <HAL_RCC_ClockConfig+0x188>)
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	4b4a      	ldr	r3, [pc, #296]	; (80040a8 <HAL_RCC_ClockConfig+0x188>)
 8003f80:	21e0      	movs	r1, #224	; 0xe0
 8003f82:	00c9      	lsls	r1, r1, #3
 8003f84:	430a      	orrs	r2, r1
 8003f86:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f88:	4b47      	ldr	r3, [pc, #284]	; (80040a8 <HAL_RCC_ClockConfig+0x188>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	22f0      	movs	r2, #240	; 0xf0
 8003f8e:	4393      	bics	r3, r2
 8003f90:	0019      	movs	r1, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	4b44      	ldr	r3, [pc, #272]	; (80040a8 <HAL_RCC_ClockConfig+0x188>)
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	d040      	beq.n	8004028 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d107      	bne.n	8003fbe <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fae:	4b3e      	ldr	r3, [pc, #248]	; (80040a8 <HAL_RCC_ClockConfig+0x188>)
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	2380      	movs	r3, #128	; 0x80
 8003fb4:	029b      	lsls	r3, r3, #10
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	d114      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e06e      	b.n	800409c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d107      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fc6:	4b38      	ldr	r3, [pc, #224]	; (80040a8 <HAL_RCC_ClockConfig+0x188>)
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	2380      	movs	r3, #128	; 0x80
 8003fcc:	049b      	lsls	r3, r3, #18
 8003fce:	4013      	ands	r3, r2
 8003fd0:	d108      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e062      	b.n	800409c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd6:	4b34      	ldr	r3, [pc, #208]	; (80040a8 <HAL_RCC_ClockConfig+0x188>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	4013      	ands	r3, r2
 8003fde:	d101      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e05b      	b.n	800409c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fe4:	4b30      	ldr	r3, [pc, #192]	; (80040a8 <HAL_RCC_ClockConfig+0x188>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2203      	movs	r2, #3
 8003fea:	4393      	bics	r3, r2
 8003fec:	0019      	movs	r1, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	4b2d      	ldr	r3, [pc, #180]	; (80040a8 <HAL_RCC_ClockConfig+0x188>)
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ff8:	f7fe fbb6 	bl	8002768 <HAL_GetTick>
 8003ffc:	0003      	movs	r3, r0
 8003ffe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004000:	e009      	b.n	8004016 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004002:	f7fe fbb1 	bl	8002768 <HAL_GetTick>
 8004006:	0002      	movs	r2, r0
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	4a27      	ldr	r2, [pc, #156]	; (80040ac <HAL_RCC_ClockConfig+0x18c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e042      	b.n	800409c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004016:	4b24      	ldr	r3, [pc, #144]	; (80040a8 <HAL_RCC_ClockConfig+0x188>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	220c      	movs	r2, #12
 800401c:	401a      	ands	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	429a      	cmp	r2, r3
 8004026:	d1ec      	bne.n	8004002 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004028:	4b1e      	ldr	r3, [pc, #120]	; (80040a4 <HAL_RCC_ClockConfig+0x184>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2201      	movs	r2, #1
 800402e:	4013      	ands	r3, r2
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	429a      	cmp	r2, r3
 8004034:	d211      	bcs.n	800405a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004036:	4b1b      	ldr	r3, [pc, #108]	; (80040a4 <HAL_RCC_ClockConfig+0x184>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2201      	movs	r2, #1
 800403c:	4393      	bics	r3, r2
 800403e:	0019      	movs	r1, r3
 8004040:	4b18      	ldr	r3, [pc, #96]	; (80040a4 <HAL_RCC_ClockConfig+0x184>)
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004048:	4b16      	ldr	r3, [pc, #88]	; (80040a4 <HAL_RCC_ClockConfig+0x184>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2201      	movs	r2, #1
 800404e:	4013      	ands	r3, r2
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	429a      	cmp	r2, r3
 8004054:	d001      	beq.n	800405a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e020      	b.n	800409c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2204      	movs	r2, #4
 8004060:	4013      	ands	r3, r2
 8004062:	d009      	beq.n	8004078 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004064:	4b10      	ldr	r3, [pc, #64]	; (80040a8 <HAL_RCC_ClockConfig+0x188>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	4a11      	ldr	r2, [pc, #68]	; (80040b0 <HAL_RCC_ClockConfig+0x190>)
 800406a:	4013      	ands	r3, r2
 800406c:	0019      	movs	r1, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <HAL_RCC_ClockConfig+0x188>)
 8004074:	430a      	orrs	r2, r1
 8004076:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004078:	f000 f820 	bl	80040bc <HAL_RCC_GetSysClockFreq>
 800407c:	0001      	movs	r1, r0
 800407e:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <HAL_RCC_ClockConfig+0x188>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	091b      	lsrs	r3, r3, #4
 8004084:	220f      	movs	r2, #15
 8004086:	4013      	ands	r3, r2
 8004088:	4a0a      	ldr	r2, [pc, #40]	; (80040b4 <HAL_RCC_ClockConfig+0x194>)
 800408a:	5cd3      	ldrb	r3, [r2, r3]
 800408c:	000a      	movs	r2, r1
 800408e:	40da      	lsrs	r2, r3
 8004090:	4b09      	ldr	r3, [pc, #36]	; (80040b8 <HAL_RCC_ClockConfig+0x198>)
 8004092:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004094:	2003      	movs	r0, #3
 8004096:	f7fe fb21 	bl	80026dc <HAL_InitTick>
  
  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	0018      	movs	r0, r3
 800409e:	46bd      	mov	sp, r7
 80040a0:	b004      	add	sp, #16
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40022000 	.word	0x40022000
 80040a8:	40021000 	.word	0x40021000
 80040ac:	00001388 	.word	0x00001388
 80040b0:	fffff8ff 	.word	0xfffff8ff
 80040b4:	080064b4 	.word	0x080064b4
 80040b8:	200004e0 	.word	0x200004e0

080040bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	2300      	movs	r3, #0
 80040c8:	60bb      	str	r3, [r7, #8]
 80040ca:	2300      	movs	r3, #0
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	2300      	movs	r3, #0
 80040d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80040d2:	2300      	movs	r3, #0
 80040d4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80040d6:	4b21      	ldr	r3, [pc, #132]	; (800415c <HAL_RCC_GetSysClockFreq+0xa0>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	220c      	movs	r2, #12
 80040e0:	4013      	ands	r3, r2
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	d002      	beq.n	80040ec <HAL_RCC_GetSysClockFreq+0x30>
 80040e6:	2b08      	cmp	r3, #8
 80040e8:	d003      	beq.n	80040f2 <HAL_RCC_GetSysClockFreq+0x36>
 80040ea:	e02e      	b.n	800414a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040ec:	4b1c      	ldr	r3, [pc, #112]	; (8004160 <HAL_RCC_GetSysClockFreq+0xa4>)
 80040ee:	613b      	str	r3, [r7, #16]
      break;
 80040f0:	e02e      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	0c9b      	lsrs	r3, r3, #18
 80040f6:	220f      	movs	r2, #15
 80040f8:	4013      	ands	r3, r2
 80040fa:	4a1a      	ldr	r2, [pc, #104]	; (8004164 <HAL_RCC_GetSysClockFreq+0xa8>)
 80040fc:	5cd3      	ldrb	r3, [r2, r3]
 80040fe:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004100:	4b16      	ldr	r3, [pc, #88]	; (800415c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	220f      	movs	r2, #15
 8004106:	4013      	ands	r3, r2
 8004108:	4a17      	ldr	r2, [pc, #92]	; (8004168 <HAL_RCC_GetSysClockFreq+0xac>)
 800410a:	5cd3      	ldrb	r3, [r2, r3]
 800410c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	23c0      	movs	r3, #192	; 0xc0
 8004112:	025b      	lsls	r3, r3, #9
 8004114:	401a      	ands	r2, r3
 8004116:	2380      	movs	r3, #128	; 0x80
 8004118:	025b      	lsls	r3, r3, #9
 800411a:	429a      	cmp	r2, r3
 800411c:	d109      	bne.n	8004132 <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800411e:	68b9      	ldr	r1, [r7, #8]
 8004120:	480f      	ldr	r0, [pc, #60]	; (8004160 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004122:	f7fb fff9 	bl	8000118 <__udivsi3>
 8004126:	0003      	movs	r3, r0
 8004128:	001a      	movs	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4353      	muls	r3, r2
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	e008      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004132:	68b9      	ldr	r1, [r7, #8]
 8004134:	480d      	ldr	r0, [pc, #52]	; (800416c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004136:	f7fb ffef 	bl	8000118 <__udivsi3>
 800413a:	0003      	movs	r3, r0
 800413c:	001a      	movs	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4353      	muls	r3, r2
 8004142:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	613b      	str	r3, [r7, #16]
      break;
 8004148:	e002      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800414a:	4b08      	ldr	r3, [pc, #32]	; (800416c <HAL_RCC_GetSysClockFreq+0xb0>)
 800414c:	613b      	str	r3, [r7, #16]
      break;
 800414e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004150:	693b      	ldr	r3, [r7, #16]
}
 8004152:	0018      	movs	r0, r3
 8004154:	46bd      	mov	sp, r7
 8004156:	b006      	add	sp, #24
 8004158:	bd80      	pop	{r7, pc}
 800415a:	46c0      	nop			; (mov r8, r8)
 800415c:	40021000 	.word	0x40021000
 8004160:	01e84800 	.word	0x01e84800
 8004164:	080064c4 	.word	0x080064c4
 8004168:	080064d4 	.word	0x080064d4
 800416c:	007a1200 	.word	0x007a1200

08004170 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	2380      	movs	r3, #128	; 0x80
 8004186:	025b      	lsls	r3, r3, #9
 8004188:	4013      	ands	r3, r2
 800418a:	d100      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800418c:	e08e      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800418e:	2017      	movs	r0, #23
 8004190:	183b      	adds	r3, r7, r0
 8004192:	2200      	movs	r2, #0
 8004194:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004196:	4b57      	ldr	r3, [pc, #348]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004198:	69da      	ldr	r2, [r3, #28]
 800419a:	2380      	movs	r3, #128	; 0x80
 800419c:	055b      	lsls	r3, r3, #21
 800419e:	4013      	ands	r3, r2
 80041a0:	d110      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041a2:	4b54      	ldr	r3, [pc, #336]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80041a4:	69da      	ldr	r2, [r3, #28]
 80041a6:	4b53      	ldr	r3, [pc, #332]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80041a8:	2180      	movs	r1, #128	; 0x80
 80041aa:	0549      	lsls	r1, r1, #21
 80041ac:	430a      	orrs	r2, r1
 80041ae:	61da      	str	r2, [r3, #28]
 80041b0:	4b50      	ldr	r3, [pc, #320]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80041b2:	69da      	ldr	r2, [r3, #28]
 80041b4:	2380      	movs	r3, #128	; 0x80
 80041b6:	055b      	lsls	r3, r3, #21
 80041b8:	4013      	ands	r3, r2
 80041ba:	60bb      	str	r3, [r7, #8]
 80041bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041be:	183b      	adds	r3, r7, r0
 80041c0:	2201      	movs	r2, #1
 80041c2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c4:	4b4c      	ldr	r3, [pc, #304]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	2380      	movs	r3, #128	; 0x80
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	4013      	ands	r3, r2
 80041ce:	d11a      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041d0:	4b49      	ldr	r3, [pc, #292]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	4b48      	ldr	r3, [pc, #288]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80041d6:	2180      	movs	r1, #128	; 0x80
 80041d8:	0049      	lsls	r1, r1, #1
 80041da:	430a      	orrs	r2, r1
 80041dc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041de:	f7fe fac3 	bl	8002768 <HAL_GetTick>
 80041e2:	0003      	movs	r3, r0
 80041e4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e6:	e008      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041e8:	f7fe fabe 	bl	8002768 <HAL_GetTick>
 80041ec:	0002      	movs	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b64      	cmp	r3, #100	; 0x64
 80041f4:	d901      	bls.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e077      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fa:	4b3f      	ldr	r3, [pc, #252]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	2380      	movs	r3, #128	; 0x80
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	4013      	ands	r3, r2
 8004204:	d0f0      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004206:	4b3b      	ldr	r3, [pc, #236]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004208:	6a1a      	ldr	r2, [r3, #32]
 800420a:	23c0      	movs	r3, #192	; 0xc0
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4013      	ands	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d034      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	23c0      	movs	r3, #192	; 0xc0
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4013      	ands	r3, r2
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	429a      	cmp	r2, r3
 8004226:	d02c      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004228:	4b32      	ldr	r3, [pc, #200]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	4a33      	ldr	r2, [pc, #204]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800422e:	4013      	ands	r3, r2
 8004230:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004232:	4b30      	ldr	r3, [pc, #192]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004234:	6a1a      	ldr	r2, [r3, #32]
 8004236:	4b2f      	ldr	r3, [pc, #188]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004238:	2180      	movs	r1, #128	; 0x80
 800423a:	0249      	lsls	r1, r1, #9
 800423c:	430a      	orrs	r2, r1
 800423e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004240:	4b2c      	ldr	r3, [pc, #176]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004242:	6a1a      	ldr	r2, [r3, #32]
 8004244:	4b2b      	ldr	r3, [pc, #172]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004246:	492e      	ldr	r1, [pc, #184]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004248:	400a      	ands	r2, r1
 800424a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800424c:	4b29      	ldr	r3, [pc, #164]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2201      	movs	r2, #1
 8004256:	4013      	ands	r3, r2
 8004258:	d013      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425a:	f7fe fa85 	bl	8002768 <HAL_GetTick>
 800425e:	0003      	movs	r3, r0
 8004260:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004262:	e009      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004264:	f7fe fa80 	bl	8002768 <HAL_GetTick>
 8004268:	0002      	movs	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	4a25      	ldr	r2, [pc, #148]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d901      	bls.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e038      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004278:	4b1e      	ldr	r3, [pc, #120]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	2202      	movs	r2, #2
 800427e:	4013      	ands	r3, r2
 8004280:	d0f0      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004282:	4b1c      	ldr	r3, [pc, #112]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	4a1d      	ldr	r2, [pc, #116]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004288:	4013      	ands	r3, r2
 800428a:	0019      	movs	r1, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	4b18      	ldr	r3, [pc, #96]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004292:	430a      	orrs	r2, r1
 8004294:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004296:	2317      	movs	r3, #23
 8004298:	18fb      	adds	r3, r7, r3
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d105      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042a0:	4b14      	ldr	r3, [pc, #80]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80042a2:	69da      	ldr	r2, [r3, #28]
 80042a4:	4b13      	ldr	r3, [pc, #76]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80042a6:	4918      	ldr	r1, [pc, #96]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80042a8:	400a      	ands	r2, r1
 80042aa:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2201      	movs	r2, #1
 80042b2:	4013      	ands	r3, r2
 80042b4:	d009      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042b6:	4b0f      	ldr	r3, [pc, #60]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ba:	2203      	movs	r2, #3
 80042bc:	4393      	bics	r3, r2
 80042be:	0019      	movs	r1, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80042c6:	430a      	orrs	r2, r1
 80042c8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2220      	movs	r2, #32
 80042d0:	4013      	ands	r3, r2
 80042d2:	d009      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042d4:	4b07      	ldr	r3, [pc, #28]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80042d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d8:	2210      	movs	r2, #16
 80042da:	4393      	bics	r3, r2
 80042dc:	0019      	movs	r1, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	4b04      	ldr	r3, [pc, #16]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80042e4:	430a      	orrs	r2, r1
 80042e6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	0018      	movs	r0, r3
 80042ec:	46bd      	mov	sp, r7
 80042ee:	b006      	add	sp, #24
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	46c0      	nop			; (mov r8, r8)
 80042f4:	40021000 	.word	0x40021000
 80042f8:	40007000 	.word	0x40007000
 80042fc:	fffffcff 	.word	0xfffffcff
 8004300:	fffeffff 	.word	0xfffeffff
 8004304:	00001388 	.word	0x00001388
 8004308:	efffffff 	.word	0xefffffff

0800430c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800430c:	b5b0      	push	{r4, r5, r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004314:	230f      	movs	r3, #15
 8004316:	18fb      	adds	r3, r7, r3
 8004318:	2201      	movs	r2, #1
 800431a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e081      	b.n	800442a <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	7f5b      	ldrb	r3, [r3, #29]
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b00      	cmp	r3, #0
 800432e:	d106      	bne.n	800433e <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	0018      	movs	r0, r3
 800433a:	f7fd ff23 	bl	8002184 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2202      	movs	r2, #2
 8004342:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	2210      	movs	r2, #16
 800434c:	4013      	ands	r3, r2
 800434e:	2b10      	cmp	r3, #16
 8004350:	d05c      	beq.n	800440c <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	22ca      	movs	r2, #202	; 0xca
 8004358:	625a      	str	r2, [r3, #36]	; 0x24
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2253      	movs	r2, #83	; 0x53
 8004360:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004362:	250f      	movs	r5, #15
 8004364:	197c      	adds	r4, r7, r5
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	0018      	movs	r0, r3
 800436a:	f000 f93d 	bl	80045e8 <RTC_EnterInitMode>
 800436e:	0003      	movs	r3, r0
 8004370:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8004372:	0028      	movs	r0, r5
 8004374:	183b      	adds	r3, r7, r0
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d12c      	bne.n	80043d6 <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	492b      	ldr	r1, [pc, #172]	; (8004434 <HAL_RTC_Init+0x128>)
 8004388:	400a      	ands	r2, r1
 800438a:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6899      	ldr	r1, [r3, #8]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	431a      	orrs	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	68d2      	ldr	r2, [r2, #12]
 80043b2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6919      	ldr	r1, [r3, #16]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	041a      	lsls	r2, r3, #16
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80043c8:	183c      	adds	r4, r7, r0
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	0018      	movs	r0, r3
 80043ce:	f000 f94e 	bl	800466e <RTC_ExitInitMode>
 80043d2:	0003      	movs	r3, r0
 80043d4:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80043d6:	230f      	movs	r3, #15
 80043d8:	18fb      	adds	r3, r7, r3
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d110      	bne.n	8004402 <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4913      	ldr	r1, [pc, #76]	; (8004438 <HAL_RTC_Init+0x12c>)
 80043ec:	400a      	ands	r2, r1
 80043ee:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699a      	ldr	r2, [r3, #24]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	22ff      	movs	r2, #255	; 0xff
 8004408:	625a      	str	r2, [r3, #36]	; 0x24
 800440a:	e003      	b.n	8004414 <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800440c:	230f      	movs	r3, #15
 800440e:	18fb      	adds	r3, r7, r3
 8004410:	2200      	movs	r2, #0
 8004412:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8004414:	230f      	movs	r3, #15
 8004416:	18fb      	adds	r3, r7, r3
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d102      	bne.n	8004424 <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004424:	230f      	movs	r3, #15
 8004426:	18fb      	adds	r3, r7, r3
 8004428:	781b      	ldrb	r3, [r3, #0]
}
 800442a:	0018      	movs	r0, r3
 800442c:	46bd      	mov	sp, r7
 800442e:	b004      	add	sp, #16
 8004430:	bdb0      	pop	{r4, r5, r7, pc}
 8004432:	46c0      	nop			; (mov r8, r8)
 8004434:	ff8fffbf 	.word	0xff8fffbf
 8004438:	fffbffff 	.word	0xfffbffff

0800443c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	045b      	lsls	r3, r3, #17
 800445e:	0c5a      	lsrs	r2, r3, #17
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a22      	ldr	r2, [pc, #136]	; (80044f4 <HAL_RTC_GetTime+0xb8>)
 800446c:	4013      	ands	r3, r2
 800446e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	0c1b      	lsrs	r3, r3, #16
 8004474:	b2db      	uxtb	r3, r3
 8004476:	223f      	movs	r2, #63	; 0x3f
 8004478:	4013      	ands	r3, r2
 800447a:	b2da      	uxtb	r2, r3
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	0a1b      	lsrs	r3, r3, #8
 8004484:	b2db      	uxtb	r3, r3
 8004486:	227f      	movs	r2, #127	; 0x7f
 8004488:	4013      	ands	r3, r2
 800448a:	b2da      	uxtb	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	b2db      	uxtb	r3, r3
 8004494:	227f      	movs	r2, #127	; 0x7f
 8004496:	4013      	ands	r3, r2
 8004498:	b2da      	uxtb	r2, r3
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	0d9b      	lsrs	r3, r3, #22
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2201      	movs	r2, #1
 80044a6:	4013      	ands	r3, r2
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d11a      	bne.n	80044ea <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	0018      	movs	r0, r3
 80044ba:	f000 f901 	bl	80046c0 <RTC_Bcd2ToByte>
 80044be:	0003      	movs	r3, r0
 80044c0:	001a      	movs	r2, r3
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	785b      	ldrb	r3, [r3, #1]
 80044ca:	0018      	movs	r0, r3
 80044cc:	f000 f8f8 	bl	80046c0 <RTC_Bcd2ToByte>
 80044d0:	0003      	movs	r3, r0
 80044d2:	001a      	movs	r2, r3
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	789b      	ldrb	r3, [r3, #2]
 80044dc:	0018      	movs	r0, r3
 80044de:	f000 f8ef 	bl	80046c0 <RTC_Bcd2ToByte>
 80044e2:	0003      	movs	r3, r0
 80044e4:	001a      	movs	r2, r3
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	0018      	movs	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	b006      	add	sp, #24
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	007f7f7f 	.word	0x007f7f7f

080044f8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	4a21      	ldr	r2, [pc, #132]	; (8004594 <HAL_RTC_GetDate+0x9c>)
 8004510:	4013      	ands	r3, r2
 8004512:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	0c1b      	lsrs	r3, r3, #16
 8004518:	b2da      	uxtb	r2, r3
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	0a1b      	lsrs	r3, r3, #8
 8004522:	b2db      	uxtb	r3, r3
 8004524:	221f      	movs	r2, #31
 8004526:	4013      	ands	r3, r2
 8004528:	b2da      	uxtb	r2, r3
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	b2db      	uxtb	r3, r3
 8004532:	223f      	movs	r2, #63	; 0x3f
 8004534:	4013      	ands	r3, r2
 8004536:	b2da      	uxtb	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	0b5b      	lsrs	r3, r3, #13
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2207      	movs	r2, #7
 8004544:	4013      	ands	r3, r2
 8004546:	b2da      	uxtb	r2, r3
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d11a      	bne.n	8004588 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	78db      	ldrb	r3, [r3, #3]
 8004556:	0018      	movs	r0, r3
 8004558:	f000 f8b2 	bl	80046c0 <RTC_Bcd2ToByte>
 800455c:	0003      	movs	r3, r0
 800455e:	001a      	movs	r2, r3
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	785b      	ldrb	r3, [r3, #1]
 8004568:	0018      	movs	r0, r3
 800456a:	f000 f8a9 	bl	80046c0 <RTC_Bcd2ToByte>
 800456e:	0003      	movs	r3, r0
 8004570:	001a      	movs	r2, r3
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	789b      	ldrb	r3, [r3, #2]
 800457a:	0018      	movs	r0, r3
 800457c:	f000 f8a0 	bl	80046c0 <RTC_Bcd2ToByte>
 8004580:	0003      	movs	r3, r0
 8004582:	001a      	movs	r2, r3
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	0018      	movs	r0, r3
 800458c:	46bd      	mov	sp, r7
 800458e:	b006      	add	sp, #24
 8004590:	bd80      	pop	{r7, pc}
 8004592:	46c0      	nop			; (mov r8, r8)
 8004594:	00ffff3f 	.word	0x00ffff3f

08004598 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a0e      	ldr	r2, [pc, #56]	; (80045e4 <HAL_RTC_WaitForSynchro+0x4c>)
 80045aa:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045ac:	f7fe f8dc 	bl	8002768 <HAL_GetTick>
 80045b0:	0003      	movs	r3, r0
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80045b4:	e00a      	b.n	80045cc <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80045b6:	f7fe f8d7 	bl	8002768 <HAL_GetTick>
 80045ba:	0002      	movs	r2, r0
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	1ad2      	subs	r2, r2, r3
 80045c0:	23fa      	movs	r3, #250	; 0xfa
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d901      	bls.n	80045cc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e006      	b.n	80045da <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	2220      	movs	r2, #32
 80045d4:	4013      	ands	r3, r2
 80045d6:	d0ee      	beq.n	80045b6 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	0018      	movs	r0, r3
 80045dc:	46bd      	mov	sp, r7
 80045de:	b004      	add	sp, #16
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	46c0      	nop			; (mov r8, r8)
 80045e4:	00017d5d 	.word	0x00017d5d

080045e8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80045f4:	230f      	movs	r3, #15
 80045f6:	18fb      	adds	r3, r7, r3
 80045f8:	2200      	movs	r2, #0
 80045fa:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	2240      	movs	r2, #64	; 0x40
 8004604:	4013      	ands	r3, r2
 8004606:	d12b      	bne.n	8004660 <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2180      	movs	r1, #128	; 0x80
 8004614:	430a      	orrs	r2, r1
 8004616:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004618:	f7fe f8a6 	bl	8002768 <HAL_GetTick>
 800461c:	0003      	movs	r3, r0
 800461e:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004620:	e013      	b.n	800464a <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004622:	f7fe f8a1 	bl	8002768 <HAL_GetTick>
 8004626:	0002      	movs	r2, r0
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	1ad2      	subs	r2, r2, r3
 800462c:	200f      	movs	r0, #15
 800462e:	183b      	adds	r3, r7, r0
 8004630:	1839      	adds	r1, r7, r0
 8004632:	7809      	ldrb	r1, [r1, #0]
 8004634:	7019      	strb	r1, [r3, #0]
 8004636:	23fa      	movs	r3, #250	; 0xfa
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	429a      	cmp	r2, r3
 800463c:	d905      	bls.n	800464a <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2204      	movs	r2, #4
 8004642:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004644:	183b      	adds	r3, r7, r0
 8004646:	2201      	movs	r2, #1
 8004648:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	2240      	movs	r2, #64	; 0x40
 8004652:	4013      	ands	r3, r2
 8004654:	d104      	bne.n	8004660 <RTC_EnterInitMode+0x78>
 8004656:	230f      	movs	r3, #15
 8004658:	18fb      	adds	r3, r7, r3
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d1e0      	bne.n	8004622 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8004660:	230f      	movs	r3, #15
 8004662:	18fb      	adds	r3, r7, r3
 8004664:	781b      	ldrb	r3, [r3, #0]
}
 8004666:	0018      	movs	r0, r3
 8004668:	46bd      	mov	sp, r7
 800466a:	b004      	add	sp, #16
 800466c:	bd80      	pop	{r7, pc}

0800466e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800466e:	b590      	push	{r4, r7, lr}
 8004670:	b085      	sub	sp, #20
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004676:	240f      	movs	r4, #15
 8004678:	193b      	adds	r3, r7, r4
 800467a:	2200      	movs	r2, #0
 800467c:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2180      	movs	r1, #128	; 0x80
 800468a:	438a      	bics	r2, r1
 800468c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	2220      	movs	r2, #32
 8004696:	4013      	ands	r3, r2
 8004698:	d10b      	bne.n	80046b2 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	0018      	movs	r0, r3
 800469e:	f7ff ff7b 	bl	8004598 <HAL_RTC_WaitForSynchro>
 80046a2:	1e03      	subs	r3, r0, #0
 80046a4:	d005      	beq.n	80046b2 <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2204      	movs	r2, #4
 80046aa:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80046ac:	193b      	adds	r3, r7, r4
 80046ae:	2201      	movs	r2, #1
 80046b0:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80046b2:	230f      	movs	r3, #15
 80046b4:	18fb      	adds	r3, r7, r3
 80046b6:	781b      	ldrb	r3, [r3, #0]
}
 80046b8:	0018      	movs	r0, r3
 80046ba:	46bd      	mov	sp, r7
 80046bc:	b005      	add	sp, #20
 80046be:	bd90      	pop	{r4, r7, pc}

080046c0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	0002      	movs	r2, r0
 80046c8:	1dfb      	adds	r3, r7, #7
 80046ca:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80046d0:	1dfb      	adds	r3, r7, #7
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	091b      	lsrs	r3, r3, #4
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	001a      	movs	r2, r3
 80046da:	0013      	movs	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	189b      	adds	r3, r3, r2
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	1dfb      	adds	r3, r7, #7
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	210f      	movs	r1, #15
 80046ee:	400b      	ands	r3, r1
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	18d3      	adds	r3, r2, r3
 80046f4:	b2db      	uxtb	r3, r3
}
 80046f6:	0018      	movs	r0, r3
 80046f8:	46bd      	mov	sp, r7
 80046fa:	b004      	add	sp, #16
 80046fc:	bd80      	pop	{r7, pc}
	...

08004700 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e0a8      	b.n	8004864 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	2b00      	cmp	r3, #0
 8004718:	d109      	bne.n	800472e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	2382      	movs	r3, #130	; 0x82
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	429a      	cmp	r2, r3
 8004724:	d009      	beq.n	800473a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	61da      	str	r2, [r3, #28]
 800472c:	e005      	b.n	800473a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	225d      	movs	r2, #93	; 0x5d
 8004744:	5c9b      	ldrb	r3, [r3, r2]
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b00      	cmp	r3, #0
 800474a:	d107      	bne.n	800475c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	225c      	movs	r2, #92	; 0x5c
 8004750:	2100      	movs	r1, #0
 8004752:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	0018      	movs	r0, r3
 8004758:	f7fd fd4a 	bl	80021f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	225d      	movs	r2, #93	; 0x5d
 8004760:	2102      	movs	r1, #2
 8004762:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2140      	movs	r1, #64	; 0x40
 8004770:	438a      	bics	r2, r1
 8004772:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	23e0      	movs	r3, #224	; 0xe0
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	429a      	cmp	r2, r3
 800477e:	d902      	bls.n	8004786 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004780:	2300      	movs	r3, #0
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	e002      	b.n	800478c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004786:	2380      	movs	r3, #128	; 0x80
 8004788:	015b      	lsls	r3, r3, #5
 800478a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	23f0      	movs	r3, #240	; 0xf0
 8004792:	011b      	lsls	r3, r3, #4
 8004794:	429a      	cmp	r2, r3
 8004796:	d008      	beq.n	80047aa <HAL_SPI_Init+0xaa>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68da      	ldr	r2, [r3, #12]
 800479c:	23e0      	movs	r3, #224	; 0xe0
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d002      	beq.n	80047aa <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	2382      	movs	r3, #130	; 0x82
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	401a      	ands	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6899      	ldr	r1, [r3, #8]
 80047b8:	2384      	movs	r3, #132	; 0x84
 80047ba:	021b      	lsls	r3, r3, #8
 80047bc:	400b      	ands	r3, r1
 80047be:	431a      	orrs	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	2102      	movs	r1, #2
 80047c6:	400b      	ands	r3, r1
 80047c8:	431a      	orrs	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	2101      	movs	r1, #1
 80047d0:	400b      	ands	r3, r1
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6999      	ldr	r1, [r3, #24]
 80047d8:	2380      	movs	r3, #128	; 0x80
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	400b      	ands	r3, r1
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	69db      	ldr	r3, [r3, #28]
 80047e4:	2138      	movs	r1, #56	; 0x38
 80047e6:	400b      	ands	r3, r1
 80047e8:	431a      	orrs	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	2180      	movs	r1, #128	; 0x80
 80047f0:	400b      	ands	r3, r1
 80047f2:	431a      	orrs	r2, r3
 80047f4:	0011      	movs	r1, r2
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047fa:	2380      	movs	r3, #128	; 0x80
 80047fc:	019b      	lsls	r3, r3, #6
 80047fe:	401a      	ands	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	0c1b      	lsrs	r3, r3, #16
 800480e:	2204      	movs	r2, #4
 8004810:	401a      	ands	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	2110      	movs	r1, #16
 8004818:	400b      	ands	r3, r1
 800481a:	431a      	orrs	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004820:	2108      	movs	r1, #8
 8004822:	400b      	ands	r3, r1
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68d9      	ldr	r1, [r3, #12]
 800482a:	23f0      	movs	r3, #240	; 0xf0
 800482c:	011b      	lsls	r3, r3, #4
 800482e:	400b      	ands	r3, r1
 8004830:	431a      	orrs	r2, r3
 8004832:	0011      	movs	r1, r2
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	2380      	movs	r3, #128	; 0x80
 8004838:	015b      	lsls	r3, r3, #5
 800483a:	401a      	ands	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	69da      	ldr	r2, [r3, #28]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4907      	ldr	r1, [pc, #28]	; (800486c <HAL_SPI_Init+0x16c>)
 8004850:	400a      	ands	r2, r1
 8004852:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	225d      	movs	r2, #93	; 0x5d
 800485e:	2101      	movs	r1, #1
 8004860:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	0018      	movs	r0, r3
 8004866:	46bd      	mov	sp, r7
 8004868:	b004      	add	sp, #16
 800486a:	bd80      	pop	{r7, pc}
 800486c:	fffff7ff 	.word	0xfffff7ff

08004870 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b088      	sub	sp, #32
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	603b      	str	r3, [r7, #0]
 800487c:	1dbb      	adds	r3, r7, #6
 800487e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004880:	231f      	movs	r3, #31
 8004882:	18fb      	adds	r3, r7, r3
 8004884:	2200      	movs	r2, #0
 8004886:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	225c      	movs	r2, #92	; 0x5c
 800488c:	5c9b      	ldrb	r3, [r3, r2]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d101      	bne.n	8004896 <HAL_SPI_Transmit+0x26>
 8004892:	2302      	movs	r3, #2
 8004894:	e147      	b.n	8004b26 <HAL_SPI_Transmit+0x2b6>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	225c      	movs	r2, #92	; 0x5c
 800489a:	2101      	movs	r1, #1
 800489c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800489e:	f7fd ff63 	bl	8002768 <HAL_GetTick>
 80048a2:	0003      	movs	r3, r0
 80048a4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80048a6:	2316      	movs	r3, #22
 80048a8:	18fb      	adds	r3, r7, r3
 80048aa:	1dba      	adds	r2, r7, #6
 80048ac:	8812      	ldrh	r2, [r2, #0]
 80048ae:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	225d      	movs	r2, #93	; 0x5d
 80048b4:	5c9b      	ldrb	r3, [r3, r2]
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d004      	beq.n	80048c6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80048bc:	231f      	movs	r3, #31
 80048be:	18fb      	adds	r3, r7, r3
 80048c0:	2202      	movs	r2, #2
 80048c2:	701a      	strb	r2, [r3, #0]
    goto error;
 80048c4:	e128      	b.n	8004b18 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d003      	beq.n	80048d4 <HAL_SPI_Transmit+0x64>
 80048cc:	1dbb      	adds	r3, r7, #6
 80048ce:	881b      	ldrh	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d104      	bne.n	80048de <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80048d4:	231f      	movs	r3, #31
 80048d6:	18fb      	adds	r3, r7, r3
 80048d8:	2201      	movs	r2, #1
 80048da:	701a      	strb	r2, [r3, #0]
    goto error;
 80048dc:	e11c      	b.n	8004b18 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	225d      	movs	r2, #93	; 0x5d
 80048e2:	2103      	movs	r1, #3
 80048e4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	1dba      	adds	r2, r7, #6
 80048f6:	8812      	ldrh	r2, [r2, #0]
 80048f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	1dba      	adds	r2, r7, #6
 80048fe:	8812      	ldrh	r2, [r2, #0]
 8004900:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2244      	movs	r2, #68	; 0x44
 800490c:	2100      	movs	r1, #0
 800490e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2246      	movs	r2, #70	; 0x46
 8004914:	2100      	movs	r1, #0
 8004916:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	2380      	movs	r3, #128	; 0x80
 800492a:	021b      	lsls	r3, r3, #8
 800492c:	429a      	cmp	r2, r3
 800492e:	d110      	bne.n	8004952 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2140      	movs	r1, #64	; 0x40
 800493c:	438a      	bics	r2, r1
 800493e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2180      	movs	r1, #128	; 0x80
 800494c:	01c9      	lsls	r1, r1, #7
 800494e:	430a      	orrs	r2, r1
 8004950:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2240      	movs	r2, #64	; 0x40
 800495a:	4013      	ands	r3, r2
 800495c:	2b40      	cmp	r3, #64	; 0x40
 800495e:	d007      	beq.n	8004970 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2140      	movs	r1, #64	; 0x40
 800496c:	430a      	orrs	r2, r1
 800496e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	68da      	ldr	r2, [r3, #12]
 8004974:	23e0      	movs	r3, #224	; 0xe0
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	429a      	cmp	r2, r3
 800497a:	d952      	bls.n	8004a22 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d004      	beq.n	800498e <HAL_SPI_Transmit+0x11e>
 8004984:	2316      	movs	r3, #22
 8004986:	18fb      	adds	r3, r7, r3
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d143      	bne.n	8004a16 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004992:	881a      	ldrh	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499e:	1c9a      	adds	r2, r3, #2
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80049b2:	e030      	b.n	8004a16 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	2202      	movs	r2, #2
 80049bc:	4013      	ands	r3, r2
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d112      	bne.n	80049e8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c6:	881a      	ldrh	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d2:	1c9a      	adds	r2, r3, #2
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049e6:	e016      	b.n	8004a16 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049e8:	f7fd febe 	bl	8002768 <HAL_GetTick>
 80049ec:	0002      	movs	r2, r0
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d802      	bhi.n	80049fe <HAL_SPI_Transmit+0x18e>
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	3301      	adds	r3, #1
 80049fc:	d102      	bne.n	8004a04 <HAL_SPI_Transmit+0x194>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d108      	bne.n	8004a16 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8004a04:	231f      	movs	r3, #31
 8004a06:	18fb      	adds	r3, r7, r3
 8004a08:	2203      	movs	r2, #3
 8004a0a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	225d      	movs	r2, #93	; 0x5d
 8004a10:	2101      	movs	r1, #1
 8004a12:	5499      	strb	r1, [r3, r2]
          goto error;
 8004a14:	e080      	b.n	8004b18 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1c9      	bne.n	80049b4 <HAL_SPI_Transmit+0x144>
 8004a20:	e053      	b.n	8004aca <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d004      	beq.n	8004a34 <HAL_SPI_Transmit+0x1c4>
 8004a2a:	2316      	movs	r3, #22
 8004a2c:	18fb      	adds	r3, r7, r3
 8004a2e:	881b      	ldrh	r3, [r3, #0]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d145      	bne.n	8004ac0 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	330c      	adds	r3, #12
 8004a3e:	7812      	ldrb	r2, [r2, #0]
 8004a40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	3b01      	subs	r3, #1
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8004a5a:	e031      	b.n	8004ac0 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	2202      	movs	r2, #2
 8004a64:	4013      	ands	r3, r2
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d113      	bne.n	8004a92 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	330c      	adds	r3, #12
 8004a74:	7812      	ldrb	r2, [r2, #0]
 8004a76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7c:	1c5a      	adds	r2, r3, #1
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a90:	e016      	b.n	8004ac0 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a92:	f7fd fe69 	bl	8002768 <HAL_GetTick>
 8004a96:	0002      	movs	r2, r0
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d802      	bhi.n	8004aa8 <HAL_SPI_Transmit+0x238>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	d102      	bne.n	8004aae <HAL_SPI_Transmit+0x23e>
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d108      	bne.n	8004ac0 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8004aae:	231f      	movs	r3, #31
 8004ab0:	18fb      	adds	r3, r7, r3
 8004ab2:	2203      	movs	r2, #3
 8004ab4:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	225d      	movs	r2, #93	; 0x5d
 8004aba:	2101      	movs	r1, #1
 8004abc:	5499      	strb	r1, [r3, r2]
          goto error;
 8004abe:	e02b      	b.n	8004b18 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1c8      	bne.n	8004a5c <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	6839      	ldr	r1, [r7, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	f000 f95d 	bl	8004d90 <SPI_EndRxTxTransaction>
 8004ad6:	1e03      	subs	r3, r0, #0
 8004ad8:	d002      	beq.n	8004ae0 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2220      	movs	r2, #32
 8004ade:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10a      	bne.n	8004afe <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ae8:	2300      	movs	r3, #0
 8004aea:	613b      	str	r3, [r7, #16]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	613b      	str	r3, [r7, #16]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	613b      	str	r3, [r7, #16]
 8004afc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d004      	beq.n	8004b10 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8004b06:	231f      	movs	r3, #31
 8004b08:	18fb      	adds	r3, r7, r3
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	701a      	strb	r2, [r3, #0]
 8004b0e:	e003      	b.n	8004b18 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	225d      	movs	r2, #93	; 0x5d
 8004b14:	2101      	movs	r1, #1
 8004b16:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	225c      	movs	r2, #92	; 0x5c
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004b20:	231f      	movs	r3, #31
 8004b22:	18fb      	adds	r3, r7, r3
 8004b24:	781b      	ldrb	r3, [r3, #0]
}
 8004b26:	0018      	movs	r0, r3
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	b008      	add	sp, #32
 8004b2c:	bd80      	pop	{r7, pc}
	...

08004b30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b088      	sub	sp, #32
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	603b      	str	r3, [r7, #0]
 8004b3c:	1dfb      	adds	r3, r7, #7
 8004b3e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b40:	f7fd fe12 	bl	8002768 <HAL_GetTick>
 8004b44:	0002      	movs	r2, r0
 8004b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b48:	1a9b      	subs	r3, r3, r2
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	18d3      	adds	r3, r2, r3
 8004b4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b50:	f7fd fe0a 	bl	8002768 <HAL_GetTick>
 8004b54:	0003      	movs	r3, r0
 8004b56:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b58:	4b3a      	ldr	r3, [pc, #232]	; (8004c44 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	015b      	lsls	r3, r3, #5
 8004b5e:	0d1b      	lsrs	r3, r3, #20
 8004b60:	69fa      	ldr	r2, [r7, #28]
 8004b62:	4353      	muls	r3, r2
 8004b64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b66:	e058      	b.n	8004c1a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	d055      	beq.n	8004c1a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b6e:	f7fd fdfb 	bl	8002768 <HAL_GetTick>
 8004b72:	0002      	movs	r2, r0
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	69fa      	ldr	r2, [r7, #28]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d902      	bls.n	8004b84 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d142      	bne.n	8004c0a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	21e0      	movs	r1, #224	; 0xe0
 8004b90:	438a      	bics	r2, r1
 8004b92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	2382      	movs	r3, #130	; 0x82
 8004b9a:	005b      	lsls	r3, r3, #1
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d113      	bne.n	8004bc8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	2380      	movs	r3, #128	; 0x80
 8004ba6:	021b      	lsls	r3, r3, #8
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d005      	beq.n	8004bb8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	2380      	movs	r3, #128	; 0x80
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d107      	bne.n	8004bc8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2140      	movs	r1, #64	; 0x40
 8004bc4:	438a      	bics	r2, r1
 8004bc6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bcc:	2380      	movs	r3, #128	; 0x80
 8004bce:	019b      	lsls	r3, r3, #6
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d110      	bne.n	8004bf6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	491a      	ldr	r1, [pc, #104]	; (8004c48 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004be0:	400a      	ands	r2, r1
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2180      	movs	r1, #128	; 0x80
 8004bf0:	0189      	lsls	r1, r1, #6
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	225d      	movs	r2, #93	; 0x5d
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	225c      	movs	r2, #92	; 0x5c
 8004c02:	2100      	movs	r1, #0
 8004c04:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e017      	b.n	8004c3a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	4013      	ands	r3, r2
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	425a      	negs	r2, r3
 8004c2a:	4153      	adcs	r3, r2
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	001a      	movs	r2, r3
 8004c30:	1dfb      	adds	r3, r7, #7
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d197      	bne.n	8004b68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	b008      	add	sp, #32
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	200004e0 	.word	0x200004e0
 8004c48:	ffffdfff 	.word	0xffffdfff

08004c4c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b08a      	sub	sp, #40	; 0x28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
 8004c58:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004c5a:	2317      	movs	r3, #23
 8004c5c:	18fb      	adds	r3, r7, r3
 8004c5e:	2200      	movs	r2, #0
 8004c60:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004c62:	f7fd fd81 	bl	8002768 <HAL_GetTick>
 8004c66:	0002      	movs	r2, r0
 8004c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6a:	1a9b      	subs	r3, r3, r2
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	18d3      	adds	r3, r2, r3
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004c72:	f7fd fd79 	bl	8002768 <HAL_GetTick>
 8004c76:	0003      	movs	r3, r0
 8004c78:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	330c      	adds	r3, #12
 8004c80:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004c82:	4b41      	ldr	r3, [pc, #260]	; (8004d88 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	0013      	movs	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	189b      	adds	r3, r3, r2
 8004c8c:	00da      	lsls	r2, r3, #3
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	0d1b      	lsrs	r3, r3, #20
 8004c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c94:	4353      	muls	r3, r2
 8004c96:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004c98:	e068      	b.n	8004d6c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	23c0      	movs	r3, #192	; 0xc0
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d10a      	bne.n	8004cba <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d107      	bne.n	8004cba <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	2117      	movs	r1, #23
 8004cb2:	187b      	adds	r3, r7, r1
 8004cb4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004cb6:	187b      	adds	r3, r7, r1
 8004cb8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	d055      	beq.n	8004d6c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cc0:	f7fd fd52 	bl	8002768 <HAL_GetTick>
 8004cc4:	0002      	movs	r2, r0
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d902      	bls.n	8004cd6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d142      	bne.n	8004d5c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	21e0      	movs	r1, #224	; 0xe0
 8004ce2:	438a      	bics	r2, r1
 8004ce4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	2382      	movs	r3, #130	; 0x82
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d113      	bne.n	8004d1a <SPI_WaitFifoStateUntilTimeout+0xce>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	2380      	movs	r3, #128	; 0x80
 8004cf8:	021b      	lsls	r3, r3, #8
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d005      	beq.n	8004d0a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	689a      	ldr	r2, [r3, #8]
 8004d02:	2380      	movs	r3, #128	; 0x80
 8004d04:	00db      	lsls	r3, r3, #3
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d107      	bne.n	8004d1a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2140      	movs	r1, #64	; 0x40
 8004d16:	438a      	bics	r2, r1
 8004d18:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d1e:	2380      	movs	r3, #128	; 0x80
 8004d20:	019b      	lsls	r3, r3, #6
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d110      	bne.n	8004d48 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4916      	ldr	r1, [pc, #88]	; (8004d8c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004d32:	400a      	ands	r2, r1
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2180      	movs	r1, #128	; 0x80
 8004d42:	0189      	lsls	r1, r1, #6
 8004d44:	430a      	orrs	r2, r1
 8004d46:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	225d      	movs	r2, #93	; 0x5d
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	225c      	movs	r2, #92	; 0x5c
 8004d54:	2100      	movs	r1, #0
 8004d56:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e010      	b.n	8004d7e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	4013      	ands	r3, r2
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d18e      	bne.n	8004c9a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	0018      	movs	r0, r3
 8004d80:	46bd      	mov	sp, r7
 8004d82:	b00a      	add	sp, #40	; 0x28
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	46c0      	nop			; (mov r8, r8)
 8004d88:	200004e0 	.word	0x200004e0
 8004d8c:	ffffdfff 	.word	0xffffdfff

08004d90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af02      	add	r7, sp, #8
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	23c0      	movs	r3, #192	; 0xc0
 8004da0:	0159      	lsls	r1, r3, #5
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	0013      	movs	r3, r2
 8004daa:	2200      	movs	r2, #0
 8004dac:	f7ff ff4e 	bl	8004c4c <SPI_WaitFifoStateUntilTimeout>
 8004db0:	1e03      	subs	r3, r0, #0
 8004db2:	d007      	beq.n	8004dc4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004db8:	2220      	movs	r2, #32
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e027      	b.n	8004e14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	0013      	movs	r3, r2
 8004dce:	2200      	movs	r2, #0
 8004dd0:	2180      	movs	r1, #128	; 0x80
 8004dd2:	f7ff fead 	bl	8004b30 <SPI_WaitFlagStateUntilTimeout>
 8004dd6:	1e03      	subs	r3, r0, #0
 8004dd8:	d007      	beq.n	8004dea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dde:	2220      	movs	r2, #32
 8004de0:	431a      	orrs	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e014      	b.n	8004e14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	23c0      	movs	r3, #192	; 0xc0
 8004dee:	00d9      	lsls	r1, r3, #3
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	0013      	movs	r3, r2
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f7ff ff27 	bl	8004c4c <SPI_WaitFifoStateUntilTimeout>
 8004dfe:	1e03      	subs	r3, r0, #0
 8004e00:	d007      	beq.n	8004e12 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e06:	2220      	movs	r2, #32
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e000      	b.n	8004e14 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	0018      	movs	r0, r3
 8004e16:	46bd      	mov	sp, r7
 8004e18:	b004      	add	sp, #16
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e042      	b.n	8004eb4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	223d      	movs	r2, #61	; 0x3d
 8004e32:	5c9b      	ldrb	r3, [r3, r2]
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d107      	bne.n	8004e4a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	223c      	movs	r2, #60	; 0x3c
 8004e3e:	2100      	movs	r1, #0
 8004e40:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	0018      	movs	r0, r3
 8004e46:	f7fd fa1f 	bl	8002288 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	223d      	movs	r2, #61	; 0x3d
 8004e4e:	2102      	movs	r1, #2
 8004e50:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	3304      	adds	r3, #4
 8004e5a:	0019      	movs	r1, r3
 8004e5c:	0010      	movs	r0, r2
 8004e5e:	f000 fa4f 	bl	8005300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2246      	movs	r2, #70	; 0x46
 8004e66:	2101      	movs	r1, #1
 8004e68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	223e      	movs	r2, #62	; 0x3e
 8004e6e:	2101      	movs	r1, #1
 8004e70:	5499      	strb	r1, [r3, r2]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	223f      	movs	r2, #63	; 0x3f
 8004e76:	2101      	movs	r1, #1
 8004e78:	5499      	strb	r1, [r3, r2]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2240      	movs	r2, #64	; 0x40
 8004e7e:	2101      	movs	r1, #1
 8004e80:	5499      	strb	r1, [r3, r2]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2241      	movs	r2, #65	; 0x41
 8004e86:	2101      	movs	r1, #1
 8004e88:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2242      	movs	r2, #66	; 0x42
 8004e8e:	2101      	movs	r1, #1
 8004e90:	5499      	strb	r1, [r3, r2]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2243      	movs	r2, #67	; 0x43
 8004e96:	2101      	movs	r1, #1
 8004e98:	5499      	strb	r1, [r3, r2]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2244      	movs	r2, #68	; 0x44
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	5499      	strb	r1, [r3, r2]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2245      	movs	r2, #69	; 0x45
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	223d      	movs	r2, #61	; 0x3d
 8004eae:	2101      	movs	r1, #1
 8004eb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	b002      	add	sp, #8
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	223d      	movs	r2, #61	; 0x3d
 8004ec8:	5c9b      	ldrb	r3, [r3, r2]
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d001      	beq.n	8004ed4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e02d      	b.n	8004f30 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	223d      	movs	r2, #61	; 0x3d
 8004ed8:	2102      	movs	r1, #2
 8004eda:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a15      	ldr	r2, [pc, #84]	; (8004f38 <HAL_TIM_Base_Start+0x7c>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d009      	beq.n	8004efa <HAL_TIM_Base_Start+0x3e>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a14      	ldr	r2, [pc, #80]	; (8004f3c <HAL_TIM_Base_Start+0x80>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d004      	beq.n	8004efa <HAL_TIM_Base_Start+0x3e>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a12      	ldr	r2, [pc, #72]	; (8004f40 <HAL_TIM_Base_Start+0x84>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d111      	bne.n	8004f1e <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	2207      	movs	r2, #7
 8004f02:	4013      	ands	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2b06      	cmp	r3, #6
 8004f0a:	d010      	beq.n	8004f2e <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2101      	movs	r1, #1
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f1c:	e007      	b.n	8004f2e <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2101      	movs	r1, #1
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	0018      	movs	r0, r3
 8004f32:	46bd      	mov	sp, r7
 8004f34:	b004      	add	sp, #16
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40012c00 	.word	0x40012c00
 8004f3c:	40000400 	.word	0x40000400
 8004f40:	40014000 	.word	0x40014000

08004f44 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	4a0d      	ldr	r2, [pc, #52]	; (8004f88 <HAL_TIM_Base_Stop+0x44>)
 8004f54:	4013      	ands	r3, r2
 8004f56:	d10d      	bne.n	8004f74 <HAL_TIM_Base_Stop+0x30>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	4a0b      	ldr	r2, [pc, #44]	; (8004f8c <HAL_TIM_Base_Stop+0x48>)
 8004f60:	4013      	ands	r3, r2
 8004f62:	d107      	bne.n	8004f74 <HAL_TIM_Base_Stop+0x30>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2101      	movs	r1, #1
 8004f70:	438a      	bics	r2, r1
 8004f72:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	223d      	movs	r2, #61	; 0x3d
 8004f78:	2101      	movs	r1, #1
 8004f7a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	0018      	movs	r0, r3
 8004f80:	46bd      	mov	sp, r7
 8004f82:	b002      	add	sp, #8
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	46c0      	nop			; (mov r8, r8)
 8004f88:	00001111 	.word	0x00001111
 8004f8c:	00000444 	.word	0x00000444

08004f90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	223d      	movs	r2, #61	; 0x3d
 8004f9c:	5c9b      	ldrb	r3, [r3, r2]
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d001      	beq.n	8004fa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e035      	b.n	8005014 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	223d      	movs	r2, #61	; 0x3d
 8004fac:	2102      	movs	r1, #2
 8004fae:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68da      	ldr	r2, [r3, #12]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2101      	movs	r1, #1
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a15      	ldr	r2, [pc, #84]	; (800501c <HAL_TIM_Base_Start_IT+0x8c>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d009      	beq.n	8004fde <HAL_TIM_Base_Start_IT+0x4e>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a14      	ldr	r2, [pc, #80]	; (8005020 <HAL_TIM_Base_Start_IT+0x90>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d004      	beq.n	8004fde <HAL_TIM_Base_Start_IT+0x4e>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a12      	ldr	r2, [pc, #72]	; (8005024 <HAL_TIM_Base_Start_IT+0x94>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d111      	bne.n	8005002 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	2207      	movs	r2, #7
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2b06      	cmp	r3, #6
 8004fee:	d010      	beq.n	8005012 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005000:	e007      	b.n	8005012 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2101      	movs	r1, #1
 800500e:	430a      	orrs	r2, r1
 8005010:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	0018      	movs	r0, r3
 8005016:	46bd      	mov	sp, r7
 8005018:	b004      	add	sp, #16
 800501a:	bd80      	pop	{r7, pc}
 800501c:	40012c00 	.word	0x40012c00
 8005020:	40000400 	.word	0x40000400
 8005024:	40014000 	.word	0x40014000

08005028 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68da      	ldr	r2, [r3, #12]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2101      	movs	r1, #1
 800503c:	438a      	bics	r2, r1
 800503e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	4a0d      	ldr	r2, [pc, #52]	; (800507c <HAL_TIM_Base_Stop_IT+0x54>)
 8005048:	4013      	ands	r3, r2
 800504a:	d10d      	bne.n	8005068 <HAL_TIM_Base_Stop_IT+0x40>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	4a0b      	ldr	r2, [pc, #44]	; (8005080 <HAL_TIM_Base_Stop_IT+0x58>)
 8005054:	4013      	ands	r3, r2
 8005056:	d107      	bne.n	8005068 <HAL_TIM_Base_Stop_IT+0x40>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2101      	movs	r1, #1
 8005064:	438a      	bics	r2, r1
 8005066:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	223d      	movs	r2, #61	; 0x3d
 800506c:	2101      	movs	r1, #1
 800506e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	0018      	movs	r0, r3
 8005074:	46bd      	mov	sp, r7
 8005076:	b002      	add	sp, #8
 8005078:	bd80      	pop	{r7, pc}
 800507a:	46c0      	nop			; (mov r8, r8)
 800507c:	00001111 	.word	0x00001111
 8005080:	00000444 	.word	0x00000444

08005084 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	2202      	movs	r2, #2
 8005094:	4013      	ands	r3, r2
 8005096:	2b02      	cmp	r3, #2
 8005098:	d124      	bne.n	80050e4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	2202      	movs	r2, #2
 80050a2:	4013      	ands	r3, r2
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d11d      	bne.n	80050e4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2203      	movs	r2, #3
 80050ae:	4252      	negs	r2, r2
 80050b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	2203      	movs	r2, #3
 80050c0:	4013      	ands	r3, r2
 80050c2:	d004      	beq.n	80050ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	0018      	movs	r0, r3
 80050c8:	f000 f902 	bl	80052d0 <HAL_TIM_IC_CaptureCallback>
 80050cc:	e007      	b.n	80050de <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	0018      	movs	r0, r3
 80050d2:	f000 f8f5 	bl	80052c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	0018      	movs	r0, r3
 80050da:	f000 f901 	bl	80052e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	2204      	movs	r2, #4
 80050ec:	4013      	ands	r3, r2
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	d125      	bne.n	800513e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	2204      	movs	r2, #4
 80050fa:	4013      	ands	r3, r2
 80050fc:	2b04      	cmp	r3, #4
 80050fe:	d11e      	bne.n	800513e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2205      	movs	r2, #5
 8005106:	4252      	negs	r2, r2
 8005108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2202      	movs	r2, #2
 800510e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699a      	ldr	r2, [r3, #24]
 8005116:	23c0      	movs	r3, #192	; 0xc0
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4013      	ands	r3, r2
 800511c:	d004      	beq.n	8005128 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	0018      	movs	r0, r3
 8005122:	f000 f8d5 	bl	80052d0 <HAL_TIM_IC_CaptureCallback>
 8005126:	e007      	b.n	8005138 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	0018      	movs	r0, r3
 800512c:	f000 f8c8 	bl	80052c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	0018      	movs	r0, r3
 8005134:	f000 f8d4 	bl	80052e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	2208      	movs	r2, #8
 8005146:	4013      	ands	r3, r2
 8005148:	2b08      	cmp	r3, #8
 800514a:	d124      	bne.n	8005196 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	2208      	movs	r2, #8
 8005154:	4013      	ands	r3, r2
 8005156:	2b08      	cmp	r3, #8
 8005158:	d11d      	bne.n	8005196 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2209      	movs	r2, #9
 8005160:	4252      	negs	r2, r2
 8005162:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2204      	movs	r2, #4
 8005168:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	2203      	movs	r2, #3
 8005172:	4013      	ands	r3, r2
 8005174:	d004      	beq.n	8005180 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	0018      	movs	r0, r3
 800517a:	f000 f8a9 	bl	80052d0 <HAL_TIM_IC_CaptureCallback>
 800517e:	e007      	b.n	8005190 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	0018      	movs	r0, r3
 8005184:	f000 f89c 	bl	80052c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	0018      	movs	r0, r3
 800518c:	f000 f8a8 	bl	80052e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	2210      	movs	r2, #16
 800519e:	4013      	ands	r3, r2
 80051a0:	2b10      	cmp	r3, #16
 80051a2:	d125      	bne.n	80051f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	2210      	movs	r2, #16
 80051ac:	4013      	ands	r3, r2
 80051ae:	2b10      	cmp	r3, #16
 80051b0:	d11e      	bne.n	80051f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2211      	movs	r2, #17
 80051b8:	4252      	negs	r2, r2
 80051ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2208      	movs	r2, #8
 80051c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	69da      	ldr	r2, [r3, #28]
 80051c8:	23c0      	movs	r3, #192	; 0xc0
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4013      	ands	r3, r2
 80051ce:	d004      	beq.n	80051da <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	0018      	movs	r0, r3
 80051d4:	f000 f87c 	bl	80052d0 <HAL_TIM_IC_CaptureCallback>
 80051d8:	e007      	b.n	80051ea <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	0018      	movs	r0, r3
 80051de:	f000 f86f 	bl	80052c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	0018      	movs	r0, r3
 80051e6:	f000 f87b 	bl	80052e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	2201      	movs	r2, #1
 80051f8:	4013      	ands	r3, r2
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d10f      	bne.n	800521e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	2201      	movs	r2, #1
 8005206:	4013      	ands	r3, r2
 8005208:	2b01      	cmp	r3, #1
 800520a:	d108      	bne.n	800521e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2202      	movs	r2, #2
 8005212:	4252      	negs	r2, r2
 8005214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	0018      	movs	r0, r3
 800521a:	f000 f849 	bl	80052b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	2280      	movs	r2, #128	; 0x80
 8005226:	4013      	ands	r3, r2
 8005228:	2b80      	cmp	r3, #128	; 0x80
 800522a:	d10f      	bne.n	800524c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	2280      	movs	r2, #128	; 0x80
 8005234:	4013      	ands	r3, r2
 8005236:	2b80      	cmp	r3, #128	; 0x80
 8005238:	d108      	bne.n	800524c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2281      	movs	r2, #129	; 0x81
 8005240:	4252      	negs	r2, r2
 8005242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	0018      	movs	r0, r3
 8005248:	f000 f8d8 	bl	80053fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	2240      	movs	r2, #64	; 0x40
 8005254:	4013      	ands	r3, r2
 8005256:	2b40      	cmp	r3, #64	; 0x40
 8005258:	d10f      	bne.n	800527a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	2240      	movs	r2, #64	; 0x40
 8005262:	4013      	ands	r3, r2
 8005264:	2b40      	cmp	r3, #64	; 0x40
 8005266:	d108      	bne.n	800527a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2241      	movs	r2, #65	; 0x41
 800526e:	4252      	negs	r2, r2
 8005270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	0018      	movs	r0, r3
 8005276:	f000 f83b 	bl	80052f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	2220      	movs	r2, #32
 8005282:	4013      	ands	r3, r2
 8005284:	2b20      	cmp	r3, #32
 8005286:	d10f      	bne.n	80052a8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	2220      	movs	r2, #32
 8005290:	4013      	ands	r3, r2
 8005292:	2b20      	cmp	r3, #32
 8005294:	d108      	bne.n	80052a8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2221      	movs	r2, #33	; 0x21
 800529c:	4252      	negs	r2, r2
 800529e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	0018      	movs	r0, r3
 80052a4:	f000 f8a2 	bl	80053ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052a8:	46c0      	nop			; (mov r8, r8)
 80052aa:	46bd      	mov	sp, r7
 80052ac:	b002      	add	sp, #8
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80052b8:	46c0      	nop			; (mov r8, r8)
 80052ba:	46bd      	mov	sp, r7
 80052bc:	b002      	add	sp, #8
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052c8:	46c0      	nop			; (mov r8, r8)
 80052ca:	46bd      	mov	sp, r7
 80052cc:	b002      	add	sp, #8
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052d8:	46c0      	nop			; (mov r8, r8)
 80052da:	46bd      	mov	sp, r7
 80052dc:	b002      	add	sp, #8
 80052de:	bd80      	pop	{r7, pc}

080052e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052e8:	46c0      	nop			; (mov r8, r8)
 80052ea:	46bd      	mov	sp, r7
 80052ec:	b002      	add	sp, #8
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052f8:	46c0      	nop			; (mov r8, r8)
 80052fa:	46bd      	mov	sp, r7
 80052fc:	b002      	add	sp, #8
 80052fe:	bd80      	pop	{r7, pc}

08005300 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a2f      	ldr	r2, [pc, #188]	; (80053d0 <TIM_Base_SetConfig+0xd0>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d003      	beq.n	8005320 <TIM_Base_SetConfig+0x20>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a2e      	ldr	r2, [pc, #184]	; (80053d4 <TIM_Base_SetConfig+0xd4>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d108      	bne.n	8005332 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2270      	movs	r2, #112	; 0x70
 8005324:	4393      	bics	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a26      	ldr	r2, [pc, #152]	; (80053d0 <TIM_Base_SetConfig+0xd0>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d013      	beq.n	8005362 <TIM_Base_SetConfig+0x62>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a25      	ldr	r2, [pc, #148]	; (80053d4 <TIM_Base_SetConfig+0xd4>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d00f      	beq.n	8005362 <TIM_Base_SetConfig+0x62>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a24      	ldr	r2, [pc, #144]	; (80053d8 <TIM_Base_SetConfig+0xd8>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d00b      	beq.n	8005362 <TIM_Base_SetConfig+0x62>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a23      	ldr	r2, [pc, #140]	; (80053dc <TIM_Base_SetConfig+0xdc>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d007      	beq.n	8005362 <TIM_Base_SetConfig+0x62>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a22      	ldr	r2, [pc, #136]	; (80053e0 <TIM_Base_SetConfig+0xe0>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d003      	beq.n	8005362 <TIM_Base_SetConfig+0x62>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a21      	ldr	r2, [pc, #132]	; (80053e4 <TIM_Base_SetConfig+0xe4>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d108      	bne.n	8005374 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	4a20      	ldr	r2, [pc, #128]	; (80053e8 <TIM_Base_SetConfig+0xe8>)
 8005366:	4013      	ands	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	4313      	orrs	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2280      	movs	r2, #128	; 0x80
 8005378:	4393      	bics	r3, r2
 800537a:	001a      	movs	r2, r3
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	4313      	orrs	r3, r2
 8005382:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	689a      	ldr	r2, [r3, #8]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a0c      	ldr	r2, [pc, #48]	; (80053d0 <TIM_Base_SetConfig+0xd0>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d00b      	beq.n	80053ba <TIM_Base_SetConfig+0xba>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a0d      	ldr	r2, [pc, #52]	; (80053dc <TIM_Base_SetConfig+0xdc>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d007      	beq.n	80053ba <TIM_Base_SetConfig+0xba>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a0c      	ldr	r2, [pc, #48]	; (80053e0 <TIM_Base_SetConfig+0xe0>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d003      	beq.n	80053ba <TIM_Base_SetConfig+0xba>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a0b      	ldr	r2, [pc, #44]	; (80053e4 <TIM_Base_SetConfig+0xe4>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d103      	bne.n	80053c2 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	691a      	ldr	r2, [r3, #16]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	615a      	str	r2, [r3, #20]
}
 80053c8:	46c0      	nop			; (mov r8, r8)
 80053ca:	46bd      	mov	sp, r7
 80053cc:	b004      	add	sp, #16
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	40012c00 	.word	0x40012c00
 80053d4:	40000400 	.word	0x40000400
 80053d8:	40002000 	.word	0x40002000
 80053dc:	40014000 	.word	0x40014000
 80053e0:	40014400 	.word	0x40014400
 80053e4:	40014800 	.word	0x40014800
 80053e8:	fffffcff 	.word	0xfffffcff

080053ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053f4:	46c0      	nop			; (mov r8, r8)
 80053f6:	46bd      	mov	sp, r7
 80053f8:	b002      	add	sp, #8
 80053fa:	bd80      	pop	{r7, pc}

080053fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005404:	46c0      	nop			; (mov r8, r8)
 8005406:	46bd      	mov	sp, r7
 8005408:	b002      	add	sp, #8
 800540a:	bd80      	pop	{r7, pc}

0800540c <__errno>:
 800540c:	4b01      	ldr	r3, [pc, #4]	; (8005414 <__errno+0x8>)
 800540e:	6818      	ldr	r0, [r3, #0]
 8005410:	4770      	bx	lr
 8005412:	46c0      	nop			; (mov r8, r8)
 8005414:	200004ec 	.word	0x200004ec

08005418 <__libc_init_array>:
 8005418:	b570      	push	{r4, r5, r6, lr}
 800541a:	2600      	movs	r6, #0
 800541c:	4d0c      	ldr	r5, [pc, #48]	; (8005450 <__libc_init_array+0x38>)
 800541e:	4c0d      	ldr	r4, [pc, #52]	; (8005454 <__libc_init_array+0x3c>)
 8005420:	1b64      	subs	r4, r4, r5
 8005422:	10a4      	asrs	r4, r4, #2
 8005424:	42a6      	cmp	r6, r4
 8005426:	d109      	bne.n	800543c <__libc_init_array+0x24>
 8005428:	2600      	movs	r6, #0
 800542a:	f000 fc8b 	bl	8005d44 <_init>
 800542e:	4d0a      	ldr	r5, [pc, #40]	; (8005458 <__libc_init_array+0x40>)
 8005430:	4c0a      	ldr	r4, [pc, #40]	; (800545c <__libc_init_array+0x44>)
 8005432:	1b64      	subs	r4, r4, r5
 8005434:	10a4      	asrs	r4, r4, #2
 8005436:	42a6      	cmp	r6, r4
 8005438:	d105      	bne.n	8005446 <__libc_init_array+0x2e>
 800543a:	bd70      	pop	{r4, r5, r6, pc}
 800543c:	00b3      	lsls	r3, r6, #2
 800543e:	58eb      	ldr	r3, [r5, r3]
 8005440:	4798      	blx	r3
 8005442:	3601      	adds	r6, #1
 8005444:	e7ee      	b.n	8005424 <__libc_init_array+0xc>
 8005446:	00b3      	lsls	r3, r6, #2
 8005448:	58eb      	ldr	r3, [r5, r3]
 800544a:	4798      	blx	r3
 800544c:	3601      	adds	r6, #1
 800544e:	e7f2      	b.n	8005436 <__libc_init_array+0x1e>
 8005450:	08006518 	.word	0x08006518
 8005454:	08006518 	.word	0x08006518
 8005458:	08006518 	.word	0x08006518
 800545c:	0800651c 	.word	0x0800651c

08005460 <memcpy>:
 8005460:	2300      	movs	r3, #0
 8005462:	b510      	push	{r4, lr}
 8005464:	429a      	cmp	r2, r3
 8005466:	d100      	bne.n	800546a <memcpy+0xa>
 8005468:	bd10      	pop	{r4, pc}
 800546a:	5ccc      	ldrb	r4, [r1, r3]
 800546c:	54c4      	strb	r4, [r0, r3]
 800546e:	3301      	adds	r3, #1
 8005470:	e7f8      	b.n	8005464 <memcpy+0x4>

08005472 <memset>:
 8005472:	0003      	movs	r3, r0
 8005474:	1882      	adds	r2, r0, r2
 8005476:	4293      	cmp	r3, r2
 8005478:	d100      	bne.n	800547c <memset+0xa>
 800547a:	4770      	bx	lr
 800547c:	7019      	strb	r1, [r3, #0]
 800547e:	3301      	adds	r3, #1
 8005480:	e7f9      	b.n	8005476 <memset+0x4>
	...

08005484 <siprintf>:
 8005484:	b40e      	push	{r1, r2, r3}
 8005486:	b500      	push	{lr}
 8005488:	490b      	ldr	r1, [pc, #44]	; (80054b8 <siprintf+0x34>)
 800548a:	b09c      	sub	sp, #112	; 0x70
 800548c:	ab1d      	add	r3, sp, #116	; 0x74
 800548e:	9002      	str	r0, [sp, #8]
 8005490:	9006      	str	r0, [sp, #24]
 8005492:	9107      	str	r1, [sp, #28]
 8005494:	9104      	str	r1, [sp, #16]
 8005496:	4809      	ldr	r0, [pc, #36]	; (80054bc <siprintf+0x38>)
 8005498:	4909      	ldr	r1, [pc, #36]	; (80054c0 <siprintf+0x3c>)
 800549a:	cb04      	ldmia	r3!, {r2}
 800549c:	9105      	str	r1, [sp, #20]
 800549e:	6800      	ldr	r0, [r0, #0]
 80054a0:	a902      	add	r1, sp, #8
 80054a2:	9301      	str	r3, [sp, #4]
 80054a4:	f000 f870 	bl	8005588 <_svfiprintf_r>
 80054a8:	2300      	movs	r3, #0
 80054aa:	9a02      	ldr	r2, [sp, #8]
 80054ac:	7013      	strb	r3, [r2, #0]
 80054ae:	b01c      	add	sp, #112	; 0x70
 80054b0:	bc08      	pop	{r3}
 80054b2:	b003      	add	sp, #12
 80054b4:	4718      	bx	r3
 80054b6:	46c0      	nop			; (mov r8, r8)
 80054b8:	7fffffff 	.word	0x7fffffff
 80054bc:	200004ec 	.word	0x200004ec
 80054c0:	ffff0208 	.word	0xffff0208

080054c4 <__ssputs_r>:
 80054c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054c6:	688e      	ldr	r6, [r1, #8]
 80054c8:	b085      	sub	sp, #20
 80054ca:	0007      	movs	r7, r0
 80054cc:	000c      	movs	r4, r1
 80054ce:	9203      	str	r2, [sp, #12]
 80054d0:	9301      	str	r3, [sp, #4]
 80054d2:	429e      	cmp	r6, r3
 80054d4:	d83c      	bhi.n	8005550 <__ssputs_r+0x8c>
 80054d6:	2390      	movs	r3, #144	; 0x90
 80054d8:	898a      	ldrh	r2, [r1, #12]
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	421a      	tst	r2, r3
 80054de:	d034      	beq.n	800554a <__ssputs_r+0x86>
 80054e0:	6909      	ldr	r1, [r1, #16]
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	6960      	ldr	r0, [r4, #20]
 80054e6:	1a5b      	subs	r3, r3, r1
 80054e8:	9302      	str	r3, [sp, #8]
 80054ea:	2303      	movs	r3, #3
 80054ec:	4343      	muls	r3, r0
 80054ee:	0fdd      	lsrs	r5, r3, #31
 80054f0:	18ed      	adds	r5, r5, r3
 80054f2:	9b01      	ldr	r3, [sp, #4]
 80054f4:	9802      	ldr	r0, [sp, #8]
 80054f6:	3301      	adds	r3, #1
 80054f8:	181b      	adds	r3, r3, r0
 80054fa:	106d      	asrs	r5, r5, #1
 80054fc:	42ab      	cmp	r3, r5
 80054fe:	d900      	bls.n	8005502 <__ssputs_r+0x3e>
 8005500:	001d      	movs	r5, r3
 8005502:	0553      	lsls	r3, r2, #21
 8005504:	d532      	bpl.n	800556c <__ssputs_r+0xa8>
 8005506:	0029      	movs	r1, r5
 8005508:	0038      	movs	r0, r7
 800550a:	f000 fb49 	bl	8005ba0 <_malloc_r>
 800550e:	1e06      	subs	r6, r0, #0
 8005510:	d109      	bne.n	8005526 <__ssputs_r+0x62>
 8005512:	230c      	movs	r3, #12
 8005514:	603b      	str	r3, [r7, #0]
 8005516:	2340      	movs	r3, #64	; 0x40
 8005518:	2001      	movs	r0, #1
 800551a:	89a2      	ldrh	r2, [r4, #12]
 800551c:	4240      	negs	r0, r0
 800551e:	4313      	orrs	r3, r2
 8005520:	81a3      	strh	r3, [r4, #12]
 8005522:	b005      	add	sp, #20
 8005524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005526:	9a02      	ldr	r2, [sp, #8]
 8005528:	6921      	ldr	r1, [r4, #16]
 800552a:	f7ff ff99 	bl	8005460 <memcpy>
 800552e:	89a3      	ldrh	r3, [r4, #12]
 8005530:	4a14      	ldr	r2, [pc, #80]	; (8005584 <__ssputs_r+0xc0>)
 8005532:	401a      	ands	r2, r3
 8005534:	2380      	movs	r3, #128	; 0x80
 8005536:	4313      	orrs	r3, r2
 8005538:	81a3      	strh	r3, [r4, #12]
 800553a:	9b02      	ldr	r3, [sp, #8]
 800553c:	6126      	str	r6, [r4, #16]
 800553e:	18f6      	adds	r6, r6, r3
 8005540:	6026      	str	r6, [r4, #0]
 8005542:	6165      	str	r5, [r4, #20]
 8005544:	9e01      	ldr	r6, [sp, #4]
 8005546:	1aed      	subs	r5, r5, r3
 8005548:	60a5      	str	r5, [r4, #8]
 800554a:	9b01      	ldr	r3, [sp, #4]
 800554c:	429e      	cmp	r6, r3
 800554e:	d900      	bls.n	8005552 <__ssputs_r+0x8e>
 8005550:	9e01      	ldr	r6, [sp, #4]
 8005552:	0032      	movs	r2, r6
 8005554:	9903      	ldr	r1, [sp, #12]
 8005556:	6820      	ldr	r0, [r4, #0]
 8005558:	f000 faa3 	bl	8005aa2 <memmove>
 800555c:	68a3      	ldr	r3, [r4, #8]
 800555e:	2000      	movs	r0, #0
 8005560:	1b9b      	subs	r3, r3, r6
 8005562:	60a3      	str	r3, [r4, #8]
 8005564:	6823      	ldr	r3, [r4, #0]
 8005566:	199e      	adds	r6, r3, r6
 8005568:	6026      	str	r6, [r4, #0]
 800556a:	e7da      	b.n	8005522 <__ssputs_r+0x5e>
 800556c:	002a      	movs	r2, r5
 800556e:	0038      	movs	r0, r7
 8005570:	f000 fb8c 	bl	8005c8c <_realloc_r>
 8005574:	1e06      	subs	r6, r0, #0
 8005576:	d1e0      	bne.n	800553a <__ssputs_r+0x76>
 8005578:	0038      	movs	r0, r7
 800557a:	6921      	ldr	r1, [r4, #16]
 800557c:	f000 faa4 	bl	8005ac8 <_free_r>
 8005580:	e7c7      	b.n	8005512 <__ssputs_r+0x4e>
 8005582:	46c0      	nop			; (mov r8, r8)
 8005584:	fffffb7f 	.word	0xfffffb7f

08005588 <_svfiprintf_r>:
 8005588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800558a:	b0a1      	sub	sp, #132	; 0x84
 800558c:	9003      	str	r0, [sp, #12]
 800558e:	001d      	movs	r5, r3
 8005590:	898b      	ldrh	r3, [r1, #12]
 8005592:	000f      	movs	r7, r1
 8005594:	0016      	movs	r6, r2
 8005596:	061b      	lsls	r3, r3, #24
 8005598:	d511      	bpl.n	80055be <_svfiprintf_r+0x36>
 800559a:	690b      	ldr	r3, [r1, #16]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10e      	bne.n	80055be <_svfiprintf_r+0x36>
 80055a0:	2140      	movs	r1, #64	; 0x40
 80055a2:	f000 fafd 	bl	8005ba0 <_malloc_r>
 80055a6:	6038      	str	r0, [r7, #0]
 80055a8:	6138      	str	r0, [r7, #16]
 80055aa:	2800      	cmp	r0, #0
 80055ac:	d105      	bne.n	80055ba <_svfiprintf_r+0x32>
 80055ae:	230c      	movs	r3, #12
 80055b0:	9a03      	ldr	r2, [sp, #12]
 80055b2:	3801      	subs	r0, #1
 80055b4:	6013      	str	r3, [r2, #0]
 80055b6:	b021      	add	sp, #132	; 0x84
 80055b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055ba:	2340      	movs	r3, #64	; 0x40
 80055bc:	617b      	str	r3, [r7, #20]
 80055be:	2300      	movs	r3, #0
 80055c0:	ac08      	add	r4, sp, #32
 80055c2:	6163      	str	r3, [r4, #20]
 80055c4:	3320      	adds	r3, #32
 80055c6:	7663      	strb	r3, [r4, #25]
 80055c8:	3310      	adds	r3, #16
 80055ca:	76a3      	strb	r3, [r4, #26]
 80055cc:	9507      	str	r5, [sp, #28]
 80055ce:	0035      	movs	r5, r6
 80055d0:	782b      	ldrb	r3, [r5, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <_svfiprintf_r+0x52>
 80055d6:	2b25      	cmp	r3, #37	; 0x25
 80055d8:	d147      	bne.n	800566a <_svfiprintf_r+0xe2>
 80055da:	1bab      	subs	r3, r5, r6
 80055dc:	9305      	str	r3, [sp, #20]
 80055de:	42b5      	cmp	r5, r6
 80055e0:	d00c      	beq.n	80055fc <_svfiprintf_r+0x74>
 80055e2:	0032      	movs	r2, r6
 80055e4:	0039      	movs	r1, r7
 80055e6:	9803      	ldr	r0, [sp, #12]
 80055e8:	f7ff ff6c 	bl	80054c4 <__ssputs_r>
 80055ec:	1c43      	adds	r3, r0, #1
 80055ee:	d100      	bne.n	80055f2 <_svfiprintf_r+0x6a>
 80055f0:	e0ae      	b.n	8005750 <_svfiprintf_r+0x1c8>
 80055f2:	6962      	ldr	r2, [r4, #20]
 80055f4:	9b05      	ldr	r3, [sp, #20]
 80055f6:	4694      	mov	ip, r2
 80055f8:	4463      	add	r3, ip
 80055fa:	6163      	str	r3, [r4, #20]
 80055fc:	782b      	ldrb	r3, [r5, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d100      	bne.n	8005604 <_svfiprintf_r+0x7c>
 8005602:	e0a5      	b.n	8005750 <_svfiprintf_r+0x1c8>
 8005604:	2201      	movs	r2, #1
 8005606:	2300      	movs	r3, #0
 8005608:	4252      	negs	r2, r2
 800560a:	6062      	str	r2, [r4, #4]
 800560c:	a904      	add	r1, sp, #16
 800560e:	3254      	adds	r2, #84	; 0x54
 8005610:	1852      	adds	r2, r2, r1
 8005612:	1c6e      	adds	r6, r5, #1
 8005614:	6023      	str	r3, [r4, #0]
 8005616:	60e3      	str	r3, [r4, #12]
 8005618:	60a3      	str	r3, [r4, #8]
 800561a:	7013      	strb	r3, [r2, #0]
 800561c:	65a3      	str	r3, [r4, #88]	; 0x58
 800561e:	2205      	movs	r2, #5
 8005620:	7831      	ldrb	r1, [r6, #0]
 8005622:	4854      	ldr	r0, [pc, #336]	; (8005774 <_svfiprintf_r+0x1ec>)
 8005624:	f000 fa32 	bl	8005a8c <memchr>
 8005628:	1c75      	adds	r5, r6, #1
 800562a:	2800      	cmp	r0, #0
 800562c:	d11f      	bne.n	800566e <_svfiprintf_r+0xe6>
 800562e:	6822      	ldr	r2, [r4, #0]
 8005630:	06d3      	lsls	r3, r2, #27
 8005632:	d504      	bpl.n	800563e <_svfiprintf_r+0xb6>
 8005634:	2353      	movs	r3, #83	; 0x53
 8005636:	a904      	add	r1, sp, #16
 8005638:	185b      	adds	r3, r3, r1
 800563a:	2120      	movs	r1, #32
 800563c:	7019      	strb	r1, [r3, #0]
 800563e:	0713      	lsls	r3, r2, #28
 8005640:	d504      	bpl.n	800564c <_svfiprintf_r+0xc4>
 8005642:	2353      	movs	r3, #83	; 0x53
 8005644:	a904      	add	r1, sp, #16
 8005646:	185b      	adds	r3, r3, r1
 8005648:	212b      	movs	r1, #43	; 0x2b
 800564a:	7019      	strb	r1, [r3, #0]
 800564c:	7833      	ldrb	r3, [r6, #0]
 800564e:	2b2a      	cmp	r3, #42	; 0x2a
 8005650:	d016      	beq.n	8005680 <_svfiprintf_r+0xf8>
 8005652:	0035      	movs	r5, r6
 8005654:	2100      	movs	r1, #0
 8005656:	200a      	movs	r0, #10
 8005658:	68e3      	ldr	r3, [r4, #12]
 800565a:	782a      	ldrb	r2, [r5, #0]
 800565c:	1c6e      	adds	r6, r5, #1
 800565e:	3a30      	subs	r2, #48	; 0x30
 8005660:	2a09      	cmp	r2, #9
 8005662:	d94e      	bls.n	8005702 <_svfiprintf_r+0x17a>
 8005664:	2900      	cmp	r1, #0
 8005666:	d111      	bne.n	800568c <_svfiprintf_r+0x104>
 8005668:	e017      	b.n	800569a <_svfiprintf_r+0x112>
 800566a:	3501      	adds	r5, #1
 800566c:	e7b0      	b.n	80055d0 <_svfiprintf_r+0x48>
 800566e:	4b41      	ldr	r3, [pc, #260]	; (8005774 <_svfiprintf_r+0x1ec>)
 8005670:	6822      	ldr	r2, [r4, #0]
 8005672:	1ac0      	subs	r0, r0, r3
 8005674:	2301      	movs	r3, #1
 8005676:	4083      	lsls	r3, r0
 8005678:	4313      	orrs	r3, r2
 800567a:	002e      	movs	r6, r5
 800567c:	6023      	str	r3, [r4, #0]
 800567e:	e7ce      	b.n	800561e <_svfiprintf_r+0x96>
 8005680:	9b07      	ldr	r3, [sp, #28]
 8005682:	1d19      	adds	r1, r3, #4
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	9107      	str	r1, [sp, #28]
 8005688:	2b00      	cmp	r3, #0
 800568a:	db01      	blt.n	8005690 <_svfiprintf_r+0x108>
 800568c:	930b      	str	r3, [sp, #44]	; 0x2c
 800568e:	e004      	b.n	800569a <_svfiprintf_r+0x112>
 8005690:	425b      	negs	r3, r3
 8005692:	60e3      	str	r3, [r4, #12]
 8005694:	2302      	movs	r3, #2
 8005696:	4313      	orrs	r3, r2
 8005698:	6023      	str	r3, [r4, #0]
 800569a:	782b      	ldrb	r3, [r5, #0]
 800569c:	2b2e      	cmp	r3, #46	; 0x2e
 800569e:	d10a      	bne.n	80056b6 <_svfiprintf_r+0x12e>
 80056a0:	786b      	ldrb	r3, [r5, #1]
 80056a2:	2b2a      	cmp	r3, #42	; 0x2a
 80056a4:	d135      	bne.n	8005712 <_svfiprintf_r+0x18a>
 80056a6:	9b07      	ldr	r3, [sp, #28]
 80056a8:	3502      	adds	r5, #2
 80056aa:	1d1a      	adds	r2, r3, #4
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	9207      	str	r2, [sp, #28]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	db2b      	blt.n	800570c <_svfiprintf_r+0x184>
 80056b4:	9309      	str	r3, [sp, #36]	; 0x24
 80056b6:	4e30      	ldr	r6, [pc, #192]	; (8005778 <_svfiprintf_r+0x1f0>)
 80056b8:	2203      	movs	r2, #3
 80056ba:	0030      	movs	r0, r6
 80056bc:	7829      	ldrb	r1, [r5, #0]
 80056be:	f000 f9e5 	bl	8005a8c <memchr>
 80056c2:	2800      	cmp	r0, #0
 80056c4:	d006      	beq.n	80056d4 <_svfiprintf_r+0x14c>
 80056c6:	2340      	movs	r3, #64	; 0x40
 80056c8:	1b80      	subs	r0, r0, r6
 80056ca:	4083      	lsls	r3, r0
 80056cc:	6822      	ldr	r2, [r4, #0]
 80056ce:	3501      	adds	r5, #1
 80056d0:	4313      	orrs	r3, r2
 80056d2:	6023      	str	r3, [r4, #0]
 80056d4:	7829      	ldrb	r1, [r5, #0]
 80056d6:	2206      	movs	r2, #6
 80056d8:	4828      	ldr	r0, [pc, #160]	; (800577c <_svfiprintf_r+0x1f4>)
 80056da:	1c6e      	adds	r6, r5, #1
 80056dc:	7621      	strb	r1, [r4, #24]
 80056de:	f000 f9d5 	bl	8005a8c <memchr>
 80056e2:	2800      	cmp	r0, #0
 80056e4:	d03c      	beq.n	8005760 <_svfiprintf_r+0x1d8>
 80056e6:	4b26      	ldr	r3, [pc, #152]	; (8005780 <_svfiprintf_r+0x1f8>)
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d125      	bne.n	8005738 <_svfiprintf_r+0x1b0>
 80056ec:	2207      	movs	r2, #7
 80056ee:	9b07      	ldr	r3, [sp, #28]
 80056f0:	3307      	adds	r3, #7
 80056f2:	4393      	bics	r3, r2
 80056f4:	3308      	adds	r3, #8
 80056f6:	9307      	str	r3, [sp, #28]
 80056f8:	6963      	ldr	r3, [r4, #20]
 80056fa:	9a04      	ldr	r2, [sp, #16]
 80056fc:	189b      	adds	r3, r3, r2
 80056fe:	6163      	str	r3, [r4, #20]
 8005700:	e765      	b.n	80055ce <_svfiprintf_r+0x46>
 8005702:	4343      	muls	r3, r0
 8005704:	0035      	movs	r5, r6
 8005706:	2101      	movs	r1, #1
 8005708:	189b      	adds	r3, r3, r2
 800570a:	e7a6      	b.n	800565a <_svfiprintf_r+0xd2>
 800570c:	2301      	movs	r3, #1
 800570e:	425b      	negs	r3, r3
 8005710:	e7d0      	b.n	80056b4 <_svfiprintf_r+0x12c>
 8005712:	2300      	movs	r3, #0
 8005714:	200a      	movs	r0, #10
 8005716:	001a      	movs	r2, r3
 8005718:	3501      	adds	r5, #1
 800571a:	6063      	str	r3, [r4, #4]
 800571c:	7829      	ldrb	r1, [r5, #0]
 800571e:	1c6e      	adds	r6, r5, #1
 8005720:	3930      	subs	r1, #48	; 0x30
 8005722:	2909      	cmp	r1, #9
 8005724:	d903      	bls.n	800572e <_svfiprintf_r+0x1a6>
 8005726:	2b00      	cmp	r3, #0
 8005728:	d0c5      	beq.n	80056b6 <_svfiprintf_r+0x12e>
 800572a:	9209      	str	r2, [sp, #36]	; 0x24
 800572c:	e7c3      	b.n	80056b6 <_svfiprintf_r+0x12e>
 800572e:	4342      	muls	r2, r0
 8005730:	0035      	movs	r5, r6
 8005732:	2301      	movs	r3, #1
 8005734:	1852      	adds	r2, r2, r1
 8005736:	e7f1      	b.n	800571c <_svfiprintf_r+0x194>
 8005738:	ab07      	add	r3, sp, #28
 800573a:	9300      	str	r3, [sp, #0]
 800573c:	003a      	movs	r2, r7
 800573e:	0021      	movs	r1, r4
 8005740:	4b10      	ldr	r3, [pc, #64]	; (8005784 <_svfiprintf_r+0x1fc>)
 8005742:	9803      	ldr	r0, [sp, #12]
 8005744:	e000      	b.n	8005748 <_svfiprintf_r+0x1c0>
 8005746:	bf00      	nop
 8005748:	9004      	str	r0, [sp, #16]
 800574a:	9b04      	ldr	r3, [sp, #16]
 800574c:	3301      	adds	r3, #1
 800574e:	d1d3      	bne.n	80056f8 <_svfiprintf_r+0x170>
 8005750:	89bb      	ldrh	r3, [r7, #12]
 8005752:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005754:	065b      	lsls	r3, r3, #25
 8005756:	d400      	bmi.n	800575a <_svfiprintf_r+0x1d2>
 8005758:	e72d      	b.n	80055b6 <_svfiprintf_r+0x2e>
 800575a:	2001      	movs	r0, #1
 800575c:	4240      	negs	r0, r0
 800575e:	e72a      	b.n	80055b6 <_svfiprintf_r+0x2e>
 8005760:	ab07      	add	r3, sp, #28
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	003a      	movs	r2, r7
 8005766:	0021      	movs	r1, r4
 8005768:	4b06      	ldr	r3, [pc, #24]	; (8005784 <_svfiprintf_r+0x1fc>)
 800576a:	9803      	ldr	r0, [sp, #12]
 800576c:	f000 f87c 	bl	8005868 <_printf_i>
 8005770:	e7ea      	b.n	8005748 <_svfiprintf_r+0x1c0>
 8005772:	46c0      	nop			; (mov r8, r8)
 8005774:	080064e4 	.word	0x080064e4
 8005778:	080064ea 	.word	0x080064ea
 800577c:	080064ee 	.word	0x080064ee
 8005780:	00000000 	.word	0x00000000
 8005784:	080054c5 	.word	0x080054c5

08005788 <_printf_common>:
 8005788:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800578a:	0015      	movs	r5, r2
 800578c:	9301      	str	r3, [sp, #4]
 800578e:	688a      	ldr	r2, [r1, #8]
 8005790:	690b      	ldr	r3, [r1, #16]
 8005792:	000c      	movs	r4, r1
 8005794:	9000      	str	r0, [sp, #0]
 8005796:	4293      	cmp	r3, r2
 8005798:	da00      	bge.n	800579c <_printf_common+0x14>
 800579a:	0013      	movs	r3, r2
 800579c:	0022      	movs	r2, r4
 800579e:	602b      	str	r3, [r5, #0]
 80057a0:	3243      	adds	r2, #67	; 0x43
 80057a2:	7812      	ldrb	r2, [r2, #0]
 80057a4:	2a00      	cmp	r2, #0
 80057a6:	d001      	beq.n	80057ac <_printf_common+0x24>
 80057a8:	3301      	adds	r3, #1
 80057aa:	602b      	str	r3, [r5, #0]
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	069b      	lsls	r3, r3, #26
 80057b0:	d502      	bpl.n	80057b8 <_printf_common+0x30>
 80057b2:	682b      	ldr	r3, [r5, #0]
 80057b4:	3302      	adds	r3, #2
 80057b6:	602b      	str	r3, [r5, #0]
 80057b8:	6822      	ldr	r2, [r4, #0]
 80057ba:	2306      	movs	r3, #6
 80057bc:	0017      	movs	r7, r2
 80057be:	401f      	ands	r7, r3
 80057c0:	421a      	tst	r2, r3
 80057c2:	d027      	beq.n	8005814 <_printf_common+0x8c>
 80057c4:	0023      	movs	r3, r4
 80057c6:	3343      	adds	r3, #67	; 0x43
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	1e5a      	subs	r2, r3, #1
 80057cc:	4193      	sbcs	r3, r2
 80057ce:	6822      	ldr	r2, [r4, #0]
 80057d0:	0692      	lsls	r2, r2, #26
 80057d2:	d430      	bmi.n	8005836 <_printf_common+0xae>
 80057d4:	0022      	movs	r2, r4
 80057d6:	9901      	ldr	r1, [sp, #4]
 80057d8:	9800      	ldr	r0, [sp, #0]
 80057da:	9e08      	ldr	r6, [sp, #32]
 80057dc:	3243      	adds	r2, #67	; 0x43
 80057de:	47b0      	blx	r6
 80057e0:	1c43      	adds	r3, r0, #1
 80057e2:	d025      	beq.n	8005830 <_printf_common+0xa8>
 80057e4:	2306      	movs	r3, #6
 80057e6:	6820      	ldr	r0, [r4, #0]
 80057e8:	682a      	ldr	r2, [r5, #0]
 80057ea:	68e1      	ldr	r1, [r4, #12]
 80057ec:	2500      	movs	r5, #0
 80057ee:	4003      	ands	r3, r0
 80057f0:	2b04      	cmp	r3, #4
 80057f2:	d103      	bne.n	80057fc <_printf_common+0x74>
 80057f4:	1a8d      	subs	r5, r1, r2
 80057f6:	43eb      	mvns	r3, r5
 80057f8:	17db      	asrs	r3, r3, #31
 80057fa:	401d      	ands	r5, r3
 80057fc:	68a3      	ldr	r3, [r4, #8]
 80057fe:	6922      	ldr	r2, [r4, #16]
 8005800:	4293      	cmp	r3, r2
 8005802:	dd01      	ble.n	8005808 <_printf_common+0x80>
 8005804:	1a9b      	subs	r3, r3, r2
 8005806:	18ed      	adds	r5, r5, r3
 8005808:	2700      	movs	r7, #0
 800580a:	42bd      	cmp	r5, r7
 800580c:	d120      	bne.n	8005850 <_printf_common+0xc8>
 800580e:	2000      	movs	r0, #0
 8005810:	e010      	b.n	8005834 <_printf_common+0xac>
 8005812:	3701      	adds	r7, #1
 8005814:	68e3      	ldr	r3, [r4, #12]
 8005816:	682a      	ldr	r2, [r5, #0]
 8005818:	1a9b      	subs	r3, r3, r2
 800581a:	42bb      	cmp	r3, r7
 800581c:	ddd2      	ble.n	80057c4 <_printf_common+0x3c>
 800581e:	0022      	movs	r2, r4
 8005820:	2301      	movs	r3, #1
 8005822:	9901      	ldr	r1, [sp, #4]
 8005824:	9800      	ldr	r0, [sp, #0]
 8005826:	9e08      	ldr	r6, [sp, #32]
 8005828:	3219      	adds	r2, #25
 800582a:	47b0      	blx	r6
 800582c:	1c43      	adds	r3, r0, #1
 800582e:	d1f0      	bne.n	8005812 <_printf_common+0x8a>
 8005830:	2001      	movs	r0, #1
 8005832:	4240      	negs	r0, r0
 8005834:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005836:	2030      	movs	r0, #48	; 0x30
 8005838:	18e1      	adds	r1, r4, r3
 800583a:	3143      	adds	r1, #67	; 0x43
 800583c:	7008      	strb	r0, [r1, #0]
 800583e:	0021      	movs	r1, r4
 8005840:	1c5a      	adds	r2, r3, #1
 8005842:	3145      	adds	r1, #69	; 0x45
 8005844:	7809      	ldrb	r1, [r1, #0]
 8005846:	18a2      	adds	r2, r4, r2
 8005848:	3243      	adds	r2, #67	; 0x43
 800584a:	3302      	adds	r3, #2
 800584c:	7011      	strb	r1, [r2, #0]
 800584e:	e7c1      	b.n	80057d4 <_printf_common+0x4c>
 8005850:	0022      	movs	r2, r4
 8005852:	2301      	movs	r3, #1
 8005854:	9901      	ldr	r1, [sp, #4]
 8005856:	9800      	ldr	r0, [sp, #0]
 8005858:	9e08      	ldr	r6, [sp, #32]
 800585a:	321a      	adds	r2, #26
 800585c:	47b0      	blx	r6
 800585e:	1c43      	adds	r3, r0, #1
 8005860:	d0e6      	beq.n	8005830 <_printf_common+0xa8>
 8005862:	3701      	adds	r7, #1
 8005864:	e7d1      	b.n	800580a <_printf_common+0x82>
	...

08005868 <_printf_i>:
 8005868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800586a:	b08b      	sub	sp, #44	; 0x2c
 800586c:	9206      	str	r2, [sp, #24]
 800586e:	000a      	movs	r2, r1
 8005870:	3243      	adds	r2, #67	; 0x43
 8005872:	9307      	str	r3, [sp, #28]
 8005874:	9005      	str	r0, [sp, #20]
 8005876:	9204      	str	r2, [sp, #16]
 8005878:	7e0a      	ldrb	r2, [r1, #24]
 800587a:	000c      	movs	r4, r1
 800587c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800587e:	2a78      	cmp	r2, #120	; 0x78
 8005880:	d807      	bhi.n	8005892 <_printf_i+0x2a>
 8005882:	2a62      	cmp	r2, #98	; 0x62
 8005884:	d809      	bhi.n	800589a <_printf_i+0x32>
 8005886:	2a00      	cmp	r2, #0
 8005888:	d100      	bne.n	800588c <_printf_i+0x24>
 800588a:	e0c1      	b.n	8005a10 <_printf_i+0x1a8>
 800588c:	2a58      	cmp	r2, #88	; 0x58
 800588e:	d100      	bne.n	8005892 <_printf_i+0x2a>
 8005890:	e08c      	b.n	80059ac <_printf_i+0x144>
 8005892:	0026      	movs	r6, r4
 8005894:	3642      	adds	r6, #66	; 0x42
 8005896:	7032      	strb	r2, [r6, #0]
 8005898:	e022      	b.n	80058e0 <_printf_i+0x78>
 800589a:	0010      	movs	r0, r2
 800589c:	3863      	subs	r0, #99	; 0x63
 800589e:	2815      	cmp	r0, #21
 80058a0:	d8f7      	bhi.n	8005892 <_printf_i+0x2a>
 80058a2:	f7fa fc2f 	bl	8000104 <__gnu_thumb1_case_shi>
 80058a6:	0016      	.short	0x0016
 80058a8:	fff6001f 	.word	0xfff6001f
 80058ac:	fff6fff6 	.word	0xfff6fff6
 80058b0:	001ffff6 	.word	0x001ffff6
 80058b4:	fff6fff6 	.word	0xfff6fff6
 80058b8:	fff6fff6 	.word	0xfff6fff6
 80058bc:	003600a8 	.word	0x003600a8
 80058c0:	fff6009a 	.word	0xfff6009a
 80058c4:	00b9fff6 	.word	0x00b9fff6
 80058c8:	0036fff6 	.word	0x0036fff6
 80058cc:	fff6fff6 	.word	0xfff6fff6
 80058d0:	009e      	.short	0x009e
 80058d2:	0026      	movs	r6, r4
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	3642      	adds	r6, #66	; 0x42
 80058d8:	1d11      	adds	r1, r2, #4
 80058da:	6019      	str	r1, [r3, #0]
 80058dc:	6813      	ldr	r3, [r2, #0]
 80058de:	7033      	strb	r3, [r6, #0]
 80058e0:	2301      	movs	r3, #1
 80058e2:	e0a7      	b.n	8005a34 <_printf_i+0x1cc>
 80058e4:	6808      	ldr	r0, [r1, #0]
 80058e6:	6819      	ldr	r1, [r3, #0]
 80058e8:	1d0a      	adds	r2, r1, #4
 80058ea:	0605      	lsls	r5, r0, #24
 80058ec:	d50b      	bpl.n	8005906 <_printf_i+0x9e>
 80058ee:	680d      	ldr	r5, [r1, #0]
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	2d00      	cmp	r5, #0
 80058f4:	da03      	bge.n	80058fe <_printf_i+0x96>
 80058f6:	232d      	movs	r3, #45	; 0x2d
 80058f8:	9a04      	ldr	r2, [sp, #16]
 80058fa:	426d      	negs	r5, r5
 80058fc:	7013      	strb	r3, [r2, #0]
 80058fe:	4b61      	ldr	r3, [pc, #388]	; (8005a84 <_printf_i+0x21c>)
 8005900:	270a      	movs	r7, #10
 8005902:	9303      	str	r3, [sp, #12]
 8005904:	e01b      	b.n	800593e <_printf_i+0xd6>
 8005906:	680d      	ldr	r5, [r1, #0]
 8005908:	601a      	str	r2, [r3, #0]
 800590a:	0641      	lsls	r1, r0, #25
 800590c:	d5f1      	bpl.n	80058f2 <_printf_i+0x8a>
 800590e:	b22d      	sxth	r5, r5
 8005910:	e7ef      	b.n	80058f2 <_printf_i+0x8a>
 8005912:	680d      	ldr	r5, [r1, #0]
 8005914:	6819      	ldr	r1, [r3, #0]
 8005916:	1d08      	adds	r0, r1, #4
 8005918:	6018      	str	r0, [r3, #0]
 800591a:	062e      	lsls	r6, r5, #24
 800591c:	d501      	bpl.n	8005922 <_printf_i+0xba>
 800591e:	680d      	ldr	r5, [r1, #0]
 8005920:	e003      	b.n	800592a <_printf_i+0xc2>
 8005922:	066d      	lsls	r5, r5, #25
 8005924:	d5fb      	bpl.n	800591e <_printf_i+0xb6>
 8005926:	680d      	ldr	r5, [r1, #0]
 8005928:	b2ad      	uxth	r5, r5
 800592a:	4b56      	ldr	r3, [pc, #344]	; (8005a84 <_printf_i+0x21c>)
 800592c:	2708      	movs	r7, #8
 800592e:	9303      	str	r3, [sp, #12]
 8005930:	2a6f      	cmp	r2, #111	; 0x6f
 8005932:	d000      	beq.n	8005936 <_printf_i+0xce>
 8005934:	3702      	adds	r7, #2
 8005936:	0023      	movs	r3, r4
 8005938:	2200      	movs	r2, #0
 800593a:	3343      	adds	r3, #67	; 0x43
 800593c:	701a      	strb	r2, [r3, #0]
 800593e:	6863      	ldr	r3, [r4, #4]
 8005940:	60a3      	str	r3, [r4, #8]
 8005942:	2b00      	cmp	r3, #0
 8005944:	db03      	blt.n	800594e <_printf_i+0xe6>
 8005946:	2204      	movs	r2, #4
 8005948:	6821      	ldr	r1, [r4, #0]
 800594a:	4391      	bics	r1, r2
 800594c:	6021      	str	r1, [r4, #0]
 800594e:	2d00      	cmp	r5, #0
 8005950:	d102      	bne.n	8005958 <_printf_i+0xf0>
 8005952:	9e04      	ldr	r6, [sp, #16]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00c      	beq.n	8005972 <_printf_i+0x10a>
 8005958:	9e04      	ldr	r6, [sp, #16]
 800595a:	0028      	movs	r0, r5
 800595c:	0039      	movs	r1, r7
 800595e:	f7fa fc61 	bl	8000224 <__aeabi_uidivmod>
 8005962:	9b03      	ldr	r3, [sp, #12]
 8005964:	3e01      	subs	r6, #1
 8005966:	5c5b      	ldrb	r3, [r3, r1]
 8005968:	7033      	strb	r3, [r6, #0]
 800596a:	002b      	movs	r3, r5
 800596c:	0005      	movs	r5, r0
 800596e:	429f      	cmp	r7, r3
 8005970:	d9f3      	bls.n	800595a <_printf_i+0xf2>
 8005972:	2f08      	cmp	r7, #8
 8005974:	d109      	bne.n	800598a <_printf_i+0x122>
 8005976:	6823      	ldr	r3, [r4, #0]
 8005978:	07db      	lsls	r3, r3, #31
 800597a:	d506      	bpl.n	800598a <_printf_i+0x122>
 800597c:	6863      	ldr	r3, [r4, #4]
 800597e:	6922      	ldr	r2, [r4, #16]
 8005980:	4293      	cmp	r3, r2
 8005982:	dc02      	bgt.n	800598a <_printf_i+0x122>
 8005984:	2330      	movs	r3, #48	; 0x30
 8005986:	3e01      	subs	r6, #1
 8005988:	7033      	strb	r3, [r6, #0]
 800598a:	9b04      	ldr	r3, [sp, #16]
 800598c:	1b9b      	subs	r3, r3, r6
 800598e:	6123      	str	r3, [r4, #16]
 8005990:	9b07      	ldr	r3, [sp, #28]
 8005992:	0021      	movs	r1, r4
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	9805      	ldr	r0, [sp, #20]
 8005998:	9b06      	ldr	r3, [sp, #24]
 800599a:	aa09      	add	r2, sp, #36	; 0x24
 800599c:	f7ff fef4 	bl	8005788 <_printf_common>
 80059a0:	1c43      	adds	r3, r0, #1
 80059a2:	d14c      	bne.n	8005a3e <_printf_i+0x1d6>
 80059a4:	2001      	movs	r0, #1
 80059a6:	4240      	negs	r0, r0
 80059a8:	b00b      	add	sp, #44	; 0x2c
 80059aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059ac:	3145      	adds	r1, #69	; 0x45
 80059ae:	700a      	strb	r2, [r1, #0]
 80059b0:	4a34      	ldr	r2, [pc, #208]	; (8005a84 <_printf_i+0x21c>)
 80059b2:	9203      	str	r2, [sp, #12]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	6821      	ldr	r1, [r4, #0]
 80059b8:	ca20      	ldmia	r2!, {r5}
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	0608      	lsls	r0, r1, #24
 80059be:	d516      	bpl.n	80059ee <_printf_i+0x186>
 80059c0:	07cb      	lsls	r3, r1, #31
 80059c2:	d502      	bpl.n	80059ca <_printf_i+0x162>
 80059c4:	2320      	movs	r3, #32
 80059c6:	4319      	orrs	r1, r3
 80059c8:	6021      	str	r1, [r4, #0]
 80059ca:	2710      	movs	r7, #16
 80059cc:	2d00      	cmp	r5, #0
 80059ce:	d1b2      	bne.n	8005936 <_printf_i+0xce>
 80059d0:	2320      	movs	r3, #32
 80059d2:	6822      	ldr	r2, [r4, #0]
 80059d4:	439a      	bics	r2, r3
 80059d6:	6022      	str	r2, [r4, #0]
 80059d8:	e7ad      	b.n	8005936 <_printf_i+0xce>
 80059da:	2220      	movs	r2, #32
 80059dc:	6809      	ldr	r1, [r1, #0]
 80059de:	430a      	orrs	r2, r1
 80059e0:	6022      	str	r2, [r4, #0]
 80059e2:	0022      	movs	r2, r4
 80059e4:	2178      	movs	r1, #120	; 0x78
 80059e6:	3245      	adds	r2, #69	; 0x45
 80059e8:	7011      	strb	r1, [r2, #0]
 80059ea:	4a27      	ldr	r2, [pc, #156]	; (8005a88 <_printf_i+0x220>)
 80059ec:	e7e1      	b.n	80059b2 <_printf_i+0x14a>
 80059ee:	0648      	lsls	r0, r1, #25
 80059f0:	d5e6      	bpl.n	80059c0 <_printf_i+0x158>
 80059f2:	b2ad      	uxth	r5, r5
 80059f4:	e7e4      	b.n	80059c0 <_printf_i+0x158>
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	680d      	ldr	r5, [r1, #0]
 80059fa:	1d10      	adds	r0, r2, #4
 80059fc:	6949      	ldr	r1, [r1, #20]
 80059fe:	6018      	str	r0, [r3, #0]
 8005a00:	6813      	ldr	r3, [r2, #0]
 8005a02:	062e      	lsls	r6, r5, #24
 8005a04:	d501      	bpl.n	8005a0a <_printf_i+0x1a2>
 8005a06:	6019      	str	r1, [r3, #0]
 8005a08:	e002      	b.n	8005a10 <_printf_i+0x1a8>
 8005a0a:	066d      	lsls	r5, r5, #25
 8005a0c:	d5fb      	bpl.n	8005a06 <_printf_i+0x19e>
 8005a0e:	8019      	strh	r1, [r3, #0]
 8005a10:	2300      	movs	r3, #0
 8005a12:	9e04      	ldr	r6, [sp, #16]
 8005a14:	6123      	str	r3, [r4, #16]
 8005a16:	e7bb      	b.n	8005990 <_printf_i+0x128>
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	1d11      	adds	r1, r2, #4
 8005a1c:	6019      	str	r1, [r3, #0]
 8005a1e:	6816      	ldr	r6, [r2, #0]
 8005a20:	2100      	movs	r1, #0
 8005a22:	0030      	movs	r0, r6
 8005a24:	6862      	ldr	r2, [r4, #4]
 8005a26:	f000 f831 	bl	8005a8c <memchr>
 8005a2a:	2800      	cmp	r0, #0
 8005a2c:	d001      	beq.n	8005a32 <_printf_i+0x1ca>
 8005a2e:	1b80      	subs	r0, r0, r6
 8005a30:	6060      	str	r0, [r4, #4]
 8005a32:	6863      	ldr	r3, [r4, #4]
 8005a34:	6123      	str	r3, [r4, #16]
 8005a36:	2300      	movs	r3, #0
 8005a38:	9a04      	ldr	r2, [sp, #16]
 8005a3a:	7013      	strb	r3, [r2, #0]
 8005a3c:	e7a8      	b.n	8005990 <_printf_i+0x128>
 8005a3e:	6923      	ldr	r3, [r4, #16]
 8005a40:	0032      	movs	r2, r6
 8005a42:	9906      	ldr	r1, [sp, #24]
 8005a44:	9805      	ldr	r0, [sp, #20]
 8005a46:	9d07      	ldr	r5, [sp, #28]
 8005a48:	47a8      	blx	r5
 8005a4a:	1c43      	adds	r3, r0, #1
 8005a4c:	d0aa      	beq.n	80059a4 <_printf_i+0x13c>
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	079b      	lsls	r3, r3, #30
 8005a52:	d415      	bmi.n	8005a80 <_printf_i+0x218>
 8005a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a56:	68e0      	ldr	r0, [r4, #12]
 8005a58:	4298      	cmp	r0, r3
 8005a5a:	daa5      	bge.n	80059a8 <_printf_i+0x140>
 8005a5c:	0018      	movs	r0, r3
 8005a5e:	e7a3      	b.n	80059a8 <_printf_i+0x140>
 8005a60:	0022      	movs	r2, r4
 8005a62:	2301      	movs	r3, #1
 8005a64:	9906      	ldr	r1, [sp, #24]
 8005a66:	9805      	ldr	r0, [sp, #20]
 8005a68:	9e07      	ldr	r6, [sp, #28]
 8005a6a:	3219      	adds	r2, #25
 8005a6c:	47b0      	blx	r6
 8005a6e:	1c43      	adds	r3, r0, #1
 8005a70:	d098      	beq.n	80059a4 <_printf_i+0x13c>
 8005a72:	3501      	adds	r5, #1
 8005a74:	68e3      	ldr	r3, [r4, #12]
 8005a76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a78:	1a9b      	subs	r3, r3, r2
 8005a7a:	42ab      	cmp	r3, r5
 8005a7c:	dcf0      	bgt.n	8005a60 <_printf_i+0x1f8>
 8005a7e:	e7e9      	b.n	8005a54 <_printf_i+0x1ec>
 8005a80:	2500      	movs	r5, #0
 8005a82:	e7f7      	b.n	8005a74 <_printf_i+0x20c>
 8005a84:	080064f5 	.word	0x080064f5
 8005a88:	08006506 	.word	0x08006506

08005a8c <memchr>:
 8005a8c:	b2c9      	uxtb	r1, r1
 8005a8e:	1882      	adds	r2, r0, r2
 8005a90:	4290      	cmp	r0, r2
 8005a92:	d101      	bne.n	8005a98 <memchr+0xc>
 8005a94:	2000      	movs	r0, #0
 8005a96:	4770      	bx	lr
 8005a98:	7803      	ldrb	r3, [r0, #0]
 8005a9a:	428b      	cmp	r3, r1
 8005a9c:	d0fb      	beq.n	8005a96 <memchr+0xa>
 8005a9e:	3001      	adds	r0, #1
 8005aa0:	e7f6      	b.n	8005a90 <memchr+0x4>

08005aa2 <memmove>:
 8005aa2:	b510      	push	{r4, lr}
 8005aa4:	4288      	cmp	r0, r1
 8005aa6:	d902      	bls.n	8005aae <memmove+0xc>
 8005aa8:	188b      	adds	r3, r1, r2
 8005aaa:	4298      	cmp	r0, r3
 8005aac:	d303      	bcc.n	8005ab6 <memmove+0x14>
 8005aae:	2300      	movs	r3, #0
 8005ab0:	e007      	b.n	8005ac2 <memmove+0x20>
 8005ab2:	5c8b      	ldrb	r3, [r1, r2]
 8005ab4:	5483      	strb	r3, [r0, r2]
 8005ab6:	3a01      	subs	r2, #1
 8005ab8:	d2fb      	bcs.n	8005ab2 <memmove+0x10>
 8005aba:	bd10      	pop	{r4, pc}
 8005abc:	5ccc      	ldrb	r4, [r1, r3]
 8005abe:	54c4      	strb	r4, [r0, r3]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d1fa      	bne.n	8005abc <memmove+0x1a>
 8005ac6:	e7f8      	b.n	8005aba <memmove+0x18>

08005ac8 <_free_r>:
 8005ac8:	b570      	push	{r4, r5, r6, lr}
 8005aca:	0005      	movs	r5, r0
 8005acc:	2900      	cmp	r1, #0
 8005ace:	d010      	beq.n	8005af2 <_free_r+0x2a>
 8005ad0:	1f0c      	subs	r4, r1, #4
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	da00      	bge.n	8005ada <_free_r+0x12>
 8005ad8:	18e4      	adds	r4, r4, r3
 8005ada:	0028      	movs	r0, r5
 8005adc:	f000 f918 	bl	8005d10 <__malloc_lock>
 8005ae0:	4a1d      	ldr	r2, [pc, #116]	; (8005b58 <_free_r+0x90>)
 8005ae2:	6813      	ldr	r3, [r2, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d105      	bne.n	8005af4 <_free_r+0x2c>
 8005ae8:	6063      	str	r3, [r4, #4]
 8005aea:	6014      	str	r4, [r2, #0]
 8005aec:	0028      	movs	r0, r5
 8005aee:	f000 f917 	bl	8005d20 <__malloc_unlock>
 8005af2:	bd70      	pop	{r4, r5, r6, pc}
 8005af4:	42a3      	cmp	r3, r4
 8005af6:	d908      	bls.n	8005b0a <_free_r+0x42>
 8005af8:	6821      	ldr	r1, [r4, #0]
 8005afa:	1860      	adds	r0, r4, r1
 8005afc:	4283      	cmp	r3, r0
 8005afe:	d1f3      	bne.n	8005ae8 <_free_r+0x20>
 8005b00:	6818      	ldr	r0, [r3, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	1841      	adds	r1, r0, r1
 8005b06:	6021      	str	r1, [r4, #0]
 8005b08:	e7ee      	b.n	8005ae8 <_free_r+0x20>
 8005b0a:	001a      	movs	r2, r3
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <_free_r+0x4e>
 8005b12:	42a3      	cmp	r3, r4
 8005b14:	d9f9      	bls.n	8005b0a <_free_r+0x42>
 8005b16:	6811      	ldr	r1, [r2, #0]
 8005b18:	1850      	adds	r0, r2, r1
 8005b1a:	42a0      	cmp	r0, r4
 8005b1c:	d10b      	bne.n	8005b36 <_free_r+0x6e>
 8005b1e:	6820      	ldr	r0, [r4, #0]
 8005b20:	1809      	adds	r1, r1, r0
 8005b22:	1850      	adds	r0, r2, r1
 8005b24:	6011      	str	r1, [r2, #0]
 8005b26:	4283      	cmp	r3, r0
 8005b28:	d1e0      	bne.n	8005aec <_free_r+0x24>
 8005b2a:	6818      	ldr	r0, [r3, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	1841      	adds	r1, r0, r1
 8005b30:	6011      	str	r1, [r2, #0]
 8005b32:	6053      	str	r3, [r2, #4]
 8005b34:	e7da      	b.n	8005aec <_free_r+0x24>
 8005b36:	42a0      	cmp	r0, r4
 8005b38:	d902      	bls.n	8005b40 <_free_r+0x78>
 8005b3a:	230c      	movs	r3, #12
 8005b3c:	602b      	str	r3, [r5, #0]
 8005b3e:	e7d5      	b.n	8005aec <_free_r+0x24>
 8005b40:	6821      	ldr	r1, [r4, #0]
 8005b42:	1860      	adds	r0, r4, r1
 8005b44:	4283      	cmp	r3, r0
 8005b46:	d103      	bne.n	8005b50 <_free_r+0x88>
 8005b48:	6818      	ldr	r0, [r3, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	1841      	adds	r1, r0, r1
 8005b4e:	6021      	str	r1, [r4, #0]
 8005b50:	6063      	str	r3, [r4, #4]
 8005b52:	6054      	str	r4, [r2, #4]
 8005b54:	e7ca      	b.n	8005aec <_free_r+0x24>
 8005b56:	46c0      	nop			; (mov r8, r8)
 8005b58:	20000b3c 	.word	0x20000b3c

08005b5c <sbrk_aligned>:
 8005b5c:	b570      	push	{r4, r5, r6, lr}
 8005b5e:	4e0f      	ldr	r6, [pc, #60]	; (8005b9c <sbrk_aligned+0x40>)
 8005b60:	000d      	movs	r5, r1
 8005b62:	6831      	ldr	r1, [r6, #0]
 8005b64:	0004      	movs	r4, r0
 8005b66:	2900      	cmp	r1, #0
 8005b68:	d102      	bne.n	8005b70 <sbrk_aligned+0x14>
 8005b6a:	f000 f8bf 	bl	8005cec <_sbrk_r>
 8005b6e:	6030      	str	r0, [r6, #0]
 8005b70:	0029      	movs	r1, r5
 8005b72:	0020      	movs	r0, r4
 8005b74:	f000 f8ba 	bl	8005cec <_sbrk_r>
 8005b78:	1c43      	adds	r3, r0, #1
 8005b7a:	d00a      	beq.n	8005b92 <sbrk_aligned+0x36>
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	1cc5      	adds	r5, r0, #3
 8005b80:	439d      	bics	r5, r3
 8005b82:	42a8      	cmp	r0, r5
 8005b84:	d007      	beq.n	8005b96 <sbrk_aligned+0x3a>
 8005b86:	1a29      	subs	r1, r5, r0
 8005b88:	0020      	movs	r0, r4
 8005b8a:	f000 f8af 	bl	8005cec <_sbrk_r>
 8005b8e:	1c43      	adds	r3, r0, #1
 8005b90:	d101      	bne.n	8005b96 <sbrk_aligned+0x3a>
 8005b92:	2501      	movs	r5, #1
 8005b94:	426d      	negs	r5, r5
 8005b96:	0028      	movs	r0, r5
 8005b98:	bd70      	pop	{r4, r5, r6, pc}
 8005b9a:	46c0      	nop			; (mov r8, r8)
 8005b9c:	20000b40 	.word	0x20000b40

08005ba0 <_malloc_r>:
 8005ba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ba2:	2203      	movs	r2, #3
 8005ba4:	1ccb      	adds	r3, r1, #3
 8005ba6:	4393      	bics	r3, r2
 8005ba8:	3308      	adds	r3, #8
 8005baa:	0006      	movs	r6, r0
 8005bac:	001f      	movs	r7, r3
 8005bae:	2b0c      	cmp	r3, #12
 8005bb0:	d232      	bcs.n	8005c18 <_malloc_r+0x78>
 8005bb2:	270c      	movs	r7, #12
 8005bb4:	42b9      	cmp	r1, r7
 8005bb6:	d831      	bhi.n	8005c1c <_malloc_r+0x7c>
 8005bb8:	0030      	movs	r0, r6
 8005bba:	f000 f8a9 	bl	8005d10 <__malloc_lock>
 8005bbe:	4d32      	ldr	r5, [pc, #200]	; (8005c88 <_malloc_r+0xe8>)
 8005bc0:	682b      	ldr	r3, [r5, #0]
 8005bc2:	001c      	movs	r4, r3
 8005bc4:	2c00      	cmp	r4, #0
 8005bc6:	d12e      	bne.n	8005c26 <_malloc_r+0x86>
 8005bc8:	0039      	movs	r1, r7
 8005bca:	0030      	movs	r0, r6
 8005bcc:	f7ff ffc6 	bl	8005b5c <sbrk_aligned>
 8005bd0:	0004      	movs	r4, r0
 8005bd2:	1c43      	adds	r3, r0, #1
 8005bd4:	d11e      	bne.n	8005c14 <_malloc_r+0x74>
 8005bd6:	682c      	ldr	r4, [r5, #0]
 8005bd8:	0025      	movs	r5, r4
 8005bda:	2d00      	cmp	r5, #0
 8005bdc:	d14a      	bne.n	8005c74 <_malloc_r+0xd4>
 8005bde:	6823      	ldr	r3, [r4, #0]
 8005be0:	0029      	movs	r1, r5
 8005be2:	18e3      	adds	r3, r4, r3
 8005be4:	0030      	movs	r0, r6
 8005be6:	9301      	str	r3, [sp, #4]
 8005be8:	f000 f880 	bl	8005cec <_sbrk_r>
 8005bec:	9b01      	ldr	r3, [sp, #4]
 8005bee:	4283      	cmp	r3, r0
 8005bf0:	d143      	bne.n	8005c7a <_malloc_r+0xda>
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	3703      	adds	r7, #3
 8005bf6:	1aff      	subs	r7, r7, r3
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	439f      	bics	r7, r3
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	2f0c      	cmp	r7, #12
 8005c00:	d200      	bcs.n	8005c04 <_malloc_r+0x64>
 8005c02:	270c      	movs	r7, #12
 8005c04:	0039      	movs	r1, r7
 8005c06:	0030      	movs	r0, r6
 8005c08:	f7ff ffa8 	bl	8005b5c <sbrk_aligned>
 8005c0c:	1c43      	adds	r3, r0, #1
 8005c0e:	d034      	beq.n	8005c7a <_malloc_r+0xda>
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	19df      	adds	r7, r3, r7
 8005c14:	6027      	str	r7, [r4, #0]
 8005c16:	e013      	b.n	8005c40 <_malloc_r+0xa0>
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	dacb      	bge.n	8005bb4 <_malloc_r+0x14>
 8005c1c:	230c      	movs	r3, #12
 8005c1e:	2500      	movs	r5, #0
 8005c20:	6033      	str	r3, [r6, #0]
 8005c22:	0028      	movs	r0, r5
 8005c24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c26:	6822      	ldr	r2, [r4, #0]
 8005c28:	1bd1      	subs	r1, r2, r7
 8005c2a:	d420      	bmi.n	8005c6e <_malloc_r+0xce>
 8005c2c:	290b      	cmp	r1, #11
 8005c2e:	d917      	bls.n	8005c60 <_malloc_r+0xc0>
 8005c30:	19e2      	adds	r2, r4, r7
 8005c32:	6027      	str	r7, [r4, #0]
 8005c34:	42a3      	cmp	r3, r4
 8005c36:	d111      	bne.n	8005c5c <_malloc_r+0xbc>
 8005c38:	602a      	str	r2, [r5, #0]
 8005c3a:	6863      	ldr	r3, [r4, #4]
 8005c3c:	6011      	str	r1, [r2, #0]
 8005c3e:	6053      	str	r3, [r2, #4]
 8005c40:	0030      	movs	r0, r6
 8005c42:	0025      	movs	r5, r4
 8005c44:	f000 f86c 	bl	8005d20 <__malloc_unlock>
 8005c48:	2207      	movs	r2, #7
 8005c4a:	350b      	adds	r5, #11
 8005c4c:	1d23      	adds	r3, r4, #4
 8005c4e:	4395      	bics	r5, r2
 8005c50:	1aea      	subs	r2, r5, r3
 8005c52:	429d      	cmp	r5, r3
 8005c54:	d0e5      	beq.n	8005c22 <_malloc_r+0x82>
 8005c56:	1b5b      	subs	r3, r3, r5
 8005c58:	50a3      	str	r3, [r4, r2]
 8005c5a:	e7e2      	b.n	8005c22 <_malloc_r+0x82>
 8005c5c:	605a      	str	r2, [r3, #4]
 8005c5e:	e7ec      	b.n	8005c3a <_malloc_r+0x9a>
 8005c60:	6862      	ldr	r2, [r4, #4]
 8005c62:	42a3      	cmp	r3, r4
 8005c64:	d101      	bne.n	8005c6a <_malloc_r+0xca>
 8005c66:	602a      	str	r2, [r5, #0]
 8005c68:	e7ea      	b.n	8005c40 <_malloc_r+0xa0>
 8005c6a:	605a      	str	r2, [r3, #4]
 8005c6c:	e7e8      	b.n	8005c40 <_malloc_r+0xa0>
 8005c6e:	0023      	movs	r3, r4
 8005c70:	6864      	ldr	r4, [r4, #4]
 8005c72:	e7a7      	b.n	8005bc4 <_malloc_r+0x24>
 8005c74:	002c      	movs	r4, r5
 8005c76:	686d      	ldr	r5, [r5, #4]
 8005c78:	e7af      	b.n	8005bda <_malloc_r+0x3a>
 8005c7a:	230c      	movs	r3, #12
 8005c7c:	0030      	movs	r0, r6
 8005c7e:	6033      	str	r3, [r6, #0]
 8005c80:	f000 f84e 	bl	8005d20 <__malloc_unlock>
 8005c84:	e7cd      	b.n	8005c22 <_malloc_r+0x82>
 8005c86:	46c0      	nop			; (mov r8, r8)
 8005c88:	20000b3c 	.word	0x20000b3c

08005c8c <_realloc_r>:
 8005c8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c8e:	0007      	movs	r7, r0
 8005c90:	000e      	movs	r6, r1
 8005c92:	0014      	movs	r4, r2
 8005c94:	2900      	cmp	r1, #0
 8005c96:	d105      	bne.n	8005ca4 <_realloc_r+0x18>
 8005c98:	0011      	movs	r1, r2
 8005c9a:	f7ff ff81 	bl	8005ba0 <_malloc_r>
 8005c9e:	0005      	movs	r5, r0
 8005ca0:	0028      	movs	r0, r5
 8005ca2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ca4:	2a00      	cmp	r2, #0
 8005ca6:	d103      	bne.n	8005cb0 <_realloc_r+0x24>
 8005ca8:	f7ff ff0e 	bl	8005ac8 <_free_r>
 8005cac:	0025      	movs	r5, r4
 8005cae:	e7f7      	b.n	8005ca0 <_realloc_r+0x14>
 8005cb0:	f000 f83e 	bl	8005d30 <_malloc_usable_size_r>
 8005cb4:	9001      	str	r0, [sp, #4]
 8005cb6:	4284      	cmp	r4, r0
 8005cb8:	d803      	bhi.n	8005cc2 <_realloc_r+0x36>
 8005cba:	0035      	movs	r5, r6
 8005cbc:	0843      	lsrs	r3, r0, #1
 8005cbe:	42a3      	cmp	r3, r4
 8005cc0:	d3ee      	bcc.n	8005ca0 <_realloc_r+0x14>
 8005cc2:	0021      	movs	r1, r4
 8005cc4:	0038      	movs	r0, r7
 8005cc6:	f7ff ff6b 	bl	8005ba0 <_malloc_r>
 8005cca:	1e05      	subs	r5, r0, #0
 8005ccc:	d0e8      	beq.n	8005ca0 <_realloc_r+0x14>
 8005cce:	9b01      	ldr	r3, [sp, #4]
 8005cd0:	0022      	movs	r2, r4
 8005cd2:	429c      	cmp	r4, r3
 8005cd4:	d900      	bls.n	8005cd8 <_realloc_r+0x4c>
 8005cd6:	001a      	movs	r2, r3
 8005cd8:	0031      	movs	r1, r6
 8005cda:	0028      	movs	r0, r5
 8005cdc:	f7ff fbc0 	bl	8005460 <memcpy>
 8005ce0:	0031      	movs	r1, r6
 8005ce2:	0038      	movs	r0, r7
 8005ce4:	f7ff fef0 	bl	8005ac8 <_free_r>
 8005ce8:	e7da      	b.n	8005ca0 <_realloc_r+0x14>
	...

08005cec <_sbrk_r>:
 8005cec:	2300      	movs	r3, #0
 8005cee:	b570      	push	{r4, r5, r6, lr}
 8005cf0:	4d06      	ldr	r5, [pc, #24]	; (8005d0c <_sbrk_r+0x20>)
 8005cf2:	0004      	movs	r4, r0
 8005cf4:	0008      	movs	r0, r1
 8005cf6:	602b      	str	r3, [r5, #0]
 8005cf8:	f7fc fc76 	bl	80025e8 <_sbrk>
 8005cfc:	1c43      	adds	r3, r0, #1
 8005cfe:	d103      	bne.n	8005d08 <_sbrk_r+0x1c>
 8005d00:	682b      	ldr	r3, [r5, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d000      	beq.n	8005d08 <_sbrk_r+0x1c>
 8005d06:	6023      	str	r3, [r4, #0]
 8005d08:	bd70      	pop	{r4, r5, r6, pc}
 8005d0a:	46c0      	nop			; (mov r8, r8)
 8005d0c:	20000b44 	.word	0x20000b44

08005d10 <__malloc_lock>:
 8005d10:	b510      	push	{r4, lr}
 8005d12:	4802      	ldr	r0, [pc, #8]	; (8005d1c <__malloc_lock+0xc>)
 8005d14:	f000 f814 	bl	8005d40 <__retarget_lock_acquire_recursive>
 8005d18:	bd10      	pop	{r4, pc}
 8005d1a:	46c0      	nop			; (mov r8, r8)
 8005d1c:	20000b48 	.word	0x20000b48

08005d20 <__malloc_unlock>:
 8005d20:	b510      	push	{r4, lr}
 8005d22:	4802      	ldr	r0, [pc, #8]	; (8005d2c <__malloc_unlock+0xc>)
 8005d24:	f000 f80d 	bl	8005d42 <__retarget_lock_release_recursive>
 8005d28:	bd10      	pop	{r4, pc}
 8005d2a:	46c0      	nop			; (mov r8, r8)
 8005d2c:	20000b48 	.word	0x20000b48

08005d30 <_malloc_usable_size_r>:
 8005d30:	1f0b      	subs	r3, r1, #4
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	1f18      	subs	r0, r3, #4
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	da01      	bge.n	8005d3e <_malloc_usable_size_r+0xe>
 8005d3a:	580b      	ldr	r3, [r1, r0]
 8005d3c:	18c0      	adds	r0, r0, r3
 8005d3e:	4770      	bx	lr

08005d40 <__retarget_lock_acquire_recursive>:
 8005d40:	4770      	bx	lr

08005d42 <__retarget_lock_release_recursive>:
 8005d42:	4770      	bx	lr

08005d44 <_init>:
 8005d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d46:	46c0      	nop			; (mov r8, r8)
 8005d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d4a:	bc08      	pop	{r3}
 8005d4c:	469e      	mov	lr, r3
 8005d4e:	4770      	bx	lr

08005d50 <_fini>:
 8005d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d52:	46c0      	nop			; (mov r8, r8)
 8005d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d56:	bc08      	pop	{r3}
 8005d58:	469e      	mov	lr, r3
 8005d5a:	4770      	bx	lr
